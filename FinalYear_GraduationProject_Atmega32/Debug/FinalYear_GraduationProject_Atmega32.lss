
FinalYear_GraduationProject_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000368c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001bc  00800060  0000368c  00003720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080021c  0080021c  000038dc  2**0
                  ALLOC
  3 .stab         000030f0  00000000  00000000  000038dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001831  00000000  00000000  000069cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000839d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000858f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a99a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000bd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d3ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dd1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <main>
      8a:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 57       	subi	r30, 0x76	; 118
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
#include<avr/io.h>
#include"std_types.h"
#include "ADC.h"

void ADC_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e36:	a6 e2       	ldi	r26, 0x26	; 38
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e6 e2       	ldi	r30, 0x26	; 38
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	87 68       	ori	r24, 0x87	; 135
     e42:	8c 93       	st	X, r24
//	ADMUX|=(1<<REFS0)|(1<<REFS1)|(1<<ADLAR);
	ADMUX|=(1<<REFS0)|(1<<ADLAR);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 66       	ori	r24, 0x60	; 96
     e50:	8c 93       	st	X, r24
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <ADC_GetResult>:

int ADC_GetResult(u8 channel)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <ADC_GetResult+0x6>
     e5e:	0f 92       	push	r0
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	8b 83       	std	Y+3, r24	; 0x03
	int value;
	ADMUX &= 0b01111000;
     e66:	a7 e2       	ldi	r26, 0x27	; 39
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e7 e2       	ldi	r30, 0x27	; 39
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 77       	andi	r24, 0x78	; 120
     e72:	8c 93       	st	X, r24
	ADMUX |= (channel & (0b00000111) );
     e74:	a7 e2       	ldi	r26, 0x27	; 39
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e7 e2       	ldi	r30, 0x27	; 39
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	98 2f       	mov	r25, r24
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	87 70       	andi	r24, 0x07	; 7
     e84:	89 2b       	or	r24, r25
     e86:	8c 93       	st	X, r24
	ADCSRA|= (1<<ADSC);
     e88:	a6 e2       	ldi	r26, 0x26	; 38
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e6 e2       	ldi	r30, 0x26	; 38
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	8c 93       	st	X, r24
	while((ADCSRA & (1<<ADSC))!=0);
     e96:	e6 e2       	ldi	r30, 0x26	; 38
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	80 74       	andi	r24, 0x40	; 64
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	b9 f7       	brne	.-18     	; 0xe96 <ADC_GetResult+0x3e>
	value=ADCH;
     ea8:	e5 e2       	ldi	r30, 0x25	; 37
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|= 0x10;
     eb6:	a6 e2       	ldi	r26, 0x26	; 38
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e6 e2       	ldi	r30, 0x26	; 38
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 61       	ori	r24, 0x10	; 16
     ec2:	8c 93       	st	X, r24
	return value;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <Accelerometor_init>:
 
#include "ADXL345.h"
#include "lcd.h"

void Accelerometor_init(ADX345_PowerModes Mode , ADXL345_Address EFF_Address)
{	
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <Accelerometor_init+0x6>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	6a 83       	std	Y+2, r22	; 0x02
	I2C_ByteWrite(EFF_Address,POWER_CTRL,Mode);	
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	6d e2       	ldi	r22, 0x2D	; 45
     ee6:	49 81       	ldd	r20, Y+1	; 0x01
     ee8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0x0B);
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	61 e3       	ldi	r22, 0x31	; 49
     ef0:	4b e0       	ldi	r20, 0x0B	; 11
     ef2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSX,-1);
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	6e e1       	ldi	r22, 0x1E	; 30
     efa:	4f ef       	ldi	r20, 0xFF	; 255
     efc:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSY,0);
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	6f e1       	ldi	r22, 0x1F	; 31
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSZ,-1);
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	60 e2       	ldi	r22, 0x20	; 32
     f0e:	4f ef       	ldi	r20, 0xFF	; 255
     f10:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <I2C_ByteWrite>
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0);
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,8);
			
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <Accelerometor_ReadAxis>:



void Accelerometor_ReadAxis(ADXL345_Address EFF_Address ,volatile ADXL345_Data * Data_ptr)
{
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	cd 55       	subi	r28, 0x5D	; 93
     f2c:	d0 40       	sbci	r29, 0x00	; 0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	fe 01       	movw	r30, r28
     f3a:	e5 5a       	subi	r30, 0xA5	; 165
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 83       	st	Z, r24
     f40:	fe 01       	movw	r30, r28
     f42:	e4 5a       	subi	r30, 0xA4	; 164
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	71 83       	std	Z+1, r23	; 0x01
     f48:	60 83       	st	Z, r22
	uint16 X_Axis_Read;
	uint16 Y_Axis_Read;
	uint16 Z_Axis_Read;
	
	
	X_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX0);
     f4a:	fe 01       	movw	r30, r28
     f4c:	e5 5a       	subi	r30, 0xA5	; 165
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 81       	ld	r24, Z
     f52:	62 e3       	ldi	r22, 0x32	; 50
     f54:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <I2C_ByteRead>
     f58:	fe 01       	movw	r30, r28
     f5a:	e7 5a       	subi	r30, 0xA7	; 167
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	80 83       	st	Z, r24
     f66:	fe 01       	movw	r30, r28
     f68:	ef 5a       	subi	r30, 0xAF	; 175
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 e8       	ldi	r26, 0x80	; 128
     f72:	bf e3       	ldi	r27, 0x3F	; 63
     f74:	80 83       	st	Z, r24
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	a2 83       	std	Z+2, r26	; 0x02
     f7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	8e 01       	movw	r16, r28
     f7e:	03 5b       	subi	r16, 0xB3	; 179
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	fe 01       	movw	r30, r28
     f84:	ef 5a       	subi	r30, 0xAF	; 175
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	60 81       	ld	r22, Z
     f8a:	71 81       	ldd	r23, Z+1	; 0x01
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e8       	ldi	r19, 0x80	; 128
     f94:	4b e3       	ldi	r20, 0x3B	; 59
     f96:	55 e4       	ldi	r21, 0x45	; 69
     f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	f8 01       	movw	r30, r16
     fa2:	80 83       	st	Z, r24
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	a2 83       	std	Z+2, r26	; 0x02
     fa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     faa:	fe 01       	movw	r30, r28
     fac:	e3 5b       	subi	r30, 0xB3	; 179
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	5f e3       	ldi	r21, 0x3F	; 63
     fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	44 f4       	brge	.+16     	; 0xfd8 <Accelerometor_ReadAxis+0xba>
		__ticks = 1;
     fc8:	fe 01       	movw	r30, r28
     fca:	e5 5b       	subi	r30, 0xB5	; 181
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
     fd6:	64 c0       	rjmp	.+200    	; 0x10a0 <Accelerometor_ReadAxis+0x182>
	else if (__tmp > 65535)
     fd8:	fe 01       	movw	r30, r28
     fda:	e3 5b       	subi	r30, 0xB3	; 179
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	0c f0       	brlt	.+2      	; 0xff8 <Accelerometor_ReadAxis+0xda>
     ff6:	43 c0       	rjmp	.+134    	; 0x107e <Accelerometor_ReadAxis+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff8:	fe 01       	movw	r30, r28
     ffa:	ef 5a       	subi	r30, 0xAF	; 175
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	60 81       	ld	r22, Z
    1000:	71 81       	ldd	r23, Z+1	; 0x01
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	93 81       	ldd	r25, Z+3	; 0x03
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e2       	ldi	r20, 0x20	; 32
    100c:	51 e4       	ldi	r21, 0x41	; 65
    100e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8e 01       	movw	r16, r28
    1018:	05 5b       	subi	r16, 0xB5	; 181
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	f8 01       	movw	r30, r16
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	80 83       	st	Z, r24
    102e:	1f c0       	rjmp	.+62     	; 0x106e <Accelerometor_ReadAxis+0x150>
    1030:	fe 01       	movw	r30, r28
    1032:	e7 5b       	subi	r30, 0xB7	; 183
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	8c e2       	ldi	r24, 0x2C	; 44
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    103e:	fe 01       	movw	r30, r28
    1040:	e7 5b       	subi	r30, 0xB7	; 183
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <Accelerometor_ReadAxis+0x12a>
    104c:	fe 01       	movw	r30, r28
    104e:	e7 5b       	subi	r30, 0xB7	; 183
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	91 83       	std	Z+1, r25	; 0x01
    1054:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1056:	de 01       	movw	r26, r28
    1058:	a5 5b       	subi	r26, 0xB5	; 181
    105a:	bf 4f       	sbci	r27, 0xFF	; 255
    105c:	fe 01       	movw	r30, r28
    105e:	e5 5b       	subi	r30, 0xB5	; 181
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	9c 93       	st	X, r25
    106c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106e:	fe 01       	movw	r30, r28
    1070:	e5 5b       	subi	r30, 0xB5	; 181
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	d1 f6       	brne	.-76     	; 0x1030 <Accelerometor_ReadAxis+0x112>
    107c:	27 c0       	rjmp	.+78     	; 0x10cc <Accelerometor_ReadAxis+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107e:	8e 01       	movw	r16, r28
    1080:	05 5b       	subi	r16, 0xB5	; 181
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	fe 01       	movw	r30, r28
    1086:	e3 5b       	subi	r30, 0xB3	; 179
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	f8 01       	movw	r30, r16
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
    10a0:	de 01       	movw	r26, r28
    10a2:	a9 5b       	subi	r26, 0xB9	; 185
    10a4:	bf 4f       	sbci	r27, 0xFF	; 255
    10a6:	fe 01       	movw	r30, r28
    10a8:	e5 5b       	subi	r30, 0xB5	; 181
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	8d 93       	st	X+, r24
    10b2:	9c 93       	st	X, r25
    10b4:	fe 01       	movw	r30, r28
    10b6:	e9 5b       	subi	r30, 0xB9	; 185
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <Accelerometor_ReadAxis+0x1a0>
    10c2:	fe 01       	movw	r30, r28
    10c4:	e9 5b       	subi	r30, 0xB9	; 185
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	80 83       	st	Z, r24
	_delay_ms(1);
	X_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX1))<<8;
    10cc:	fe 01       	movw	r30, r28
    10ce:	e5 5a       	subi	r30, 0xA5	; 165
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	80 81       	ld	r24, Z
    10d4:	63 e3       	ldi	r22, 0x33	; 51
    10d6:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <I2C_ByteRead>
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	98 2f       	mov	r25, r24
    10e0:	88 27       	eor	r24, r24
    10e2:	9c 01       	movw	r18, r24
    10e4:	de 01       	movw	r26, r28
    10e6:	a7 5a       	subi	r26, 0xA7	; 167
    10e8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ea:	fe 01       	movw	r30, r28
    10ec:	e7 5a       	subi	r30, 0xA7	; 167
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	82 2b       	or	r24, r18
    10f6:	93 2b       	or	r25, r19
    10f8:	8d 93       	st	X+, r24
    10fa:	9c 93       	st	X, r25
    10fc:	fe 01       	movw	r30, r28
    10fe:	ed 5b       	subi	r30, 0xBD	; 189
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a0 e8       	ldi	r26, 0x80	; 128
    1108:	bf e3       	ldi	r27, 0x3F	; 63
    110a:	80 83       	st	Z, r24
    110c:	91 83       	std	Z+1, r25	; 0x01
    110e:	a2 83       	std	Z+2, r26	; 0x02
    1110:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1112:	8e 01       	movw	r16, r28
    1114:	01 5c       	subi	r16, 0xC1	; 193
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	fe 01       	movw	r30, r28
    111a:	ed 5b       	subi	r30, 0xBD	; 189
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e8       	ldi	r19, 0x80	; 128
    112a:	4b e3       	ldi	r20, 0x3B	; 59
    112c:	55 e4       	ldi	r21, 0x45	; 69
    112e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	f8 01       	movw	r30, r16
    1138:	80 83       	st	Z, r24
    113a:	91 83       	std	Z+1, r25	; 0x01
    113c:	a2 83       	std	Z+2, r26	; 0x02
    113e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1140:	fe 01       	movw	r30, r28
    1142:	ff 96       	adiw	r30, 0x3f	; 63
    1144:	60 81       	ld	r22, Z
    1146:	71 81       	ldd	r23, Z+1	; 0x01
    1148:	82 81       	ldd	r24, Z+2	; 0x02
    114a:	93 81       	ldd	r25, Z+3	; 0x03
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1158:	88 23       	and	r24, r24
    115a:	2c f4       	brge	.+10     	; 0x1166 <Accelerometor_ReadAxis+0x248>
		__ticks = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9e af       	std	Y+62, r25	; 0x3e
    1162:	8d af       	std	Y+61, r24	; 0x3d
    1164:	46 c0       	rjmp	.+140    	; 0x11f2 <Accelerometor_ReadAxis+0x2d4>
	else if (__tmp > 65535)
    1166:	fe 01       	movw	r30, r28
    1168:	ff 96       	adiw	r30, 0x3f	; 63
    116a:	60 81       	ld	r22, Z
    116c:	71 81       	ldd	r23, Z+1	; 0x01
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	3f ef       	ldi	r19, 0xFF	; 255
    1176:	4f e7       	ldi	r20, 0x7F	; 127
    1178:	57 e4       	ldi	r21, 0x47	; 71
    117a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    117e:	18 16       	cp	r1, r24
    1180:	64 f5       	brge	.+88     	; 0x11da <Accelerometor_ReadAxis+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1182:	fe 01       	movw	r30, r28
    1184:	ed 5b       	subi	r30, 0xBD	; 189
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	60 81       	ld	r22, Z
    118a:	71 81       	ldd	r23, Z+1	; 0x01
    118c:	82 81       	ldd	r24, Z+2	; 0x02
    118e:	93 81       	ldd	r25, Z+3	; 0x03
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e2       	ldi	r20, 0x20	; 32
    1196:	51 e4       	ldi	r21, 0x41	; 65
    1198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	bc 01       	movw	r22, r24
    11a2:	cd 01       	movw	r24, r26
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9e af       	std	Y+62, r25	; 0x3e
    11ae:	8d af       	std	Y+61, r24	; 0x3d
    11b0:	0f c0       	rjmp	.+30     	; 0x11d0 <Accelerometor_ReadAxis+0x2b2>
    11b2:	8c e2       	ldi	r24, 0x2C	; 44
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	9c af       	std	Y+60, r25	; 0x3c
    11b8:	8b af       	std	Y+59, r24	; 0x3b
    11ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    11bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <Accelerometor_ReadAxis+0x2a0>
    11c2:	9c af       	std	Y+60, r25	; 0x3c
    11c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    11c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	9e af       	std	Y+62, r25	; 0x3e
    11ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    11d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	69 f7       	brne	.-38     	; 0x11b2 <Accelerometor_ReadAxis+0x294>
    11d8:	16 c0       	rjmp	.+44     	; 0x1206 <Accelerometor_ReadAxis+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11da:	fe 01       	movw	r30, r28
    11dc:	ff 96       	adiw	r30, 0x3f	; 63
    11de:	60 81       	ld	r22, Z
    11e0:	71 81       	ldd	r23, Z+1	; 0x01
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	9e af       	std	Y+62, r25	; 0x3e
    11f0:	8d af       	std	Y+61, r24	; 0x3d
    11f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    11f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    11f6:	9a af       	std	Y+58, r25	; 0x3a
    11f8:	89 af       	std	Y+57, r24	; 0x39
    11fa:	89 ad       	ldd	r24, Y+57	; 0x39
    11fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <Accelerometor_ReadAxis+0x2e0>
    1202:	9a af       	std	Y+58, r25	; 0x3a
    1204:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	Y_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY0);
    1206:	fe 01       	movw	r30, r28
    1208:	e5 5a       	subi	r30, 0xA5	; 165
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 81       	ld	r24, Z
    120e:	64 e3       	ldi	r22, 0x34	; 52
    1210:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <I2C_ByteRead>
    1214:	fe 01       	movw	r30, r28
    1216:	e9 5a       	subi	r30, 0xA9	; 169
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	a0 e8       	ldi	r26, 0x80	; 128
    1228:	bf e3       	ldi	r27, 0x3F	; 63
    122a:	8d ab       	std	Y+53, r24	; 0x35
    122c:	9e ab       	std	Y+54, r25	; 0x36
    122e:	af ab       	std	Y+55, r26	; 0x37
    1230:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1232:	6d a9       	ldd	r22, Y+53	; 0x35
    1234:	7e a9       	ldd	r23, Y+54	; 0x36
    1236:	8f a9       	ldd	r24, Y+55	; 0x37
    1238:	98 ad       	ldd	r25, Y+56	; 0x38
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e8       	ldi	r19, 0x80	; 128
    123e:	4b e3       	ldi	r20, 0x3B	; 59
    1240:	55 e4       	ldi	r21, 0x45	; 69
    1242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	89 ab       	std	Y+49, r24	; 0x31
    124c:	9a ab       	std	Y+50, r25	; 0x32
    124e:	ab ab       	std	Y+51, r26	; 0x33
    1250:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1252:	69 a9       	ldd	r22, Y+49	; 0x31
    1254:	7a a9       	ldd	r23, Y+50	; 0x32
    1256:	8b a9       	ldd	r24, Y+51	; 0x33
    1258:	9c a9       	ldd	r25, Y+52	; 0x34
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e8       	ldi	r20, 0x80	; 128
    1260:	5f e3       	ldi	r21, 0x3F	; 63
    1262:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1266:	88 23       	and	r24, r24
    1268:	2c f4       	brge	.+10     	; 0x1274 <Accelerometor_ReadAxis+0x356>
		__ticks = 1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	98 ab       	std	Y+48, r25	; 0x30
    1270:	8f a7       	std	Y+47, r24	; 0x2f
    1272:	3f c0       	rjmp	.+126    	; 0x12f2 <Accelerometor_ReadAxis+0x3d4>
	else if (__tmp > 65535)
    1274:	69 a9       	ldd	r22, Y+49	; 0x31
    1276:	7a a9       	ldd	r23, Y+50	; 0x32
    1278:	8b a9       	ldd	r24, Y+51	; 0x33
    127a:	9c a9       	ldd	r25, Y+52	; 0x34
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	3f ef       	ldi	r19, 0xFF	; 255
    1280:	4f e7       	ldi	r20, 0x7F	; 127
    1282:	57 e4       	ldi	r21, 0x47	; 71
    1284:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1288:	18 16       	cp	r1, r24
    128a:	4c f5       	brge	.+82     	; 0x12de <Accelerometor_ReadAxis+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128c:	6d a9       	ldd	r22, Y+53	; 0x35
    128e:	7e a9       	ldd	r23, Y+54	; 0x36
    1290:	8f a9       	ldd	r24, Y+55	; 0x37
    1292:	98 ad       	ldd	r25, Y+56	; 0x38
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	98 ab       	std	Y+48, r25	; 0x30
    12b2:	8f a7       	std	Y+47, r24	; 0x2f
    12b4:	0f c0       	rjmp	.+30     	; 0x12d4 <Accelerometor_ReadAxis+0x3b6>
    12b6:	8c e2       	ldi	r24, 0x2C	; 44
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	9e a7       	std	Y+46, r25	; 0x2e
    12bc:	8d a7       	std	Y+45, r24	; 0x2d
    12be:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <Accelerometor_ReadAxis+0x3a4>
    12c6:	9e a7       	std	Y+46, r25	; 0x2e
    12c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    12cc:	98 a9       	ldd	r25, Y+48	; 0x30
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	98 ab       	std	Y+48, r25	; 0x30
    12d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12d6:	98 a9       	ldd	r25, Y+48	; 0x30
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	69 f7       	brne	.-38     	; 0x12b6 <Accelerometor_ReadAxis+0x398>
    12dc:	14 c0       	rjmp	.+40     	; 0x1306 <Accelerometor_ReadAxis+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12de:	69 a9       	ldd	r22, Y+49	; 0x31
    12e0:	7a a9       	ldd	r23, Y+50	; 0x32
    12e2:	8b a9       	ldd	r24, Y+51	; 0x33
    12e4:	9c a9       	ldd	r25, Y+52	; 0x34
    12e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	98 ab       	std	Y+48, r25	; 0x30
    12f0:	8f a7       	std	Y+47, r24	; 0x2f
    12f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12f4:	98 a9       	ldd	r25, Y+48	; 0x30
    12f6:	9c a7       	std	Y+44, r25	; 0x2c
    12f8:	8b a7       	std	Y+43, r24	; 0x2b
    12fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    12fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <Accelerometor_ReadAxis+0x3e0>
    1302:	9c a7       	std	Y+44, r25	; 0x2c
    1304:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Y_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY1))<<8;
    1306:	fe 01       	movw	r30, r28
    1308:	e5 5a       	subi	r30, 0xA5	; 165
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 81       	ld	r24, Z
    130e:	65 e3       	ldi	r22, 0x35	; 53
    1310:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <I2C_ByteRead>
    1314:	88 2f       	mov	r24, r24
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	98 2f       	mov	r25, r24
    131a:	88 27       	eor	r24, r24
    131c:	9c 01       	movw	r18, r24
    131e:	de 01       	movw	r26, r28
    1320:	a9 5a       	subi	r26, 0xA9	; 169
    1322:	bf 4f       	sbci	r27, 0xFF	; 255
    1324:	fe 01       	movw	r30, r28
    1326:	e9 5a       	subi	r30, 0xA9	; 169
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	82 2b       	or	r24, r18
    1330:	93 2b       	or	r25, r19
    1332:	8d 93       	st	X+, r24
    1334:	9c 93       	st	X, r25
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a0 e8       	ldi	r26, 0x80	; 128
    133c:	bf e3       	ldi	r27, 0x3F	; 63
    133e:	8f a3       	std	Y+39, r24	; 0x27
    1340:	98 a7       	std	Y+40, r25	; 0x28
    1342:	a9 a7       	std	Y+41, r26	; 0x29
    1344:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1346:	6f a1       	ldd	r22, Y+39	; 0x27
    1348:	78 a5       	ldd	r23, Y+40	; 0x28
    134a:	89 a5       	ldd	r24, Y+41	; 0x29
    134c:	9a a5       	ldd	r25, Y+42	; 0x2a
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e8       	ldi	r19, 0x80	; 128
    1352:	4b e3       	ldi	r20, 0x3B	; 59
    1354:	55 e4       	ldi	r21, 0x45	; 69
    1356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	8b a3       	std	Y+35, r24	; 0x23
    1360:	9c a3       	std	Y+36, r25	; 0x24
    1362:	ad a3       	std	Y+37, r26	; 0x25
    1364:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1366:	6b a1       	ldd	r22, Y+35	; 0x23
    1368:	7c a1       	ldd	r23, Y+36	; 0x24
    136a:	8d a1       	ldd	r24, Y+37	; 0x25
    136c:	9e a1       	ldd	r25, Y+38	; 0x26
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e8       	ldi	r20, 0x80	; 128
    1374:	5f e3       	ldi	r21, 0x3F	; 63
    1376:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    137a:	88 23       	and	r24, r24
    137c:	2c f4       	brge	.+10     	; 0x1388 <Accelerometor_ReadAxis+0x46a>
		__ticks = 1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9a a3       	std	Y+34, r25	; 0x22
    1384:	89 a3       	std	Y+33, r24	; 0x21
    1386:	3f c0       	rjmp	.+126    	; 0x1406 <Accelerometor_ReadAxis+0x4e8>
	else if (__tmp > 65535)
    1388:	6b a1       	ldd	r22, Y+35	; 0x23
    138a:	7c a1       	ldd	r23, Y+36	; 0x24
    138c:	8d a1       	ldd	r24, Y+37	; 0x25
    138e:	9e a1       	ldd	r25, Y+38	; 0x26
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	3f ef       	ldi	r19, 0xFF	; 255
    1394:	4f e7       	ldi	r20, 0x7F	; 127
    1396:	57 e4       	ldi	r21, 0x47	; 71
    1398:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    139c:	18 16       	cp	r1, r24
    139e:	4c f5       	brge	.+82     	; 0x13f2 <Accelerometor_ReadAxis+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a0:	6f a1       	ldd	r22, Y+39	; 0x27
    13a2:	78 a5       	ldd	r23, Y+40	; 0x28
    13a4:	89 a5       	ldd	r24, Y+41	; 0x29
    13a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e2       	ldi	r20, 0x20	; 32
    13ae:	51 e4       	ldi	r21, 0x41	; 65
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9a a3       	std	Y+34, r25	; 0x22
    13c6:	89 a3       	std	Y+33, r24	; 0x21
    13c8:	0f c0       	rjmp	.+30     	; 0x13e8 <Accelerometor_ReadAxis+0x4ca>
    13ca:	8c e2       	ldi	r24, 0x2C	; 44
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	98 a3       	std	Y+32, r25	; 0x20
    13d0:	8f 8f       	std	Y+31, r24	; 0x1f
    13d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13d4:	98 a1       	ldd	r25, Y+32	; 0x20
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <Accelerometor_ReadAxis+0x4b8>
    13da:	98 a3       	std	Y+32, r25	; 0x20
    13dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13de:	89 a1       	ldd	r24, Y+33	; 0x21
    13e0:	9a a1       	ldd	r25, Y+34	; 0x22
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	9a a3       	std	Y+34, r25	; 0x22
    13e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e8:	89 a1       	ldd	r24, Y+33	; 0x21
    13ea:	9a a1       	ldd	r25, Y+34	; 0x22
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	69 f7       	brne	.-38     	; 0x13ca <Accelerometor_ReadAxis+0x4ac>
    13f0:	14 c0       	rjmp	.+40     	; 0x141a <Accelerometor_ReadAxis+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f2:	6b a1       	ldd	r22, Y+35	; 0x23
    13f4:	7c a1       	ldd	r23, Y+36	; 0x24
    13f6:	8d a1       	ldd	r24, Y+37	; 0x25
    13f8:	9e a1       	ldd	r25, Y+38	; 0x26
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9a a3       	std	Y+34, r25	; 0x22
    1404:	89 a3       	std	Y+33, r24	; 0x21
    1406:	89 a1       	ldd	r24, Y+33	; 0x21
    1408:	9a a1       	ldd	r25, Y+34	; 0x22
    140a:	9e 8f       	std	Y+30, r25	; 0x1e
    140c:	8d 8f       	std	Y+29, r24	; 0x1d
    140e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1410:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <Accelerometor_ReadAxis+0x4f4>
    1416:	9e 8f       	std	Y+30, r25	; 0x1e
    1418:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Z_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ0);
    141a:	fe 01       	movw	r30, r28
    141c:	e5 5a       	subi	r30, 0xA5	; 165
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	80 81       	ld	r24, Z
    1422:	66 e3       	ldi	r22, 0x36	; 54
    1424:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <I2C_ByteRead>
    1428:	fe 01       	movw	r30, r28
    142a:	eb 5a       	subi	r30, 0xAB	; 171
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a0 e8       	ldi	r26, 0x80	; 128
    143c:	bf e3       	ldi	r27, 0x3F	; 63
    143e:	89 8f       	std	Y+25, r24	; 0x19
    1440:	9a 8f       	std	Y+26, r25	; 0x1a
    1442:	ab 8f       	std	Y+27, r26	; 0x1b
    1444:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1446:	69 8d       	ldd	r22, Y+25	; 0x19
    1448:	7a 8d       	ldd	r23, Y+26	; 0x1a
    144a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e8       	ldi	r19, 0x80	; 128
    1452:	4b e3       	ldi	r20, 0x3B	; 59
    1454:	55 e4       	ldi	r21, 0x45	; 69
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	8d 8b       	std	Y+21, r24	; 0x15
    1460:	9e 8b       	std	Y+22, r25	; 0x16
    1462:	af 8b       	std	Y+23, r26	; 0x17
    1464:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1466:	6d 89       	ldd	r22, Y+21	; 0x15
    1468:	7e 89       	ldd	r23, Y+22	; 0x16
    146a:	8f 89       	ldd	r24, Y+23	; 0x17
    146c:	98 8d       	ldd	r25, Y+24	; 0x18
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e8       	ldi	r20, 0x80	; 128
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    147a:	88 23       	and	r24, r24
    147c:	2c f4       	brge	.+10     	; 0x1488 <Accelerometor_ReadAxis+0x56a>
		__ticks = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9c 8b       	std	Y+20, r25	; 0x14
    1484:	8b 8b       	std	Y+19, r24	; 0x13
    1486:	3f c0       	rjmp	.+126    	; 0x1506 <Accelerometor_ReadAxis+0x5e8>
	else if (__tmp > 65535)
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	7e 89       	ldd	r23, Y+22	; 0x16
    148c:	8f 89       	ldd	r24, Y+23	; 0x17
    148e:	98 8d       	ldd	r25, Y+24	; 0x18
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	3f ef       	ldi	r19, 0xFF	; 255
    1494:	4f e7       	ldi	r20, 0x7F	; 127
    1496:	57 e4       	ldi	r21, 0x47	; 71
    1498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    149c:	18 16       	cp	r1, r24
    149e:	4c f5       	brge	.+82     	; 0x14f2 <Accelerometor_ReadAxis+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a0:	69 8d       	ldd	r22, Y+25	; 0x19
    14a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e2       	ldi	r20, 0x20	; 32
    14ae:	51 e4       	ldi	r21, 0x41	; 65
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9c 8b       	std	Y+20, r25	; 0x14
    14c6:	8b 8b       	std	Y+19, r24	; 0x13
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <Accelerometor_ReadAxis+0x5ca>
    14ca:	8c e2       	ldi	r24, 0x2C	; 44
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	9a 8b       	std	Y+18, r25	; 0x12
    14d0:	89 8b       	std	Y+17, r24	; 0x11
    14d2:	89 89       	ldd	r24, Y+17	; 0x11
    14d4:	9a 89       	ldd	r25, Y+18	; 0x12
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <Accelerometor_ReadAxis+0x5b8>
    14da:	9a 8b       	std	Y+18, r25	; 0x12
    14dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	8b 89       	ldd	r24, Y+19	; 0x13
    14e0:	9c 89       	ldd	r25, Y+20	; 0x14
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	9c 8b       	std	Y+20, r25	; 0x14
    14e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ea:	9c 89       	ldd	r25, Y+20	; 0x14
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	69 f7       	brne	.-38     	; 0x14ca <Accelerometor_ReadAxis+0x5ac>
    14f0:	14 c0       	rjmp	.+40     	; 0x151a <Accelerometor_ReadAxis+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f2:	6d 89       	ldd	r22, Y+21	; 0x15
    14f4:	7e 89       	ldd	r23, Y+22	; 0x16
    14f6:	8f 89       	ldd	r24, Y+23	; 0x17
    14f8:	98 8d       	ldd	r25, Y+24	; 0x18
    14fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	9c 8b       	std	Y+20, r25	; 0x14
    1504:	8b 8b       	std	Y+19, r24	; 0x13
    1506:	8b 89       	ldd	r24, Y+19	; 0x13
    1508:	9c 89       	ldd	r25, Y+20	; 0x14
    150a:	98 8b       	std	Y+16, r25	; 0x10
    150c:	8f 87       	std	Y+15, r24	; 0x0f
    150e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1510:	98 89       	ldd	r25, Y+16	; 0x10
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <Accelerometor_ReadAxis+0x5f4>
    1516:	98 8b       	std	Y+16, r25	; 0x10
    1518:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Z_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ1))<<8;
    151a:	fe 01       	movw	r30, r28
    151c:	e5 5a       	subi	r30, 0xA5	; 165
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	80 81       	ld	r24, Z
    1522:	67 e3       	ldi	r22, 0x37	; 55
    1524:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <I2C_ByteRead>
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	98 2f       	mov	r25, r24
    152e:	88 27       	eor	r24, r24
    1530:	9c 01       	movw	r18, r24
    1532:	de 01       	movw	r26, r28
    1534:	ab 5a       	subi	r26, 0xAB	; 171
    1536:	bf 4f       	sbci	r27, 0xFF	; 255
    1538:	fe 01       	movw	r30, r28
    153a:	eb 5a       	subi	r30, 0xAB	; 171
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	82 2b       	or	r24, r18
    1544:	93 2b       	or	r25, r19
    1546:	8d 93       	st	X+, r24
    1548:	9c 93       	st	X, r25
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 e8       	ldi	r26, 0x80	; 128
    1550:	bf e3       	ldi	r27, 0x3F	; 63
    1552:	8b 87       	std	Y+11, r24	; 0x0b
    1554:	9c 87       	std	Y+12, r25	; 0x0c
    1556:	ad 87       	std	Y+13, r26	; 0x0d
    1558:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155a:	6b 85       	ldd	r22, Y+11	; 0x0b
    155c:	7c 85       	ldd	r23, Y+12	; 0x0c
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e8       	ldi	r19, 0x80	; 128
    1566:	4b e3       	ldi	r20, 0x3B	; 59
    1568:	55 e4       	ldi	r21, 0x45	; 69
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8f 83       	std	Y+7, r24	; 0x07
    1574:	98 87       	std	Y+8, r25	; 0x08
    1576:	a9 87       	std	Y+9, r26	; 0x09
    1578:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <Accelerometor_ReadAxis+0x67e>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	3f c0       	rjmp	.+126    	; 0x161a <Accelerometor_ReadAxis+0x6fc>
	else if (__tmp > 65535)
    159c:	6f 81       	ldd	r22, Y+7	; 0x07
    159e:	78 85       	ldd	r23, Y+8	; 0x08
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	4c f5       	brge	.+82     	; 0x1606 <Accelerometor_ReadAxis+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <Accelerometor_ReadAxis+0x6de>
    15de:	8c e2       	ldi	r24, 0x2C	; 44
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <Accelerometor_ReadAxis+0x6cc>
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f7       	brne	.-38     	; 0x15de <Accelerometor_ReadAxis+0x6c0>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <Accelerometor_ReadAxis+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <Accelerometor_ReadAxis+0x708>
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);	
	
	Data_ptr ->X_Axis= (X_Axis_Read);
    162e:	fe 01       	movw	r30, r28
    1630:	e7 5a       	subi	r30, 0xA7	; 167
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	cc 01       	movw	r24, r24
    163a:	a0 e0       	ldi	r26, 0x00	; 0
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	fe 01       	movw	r30, r28
    164c:	e4 5a       	subi	r30, 0xA4	; 164
    164e:	ff 4f       	sbci	r31, 0xFF	; 255
    1650:	01 90       	ld	r0, Z+
    1652:	f0 81       	ld	r31, Z
    1654:	e0 2d       	mov	r30, r0
    1656:	80 83       	st	Z, r24
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	a2 83       	std	Z+2, r26	; 0x02
    165c:	b3 83       	std	Z+3, r27	; 0x03
	Data_ptr ->Y_Axis= (Y_Axis_Read);
    165e:	fe 01       	movw	r30, r28
    1660:	e9 5a       	subi	r30, 0xA9	; 169
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	80 81       	ld	r24, Z
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	cc 01       	movw	r24, r24
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	fe 01       	movw	r30, r28
    167c:	e4 5a       	subi	r30, 0xA4	; 164
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	01 90       	ld	r0, Z+
    1682:	f0 81       	ld	r31, Z
    1684:	e0 2d       	mov	r30, r0
    1686:	84 83       	std	Z+4, r24	; 0x04
    1688:	95 83       	std	Z+5, r25	; 0x05
    168a:	a6 83       	std	Z+6, r26	; 0x06
    168c:	b7 83       	std	Z+7, r27	; 0x07
	Data_ptr ->Z_Axis= (Z_Axis_Read);
    168e:	fe 01       	movw	r30, r28
    1690:	eb 5a       	subi	r30, 0xAB	; 171
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	cc 01       	movw	r24, r24
    169a:	a0 e0       	ldi	r26, 0x00	; 0
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	fe 01       	movw	r30, r28
    16ac:	e4 5a       	subi	r30, 0xA4	; 164
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	01 90       	ld	r0, Z+
    16b2:	f0 81       	ld	r31, Z
    16b4:	e0 2d       	mov	r30, r0
    16b6:	80 87       	std	Z+8, r24	; 0x08
    16b8:	91 87       	std	Z+9, r25	; 0x09
    16ba:	a2 87       	std	Z+10, r26	; 0x0a
    16bc:	b3 87       	std	Z+11, r27	; 0x0b
}
    16be:	c3 5a       	subi	r28, 0xA3	; 163
    16c0:	df 4f       	sbci	r29, 0xFF	; 255
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	08 95       	ret

000016d6 <sendData>:

uint8 defaultBuffer[]={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	2f 97       	sbiw	r28, 0x0f	; 15
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
    16ea:	1f 86       	std	Y+15, r1	; 0x0f
    16ec:	1a c0       	rjmp	.+52     	; 0x1722 <sendData+0x4c>
	{
		UART_SendByte(dataBuffer[counter]);
    16ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	fc 01       	movw	r30, r24
    16f6:	ee 56       	subi	r30, 0x6E	; 110
    16f8:	fe 4f       	sbci	r31, 0xFE	; 254
    16fa:	80 81       	ld	r24, Z
    16fc:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <UART_SendByte>
		dataBuffer[counter] = defaultBuffer[counter];
    1700:	8f 85       	ldd	r24, Y+15	; 0x0f
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	8f 85       	ldd	r24, Y+15	; 0x0f
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	fc 01       	movw	r30, r24
    170e:	e6 57       	subi	r30, 0x76	; 118
    1710:	fe 4f       	sbci	r31, 0xFE	; 254
    1712:	80 81       	ld	r24, Z
    1714:	f9 01       	movw	r30, r18
    1716:	ee 56       	subi	r30, 0x6E	; 110
    1718:	fe 4f       	sbci	r31, 0xFE	; 254
    171a:	80 83       	st	Z, r24
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
    171c:	8f 85       	ldd	r24, Y+15	; 0x0f
    171e:	8f 5f       	subi	r24, 0xFF	; 255
    1720:	8f 87       	std	Y+15, r24	; 0x0f
    1722:	8f 85       	ldd	r24, Y+15	; 0x0f
    1724:	88 30       	cpi	r24, 0x08	; 8
    1726:	18 f3       	brcs	.-58     	; 0x16ee <sendData+0x18>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a8 ec       	ldi	r26, 0xC8	; 200
    172e:	b2 e4       	ldi	r27, 0x42	; 66
    1730:	8b 87       	std	Y+11, r24	; 0x0b
    1732:	9c 87       	std	Y+12, r25	; 0x0c
    1734:	ad 87       	std	Y+13, r26	; 0x0d
    1736:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1738:	6b 85       	ldd	r22, Y+11	; 0x0b
    173a:	7c 85       	ldd	r23, Y+12	; 0x0c
    173c:	8d 85       	ldd	r24, Y+13	; 0x0d
    173e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e8       	ldi	r19, 0x80	; 128
    1744:	4b e3       	ldi	r20, 0x3B	; 59
    1746:	55 e4       	ldi	r21, 0x45	; 69
    1748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	8f 83       	std	Y+7, r24	; 0x07
    1752:	98 87       	std	Y+8, r25	; 0x08
    1754:	a9 87       	std	Y+9, r26	; 0x09
    1756:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1758:	6f 81       	ldd	r22, Y+7	; 0x07
    175a:	78 85       	ldd	r23, Y+8	; 0x08
    175c:	89 85       	ldd	r24, Y+9	; 0x09
    175e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e8       	ldi	r20, 0x80	; 128
    1766:	5f e3       	ldi	r21, 0x3F	; 63
    1768:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    176c:	88 23       	and	r24, r24
    176e:	2c f4       	brge	.+10     	; 0x177a <sendData+0xa4>
		__ticks = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	3f c0       	rjmp	.+126    	; 0x17f8 <sendData+0x122>
	else if (__tmp > 65535)
    177a:	6f 81       	ldd	r22, Y+7	; 0x07
    177c:	78 85       	ldd	r23, Y+8	; 0x08
    177e:	89 85       	ldd	r24, Y+9	; 0x09
    1780:	9a 85       	ldd	r25, Y+10	; 0x0a
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	57 e4       	ldi	r21, 0x47	; 71
    178a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	4c f5       	brge	.+82     	; 0x17e4 <sendData+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	6b 85       	ldd	r22, Y+11	; 0x0b
    1794:	7c 85       	ldd	r23, Y+12	; 0x0c
    1796:	8d 85       	ldd	r24, Y+13	; 0x0d
    1798:	9e 85       	ldd	r25, Y+14	; 0x0e
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	9e 83       	std	Y+6, r25	; 0x06
    17b8:	8d 83       	std	Y+5, r24	; 0x05
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <sendData+0x104>
    17bc:	8c e2       	ldi	r24, 0x2C	; 44
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	9c 83       	std	Y+4, r25	; 0x04
    17c2:	8b 83       	std	Y+3, r24	; 0x03
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <sendData+0xf2>
    17cc:	9c 83       	std	Y+4, r25	; 0x04
    17ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	9e 81       	ldd	r25, Y+6	; 0x06
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	69 f7       	brne	.-38     	; 0x17bc <sendData+0xe6>
    17e2:	14 c0       	rjmp	.+40     	; 0x180c <sendData+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e4:	6f 81       	ldd	r22, Y+7	; 0x07
    17e6:	78 85       	ldd	r23, Y+8	; 0x08
    17e8:	89 85       	ldd	r24, Y+9	; 0x09
    17ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	8d 83       	std	Y+5, r24	; 0x05
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	9a 83       	std	Y+2, r25	; 0x02
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <sendData+0x12e>
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_SendByte(dataBuffer[counter]);
		dataBuffer[counter] = defaultBuffer[counter];
	}
	_delay_ms(100);
}
    180c:	2f 96       	adiw	r28, 0x0f	; 15
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <DFPlayer_init>:

void DFPlayer_init(void)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
	/* set Digital to Analog converter (DAC) online */
	dataBuffer[3] = DAC_ONLINE ; /*command to set DAC online */
    1826:	8a e1       	ldi	r24, 0x1A	; 26
    1828:	80 93 95 01 	sts	0x0195, r24
	sendData(); /* send this command through uart to DFPlayer module*/
    182c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <sendData>
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <DFPlayer_CMD_play>:
void DFPlayer_CMD_play(uint16 songNumber)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <DFPlayer_CMD_play+0x6>
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SELECTSONG ; /* command to play song */
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	80 93 95 01 	sts	0x0195, r24
	if(songNumber < 256)
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	8f 3f       	cpi	r24, 0xFF	; 255
    1850:	91 05       	cpc	r25, r1
    1852:	09 f0       	breq	.+2      	; 0x1856 <DFPlayer_CMD_play+0x20>
    1854:	20 f4       	brcc	.+8      	; 0x185e <DFPlayer_CMD_play+0x28>
	{
		dataBuffer[6] = songNumber ;
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	80 93 98 01 	sts	0x0198, r24
    185c:	0b c0       	rjmp	.+22     	; 0x1874 <DFPlayer_CMD_play+0x3e>
	}
	else
	{
		dataBuffer[6] = (uint8)songNumber;
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	80 93 98 01 	sts	0x0198, r24
		dataBuffer[5] = (uint8)songNumber >> 8 ;
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	89 2f       	mov	r24, r25
    186c:	99 0f       	add	r25, r25
    186e:	99 0b       	sbc	r25, r25
    1870:	80 93 97 01 	sts	0x0197, r24
	}
	sendData();
    1874:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <sendData>
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <DFPlayer_CMD_setVolume>:


void DFPlayer_CMD_setVolume(uint8 volume)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	0f 92       	push	r0
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	89 83       	std	Y+1, r24	; 0x01
	if(volume > 30)
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	8f 31       	cpi	r24, 0x1F	; 31
    1892:	10 f0       	brcs	.+4      	; 0x1898 <DFPlayer_CMD_setVolume+0x16>
	{
		volume = 30;
    1894:	8e e1       	ldi	r24, 0x1E	; 30
    1896:	89 83       	std	Y+1, r24	; 0x01
	}
	dataBuffer[3] = SPE_VOL ;
    1898:	86 e0       	ldi	r24, 0x06	; 6
    189a:	80 93 95 01 	sts	0x0195, r24
	dataBuffer[6] = volume;
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	80 93 98 01 	sts	0x0198, r24
	sendData();
    18a4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <sendData>
}
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <DFPlayer_CMD_playContinues>:
void DFPlayer_CMD_playContinues(uint8 songNumber)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	0f 92       	push	r0
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SPPLAYBACKMODE ; /* command to play song continue sly */
    18bc:	88 e0       	ldi	r24, 0x08	; 8
    18be:	80 93 95 01 	sts	0x0195, r24
	if(songNumber < 256)
	{
		dataBuffer[6] = songNumber ;
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	80 93 98 01 	sts	0x0198, r24
	else
	{
		dataBuffer[6] = (uint8)songNumber;
		dataBuffer[5] = (uint8)songNumber >> 8 ;
	}
	sendData();
    18c8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <sendData>
}
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <DFPlayer_CMD_pause>:

void DFPlayer_CMD_pause(void)
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PAUSE ;
    18dc:	8e e0       	ldi	r24, 0x0E	; 14
    18de:	80 93 95 01 	sts	0x0195, r24
	sendData();
    18e2:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <sendData>
}
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <DFPlayer_CMD_stop>:

void DFPlayer_CMD_stop(void)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = STOP;
    18f4:	86 e1       	ldi	r24, 0x16	; 22
    18f6:	80 93 95 01 	sts	0x0195, r24
	sendData();
    18fa:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <sendData>
}
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <DFPlayer_CMD_continue>:
void DFPlayer_CMD_continue(void)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PLAYBACK;
    190c:	8d e0       	ldi	r24, 0x0D	; 13
    190e:	80 93 95 01 	sts	0x0195, r24
	sendData();
    1912:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <sendData>
}
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <DFPlayer_CMD_Reset>:
void DFPlayer_CMD_Reset(void)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = RESET;
    1924:	8c e0       	ldi	r24, 0x0C	; 12
    1926:	80 93 95 01 	sts	0x0195, r24
	sendData();
    192a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <sendData>
}
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <play_sound>:

void play_sound(uint16 Sound)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	00 d0       	rcall	.+0      	; 0x193a <play_sound+0x6>
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01
	DFPlayer_CMD_pause();
    1942:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DFPlayer_CMD_pause>
	DFPlayer_CMD_setVolume(30);
    1946:	8e e1       	ldi	r24, 0x1E	; 30
    1948:	0e 94 41 0c 	call	0x1882	; 0x1882 <DFPlayer_CMD_setVolume>
	DFPlayer_CMD_play(Sound);
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DFPlayer_CMD_play>
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <TWI_Init>:

#include "i2c.h"
#include "lcd.h"

void TWI_Init(I2C_Prescaler Prescale , I2C_interruptState int_state , uint32 F_SCL , uint8 Address)
{
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	29 97       	sbiw	r28, 0x09	; 9
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	6a 83       	std	Y+2, r22	; 0x02
    197a:	2b 83       	std	Y+3, r18	; 0x03
    197c:	3c 83       	std	Y+4, r19	; 0x04
    197e:	4d 83       	std	Y+5, r20	; 0x05
    1980:	5e 83       	std	Y+6, r21	; 0x06
    1982:	0f 83       	std	Y+7, r16	; 0x07
	TWAR = Address<<1;
    1984:	e2 e2       	ldi	r30, 0x22	; 34
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	8f 81       	ldd	r24, Y+7	; 0x07
    198a:	88 0f       	add	r24, r24
    198c:	80 83       	st	Z, r24
	 /*  Calculating Bit Rate: */
	switch (Prescale)
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	39 87       	std	Y+9, r19	; 0x09
    1996:	28 87       	std	Y+8, r18	; 0x08
    1998:	88 85       	ldd	r24, Y+8	; 0x08
    199a:	99 85       	ldd	r25, Y+9	; 0x09
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	91 05       	cpc	r25, r1
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <TWI_Init+0x46>
    19a2:	45 c0       	rjmp	.+138    	; 0x1a2e <TWI_Init+0xd0>
    19a4:	e8 85       	ldd	r30, Y+8	; 0x08
    19a6:	f9 85       	ldd	r31, Y+9	; 0x09
    19a8:	e2 30       	cpi	r30, 0x02	; 2
    19aa:	f1 05       	cpc	r31, r1
    19ac:	34 f4       	brge	.+12     	; 0x19ba <TWI_Init+0x5c>
    19ae:	28 85       	ldd	r18, Y+8	; 0x08
    19b0:	39 85       	ldd	r19, Y+9	; 0x09
    19b2:	21 15       	cp	r18, r1
    19b4:	31 05       	cpc	r19, r1
    19b6:	71 f0       	breq	.+28     	; 0x19d4 <TWI_Init+0x76>
    19b8:	e8 c0       	rjmp	.+464    	; 0x1b8a <TWI_Init+0x22c>
    19ba:	88 85       	ldd	r24, Y+8	; 0x08
    19bc:	99 85       	ldd	r25, Y+9	; 0x09
    19be:	82 30       	cpi	r24, 0x02	; 2
    19c0:	91 05       	cpc	r25, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <TWI_Init+0x68>
    19c4:	65 c0       	rjmp	.+202    	; 0x1a90 <TWI_Init+0x132>
    19c6:	e8 85       	ldd	r30, Y+8	; 0x08
    19c8:	f9 85       	ldd	r31, Y+9	; 0x09
    19ca:	e3 30       	cpi	r30, 0x03	; 3
    19cc:	f1 05       	cpc	r31, r1
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <TWI_Init+0x74>
    19d0:	9a c0       	rjmp	.+308    	; 0x1b06 <TWI_Init+0x1a8>
    19d2:	db c0       	rjmp	.+438    	; 0x1b8a <TWI_Init+0x22c>
	{
		case I2C_PRESCALE1:
								TWBR = (uint8) (((float)F_CPU/(2.0*F_SCL)) -8);
    19d4:	00 e2       	ldi	r16, 0x20	; 32
    19d6:	10 e0       	ldi	r17, 0x00	; 0
    19d8:	6b 81       	ldd	r22, Y+3	; 0x03
    19da:	7c 81       	ldd	r23, Y+4	; 0x04
    19dc:	8d 81       	ldd	r24, Y+5	; 0x05
    19de:	9e 81       	ldd	r25, Y+6	; 0x06
    19e0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    19e4:	9b 01       	movw	r18, r22
    19e6:	ac 01       	movw	r20, r24
    19e8:	ca 01       	movw	r24, r20
    19ea:	b9 01       	movw	r22, r18
    19ec:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9c 01       	movw	r18, r24
    19f6:	ad 01       	movw	r20, r26
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	7b e1       	ldi	r23, 0x1B	; 27
    19fc:	87 e3       	ldi	r24, 0x37	; 55
    19fe:	9b e4       	ldi	r25, 0x4B	; 75
    1a00:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	51 e4       	ldi	r21, 0x41	; 65
    1a14:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	f8 01       	movw	r30, r16
    1a2a:	80 83       	st	Z, r24
    1a2c:	ae c0       	rjmp	.+348    	; 0x1b8a <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE4:
								TWBR = (uint8) (((float)F_CPU/(8.0*F_SCL)) -2);
    1a2e:	00 e2       	ldi	r16, 0x20	; 32
    1a30:	10 e0       	ldi	r17, 0x00	; 0
    1a32:	6b 81       	ldd	r22, Y+3	; 0x03
    1a34:	7c 81       	ldd	r23, Y+4	; 0x04
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	bc 01       	movw	r22, r24
    1a44:	cd 01       	movw	r24, r26
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	51 e4       	ldi	r21, 0x41	; 65
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	9c 01       	movw	r18, r24
    1a58:	ad 01       	movw	r20, r26
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	7b e1       	ldi	r23, 0x1B	; 27
    1a5e:	87 e3       	ldi	r24, 0x37	; 55
    1a60:	9b e4       	ldi	r25, 0x4B	; 75
    1a62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	bc 01       	movw	r22, r24
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	50 e4       	ldi	r21, 0x40	; 64
    1a76:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	80 83       	st	Z, r24
    1a8e:	7d c0       	rjmp	.+250    	; 0x1b8a <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE16:
								TWBR = (uint8) (((float)F_CPU/(32*F_SCL)) -0.5);
    1a90:	00 e2       	ldi	r16, 0x20	; 32
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	ad 81       	ldd	r26, Y+5	; 0x05
    1a9a:	be 81       	ldd	r27, Y+6	; 0x06
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	aa 1f       	adc	r26, r26
    1aa2:	bb 1f       	adc	r27, r27
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	aa 1f       	adc	r26, r26
    1aaa:	bb 1f       	adc	r27, r27
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	aa 1f       	adc	r26, r26
    1ab2:	bb 1f       	adc	r27, r27
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	aa 1f       	adc	r26, r26
    1aba:	bb 1f       	adc	r27, r27
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	aa 1f       	adc	r26, r26
    1ac2:	bb 1f       	adc	r27, r27
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	7b e1       	ldi	r23, 0x1B	; 27
    1ad4:	87 e3       	ldi	r24, 0x37	; 55
    1ad6:	9b e4       	ldi	r25, 0x4B	; 75
    1ad8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e0       	ldi	r20, 0x00	; 0
    1aea:	5f e3       	ldi	r21, 0x3F	; 63
    1aec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	f8 01       	movw	r30, r16
    1b02:	80 83       	st	Z, r24
    1b04:	42 c0       	rjmp	.+132    	; 0x1b8a <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE64:
								TWBR = (uint8) (((float)F_CPU/(128*F_SCL)) -0.125);
    1b06:	00 e2       	ldi	r16, 0x20	; 32
    1b08:	10 e0       	ldi	r17, 0x00	; 0
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	ad 81       	ldd	r26, Y+5	; 0x05
    1b10:	be 81       	ldd	r27, Y+6	; 0x06
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	aa 1f       	adc	r26, r26
    1b18:	bb 1f       	adc	r27, r27
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	aa 1f       	adc	r26, r26
    1b20:	bb 1f       	adc	r27, r27
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	aa 1f       	adc	r26, r26
    1b28:	bb 1f       	adc	r27, r27
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	aa 1f       	adc	r26, r26
    1b30:	bb 1f       	adc	r27, r27
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	aa 1f       	adc	r26, r26
    1b38:	bb 1f       	adc	r27, r27
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	aa 1f       	adc	r26, r26
    1b40:	bb 1f       	adc	r27, r27
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	aa 1f       	adc	r26, r26
    1b48:	bb 1f       	adc	r27, r27
    1b4a:	bc 01       	movw	r22, r24
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1b52:	9b 01       	movw	r18, r22
    1b54:	ac 01       	movw	r20, r24
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	7b e1       	ldi	r23, 0x1B	; 27
    1b5a:	87 e3       	ldi	r24, 0x37	; 55
    1b5c:	9b e4       	ldi	r25, 0x4B	; 75
    1b5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	5e e3       	ldi	r21, 0x3E	; 62
    1b72:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	f8 01       	movw	r30, r16
    1b88:	80 83       	st	Z, r24
		default:
					break;
	}
   
	
	TWSR |= (Prescale & 0x03);
    1b8a:	a1 e2       	ldi	r26, 0x21	; 33
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e1 e2       	ldi	r30, 0x21	; 33
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	98 2f       	mov	r25, r24
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	83 70       	andi	r24, 0x03	; 3
    1b9a:	89 2b       	or	r24, r25
    1b9c:	8c 93       	st	X, r24
	TWCR |= (1<<TWEN) | (int_state & 0x01) ;
    1b9e:	a6 e5       	ldi	r26, 0x56	; 86
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e6 e5       	ldi	r30, 0x56	; 86
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	98 2f       	mov	r25, r24
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	81 70       	andi	r24, 0x01	; 1
    1bae:	84 60       	ori	r24, 0x04	; 4
    1bb0:	89 2b       	or	r24, r25
    1bb2:	8c 93       	st	X, r24
}
    1bb4:	29 96       	adiw	r28, 0x09	; 9
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	08 95       	ret

00001bca <TWI_Start>:

void TWI_Start(void)
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
    1bd2:	e6 e5       	ldi	r30, 0x56	; 86
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	84 ea       	ldi	r24, 0xA4	; 164
    1bd8:	80 83       	st	Z, r24
 
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    1bda:	e6 e5       	ldi	r30, 0x56	; 86
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	88 23       	and	r24, r24
    1be2:	dc f7       	brge	.-10     	; 0x1bda <TWI_Start+0x10>
}
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <TWI_Stop>:

void TWI_Stop(void)
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
    1bf2:	e6 e5       	ldi	r30, 0x56	; 86
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	84 e9       	ldi	r24, 0x94	; 148
    1bf8:	80 83       	st	Z, r24
 
}
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <TWI_Write>:

void TWI_Write(uint8 data)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	0f 92       	push	r0
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1c0c:	e3 e2       	ldi	r30, 0x23	; 35
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
   TWCR = (1<<TWEN) | (1<<TWINT);
    1c14:	e6 e5       	ldi	r30, 0x56	; 86
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	84 e8       	ldi	r24, 0x84	; 132
    1c1a:	80 83       	st	Z, r24
   
   /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    1c1c:	e6 e5       	ldi	r30, 0x56	; 86
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	88 23       	and	r24, r24
    1c24:	dc f7       	brge	.-10     	; 0x1c1c <TWI_Write+0x1c>
}
    1c26:	0f 90       	pop	r0
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 

    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);    
    1c36:	e6 e5       	ldi	r30, 0x56	; 86
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	84 ec       	ldi	r24, 0xC4	; 196
    1c3c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c3e:	e6 e5       	ldi	r30, 0x56	; 86
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	88 23       	and	r24, r24
    1c46:	dc f7       	brge	.-10     	; 0x1c3e <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    1c48:	e3 e2       	ldi	r30, 0x23	; 35
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
}
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62



		TWCR =(1<<TWEN) | (1<<TWINT);
    1c5c:	e6 e5       	ldi	r30, 0x56	; 86
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	84 e8       	ldi	r24, 0x84	; 132
    1c62:	80 83       	st	Z, r24
/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
while(BIT_IS_CLEAR(TWCR,TWINT));
    1c64:	e6 e5       	ldi	r30, 0x56	; 86
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	88 23       	and	r24, r24
    1c6c:	dc f7       	brge	.-10     	; 0x1c64 <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    1c6e:	e3 e2       	ldi	r30, 0x23	; 35
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
}
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    1c82:	e1 e2       	ldi	r30, 0x21	; 33
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	88 7f       	andi	r24, 0xF8	; 248
}
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <I2C_ByteWrite>:




void I2C_ByteWrite(uint8 SL_Address,uint8 Reg_Address ,uint8 Data )
{
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <I2C_ByteWrite+0x6>
    1c96:	0f 92       	push	r0
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	6a 83       	std	Y+2, r22	; 0x02
    1ca0:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();
    1ca2:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    1ca6:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <TWI_Get_Status>
    1caa:	88 30       	cpi	r24, 0x08	; 8
    1cac:	19 f0       	breq	.+6      	; 0x1cb4 <I2C_ByteWrite+0x24>
	{
		TWI_Stop();
    1cae:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_Stop>
    1cb2:	21 c0       	rjmp	.+66     	; 0x1cf6 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write((SL_Address<<1));
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	88 0f       	add	r24, r24
    1cb8:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <TWI_Write>
if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    1cbc:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <TWI_Get_Status>
    1cc0:	88 31       	cpi	r24, 0x18	; 24
    1cc2:	19 f0       	breq	.+6      	; 0x1cca <I2C_ByteWrite+0x3a>
	{

		TWI_Stop();
    1cc4:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_Stop>
    1cc8:	16 c0       	rjmp	.+44     	; 0x1cf6 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write(Reg_Address);
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1cd0:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <TWI_Get_Status>
    1cd4:	88 32       	cpi	r24, 0x28	; 40
    1cd6:	19 f0       	breq	.+6      	; 0x1cde <I2C_ByteWrite+0x4e>
	{
		TWI_Stop();
    1cd8:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_Stop>
    1cdc:	0c c0       	rjmp	.+24     	; 0x1cf6 <I2C_ByteWrite+0x66>
		return ;
	}
	
TWI_Write(Data);
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1ce4:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <TWI_Get_Status>
    1ce8:	88 32       	cpi	r24, 0x28	; 40
    1cea:	19 f0       	breq	.+6      	; 0x1cf2 <I2C_ByteWrite+0x62>
	{

		TWI_Stop();
    1cec:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_Stop>
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
    1cf2:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_Stop>
	return ;

}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <I2C_ByteRead>:

 

 
uint8 I2C_ByteRead(uint8 SL_Address , uint8 Reg_Address)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <I2C_ByteRead+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <I2C_ByteRead+0x8>
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	8a 83       	std	Y+2, r24	; 0x02
    1d10:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Data=0;
    1d12:	19 82       	std	Y+1, r1	; 0x01
	
	
	TWI_Start();
    1d14:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    1d18:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <TWI_Get_Status>
    1d1c:	88 30       	cpi	r24, 0x08	; 8
    1d1e:	29 f0       	breq	.+10     	; 0x1d2a <I2C_ByteRead+0x28>
	{
		TWI_Stop();
    1d20:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_Stop>
		return 1;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	8c 83       	std	Y+4, r24	; 0x04
    1d28:	3c c0       	rjmp	.+120    	; 0x1da2 <I2C_ByteRead+0xa0>
	}
	
	
	TWI_Write((SL_Address<<1));
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	88 0f       	add	r24, r24
    1d2e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    1d32:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <TWI_Get_Status>
    1d36:	88 31       	cpi	r24, 0x18	; 24
    1d38:	29 f0       	breq	.+10     	; 0x1d44 <I2C_ByteRead+0x42>
	{

		TWI_Stop();
    1d3a:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_Stop>
		return 2;
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	8c 83       	std	Y+4, r24	; 0x04
    1d42:	2f c0       	rjmp	.+94     	; 0x1da2 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write(Reg_Address);
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1d4a:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <TWI_Get_Status>
    1d4e:	88 32       	cpi	r24, 0x28	; 40
    1d50:	29 f0       	breq	.+10     	; 0x1d5c <I2C_ByteRead+0x5a>
	{
		TWI_Stop();
    1d52:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_Stop>
		return 3;
    1d56:	83 e0       	ldi	r24, 0x03	; 3
    1d58:	8c 83       	std	Y+4, r24	; 0x04
    1d5a:	23 c0       	rjmp	.+70     	; 0x1da2 <I2C_ByteRead+0xa0>
	}
	
	TWI_Start();
    1d5c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    1d60:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <TWI_Get_Status>
    1d64:	80 31       	cpi	r24, 0x10	; 16
    1d66:	29 f0       	breq	.+10     	; 0x1d72 <I2C_ByteRead+0x70>
	{
		TWI_Stop();
    1d68:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_Stop>
		return 4;
    1d6c:	84 e0       	ldi	r24, 0x04	; 4
    1d6e:	8c 83       	std	Y+4, r24	; 0x04
    1d70:	18 c0       	rjmp	.+48     	; 0x1da2 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write((SL_Address<<1) | READ);
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	88 2f       	mov	r24, r24
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	81 60       	ori	r24, 0x01	; 1
    1d7e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    1d82:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <TWI_Get_Status>
    1d86:	80 34       	cpi	r24, 0x40	; 64
    1d88:	29 f0       	breq	.+10     	; 0x1d94 <I2C_ByteRead+0x92>
	{

		TWI_Stop();
    1d8a:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_Stop>
		return 5;
    1d8e:	85 e0       	ldi	r24, 0x05	; 5
    1d90:	8c 83       	std	Y+4, r24	; 0x04
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <I2C_ByteRead+0xa0>
	}
	Data=TWI_Read_With_NACK();
    1d94:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <TWI_Read_With_NACK>
    1d98:	89 83       	std	Y+1, r24	; 0x01
	TWI_Stop();
    1d9a:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <TWI_Stop>
	
	return Data;		
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	8c 83       	std	Y+4, r24	; 0x04
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <LCD_Init>:

//LCD_DataDirection = 0xff;


void LCD_Init(void)
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	e8 97       	sbiw	r28, 0x38	; 56
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 e2       	ldi	r26, 0x20	; 32
    1dcc:	b2 e4       	ldi	r27, 0x42	; 66
    1dce:	8d ab       	std	Y+53, r24	; 0x35
    1dd0:	9e ab       	std	Y+54, r25	; 0x36
    1dd2:	af ab       	std	Y+55, r26	; 0x37
    1dd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dda:	8f a9       	ldd	r24, Y+55	; 0x37
    1ddc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e8       	ldi	r19, 0x80	; 128
    1de2:	4b e3       	ldi	r20, 0x3B	; 59
    1de4:	55 e4       	ldi	r21, 0x45	; 69
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	89 ab       	std	Y+49, r24	; 0x31
    1df0:	9a ab       	std	Y+50, r25	; 0x32
    1df2:	ab ab       	std	Y+51, r26	; 0x33
    1df4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1df6:	69 a9       	ldd	r22, Y+49	; 0x31
    1df8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <LCD_Init+0x66>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	98 ab       	std	Y+48, r25	; 0x30
    1e14:	8f a7       	std	Y+47, r24	; 0x2f
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    1e18:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	6d a9       	ldd	r22, Y+53	; 0x35
    1e32:	7e a9       	ldd	r23, Y+54	; 0x36
    1e34:	8f a9       	ldd	r24, Y+55	; 0x37
    1e36:	98 ad       	ldd	r25, Y+56	; 0x38
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	98 ab       	std	Y+48, r25	; 0x30
    1e56:	8f a7       	std	Y+47, r24	; 0x2f
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <LCD_Init+0xc6>
    1e5a:	8c e2       	ldi	r24, 0x2C	; 44
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
    1e5e:	9e a7       	std	Y+46, r25	; 0x2e
    1e60:	8d a7       	std	Y+45, r24	; 0x2d
    1e62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_Init+0xb4>
    1e6a:	9e a7       	std	Y+46, r25	; 0x2e
    1e6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e70:	98 a9       	ldd	r25, Y+48	; 0x30
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	98 ab       	std	Y+48, r25	; 0x30
    1e76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <LCD_Init+0xa8>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	69 a9       	ldd	r22, Y+49	; 0x31
    1e84:	7a a9       	ldd	r23, Y+50	; 0x32
    1e86:	8b a9       	ldd	r24, Y+51	; 0x33
    1e88:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	98 ab       	std	Y+48, r25	; 0x30
    1e94:	8f a7       	std	Y+47, r24	; 0x2f
    1e96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e98:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9a:	9c a7       	std	Y+44, r25	; 0x2c
    1e9c:	8b a7       	std	Y+43, r24	; 0x2b
    1e9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_Init+0xf0>
    1ea6:	9c a7       	std	Y+44, r25	; 0x2c
    1ea8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_SendCommand (0b00111100);
    1eaa:	8c e3       	ldi	r24, 0x3C	; 60
    1eac:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e4       	ldi	r26, 0x40	; 64
    1eb6:	b0 e4       	ldi	r27, 0x40	; 64
    1eb8:	8f a3       	std	Y+39, r24	; 0x27
    1eba:	98 a7       	std	Y+40, r25	; 0x28
    1ebc:	a9 a7       	std	Y+41, r26	; 0x29
    1ebe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e8       	ldi	r19, 0x80	; 128
    1ecc:	4b e3       	ldi	r20, 0x3B	; 59
    1ece:	55 e4       	ldi	r21, 0x45	; 69
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8b a3       	std	Y+35, r24	; 0x23
    1eda:	9c a3       	std	Y+36, r25	; 0x24
    1edc:	ad a3       	std	Y+37, r26	; 0x25
    1ede:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ee0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	2c f4       	brge	.+10     	; 0x1f02 <LCD_Init+0x150>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9a a3       	std	Y+34, r25	; 0x22
    1efe:	89 a3       	std	Y+33, r24	; 0x21
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <LCD_Init+0x1ce>
	else if (__tmp > 65535)
    1f02:	6b a1       	ldd	r22, Y+35	; 0x23
    1f04:	7c a1       	ldd	r23, Y+36	; 0x24
    1f06:	8d a1       	ldd	r24, Y+37	; 0x25
    1f08:	9e a1       	ldd	r25, Y+38	; 0x26
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	4c f5       	brge	.+82     	; 0x1f6c <LCD_Init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9a a3       	std	Y+34, r25	; 0x22
    1f40:	89 a3       	std	Y+33, r24	; 0x21
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <LCD_Init+0x1b0>
    1f44:	8c e2       	ldi	r24, 0x2C	; 44
    1f46:	91 e0       	ldi	r25, 0x01	; 1
    1f48:	98 a3       	std	Y+32, r25	; 0x20
    1f4a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f4e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_Init+0x19e>
    1f54:	98 a3       	std	Y+32, r25	; 0x20
    1f56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f58:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	9a a3       	std	Y+34, r25	; 0x22
    1f60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	89 a1       	ldd	r24, Y+33	; 0x21
    1f64:	9a a1       	ldd	r25, Y+34	; 0x22
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <LCD_Init+0x192>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <LCD_Init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f70:	8d a1       	ldd	r24, Y+37	; 0x25
    1f72:	9e a1       	ldd	r25, Y+38	; 0x26
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9a a3       	std	Y+34, r25	; 0x22
    1f7e:	89 a3       	std	Y+33, r24	; 0x21
    1f80:	89 a1       	ldd	r24, Y+33	; 0x21
    1f82:	9a a1       	ldd	r25, Y+34	; 0x22
    1f84:	9e 8f       	std	Y+30, r25	; 0x1e
    1f86:	8d 8f       	std	Y+29, r24	; 0x1d
    1f88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_Init+0x1da>
    1f90:	9e 8f       	std	Y+30, r25	; 0x1e
    1f92:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);
	LCD_SendCommand(0b00001100);
    1f94:	8c e0       	ldi	r24, 0x0C	; 12
    1f96:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	a0 e4       	ldi	r26, 0x40	; 64
    1fa0:	b0 e4       	ldi	r27, 0x40	; 64
    1fa2:	89 8f       	std	Y+25, r24	; 0x19
    1fa4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1faa:	69 8d       	ldd	r22, Y+25	; 0x19
    1fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e8       	ldi	r19, 0x80	; 128
    1fb6:	4b e3       	ldi	r20, 0x3B	; 59
    1fb8:	55 e4       	ldi	r21, 0x45	; 69
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	8d 8b       	std	Y+21, r24	; 0x15
    1fc4:	9e 8b       	std	Y+22, r25	; 0x16
    1fc6:	af 8b       	std	Y+23, r26	; 0x17
    1fc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fca:	6d 89       	ldd	r22, Y+21	; 0x15
    1fcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fce:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e8       	ldi	r20, 0x80	; 128
    1fd8:	5f e3       	ldi	r21, 0x3F	; 63
    1fda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fde:	88 23       	and	r24, r24
    1fe0:	2c f4       	brge	.+10     	; 0x1fec <LCD_Init+0x23a>
		__ticks = 1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9c 8b       	std	Y+20, r25	; 0x14
    1fe8:	8b 8b       	std	Y+19, r24	; 0x13
    1fea:	3f c0       	rjmp	.+126    	; 0x206a <LCD_Init+0x2b8>
	else if (__tmp > 65535)
    1fec:	6d 89       	ldd	r22, Y+21	; 0x15
    1fee:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	3f ef       	ldi	r19, 0xFF	; 255
    1ff8:	4f e7       	ldi	r20, 0x7F	; 127
    1ffa:	57 e4       	ldi	r21, 0x47	; 71
    1ffc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2000:	18 16       	cp	r1, r24
    2002:	4c f5       	brge	.+82     	; 0x2056 <LCD_Init+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2004:	69 8d       	ldd	r22, Y+25	; 0x19
    2006:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2008:	8b 8d       	ldd	r24, Y+27	; 0x1b
    200a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e2       	ldi	r20, 0x20	; 32
    2012:	51 e4       	ldi	r21, 0x41	; 65
    2014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9c 8b       	std	Y+20, r25	; 0x14
    202a:	8b 8b       	std	Y+19, r24	; 0x13
    202c:	0f c0       	rjmp	.+30     	; 0x204c <LCD_Init+0x29a>
    202e:	8c e2       	ldi	r24, 0x2C	; 44
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	9a 8b       	std	Y+18, r25	; 0x12
    2034:	89 8b       	std	Y+17, r24	; 0x11
    2036:	89 89       	ldd	r24, Y+17	; 0x11
    2038:	9a 89       	ldd	r25, Y+18	; 0x12
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <LCD_Init+0x288>
    203e:	9a 8b       	std	Y+18, r25	; 0x12
    2040:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2042:	8b 89       	ldd	r24, Y+19	; 0x13
    2044:	9c 89       	ldd	r25, Y+20	; 0x14
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	9c 8b       	std	Y+20, r25	; 0x14
    204a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204c:	8b 89       	ldd	r24, Y+19	; 0x13
    204e:	9c 89       	ldd	r25, Y+20	; 0x14
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	69 f7       	brne	.-38     	; 0x202e <LCD_Init+0x27c>
    2054:	14 c0       	rjmp	.+40     	; 0x207e <LCD_Init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2056:	6d 89       	ldd	r22, Y+21	; 0x15
    2058:	7e 89       	ldd	r23, Y+22	; 0x16
    205a:	8f 89       	ldd	r24, Y+23	; 0x17
    205c:	98 8d       	ldd	r25, Y+24	; 0x18
    205e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9c 8b       	std	Y+20, r25	; 0x14
    2068:	8b 8b       	std	Y+19, r24	; 0x13
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	98 8b       	std	Y+16, r25	; 0x10
    2070:	8f 87       	std	Y+15, r24	; 0x0f
    2072:	8f 85       	ldd	r24, Y+15	; 0x0f
    2074:	98 89       	ldd	r25, Y+16	; 0x10
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <LCD_Init+0x2c4>
    207a:	98 8b       	std	Y+16, r25	; 0x10
    207c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	LCD_SendCommand (0b00000001);
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	a0 e4       	ldi	r26, 0x40	; 64
    208a:	b0 e4       	ldi	r27, 0x40	; 64
    208c:	8b 87       	std	Y+11, r24	; 0x0b
    208e:	9c 87       	std	Y+12, r25	; 0x0c
    2090:	ad 87       	std	Y+13, r26	; 0x0d
    2092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2094:	6b 85       	ldd	r22, Y+11	; 0x0b
    2096:	7c 85       	ldd	r23, Y+12	; 0x0c
    2098:	8d 85       	ldd	r24, Y+13	; 0x0d
    209a:	9e 85       	ldd	r25, Y+14	; 0x0e
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e8       	ldi	r19, 0x80	; 128
    20a0:	4b e3       	ldi	r20, 0x3B	; 59
    20a2:	55 e4       	ldi	r21, 0x45	; 69
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	8f 83       	std	Y+7, r24	; 0x07
    20ae:	98 87       	std	Y+8, r25	; 0x08
    20b0:	a9 87       	std	Y+9, r26	; 0x09
    20b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b4:	6f 81       	ldd	r22, Y+7	; 0x07
    20b6:	78 85       	ldd	r23, Y+8	; 0x08
    20b8:	89 85       	ldd	r24, Y+9	; 0x09
    20ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <LCD_Init+0x324>
		__ticks = 1;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	3f c0       	rjmp	.+126    	; 0x2154 <LCD_Init+0x3a2>
	else if (__tmp > 65535)
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	78 85       	ldd	r23, Y+8	; 0x08
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	57 e4       	ldi	r21, 0x47	; 71
    20e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ea:	18 16       	cp	r1, r24
    20ec:	4c f5       	brge	.+82     	; 0x2140 <LCD_Init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9e 83       	std	Y+6, r25	; 0x06
    2114:	8d 83       	std	Y+5, r24	; 0x05
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <LCD_Init+0x384>
    2118:	8c e2       	ldi	r24, 0x2C	; 44
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	9c 83       	std	Y+4, r25	; 0x04
    211e:	8b 83       	std	Y+3, r24	; 0x03
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_Init+0x372>
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	69 f7       	brne	.-38     	; 0x2118 <LCD_Init+0x366>
    213e:	14 c0       	rjmp	.+40     	; 0x2168 <LCD_Init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	6f 81       	ldd	r22, Y+7	; 0x07
    2142:	78 85       	ldd	r23, Y+8	; 0x08
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	9a 85       	ldd	r25, Y+10	; 0x0a
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9e 83       	std	Y+6, r25	; 0x06
    2152:	8d 83       	std	Y+5, r24	; 0x05
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <LCD_Init+0x3ae>
    2164:	9a 83       	std	Y+2, r25	; 0x02
    2166:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    2168:	e8 96       	adiw	r28, 0x38	; 56
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <LCD_SendCommand>:

 void LCD_SendCommand(u8 command)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	2f 97       	sbiw	r28, 0x0f	; 15
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    2190:	a5 e3       	ldi	r26, 0x35	; 53
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e5 e3       	ldi	r30, 0x35	; 53
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	8f 7d       	andi	r24, 0xDF	; 223
    219c:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    219e:	a5 e3       	ldi	r26, 0x35	; 53
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e5 e3       	ldi	r30, 0x35	; 53
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	8f 7b       	andi	r24, 0xBF	; 191
    21aa:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RS_Pin);
    21ac:	a5 e3       	ldi	r26, 0x35	; 53
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e5 e3       	ldi	r30, 0x35	; 53
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8f 77       	andi	r24, 0x7F	; 127
    21b8:	8c 93       	st	X, r24

	LCD_DataPORT= command;
    21ba:	e8 e3       	ldi	r30, 0x38	; 56
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c0:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    21c2:	a5 e3       	ldi	r26, 0x35	; 53
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e5 e3       	ldi	r30, 0x35	; 53
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	80 62       	ori	r24, 0x20	; 32
    21ce:	8c 93       	st	X, r24
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a0 e0       	ldi	r26, 0x00	; 0
    21d6:	b0 e4       	ldi	r27, 0x40	; 64
    21d8:	8b 87       	std	Y+11, r24	; 0x0b
    21da:	9c 87       	std	Y+12, r25	; 0x0c
    21dc:	ad 87       	std	Y+13, r26	; 0x0d
    21de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e8       	ldi	r19, 0x80	; 128
    21ec:	4b e3       	ldi	r20, 0x3B	; 59
    21ee:	55 e4       	ldi	r21, 0x45	; 69
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8f 83       	std	Y+7, r24	; 0x07
    21fa:	98 87       	std	Y+8, r25	; 0x08
    21fc:	a9 87       	std	Y+9, r26	; 0x09
    21fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2200:	6f 81       	ldd	r22, Y+7	; 0x07
    2202:	78 85       	ldd	r23, Y+8	; 0x08
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	9a 85       	ldd	r25, Y+10	; 0x0a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <LCD_SendCommand+0xa8>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <LCD_SendCommand+0x126>
	else if (__tmp > 65535)
    2222:	6f 81       	ldd	r22, Y+7	; 0x07
    2224:	78 85       	ldd	r23, Y+8	; 0x08
    2226:	89 85       	ldd	r24, Y+9	; 0x09
    2228:	9a 85       	ldd	r25, Y+10	; 0x0a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <LCD_SendCommand+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	6b 85       	ldd	r22, Y+11	; 0x0b
    223c:	7c 85       	ldd	r23, Y+12	; 0x0c
    223e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2240:	9e 85       	ldd	r25, Y+14	; 0x0e
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <LCD_SendCommand+0x108>
    2264:	8c e2       	ldi	r24, 0x2C	; 44
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	9c 83       	std	Y+4, r25	; 0x04
    226a:	8b 83       	std	Y+3, r24	; 0x03
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <LCD_SendCommand+0xf6>
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <LCD_SendCommand+0xea>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <LCD_SendCommand+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <LCD_SendCommand+0x132>
    22b0:	9a 83       	std	Y+2, r25	; 0x02
    22b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    22b4:	a5 e3       	ldi	r26, 0x35	; 53
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e5 e3       	ldi	r30, 0x35	; 53
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	8f 7d       	andi	r24, 0xDF	; 223
    22c0:	8c 93       	st	X, r24
}
    22c2:	2f 96       	adiw	r28, 0x0f	; 15
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <LCD_Clear>:

 void LCD_Clear (void)
 {
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
	 LCD_SendCommand(1);
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
 }
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <LCD_WriteData>:

 void LCD_WriteData(u8 data)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	2f 97       	sbiw	r28, 0x0f	; 15
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    22fe:	a5 e3       	ldi	r26, 0x35	; 53
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e5 e3       	ldi	r30, 0x35	; 53
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	8f 7d       	andi	r24, 0xDF	; 223
    230a:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    230c:	a5 e3       	ldi	r26, 0x35	; 53
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e5 e3       	ldi	r30, 0x35	; 53
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	8f 7b       	andi	r24, 0xBF	; 191
    2318:	8c 93       	st	X, r24
	SETBIT (LCD_ControlPORT, RS_Pin);
    231a:	a5 e3       	ldi	r26, 0x35	; 53
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e5 e3       	ldi	r30, 0x35	; 53
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	80 68       	ori	r24, 0x80	; 128
    2326:	8c 93       	st	X, r24

	LCD_DataPORT= data;
    2328:	e8 e3       	ldi	r30, 0x38	; 56
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	8f 85       	ldd	r24, Y+15	; 0x0f
    232e:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    2330:	a5 e3       	ldi	r26, 0x35	; 53
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e5 e3       	ldi	r30, 0x35	; 53
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	80 62       	ori	r24, 0x20	; 32
    233c:	8c 93       	st	X, r24
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a0 e0       	ldi	r26, 0x00	; 0
    2344:	b0 e4       	ldi	r27, 0x40	; 64
    2346:	8b 87       	std	Y+11, r24	; 0x0b
    2348:	9c 87       	std	Y+12, r25	; 0x0c
    234a:	ad 87       	std	Y+13, r26	; 0x0d
    234c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2350:	7c 85       	ldd	r23, Y+12	; 0x0c
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e8       	ldi	r19, 0x80	; 128
    235a:	4b e3       	ldi	r20, 0x3B	; 59
    235c:	55 e4       	ldi	r21, 0x45	; 69
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	8f 83       	std	Y+7, r24	; 0x07
    2368:	98 87       	std	Y+8, r25	; 0x08
    236a:	a9 87       	std	Y+9, r26	; 0x09
    236c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    236e:	6f 81       	ldd	r22, Y+7	; 0x07
    2370:	78 85       	ldd	r23, Y+8	; 0x08
    2372:	89 85       	ldd	r24, Y+9	; 0x09
    2374:	9a 85       	ldd	r25, Y+10	; 0x0a
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e8       	ldi	r20, 0x80	; 128
    237c:	5f e3       	ldi	r21, 0x3F	; 63
    237e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2382:	88 23       	and	r24, r24
    2384:	2c f4       	brge	.+10     	; 0x2390 <LCD_WriteData+0xa8>
		__ticks = 1;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
    238e:	3f c0       	rjmp	.+126    	; 0x240e <LCD_WriteData+0x126>
	else if (__tmp > 65535)
    2390:	6f 81       	ldd	r22, Y+7	; 0x07
    2392:	78 85       	ldd	r23, Y+8	; 0x08
    2394:	89 85       	ldd	r24, Y+9	; 0x09
    2396:	9a 85       	ldd	r25, Y+10	; 0x0a
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	3f ef       	ldi	r19, 0xFF	; 255
    239c:	4f e7       	ldi	r20, 0x7F	; 127
    239e:	57 e4       	ldi	r21, 0x47	; 71
    23a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a4:	18 16       	cp	r1, r24
    23a6:	4c f5       	brge	.+82     	; 0x23fa <LCD_WriteData+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e2       	ldi	r20, 0x20	; 32
    23b6:	51 e4       	ldi	r21, 0x41	; 65
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <LCD_WriteData+0x108>
    23d2:	8c e2       	ldi	r24, 0x2C	; 44
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	8b 83       	std	Y+3, r24	; 0x03
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_WriteData+0xf6>
    23e2:	9c 83       	std	Y+4, r25	; 0x04
    23e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	9e 83       	std	Y+6, r25	; 0x06
    23ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f0:	8d 81       	ldd	r24, Y+5	; 0x05
    23f2:	9e 81       	ldd	r25, Y+6	; 0x06
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	69 f7       	brne	.-38     	; 0x23d2 <LCD_WriteData+0xea>
    23f8:	14 c0       	rjmp	.+40     	; 0x2422 <LCD_WriteData+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_WriteData+0x132>
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    2422:	a5 e3       	ldi	r26, 0x35	; 53
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e5 e3       	ldi	r30, 0x35	; 53
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	8f 7d       	andi	r24, 0xDF	; 223
    242e:	8c 93       	st	X, r24
}
    2430:	2f 96       	adiw	r28, 0x0f	; 15
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <LCD_WriteString>:

void LCD_WriteString(u8* pu8StringCpy)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	61 97       	sbiw	r28, 0x11	; 17
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	99 8b       	std	Y+17, r25	; 0x11
    2458:	88 8b       	std	Y+16, r24	; 0x10

  /* Local loop index */
  u8 u8Index = 0;
    245a:	1f 86       	std	Y+15, r1	; 0x0f
    245c:	80 c0       	rjmp	.+256    	; 0x255e <LCD_WriteString+0x11c>

  while (pu8StringCpy [u8Index] != 0)
  {
    /* Write Character on LCD */
    LCD_WriteData (pu8StringCpy [u8Index]);
    245e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	88 89       	ldd	r24, Y+16	; 0x10
    2466:	99 89       	ldd	r25, Y+17	; 0x11
    2468:	fc 01       	movw	r30, r24
    246a:	e2 0f       	add	r30, r18
    246c:	f3 1f       	adc	r31, r19
    246e:	80 81       	ld	r24, Z
    2470:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_WriteData>

    /* Increment local loop index */
    u8Index++;
    2474:	8f 85       	ldd	r24, Y+15	; 0x0f
    2476:	8f 5f       	subi	r24, 0xFF	; 255
    2478:	8f 87       	std	Y+15, r24	; 0x0f
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a0 e0       	ldi	r26, 0x00	; 0
    2480:	b0 e4       	ldi	r27, 0x40	; 64
    2482:	8b 87       	std	Y+11, r24	; 0x0b
    2484:	9c 87       	std	Y+12, r25	; 0x0c
    2486:	ad 87       	std	Y+13, r26	; 0x0d
    2488:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248a:	6b 85       	ldd	r22, Y+11	; 0x0b
    248c:	7c 85       	ldd	r23, Y+12	; 0x0c
    248e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2490:	9e 85       	ldd	r25, Y+14	; 0x0e
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e8       	ldi	r19, 0x80	; 128
    2496:	4b e3       	ldi	r20, 0x3B	; 59
    2498:	55 e4       	ldi	r21, 0x45	; 69
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	8f 83       	std	Y+7, r24	; 0x07
    24a4:	98 87       	std	Y+8, r25	; 0x08
    24a6:	a9 87       	std	Y+9, r26	; 0x09
    24a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24aa:	6f 81       	ldd	r22, Y+7	; 0x07
    24ac:	78 85       	ldd	r23, Y+8	; 0x08
    24ae:	89 85       	ldd	r24, Y+9	; 0x09
    24b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	2c f4       	brge	.+10     	; 0x24cc <LCD_WriteString+0x8a>
		__ticks = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	3f c0       	rjmp	.+126    	; 0x254a <LCD_WriteString+0x108>
	else if (__tmp > 65535)
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	4c f5       	brge	.+82     	; 0x2536 <LCD_WriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	51 e4       	ldi	r21, 0x41	; 65
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
    250c:	0f c0       	rjmp	.+30     	; 0x252c <LCD_WriteString+0xea>
    250e:	8c e2       	ldi	r24, 0x2C	; 44
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	9c 83       	std	Y+4, r25	; 0x04
    2514:	8b 83       	std	Y+3, r24	; 0x03
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <LCD_WriteString+0xd8>
    251e:	9c 83       	std	Y+4, r25	; 0x04
    2520:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252c:	8d 81       	ldd	r24, Y+5	; 0x05
    252e:	9e 81       	ldd	r25, Y+6	; 0x06
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	69 f7       	brne	.-38     	; 0x250e <LCD_WriteString+0xcc>
    2534:	14 c0       	rjmp	.+40     	; 0x255e <LCD_WriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2536:	6f 81       	ldd	r22, Y+7	; 0x07
    2538:	78 85       	ldd	r23, Y+8	; 0x08
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	9a 83       	std	Y+2, r25	; 0x02
    2550:	89 83       	std	Y+1, r24	; 0x01
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	9a 81       	ldd	r25, Y+2	; 0x02
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_WriteString+0x114>
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	89 83       	std	Y+1, r24	; 0x01
{

  /* Local loop index */
  u8 u8Index = 0;

  while (pu8StringCpy [u8Index] != 0)
    255e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	88 89       	ldd	r24, Y+16	; 0x10
    2566:	99 89       	ldd	r25, Y+17	; 0x11
    2568:	fc 01       	movw	r30, r24
    256a:	e2 0f       	add	r30, r18
    256c:	f3 1f       	adc	r31, r19
    256e:	80 81       	ld	r24, Z
    2570:	88 23       	and	r24, r24
    2572:	09 f0       	breq	.+2      	; 0x2576 <LCD_WriteString+0x134>
    2574:	74 cf       	rjmp	.-280    	; 0x245e <LCD_WriteString+0x1c>

    /* Delay to let the LCD show the character */
    _delay_ms(2);
  }

}
    2576:	61 96       	adiw	r28, 0x11	; 17
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <LCD_Goto_xy>:

void LCD_Goto_xy(u8 x, u8 y)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	64 97       	sbiw	r28, 0x14	; 20
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	8b 8b       	std	Y+19, r24	; 0x13
    259e:	6c 8b       	std	Y+20, r22	; 0x14
	u8 firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
    25a0:	80 e8       	ldi	r24, 0x80	; 128
    25a2:	8f 87       	std	Y+15, r24	; 0x0f
    25a4:	80 ec       	ldi	r24, 0xC0	; 192
    25a6:	88 8b       	std	Y+16, r24	; 0x10
    25a8:	84 e9       	ldi	r24, 0x94	; 148
    25aa:	89 8b       	std	Y+17, r24	; 0x11
    25ac:	84 ed       	ldi	r24, 0xD4	; 212
    25ae:	8a 8b       	std	Y+18, r24	; 0x12
	LCD_SendCommand (firstcharAdr[y-1] + x - 1);
    25b0:	8c 89       	ldd	r24, Y+20	; 0x14
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9c 01       	movw	r18, r24
    25b8:	21 50       	subi	r18, 0x01	; 1
    25ba:	30 40       	sbci	r19, 0x00	; 0
    25bc:	ce 01       	movw	r24, r28
    25be:	0f 96       	adiw	r24, 0x0f	; 15
    25c0:	fc 01       	movw	r30, r24
    25c2:	e2 0f       	add	r30, r18
    25c4:	f3 1f       	adc	r31, r19
    25c6:	90 81       	ld	r25, Z
    25c8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ca:	89 0f       	add	r24, r25
    25cc:	81 50       	subi	r24, 0x01	; 1
    25ce:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 e8       	ldi	r26, 0x80	; 128
    25d8:	bf e3       	ldi	r27, 0x3F	; 63
    25da:	8b 87       	std	Y+11, r24	; 0x0b
    25dc:	9c 87       	std	Y+12, r25	; 0x0c
    25de:	ad 87       	std	Y+13, r26	; 0x0d
    25e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e8       	ldi	r19, 0x80	; 128
    25ee:	4b e3       	ldi	r20, 0x3B	; 59
    25f0:	55 e4       	ldi	r21, 0x45	; 69
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	8f 83       	std	Y+7, r24	; 0x07
    25fc:	98 87       	std	Y+8, r25	; 0x08
    25fe:	a9 87       	std	Y+9, r26	; 0x09
    2600:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2602:	6f 81       	ldd	r22, Y+7	; 0x07
    2604:	78 85       	ldd	r23, Y+8	; 0x08
    2606:	89 85       	ldd	r24, Y+9	; 0x09
    2608:	9a 85       	ldd	r25, Y+10	; 0x0a
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	2c f4       	brge	.+10     	; 0x2624 <LCD_Goto_xy+0x9c>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
    2622:	3f c0       	rjmp	.+126    	; 0x26a2 <LCD_Goto_xy+0x11a>
	else if (__tmp > 65535)
    2624:	6f 81       	ldd	r22, Y+7	; 0x07
    2626:	78 85       	ldd	r23, Y+8	; 0x08
    2628:	89 85       	ldd	r24, Y+9	; 0x09
    262a:	9a 85       	ldd	r25, Y+10	; 0x0a
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	4f e7       	ldi	r20, 0x7F	; 127
    2632:	57 e4       	ldi	r21, 0x47	; 71
    2634:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2638:	18 16       	cp	r1, r24
    263a:	4c f5       	brge	.+82     	; 0x268e <LCD_Goto_xy+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	6b 85       	ldd	r22, Y+11	; 0x0b
    263e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2640:	8d 85       	ldd	r24, Y+13	; 0x0d
    2642:	9e 85       	ldd	r25, Y+14	; 0x0e
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e2       	ldi	r20, 0x20	; 32
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <LCD_Goto_xy+0xfc>
    2666:	8c e2       	ldi	r24, 0x2C	; 44
    2668:	91 e0       	ldi	r25, 0x01	; 1
    266a:	9c 83       	std	Y+4, r25	; 0x04
    266c:	8b 83       	std	Y+3, r24	; 0x03
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <LCD_Goto_xy+0xea>
    2676:	9c 83       	std	Y+4, r25	; 0x04
    2678:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	69 f7       	brne	.-38     	; 0x2666 <LCD_Goto_xy+0xde>
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <LCD_Goto_xy+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268e:	6f 81       	ldd	r22, Y+7	; 0x07
    2690:	78 85       	ldd	r23, Y+8	; 0x08
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	9e 81       	ldd	r25, Y+6	; 0x06
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	9a 81       	ldd	r25, Y+2	; 0x02
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <LCD_Goto_xy+0x126>
    26b2:	9a 83       	std	Y+2, r25	; 0x02
    26b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    26b6:	64 96       	adiw	r28, 0x14	; 20
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <LCD_MoveCursorLeft>:

void LCD_MoveCursorLeft (void)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	2e 97       	sbiw	r28, 0x0e	; 14
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_LEFT);
    26dc:	80 e1       	ldi	r24, 0x10	; 16
    26de:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a0 e8       	ldi	r26, 0x80	; 128
    26e8:	bf e3       	ldi	r27, 0x3F	; 63
    26ea:	8b 87       	std	Y+11, r24	; 0x0b
    26ec:	9c 87       	std	Y+12, r25	; 0x0c
    26ee:	ad 87       	std	Y+13, r26	; 0x0d
    26f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e8       	ldi	r19, 0x80	; 128
    26fe:	4b e3       	ldi	r20, 0x3B	; 59
    2700:	55 e4       	ldi	r21, 0x45	; 69
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8f 83       	std	Y+7, r24	; 0x07
    270c:	98 87       	std	Y+8, r25	; 0x08
    270e:	a9 87       	std	Y+9, r26	; 0x09
    2710:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2712:	6f 81       	ldd	r22, Y+7	; 0x07
    2714:	78 85       	ldd	r23, Y+8	; 0x08
    2716:	89 85       	ldd	r24, Y+9	; 0x09
    2718:	9a 85       	ldd	r25, Y+10	; 0x0a
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <LCD_MoveCursorLeft+0x6c>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9e 83       	std	Y+6, r25	; 0x06
    2730:	8d 83       	std	Y+5, r24	; 0x05
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <LCD_MoveCursorLeft+0xea>
	else if (__tmp > 65535)
    2734:	6f 81       	ldd	r22, Y+7	; 0x07
    2736:	78 85       	ldd	r23, Y+8	; 0x08
    2738:	89 85       	ldd	r24, Y+9	; 0x09
    273a:	9a 85       	ldd	r25, Y+10	; 0x0a
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <LCD_MoveCursorLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	6b 85       	ldd	r22, Y+11	; 0x0b
    274e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2750:	8d 85       	ldd	r24, Y+13	; 0x0d
    2752:	9e 85       	ldd	r25, Y+14	; 0x0e
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9e 83       	std	Y+6, r25	; 0x06
    2772:	8d 83       	std	Y+5, r24	; 0x05
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <LCD_MoveCursorLeft+0xcc>
    2776:	8c e2       	ldi	r24, 0x2C	; 44
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	9c 83       	std	Y+4, r25	; 0x04
    277c:	8b 83       	std	Y+3, r24	; 0x03
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <LCD_MoveCursorLeft+0xba>
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	9e 81       	ldd	r25, Y+6	; 0x06
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <LCD_MoveCursorLeft+0xae>
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <LCD_MoveCursorLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6f 81       	ldd	r22, Y+7	; 0x07
    27a0:	78 85       	ldd	r23, Y+8	; 0x08
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	9e 81       	ldd	r25, Y+6	; 0x06
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <LCD_MoveCursorLeft+0xf6>
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    27c6:	2e 96       	adiw	r28, 0x0e	; 14
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <LCD_MoveCursorRight>:

//*******************************************************************************
void LCD_MoveCursorRight (void)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	2e 97       	sbiw	r28, 0x0e	; 14
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_RIGHT);
    27ec:	84 e1       	ldi	r24, 0x14	; 20
    27ee:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e8       	ldi	r26, 0x80	; 128
    27f8:	bf e3       	ldi	r27, 0x3F	; 63
    27fa:	8b 87       	std	Y+11, r24	; 0x0b
    27fc:	9c 87       	std	Y+12, r25	; 0x0c
    27fe:	ad 87       	std	Y+13, r26	; 0x0d
    2800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	6b 85       	ldd	r22, Y+11	; 0x0b
    2804:	7c 85       	ldd	r23, Y+12	; 0x0c
    2806:	8d 85       	ldd	r24, Y+13	; 0x0d
    2808:	9e 85       	ldd	r25, Y+14	; 0x0e
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e8       	ldi	r19, 0x80	; 128
    280e:	4b e3       	ldi	r20, 0x3B	; 59
    2810:	55 e4       	ldi	r21, 0x45	; 69
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	8f 83       	std	Y+7, r24	; 0x07
    281c:	98 87       	std	Y+8, r25	; 0x08
    281e:	a9 87       	std	Y+9, r26	; 0x09
    2820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2822:	6f 81       	ldd	r22, Y+7	; 0x07
    2824:	78 85       	ldd	r23, Y+8	; 0x08
    2826:	89 85       	ldd	r24, Y+9	; 0x09
    2828:	9a 85       	ldd	r25, Y+10	; 0x0a
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <LCD_MoveCursorRight+0x6c>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	8d 83       	std	Y+5, r24	; 0x05
    2842:	3f c0       	rjmp	.+126    	; 0x28c2 <LCD_MoveCursorRight+0xea>
	else if (__tmp > 65535)
    2844:	6f 81       	ldd	r22, Y+7	; 0x07
    2846:	78 85       	ldd	r23, Y+8	; 0x08
    2848:	89 85       	ldd	r24, Y+9	; 0x09
    284a:	9a 85       	ldd	r25, Y+10	; 0x0a
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f5       	brge	.+82     	; 0x28ae <LCD_MoveCursorRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	6b 85       	ldd	r22, Y+11	; 0x0b
    285e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2860:	8d 85       	ldd	r24, Y+13	; 0x0d
    2862:	9e 85       	ldd	r25, Y+14	; 0x0e
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <LCD_MoveCursorRight+0xcc>
    2886:	8c e2       	ldi	r24, 0x2C	; 44
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	9c 83       	std	Y+4, r25	; 0x04
    288c:	8b 83       	std	Y+3, r24	; 0x03
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	9c 81       	ldd	r25, Y+4	; 0x04
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <LCD_MoveCursorRight+0xba>
    2896:	9c 83       	std	Y+4, r25	; 0x04
    2898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	8d 81       	ldd	r24, Y+5	; 0x05
    289c:	9e 81       	ldd	r25, Y+6	; 0x06
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9e 83       	std	Y+6, r25	; 0x06
    28a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	9e 81       	ldd	r25, Y+6	; 0x06
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f7       	brne	.-38     	; 0x2886 <LCD_MoveCursorRight+0xae>
    28ac:	14 c0       	rjmp	.+40     	; 0x28d6 <LCD_MoveCursorRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	6f 81       	ldd	r22, Y+7	; 0x07
    28b0:	78 85       	ldd	r23, Y+8	; 0x08
    28b2:	89 85       	ldd	r24, Y+9	; 0x09
    28b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9e 83       	std	Y+6, r25	; 0x06
    28c0:	8d 83       	std	Y+5, r24	; 0x05
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <LCD_MoveCursorRight+0xf6>
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    28d6:	2e 96       	adiw	r28, 0x0e	; 14
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	08 95       	ret

000028e8 <LCD_WriteString_xy>:

void LCD_WriteString_xy(u8 x, u8 y, u8* pu8StringCpy)
{
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	00 d0       	rcall	.+0      	; 0x28ee <LCD_WriteString_xy+0x6>
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <LCD_WriteString_xy+0x8>
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	6a 83       	std	Y+2, r22	; 0x02
    28f8:	5c 83       	std	Y+4, r21	; 0x04
    28fa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_Goto_xy(x,y);
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2900:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_Goto_xy>
	LCD_WriteString(pu8StringCpy);
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	9c 81       	ldd	r25, Y+4	; 0x04
    2908:	0e 94 21 12 	call	0x2442	; 0x2442 <LCD_WriteString>
}
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <LCD_WriteInteger_xy>:

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    291a:	ef 92       	push	r14
    291c:	ff 92       	push	r15
    291e:	0f 93       	push	r16
    2920:	1f 93       	push	r17
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	29 97       	sbiw	r28, 0x09	; 9
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
    2936:	8b 83       	std	Y+3, r24	; 0x03
    2938:	6c 83       	std	Y+4, r22	; 0x04
    293a:	5e 83       	std	Y+6, r21	; 0x06
    293c:	4d 83       	std	Y+5, r20	; 0x05
    293e:	2f 83       	std	Y+7, r18	; 0x07
	u8 StringToDisplay[NumberOfDigits];
	itoa (IntegerToDisplay, StringToDisplay, 10);
	LCD_WriteString_xy (x, y, StringToDisplay);
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)

}
    2940:	0d b7       	in	r16, 0x3d	; 61
    2942:	1e b7       	in	r17, 0x3e	; 62
	LCD_Goto_xy(x,y);
	LCD_WriteString(pu8StringCpy);
}

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    2944:	8d b7       	in	r24, 0x3d	; 61
    2946:	9e b7       	in	r25, 0x3e	; 62
    2948:	7c 01       	movw	r14, r24
	u8 StringToDisplay[NumberOfDigits];
    294a:	8f 81       	ldd	r24, Y+7	; 0x07
    294c:	88 2f       	mov	r24, r24
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	2d b7       	in	r18, 0x3d	; 61
    2952:	3e b7       	in	r19, 0x3e	; 62
    2954:	28 1b       	sub	r18, r24
    2956:	39 0b       	sbc	r19, r25
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	3e bf       	out	0x3e, r19	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	2d bf       	out	0x3d, r18	; 61
    2962:	8d b7       	in	r24, 0x3d	; 61
    2964:	9e b7       	in	r25, 0x3e	; 62
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	99 87       	std	Y+9, r25	; 0x09
    296a:	88 87       	std	Y+8, r24	; 0x08
    296c:	88 85       	ldd	r24, Y+8	; 0x08
    296e:	99 85       	ldd	r25, Y+9	; 0x09
    2970:	00 96       	adiw	r24, 0x00	; 0
    2972:	99 87       	std	Y+9, r25	; 0x09
    2974:	88 87       	std	Y+8, r24	; 0x08
    2976:	28 85       	ldd	r18, Y+8	; 0x08
    2978:	39 85       	ldd	r19, Y+9	; 0x09
    297a:	3a 83       	std	Y+2, r19	; 0x02
    297c:	29 83       	std	Y+1, r18	; 0x01
	itoa (IntegerToDisplay, StringToDisplay, 10);
    297e:	8d 81       	ldd	r24, Y+5	; 0x05
    2980:	9e 81       	ldd	r25, Y+6	; 0x06
    2982:	29 81       	ldd	r18, Y+1	; 0x01
    2984:	3a 81       	ldd	r19, Y+2	; 0x02
    2986:	b9 01       	movw	r22, r18
    2988:	4a e0       	ldi	r20, 0x0A	; 10
    298a:	50 e0       	ldi	r21, 0x00	; 0
    298c:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <itoa>
	LCD_WriteString_xy (x, y, StringToDisplay);
    2990:	29 81       	ldd	r18, Y+1	; 0x01
    2992:	3a 81       	ldd	r19, Y+2	; 0x02
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	6c 81       	ldd	r22, Y+4	; 0x04
    2998:	a9 01       	movw	r20, r18
    299a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_WriteString_xy>
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)
    299e:	80 e6       	ldi	r24, 0x60	; 96
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	0e 94 21 12 	call	0x2442	; 0x2442 <LCD_WriteString>
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	fe be       	out	0x3e, r15	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	ed be       	out	0x3d, r14	; 61

}
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	1e bf       	out	0x3e, r17	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	0d bf       	out	0x3d, r16	; 61
    29ba:	29 96       	adiw	r28, 0x09	; 9
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	1f 91       	pop	r17
    29cc:	0f 91       	pop	r16
    29ce:	ff 90       	pop	r15
    29d0:	ef 90       	pop	r14
    29d2:	08 95       	ret

000029d4 <main>:
u8  Compare_Flex_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data);
u8  Compare_Accs_Data ( ADXL345_Data * Ptr_Accs_Readings, ADXL345_Data * Ptr_Acss_Stored_Data);
/*-------------------------------------------------------------*/

int main(void)
{
    29d4:	0f 93       	push	r16
    29d6:	1f 93       	push	r17
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	c8 54       	subi	r28, 0x48	; 72
    29e2:	d0 40       	sbci	r29, 0x00	; 0
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
//	DDRA=0x00;  "Reserved for ADCs (Flex Sensors)"
	DDRB=0xFF;
    29ee:	e7 e3       	ldi	r30, 0x37	; 55
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	8f ef       	ldi	r24, 0xFF	; 255
    29f4:	80 83       	st	Z, r24
	DDRC|= (1<<5) | (1<<6) | (1<<7);
    29f6:	a4 e3       	ldi	r26, 0x34	; 52
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e4 e3       	ldi	r30, 0x34	; 52
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	80 6e       	ori	r24, 0xE0	; 224
    2a02:	8c 93       	st	X, r24

	LCD_Init();
    2a04:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <LCD_Init>
	UART_init();
    2a08:	0e 94 4f 1a 	call	0x349e	; 0x349e <UART_init>
	TWI_Init(I2C_PRESCALE1,I2C_intDisable,F_ADXL,0x01);
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	60 e0       	ldi	r22, 0x00	; 0
    2a10:	20 e8       	ldi	r18, 0x80	; 128
    2a12:	3a e1       	ldi	r19, 0x1A	; 26
    2a14:	46 e0       	ldi	r20, 0x06	; 6
    2a16:	50 e0       	ldi	r21, 0x00	; 0
    2a18:	01 e0       	ldi	r16, 0x01	; 1
    2a1a:	0e 94 af 0c 	call	0x195e	; 0x195e <TWI_Init>
	Accelerometor_init(ADXL345_MessureMode,ADXL345_ALTERNATIVE_ADDRESS);
    2a1e:	88 e0       	ldi	r24, 0x08	; 8
    2a20:	63 e5       	ldi	r22, 0x53	; 83
    2a22:	0e 94 6a 07 	call	0xed4	; 0xed4 <Accelerometor_init>
	DFPlayer_init();
    2a26:	0e 94 0f 0c 	call	0x181e	; 0x181e <DFPlayer_init>
	ADC_init();
    2a2a:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>

	LCD_WriteString("Testing LCD");
    2a2e:	82 e6       	ldi	r24, 0x62	; 98
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 21 12 	call	0x2442	; 0x2442 <LCD_WriteString>
    2a36:	fe 01       	movw	r30, r28
    2a38:	ed 5b       	subi	r30, 0xBD	; 189
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	aa e7       	ldi	r26, 0x7A	; 122
    2a42:	b4 e4       	ldi	r27, 0x44	; 68
    2a44:	80 83       	st	Z, r24
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	a2 83       	std	Z+2, r26	; 0x02
    2a4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4c:	8e 01       	movw	r16, r28
    2a4e:	01 5c       	subi	r16, 0xC1	; 193
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	fe 01       	movw	r30, r28
    2a54:	ed 5b       	subi	r30, 0xBD	; 189
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	60 81       	ld	r22, Z
    2a5a:	71 81       	ldd	r23, Z+1	; 0x01
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e8       	ldi	r19, 0x80	; 128
    2a64:	4b e3       	ldi	r20, 0x3B	; 59
    2a66:	55 e4       	ldi	r21, 0x45	; 69
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	f8 01       	movw	r30, r16
    2a72:	80 83       	st	Z, r24
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	a2 83       	std	Z+2, r26	; 0x02
    2a78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ff 96       	adiw	r30, 0x3f	; 63
    2a7e:	60 81       	ld	r22, Z
    2a80:	71 81       	ldd	r23, Z+1	; 0x01
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	2c f4       	brge	.+10     	; 0x2aa0 <main+0xcc>
		__ticks = 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9e af       	std	Y+62, r25	; 0x3e
    2a9c:	8d af       	std	Y+61, r24	; 0x3d
    2a9e:	46 c0       	rjmp	.+140    	; 0x2b2c <main+0x158>
	else if (__tmp > 65535)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ff 96       	adiw	r30, 0x3f	; 63
    2aa4:	60 81       	ld	r22, Z
    2aa6:	71 81       	ldd	r23, Z+1	; 0x01
    2aa8:	82 81       	ldd	r24, Z+2	; 0x02
    2aaa:	93 81       	ldd	r25, Z+3	; 0x03
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	3f ef       	ldi	r19, 0xFF	; 255
    2ab0:	4f e7       	ldi	r20, 0x7F	; 127
    2ab2:	57 e4       	ldi	r21, 0x47	; 71
    2ab4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab8:	18 16       	cp	r1, r24
    2aba:	64 f5       	brge	.+88     	; 0x2b14 <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2abc:	fe 01       	movw	r30, r28
    2abe:	ed 5b       	subi	r30, 0xBD	; 189
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	60 81       	ld	r22, Z
    2ac4:	71 81       	ldd	r23, Z+1	; 0x01
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	93 81       	ldd	r25, Z+3	; 0x03
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e2       	ldi	r20, 0x20	; 32
    2ad0:	51 e4       	ldi	r21, 0x41	; 65
    2ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9e af       	std	Y+62, r25	; 0x3e
    2ae8:	8d af       	std	Y+61, r24	; 0x3d
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <main+0x136>
    2aec:	8c e2       	ldi	r24, 0x2C	; 44
    2aee:	91 e0       	ldi	r25, 0x01	; 1
    2af0:	9c af       	std	Y+60, r25	; 0x3c
    2af2:	8b af       	std	Y+59, r24	; 0x3b
    2af4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2af6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <main+0x124>
    2afc:	9c af       	std	Y+60, r25	; 0x3c
    2afe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b00:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b02:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	9e af       	std	Y+62, r25	; 0x3e
    2b08:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	69 f7       	brne	.-38     	; 0x2aec <main+0x118>
    2b12:	16 c0       	rjmp	.+44     	; 0x2b40 <main+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b14:	fe 01       	movw	r30, r28
    2b16:	ff 96       	adiw	r30, 0x3f	; 63
    2b18:	60 81       	ld	r22, Z
    2b1a:	71 81       	ldd	r23, Z+1	; 0x01
    2b1c:	82 81       	ldd	r24, Z+2	; 0x02
    2b1e:	93 81       	ldd	r25, Z+3	; 0x03
    2b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	9e af       	std	Y+62, r25	; 0x3e
    2b2a:	8d af       	std	Y+61, r24	; 0x3d
    2b2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b30:	9a af       	std	Y+58, r25	; 0x3a
    2b32:	89 af       	std	Y+57, r24	; 0x39
    2b34:	89 ad       	ldd	r24, Y+57	; 0x39
    2b36:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <main+0x164>
    2b3c:	9a af       	std	Y+58, r25	; 0x3a
    2b3e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	
    while(1)
    {
		Update_Flexs(&Sensors_Readings);
    2b40:	8c e1       	ldi	r24, 0x1C	; 28
    2b42:	92 e0       	ldi	r25, 0x02	; 2
    2b44:	0e 94 5e 18 	call	0x30bc	; 0x30bc <Update_Flexs>
		Accelerometor_ReadAxis(ADXL345_ALTERNATIVE_ADDRESS,&Live_Data);
    2b48:	22 e2       	ldi	r18, 0x22	; 34
    2b4a:	32 e0       	ldi	r19, 0x02	; 2
    2b4c:	83 e5       	ldi	r24, 0x53	; 83
    2b4e:	b9 01       	movw	r22, r18
    2b50:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Accelerometor_ReadAxis>
		if (  Compare_Flex_Data(&Sensors_Readings, &Stored_Data))
    2b54:	8c e1       	ldi	r24, 0x1C	; 28
    2b56:	92 e0       	ldi	r25, 0x02	; 2
    2b58:	2a e9       	ldi	r18, 0x9A	; 154
    2b5a:	31 e0       	ldi	r19, 0x01	; 1
    2b5c:	b9 01       	movw	r22, r18
    2b5e:	0e 94 b2 18 	call	0x3164	; 0x3164 <Compare_Flex_Data>
    2b62:	88 23       	and	r24, r24
    2b64:	69 f3       	breq	.-38     	; 0x2b40 <main+0x16c>
		{
			if ( (Compare_Accs_Data(&Live_Data , &Accs_Stored_Data)))
    2b66:	82 e2       	ldi	r24, 0x22	; 34
    2b68:	92 e0       	ldi	r25, 0x02	; 2
    2b6a:	24 ea       	ldi	r18, 0xA4	; 164
    2b6c:	31 e0       	ldi	r19, 0x01	; 1
    2b6e:	b9 01       	movw	r22, r18
    2b70:	0e 94 1b 19 	call	0x3236	; 0x3236 <Compare_Accs_Data>
    2b74:	88 23       	and	r24, r24
    2b76:	21 f3       	breq	.-56     	; 0x2b40 <main+0x16c>
			{
				switch(Word_index)
    2b78:	80 91 21 02 	lds	r24, 0x0221
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	29 96       	adiw	r28, 0x09	; 9
    2b82:	3f af       	std	Y+63, r19	; 0x3f
    2b84:	2e af       	std	Y+62, r18	; 0x3e
    2b86:	29 97       	sbiw	r28, 0x09	; 9
    2b88:	29 96       	adiw	r28, 0x09	; 9
    2b8a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b8e:	29 97       	sbiw	r28, 0x09	; 9
    2b90:	82 30       	cpi	r24, 0x02	; 2
    2b92:	91 05       	cpc	r25, r1
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <main+0x1c4>
    2b96:	a4 c0       	rjmp	.+328    	; 0x2ce0 <main+0x30c>
    2b98:	29 96       	adiw	r28, 0x09	; 9
    2b9a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b9c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b9e:	29 97       	sbiw	r28, 0x09	; 9
    2ba0:	e3 30       	cpi	r30, 0x03	; 3
    2ba2:	f1 05       	cpc	r31, r1
    2ba4:	44 f4       	brge	.+16     	; 0x2bb6 <main+0x1e2>
    2ba6:	29 96       	adiw	r28, 0x09	; 9
    2ba8:	2e ad       	ldd	r18, Y+62	; 0x3e
    2baa:	3f ad       	ldd	r19, Y+63	; 0x3f
    2bac:	29 97       	sbiw	r28, 0x09	; 9
    2bae:	21 30       	cpi	r18, 0x01	; 1
    2bb0:	31 05       	cpc	r19, r1
    2bb2:	91 f0       	breq	.+36     	; 0x2bd8 <main+0x204>
    2bb4:	c5 cf       	rjmp	.-118    	; 0x2b40 <main+0x16c>
    2bb6:	29 96       	adiw	r28, 0x09	; 9
    2bb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2bba:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bbc:	29 97       	sbiw	r28, 0x09	; 9
    2bbe:	83 30       	cpi	r24, 0x03	; 3
    2bc0:	91 05       	cpc	r25, r1
    2bc2:	09 f4       	brne	.+2      	; 0x2bc6 <main+0x1f2>
    2bc4:	11 c1       	rjmp	.+546    	; 0x2de8 <main+0x414>
    2bc6:	29 96       	adiw	r28, 0x09	; 9
    2bc8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bca:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bcc:	29 97       	sbiw	r28, 0x09	; 9
    2bce:	e4 30       	cpi	r30, 0x04	; 4
    2bd0:	f1 05       	cpc	r31, r1
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <main+0x202>
    2bd4:	8d c1       	rjmp	.+794    	; 0x2ef0 <main+0x51c>
    2bd6:	b4 cf       	rjmp	.-152    	; 0x2b40 <main+0x16c>
				{
				case Letter_A:
					LCD_SendCommand(1);
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
					LCD_WriteString_xy(1, 1, "A");
    2bde:	2e e6       	ldi	r18, 0x6E	; 110
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	61 e0       	ldi	r22, 0x01	; 1
    2be6:	a9 01       	movw	r20, r18
    2be8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_WriteString_xy>
					play_sound(Letter_A);
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <play_sound>
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	aa e7       	ldi	r26, 0x7A	; 122
    2bfa:	b4 e4       	ldi	r27, 0x44	; 68
    2bfc:	8d ab       	std	Y+53, r24	; 0x35
    2bfe:	9e ab       	std	Y+54, r25	; 0x36
    2c00:	af ab       	std	Y+55, r26	; 0x37
    2c02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c04:	6d a9       	ldd	r22, Y+53	; 0x35
    2c06:	7e a9       	ldd	r23, Y+54	; 0x36
    2c08:	8f a9       	ldd	r24, Y+55	; 0x37
    2c0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e8       	ldi	r19, 0x80	; 128
    2c10:	4b e3       	ldi	r20, 0x3B	; 59
    2c12:	55 e4       	ldi	r21, 0x45	; 69
    2c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	89 ab       	std	Y+49, r24	; 0x31
    2c1e:	9a ab       	std	Y+50, r25	; 0x32
    2c20:	ab ab       	std	Y+51, r26	; 0x33
    2c22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c24:	69 a9       	ldd	r22, Y+49	; 0x31
    2c26:	7a a9       	ldd	r23, Y+50	; 0x32
    2c28:	8b a9       	ldd	r24, Y+51	; 0x33
    2c2a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e8       	ldi	r20, 0x80	; 128
    2c32:	5f e3       	ldi	r21, 0x3F	; 63
    2c34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c38:	88 23       	and	r24, r24
    2c3a:	2c f4       	brge	.+10     	; 0x2c46 <main+0x272>
		__ticks = 1;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	98 ab       	std	Y+48, r25	; 0x30
    2c42:	8f a7       	std	Y+47, r24	; 0x2f
    2c44:	3f c0       	rjmp	.+126    	; 0x2cc4 <main+0x2f0>
	else if (__tmp > 65535)
    2c46:	69 a9       	ldd	r22, Y+49	; 0x31
    2c48:	7a a9       	ldd	r23, Y+50	; 0x32
    2c4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	3f ef       	ldi	r19, 0xFF	; 255
    2c52:	4f e7       	ldi	r20, 0x7F	; 127
    2c54:	57 e4       	ldi	r21, 0x47	; 71
    2c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c5a:	18 16       	cp	r1, r24
    2c5c:	4c f5       	brge	.+82     	; 0x2cb0 <main+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c60:	7e a9       	ldd	r23, Y+54	; 0x36
    2c62:	8f a9       	ldd	r24, Y+55	; 0x37
    2c64:	98 ad       	ldd	r25, Y+56	; 0x38
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e2       	ldi	r20, 0x20	; 32
    2c6c:	51 e4       	ldi	r21, 0x41	; 65
    2c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	bc 01       	movw	r22, r24
    2c78:	cd 01       	movw	r24, r26
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	98 ab       	std	Y+48, r25	; 0x30
    2c84:	8f a7       	std	Y+47, r24	; 0x2f
    2c86:	0f c0       	rjmp	.+30     	; 0x2ca6 <main+0x2d2>
    2c88:	8c e2       	ldi	r24, 0x2C	; 44
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	9e a7       	std	Y+46, r25	; 0x2e
    2c8e:	8d a7       	std	Y+45, r24	; 0x2d
    2c90:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c92:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <main+0x2c0>
    2c98:	9e a7       	std	Y+46, r25	; 0x2e
    2c9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	98 ab       	std	Y+48, r25	; 0x30
    2ca4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ca8:	98 a9       	ldd	r25, Y+48	; 0x30
    2caa:	00 97       	sbiw	r24, 0x00	; 0
    2cac:	69 f7       	brne	.-38     	; 0x2c88 <main+0x2b4>
    2cae:	14 c0       	rjmp	.+40     	; 0x2cd8 <main+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb0:	69 a9       	ldd	r22, Y+49	; 0x31
    2cb2:	7a a9       	ldd	r23, Y+50	; 0x32
    2cb4:	8b a9       	ldd	r24, Y+51	; 0x33
    2cb6:	9c a9       	ldd	r25, Y+52	; 0x34
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	98 ab       	std	Y+48, r25	; 0x30
    2cc2:	8f a7       	std	Y+47, r24	; 0x2f
    2cc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cc6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc8:	9c a7       	std	Y+44, r25	; 0x2c
    2cca:	8b a7       	std	Y+43, r24	; 0x2b
    2ccc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cce:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <main+0x2fc>
    2cd4:	9c a7       	std	Y+44, r25	; 0x2c
    2cd6:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
					LCD_SendCommand(1);
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
    2cde:	30 cf       	rjmp	.-416    	; 0x2b40 <main+0x16c>
					break;
				case I_love_my_mom:
					LCD_SendCommand(1);
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
					LCD_WriteString_xy(1, 1, "I Love my Mom");
    2ce6:	20 e7       	ldi	r18, 0x70	; 112
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	61 e0       	ldi	r22, 0x01	; 1
    2cee:	a9 01       	movw	r20, r18
    2cf0:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_WriteString_xy>
					play_sound(I_love_my_mom);
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <play_sound>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	aa e7       	ldi	r26, 0x7A	; 122
    2d02:	b4 e4       	ldi	r27, 0x44	; 68
    2d04:	8f a3       	std	Y+39, r24	; 0x27
    2d06:	98 a7       	std	Y+40, r25	; 0x28
    2d08:	a9 a7       	std	Y+41, r26	; 0x29
    2d0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d0e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d10:	89 a5       	ldd	r24, Y+41	; 0x29
    2d12:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e8       	ldi	r19, 0x80	; 128
    2d18:	4b e3       	ldi	r20, 0x3B	; 59
    2d1a:	55 e4       	ldi	r21, 0x45	; 69
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	8b a3       	std	Y+35, r24	; 0x23
    2d26:	9c a3       	std	Y+36, r25	; 0x24
    2d28:	ad a3       	std	Y+37, r26	; 0x25
    2d2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d30:	8d a1       	ldd	r24, Y+37	; 0x25
    2d32:	9e a1       	ldd	r25, Y+38	; 0x26
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e8       	ldi	r20, 0x80	; 128
    2d3a:	5f e3       	ldi	r21, 0x3F	; 63
    2d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d40:	88 23       	and	r24, r24
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <main+0x37a>
		__ticks = 1;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	9a a3       	std	Y+34, r25	; 0x22
    2d4a:	89 a3       	std	Y+33, r24	; 0x21
    2d4c:	3f c0       	rjmp	.+126    	; 0x2dcc <main+0x3f8>
	else if (__tmp > 65535)
    2d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d50:	7c a1       	ldd	r23, Y+36	; 0x24
    2d52:	8d a1       	ldd	r24, Y+37	; 0x25
    2d54:	9e a1       	ldd	r25, Y+38	; 0x26
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	3f ef       	ldi	r19, 0xFF	; 255
    2d5a:	4f e7       	ldi	r20, 0x7F	; 127
    2d5c:	57 e4       	ldi	r21, 0x47	; 71
    2d5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d62:	18 16       	cp	r1, r24
    2d64:	4c f5       	brge	.+82     	; 0x2db8 <main+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d66:	6f a1       	ldd	r22, Y+39	; 0x27
    2d68:	78 a5       	ldd	r23, Y+40	; 0x28
    2d6a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e2       	ldi	r20, 0x20	; 32
    2d74:	51 e4       	ldi	r21, 0x41	; 65
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	9a a3       	std	Y+34, r25	; 0x22
    2d8c:	89 a3       	std	Y+33, r24	; 0x21
    2d8e:	0f c0       	rjmp	.+30     	; 0x2dae <main+0x3da>
    2d90:	8c e2       	ldi	r24, 0x2C	; 44
    2d92:	91 e0       	ldi	r25, 0x01	; 1
    2d94:	98 a3       	std	Y+32, r25	; 0x20
    2d96:	8f 8f       	std	Y+31, r24	; 0x1f
    2d98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d9a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <main+0x3c8>
    2da0:	98 a3       	std	Y+32, r25	; 0x20
    2da2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da4:	89 a1       	ldd	r24, Y+33	; 0x21
    2da6:	9a a1       	ldd	r25, Y+34	; 0x22
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	9a a3       	std	Y+34, r25	; 0x22
    2dac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	89 a1       	ldd	r24, Y+33	; 0x21
    2db0:	9a a1       	ldd	r25, Y+34	; 0x22
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	69 f7       	brne	.-38     	; 0x2d90 <main+0x3bc>
    2db6:	14 c0       	rjmp	.+40     	; 0x2de0 <main+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dba:	7c a1       	ldd	r23, Y+36	; 0x24
    2dbc:	8d a1       	ldd	r24, Y+37	; 0x25
    2dbe:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9a a3       	std	Y+34, r25	; 0x22
    2dca:	89 a3       	std	Y+33, r24	; 0x21
    2dcc:	89 a1       	ldd	r24, Y+33	; 0x21
    2dce:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd0:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    2dd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <main+0x404>
    2ddc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dde:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1000);
					LCD_SendCommand(1);
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
    2de6:	ac ce       	rjmp	.-680    	; 0x2b40 <main+0x16c>
					break;
				case Letter_C:
					LCD_SendCommand(1);
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
					LCD_WriteString_xy(1, 1, "C");
    2dee:	2e e7       	ldi	r18, 0x7E	; 126
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	61 e0       	ldi	r22, 0x01	; 1
    2df6:	a9 01       	movw	r20, r18
    2df8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_WriteString_xy>
					play_sound(Letter_C);
    2dfc:	83 e0       	ldi	r24, 0x03	; 3
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 9a 0c 	call	0x1934	; 0x1934 <play_sound>
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	aa e7       	ldi	r26, 0x7A	; 122
    2e0a:	b4 e4       	ldi	r27, 0x44	; 68
    2e0c:	89 8f       	std	Y+25, r24	; 0x19
    2e0e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e10:	ab 8f       	std	Y+27, r26	; 0x1b
    2e12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e14:	69 8d       	ldd	r22, Y+25	; 0x19
    2e16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e8       	ldi	r19, 0x80	; 128
    2e20:	4b e3       	ldi	r20, 0x3B	; 59
    2e22:	55 e4       	ldi	r21, 0x45	; 69
    2e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	8d 8b       	std	Y+21, r24	; 0x15
    2e2e:	9e 8b       	std	Y+22, r25	; 0x16
    2e30:	af 8b       	std	Y+23, r26	; 0x17
    2e32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e34:	6d 89       	ldd	r22, Y+21	; 0x15
    2e36:	7e 89       	ldd	r23, Y+22	; 0x16
    2e38:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e8       	ldi	r20, 0x80	; 128
    2e42:	5f e3       	ldi	r21, 0x3F	; 63
    2e44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e48:	88 23       	and	r24, r24
    2e4a:	2c f4       	brge	.+10     	; 0x2e56 <main+0x482>
		__ticks = 1;
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	9c 8b       	std	Y+20, r25	; 0x14
    2e52:	8b 8b       	std	Y+19, r24	; 0x13
    2e54:	3f c0       	rjmp	.+126    	; 0x2ed4 <main+0x500>
	else if (__tmp > 65535)
    2e56:	6d 89       	ldd	r22, Y+21	; 0x15
    2e58:	7e 89       	ldd	r23, Y+22	; 0x16
    2e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	3f ef       	ldi	r19, 0xFF	; 255
    2e62:	4f e7       	ldi	r20, 0x7F	; 127
    2e64:	57 e4       	ldi	r21, 0x47	; 71
    2e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e6a:	18 16       	cp	r1, r24
    2e6c:	4c f5       	brge	.+82     	; 0x2ec0 <main+0x4ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	40 e2       	ldi	r20, 0x20	; 32
    2e7c:	51 e4       	ldi	r21, 0x41	; 65
    2e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	bc 01       	movw	r22, r24
    2e88:	cd 01       	movw	r24, r26
    2e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	9c 8b       	std	Y+20, r25	; 0x14
    2e94:	8b 8b       	std	Y+19, r24	; 0x13
    2e96:	0f c0       	rjmp	.+30     	; 0x2eb6 <main+0x4e2>
    2e98:	8c e2       	ldi	r24, 0x2C	; 44
    2e9a:	91 e0       	ldi	r25, 0x01	; 1
    2e9c:	9a 8b       	std	Y+18, r25	; 0x12
    2e9e:	89 8b       	std	Y+17, r24	; 0x11
    2ea0:	89 89       	ldd	r24, Y+17	; 0x11
    2ea2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <main+0x4d0>
    2ea8:	9a 8b       	std	Y+18, r25	; 0x12
    2eaa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eac:	8b 89       	ldd	r24, Y+19	; 0x13
    2eae:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	9c 8b       	std	Y+20, r25	; 0x14
    2eb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eba:	00 97       	sbiw	r24, 0x00	; 0
    2ebc:	69 f7       	brne	.-38     	; 0x2e98 <main+0x4c4>
    2ebe:	14 c0       	rjmp	.+40     	; 0x2ee8 <main+0x514>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	9c 8b       	std	Y+20, r25	; 0x14
    2ed2:	8b 8b       	std	Y+19, r24	; 0x13
    2ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed8:	98 8b       	std	Y+16, r25	; 0x10
    2eda:	8f 87       	std	Y+15, r24	; 0x0f
    2edc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ede:	98 89       	ldd	r25, Y+16	; 0x10
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	f1 f7       	brne	.-4      	; 0x2ee0 <main+0x50c>
    2ee4:	98 8b       	std	Y+16, r25	; 0x10
    2ee6:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					LCD_SendCommand(1);
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
    2eee:	28 ce       	rjmp	.-944    	; 0x2b40 <main+0x16c>
					break;
				case Letter_D:
					LCD_SendCommand(1);
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
					LCD_WriteString_xy(1, 1, "D");
    2ef6:	20 e8       	ldi	r18, 0x80	; 128
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	61 e0       	ldi	r22, 0x01	; 1
    2efe:	a9 01       	movw	r20, r18
    2f00:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_WriteString_xy>
					play_sound(Letter_D);
    2f04:	84 e0       	ldi	r24, 0x04	; 4
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	0e 94 9a 0c 	call	0x1934	; 0x1934 <play_sound>
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	aa e7       	ldi	r26, 0x7A	; 122
    2f12:	b4 e4       	ldi	r27, 0x44	; 68
    2f14:	8b 87       	std	Y+11, r24	; 0x0b
    2f16:	9c 87       	std	Y+12, r25	; 0x0c
    2f18:	ad 87       	std	Y+13, r26	; 0x0d
    2f1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e8       	ldi	r19, 0x80	; 128
    2f28:	4b e3       	ldi	r20, 0x3B	; 59
    2f2a:	55 e4       	ldi	r21, 0x45	; 69
    2f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	8f 83       	std	Y+7, r24	; 0x07
    2f36:	98 87       	std	Y+8, r25	; 0x08
    2f38:	a9 87       	std	Y+9, r26	; 0x09
    2f3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3e:	78 85       	ldd	r23, Y+8	; 0x08
    2f40:	89 85       	ldd	r24, Y+9	; 0x09
    2f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	40 e8       	ldi	r20, 0x80	; 128
    2f4a:	5f e3       	ldi	r21, 0x3F	; 63
    2f4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f50:	88 23       	and	r24, r24
    2f52:	2c f4       	brge	.+10     	; 0x2f5e <main+0x58a>
		__ticks = 1;
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	9e 83       	std	Y+6, r25	; 0x06
    2f5a:	8d 83       	std	Y+5, r24	; 0x05
    2f5c:	3f c0       	rjmp	.+126    	; 0x2fdc <main+0x608>
	else if (__tmp > 65535)
    2f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f60:	78 85       	ldd	r23, Y+8	; 0x08
    2f62:	89 85       	ldd	r24, Y+9	; 0x09
    2f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	3f ef       	ldi	r19, 0xFF	; 255
    2f6a:	4f e7       	ldi	r20, 0x7F	; 127
    2f6c:	57 e4       	ldi	r21, 0x47	; 71
    2f6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f72:	18 16       	cp	r1, r24
    2f74:	4c f5       	brge	.+82     	; 0x2fc8 <main+0x5f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e2       	ldi	r20, 0x20	; 32
    2f84:	51 e4       	ldi	r21, 0x41	; 65
    2f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	bc 01       	movw	r22, r24
    2f90:	cd 01       	movw	r24, r26
    2f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	9e 83       	std	Y+6, r25	; 0x06
    2f9c:	8d 83       	std	Y+5, r24	; 0x05
    2f9e:	0f c0       	rjmp	.+30     	; 0x2fbe <main+0x5ea>
    2fa0:	8c e2       	ldi	r24, 0x2C	; 44
    2fa2:	91 e0       	ldi	r25, 0x01	; 1
    2fa4:	9c 83       	std	Y+4, r25	; 0x04
    2fa6:	8b 83       	std	Y+3, r24	; 0x03
    2fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2faa:	9c 81       	ldd	r25, Y+4	; 0x04
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <main+0x5d8>
    2fb0:	9c 83       	std	Y+4, r25	; 0x04
    2fb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	9e 83       	std	Y+6, r25	; 0x06
    2fbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc2:	00 97       	sbiw	r24, 0x00	; 0
    2fc4:	69 f7       	brne	.-38     	; 0x2fa0 <main+0x5cc>
    2fc6:	14 c0       	rjmp	.+40     	; 0x2ff0 <main+0x61c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fca:	78 85       	ldd	r23, Y+8	; 0x08
    2fcc:	89 85       	ldd	r24, Y+9	; 0x09
    2fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	9e 83       	std	Y+6, r25	; 0x06
    2fda:	8d 83       	std	Y+5, r24	; 0x05
    2fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fde:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe0:	9a 83       	std	Y+2, r25	; 0x02
    2fe2:	89 83       	std	Y+1, r24	; 0x01
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <main+0x614>
    2fec:	9a 83       	std	Y+2, r25	; 0x02
    2fee:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					LCD_SendCommand(1);
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_SendCommand>
    2ff6:	a4 cd       	rjmp	.-1208   	; 0x2b40 <main+0x16c>

00002ff8 <Adjust_Flex_Range>:
	}
	return 0;
}
/*-----------------------------------------------------------------------------------------------*/
void Adjust_Flex_Range( u8 Flex_adcChannel_Number, u16 adcDigial_Value)
{
    2ff8:	df 93       	push	r29
    2ffa:	cf 93       	push	r28
    2ffc:	00 d0       	rcall	.+0      	; 0x2ffe <Adjust_Flex_Range+0x6>
    2ffe:	0f 92       	push	r0
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	89 83       	std	Y+1, r24	; 0x01
    3006:	7b 83       	std	Y+3, r23	; 0x03
    3008:	6a 83       	std	Y+2, r22	; 0x02
	if ( (adcDigial_Value > 113) && (adcDigial_Value <= 150) )
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	9b 81       	ldd	r25, Y+3	; 0x03
    300e:	82 37       	cpi	r24, 0x72	; 114
    3010:	91 05       	cpc	r25, r1
    3012:	70 f0       	brcs	.+28     	; 0x3030 <Adjust_Flex_Range+0x38>
    3014:	8a 81       	ldd	r24, Y+2	; 0x02
    3016:	9b 81       	ldd	r25, Y+3	; 0x03
    3018:	87 39       	cpi	r24, 0x97	; 151
    301a:	91 05       	cpc	r25, r1
    301c:	48 f4       	brcc	.+18     	; 0x3030 <Adjust_Flex_Range+0x38>
		Flex[Flex_adcChannel_Number]=1;
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	88 2f       	mov	r24, r24
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	fc 01       	movw	r30, r24
    3026:	e3 5e       	subi	r30, 0xE3	; 227
    3028:	fd 4f       	sbci	r31, 0xFD	; 253
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	80 83       	st	Z, r24
    302e:	40 c0       	rjmp	.+128    	; 0x30b0 <Adjust_Flex_Range+0xb8>
	else if ( (adcDigial_Value > 150) && (adcDigial_Value <= 165) )
    3030:	8a 81       	ldd	r24, Y+2	; 0x02
    3032:	9b 81       	ldd	r25, Y+3	; 0x03
    3034:	87 39       	cpi	r24, 0x97	; 151
    3036:	91 05       	cpc	r25, r1
    3038:	70 f0       	brcs	.+28     	; 0x3056 <Adjust_Flex_Range+0x5e>
    303a:	8a 81       	ldd	r24, Y+2	; 0x02
    303c:	9b 81       	ldd	r25, Y+3	; 0x03
    303e:	86 3a       	cpi	r24, 0xA6	; 166
    3040:	91 05       	cpc	r25, r1
    3042:	48 f4       	brcc	.+18     	; 0x3056 <Adjust_Flex_Range+0x5e>
		Flex[Flex_adcChannel_Number]=2;
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	88 2f       	mov	r24, r24
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	fc 01       	movw	r30, r24
    304c:	e3 5e       	subi	r30, 0xE3	; 227
    304e:	fd 4f       	sbci	r31, 0xFD	; 253
    3050:	82 e0       	ldi	r24, 0x02	; 2
    3052:	80 83       	st	Z, r24
    3054:	2d c0       	rjmp	.+90     	; 0x30b0 <Adjust_Flex_Range+0xb8>
	else if ( (adcDigial_Value > 165) && (adcDigial_Value <= 175) )
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	9b 81       	ldd	r25, Y+3	; 0x03
    305a:	86 3a       	cpi	r24, 0xA6	; 166
    305c:	91 05       	cpc	r25, r1
    305e:	70 f0       	brcs	.+28     	; 0x307c <Adjust_Flex_Range+0x84>
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	9b 81       	ldd	r25, Y+3	; 0x03
    3064:	80 3b       	cpi	r24, 0xB0	; 176
    3066:	91 05       	cpc	r25, r1
    3068:	48 f4       	brcc	.+18     	; 0x307c <Adjust_Flex_Range+0x84>
		Flex[Flex_adcChannel_Number]=3;
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	88 2f       	mov	r24, r24
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	fc 01       	movw	r30, r24
    3072:	e3 5e       	subi	r30, 0xE3	; 227
    3074:	fd 4f       	sbci	r31, 0xFD	; 253
    3076:	83 e0       	ldi	r24, 0x03	; 3
    3078:	80 83       	st	Z, r24
    307a:	1a c0       	rjmp	.+52     	; 0x30b0 <Adjust_Flex_Range+0xb8>
	else if ( (adcDigial_Value > 175) && (adcDigial_Value <= 200) )
    307c:	8a 81       	ldd	r24, Y+2	; 0x02
    307e:	9b 81       	ldd	r25, Y+3	; 0x03
    3080:	80 3b       	cpi	r24, 0xB0	; 176
    3082:	91 05       	cpc	r25, r1
    3084:	70 f0       	brcs	.+28     	; 0x30a2 <Adjust_Flex_Range+0xaa>
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	9b 81       	ldd	r25, Y+3	; 0x03
    308a:	89 3c       	cpi	r24, 0xC9	; 201
    308c:	91 05       	cpc	r25, r1
    308e:	48 f4       	brcc	.+18     	; 0x30a2 <Adjust_Flex_Range+0xaa>
		Flex[Flex_adcChannel_Number]=4;
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	88 2f       	mov	r24, r24
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	fc 01       	movw	r30, r24
    3098:	e3 5e       	subi	r30, 0xE3	; 227
    309a:	fd 4f       	sbci	r31, 0xFD	; 253
    309c:	84 e0       	ldi	r24, 0x04	; 4
    309e:	80 83       	st	Z, r24
    30a0:	07 c0       	rjmp	.+14     	; 0x30b0 <Adjust_Flex_Range+0xb8>
	else
		Flex[Flex_adcChannel_Number]=0;
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	88 2f       	mov	r24, r24
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	fc 01       	movw	r30, r24
    30aa:	e3 5e       	subi	r30, 0xE3	; 227
    30ac:	fd 4f       	sbci	r31, 0xFD	; 253
    30ae:	10 82       	st	Z, r1
}
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	08 95       	ret

000030bc <Update_Flexs>:
/*---------------------------------------------------------------*/

void Update_Flexs (Letters_and_Words * PTR_Flex)
{
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	00 d0       	rcall	.+0      	; 0x30c2 <Update_Flexs+0x6>
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	9a 83       	std	Y+2, r25	; 0x02
    30c8:	89 83       	std	Y+1, r24	; 0x01
	Flex[0]= ADC_GetResult(0);
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    30d0:	80 93 1d 02 	sts	0x021D, r24
	Adjust_Flex_Range(0, Flex[0]);
    30d4:	80 91 1d 02 	lds	r24, 0x021D
    30d8:	28 2f       	mov	r18, r24
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	b9 01       	movw	r22, r18
    30e0:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[0]= Flex[0];
    30e4:	80 91 1d 02 	lds	r24, 0x021D
    30e8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ea:	fa 81       	ldd	r31, Y+2	; 0x02
    30ec:	80 83       	st	Z, r24

	Flex[1]= ADC_GetResult(1);
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    30f4:	80 93 1e 02 	sts	0x021E, r24
	Adjust_Flex_Range(1, Flex[1]);
    30f8:	80 91 1e 02 	lds	r24, 0x021E
    30fc:	28 2f       	mov	r18, r24
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	b9 01       	movw	r22, r18
    3104:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[1]= Flex[1];
    3108:	80 91 1e 02 	lds	r24, 0x021E
    310c:	e9 81       	ldd	r30, Y+1	; 0x01
    310e:	fa 81       	ldd	r31, Y+2	; 0x02
    3110:	81 83       	std	Z+1, r24	; 0x01

	Flex[2]= ADC_GetResult(2);
    3112:	82 e0       	ldi	r24, 0x02	; 2
    3114:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    3118:	80 93 1f 02 	sts	0x021F, r24
	Adjust_Flex_Range(2, Flex[2]);
    311c:	80 91 1f 02 	lds	r24, 0x021F
    3120:	28 2f       	mov	r18, r24
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	82 e0       	ldi	r24, 0x02	; 2
    3126:	b9 01       	movw	r22, r18
    3128:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[2]= Flex[2];
    312c:	80 91 1f 02 	lds	r24, 0x021F
    3130:	e9 81       	ldd	r30, Y+1	; 0x01
    3132:	fa 81       	ldd	r31, Y+2	; 0x02
    3134:	82 83       	std	Z+2, r24	; 0x02

	Flex[3]= ADC_GetResult(3);
    3136:	83 e0       	ldi	r24, 0x03	; 3
    3138:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    313c:	80 93 20 02 	sts	0x0220, r24
	Adjust_Flex_Range(3, Flex[3]);
    3140:	80 91 20 02 	lds	r24, 0x0220
    3144:	28 2f       	mov	r18, r24
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	83 e0       	ldi	r24, 0x03	; 3
    314a:	b9 01       	movw	r22, r18
    314c:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[3]= Flex[3];
    3150:	80 91 20 02 	lds	r24, 0x0220
    3154:	e9 81       	ldd	r30, Y+1	; 0x01
    3156:	fa 81       	ldd	r31, Y+2	; 0x02
    3158:	83 83       	std	Z+3, r24	; 0x03
}
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	cf 91       	pop	r28
    3160:	df 91       	pop	r29
    3162:	08 95       	ret

00003164 <Compare_Flex_Data>:
/*---------------------------------------------------------------*/

u8  Compare_Flex_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data)
{
    3164:	df 93       	push	r29
    3166:	cf 93       	push	r28
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    316c:	27 97       	sbiw	r28, 0x07	; 7
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	9c 83       	std	Y+4, r25	; 0x04
    317a:	8b 83       	std	Y+3, r24	; 0x03
    317c:	7e 83       	std	Y+6, r23	; 0x06
    317e:	6d 83       	std	Y+5, r22	; 0x05
	u8 ArrFlex_Counter;
	u8 ArrStruct_Counter;
	Word_index=0;
    3180:	10 92 21 02 	sts	0x0221, r1
	for (ArrStruct_Counter=0; ArrStruct_Counter< NumberOfSavedWords; ArrStruct_Counter++)
    3184:	19 82       	std	Y+1, r1	; 0x01
    3186:	48 c0       	rjmp	.+144    	; 0x3218 <Compare_Flex_Data+0xb4>
	{
		for (ArrFlex_Counter= 0; ArrFlex_Counter < NumberOfFlexs; ArrFlex_Counter++)
    3188:	1a 82       	std	Y+2, r1	; 0x02
    318a:	3f c0       	rjmp	.+126    	; 0x320a <Compare_Flex_Data+0xa6>
			{
				if ( Ptr_Sensor_Readings-> Arr_Flex[ArrFlex_Counter] != Ptr_Stored_Data[ArrStruct_Counter]. Arr_Flex[ArrFlex_Counter])
    318c:	8a 81       	ldd	r24, Y+2	; 0x02
    318e:	28 2f       	mov	r18, r24
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	8b 81       	ldd	r24, Y+3	; 0x03
    3194:	9c 81       	ldd	r25, Y+4	; 0x04
    3196:	fc 01       	movw	r30, r24
    3198:	e2 0f       	add	r30, r18
    319a:	f3 1f       	adc	r31, r19
    319c:	40 81       	ld	r20, Z
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	8d 81       	ldd	r24, Y+5	; 0x05
    31a6:	9e 81       	ldd	r25, Y+6	; 0x06
    31a8:	28 0f       	add	r18, r24
    31aa:	39 1f       	adc	r19, r25
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	88 2f       	mov	r24, r24
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	f9 01       	movw	r30, r18
    31b4:	e8 0f       	add	r30, r24
    31b6:	f9 1f       	adc	r31, r25
    31b8:	80 81       	ld	r24, Z
    31ba:	48 17       	cp	r20, r24
    31bc:	51 f5       	brne	.+84     	; 0x3212 <Compare_Flex_Data+0xae>
				{
		//			return 0;
				break;
				}
					if (ArrFlex_Counter == NumberOfFlexs-1)
    31be:	8a 81       	ldd	r24, Y+2	; 0x02
    31c0:	88 23       	and	r24, r24
    31c2:	01 f5       	brne	.+64     	; 0x3204 <Compare_Flex_Data+0xa0>
					{

						if ( Ptr_Sensor_Readings ->Arr_Flex[ArrFlex_Counter] == Ptr_Stored_Data[ArrStruct_Counter].Arr_Flex[ArrFlex_Counter])
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	28 2f       	mov	r18, r24
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	9c 81       	ldd	r25, Y+4	; 0x04
    31ce:	fc 01       	movw	r30, r24
    31d0:	e2 0f       	add	r30, r18
    31d2:	f3 1f       	adc	r31, r19
    31d4:	40 81       	ld	r20, Z
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	28 2f       	mov	r18, r24
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	8d 81       	ldd	r24, Y+5	; 0x05
    31de:	9e 81       	ldd	r25, Y+6	; 0x06
    31e0:	28 0f       	add	r18, r24
    31e2:	39 1f       	adc	r19, r25
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	88 2f       	mov	r24, r24
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	f9 01       	movw	r30, r18
    31ec:	e8 0f       	add	r30, r24
    31ee:	f9 1f       	adc	r31, r25
    31f0:	80 81       	ld	r24, Z
    31f2:	48 17       	cp	r20, r24
    31f4:	39 f4       	brne	.+14     	; 0x3204 <Compare_Flex_Data+0xa0>
						{
							Word_index= ArrStruct_Counter + 1;
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	8f 5f       	subi	r24, 0xFF	; 255
    31fa:	80 93 21 02 	sts	0x0221, r24
							return 1;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	8f 83       	std	Y+7, r24	; 0x07
    3202:	0f c0       	rjmp	.+30     	; 0x3222 <Compare_Flex_Data+0xbe>
	u8 ArrFlex_Counter;
	u8 ArrStruct_Counter;
	Word_index=0;
	for (ArrStruct_Counter=0; ArrStruct_Counter< NumberOfSavedWords; ArrStruct_Counter++)
	{
		for (ArrFlex_Counter= 0; ArrFlex_Counter < NumberOfFlexs; ArrFlex_Counter++)
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	8f 5f       	subi	r24, 0xFF	; 255
    3208:	8a 83       	std	Y+2, r24	; 0x02
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	88 23       	and	r24, r24
    320e:	09 f4       	brne	.+2      	; 0x3212 <Compare_Flex_Data+0xae>
    3210:	bd cf       	rjmp	.-134    	; 0x318c <Compare_Flex_Data+0x28>
u8  Compare_Flex_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data)
{
	u8 ArrFlex_Counter;
	u8 ArrStruct_Counter;
	Word_index=0;
	for (ArrStruct_Counter=0; ArrStruct_Counter< NumberOfSavedWords; ArrStruct_Counter++)
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	8f 5f       	subi	r24, 0xFF	; 255
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	8a 30       	cpi	r24, 0x0A	; 10
    321c:	08 f4       	brcc	.+2      	; 0x3220 <Compare_Flex_Data+0xbc>
    321e:	b4 cf       	rjmp	.-152    	; 0x3188 <Compare_Flex_Data+0x24>
							return 1;
						}
					}
			}
	}
	return 0;
    3220:	1f 82       	std	Y+7, r1	; 0x07
    3222:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3224:	27 96       	adiw	r28, 0x07	; 7
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <Compare_Accs_Data>:
/*-----------------------------------------------------------------------------*/

u8  Compare_Accs_Data ( ADXL345_Data * Ptr_Accs_Readings, ADXL345_Data * Ptr_Acss_Stored_Data)
{
    3236:	ef 92       	push	r14
    3238:	ff 92       	push	r15
    323a:	0f 93       	push	r16
    323c:	1f 93       	push	r17
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	00 d0       	rcall	.+0      	; 0x3244 <Compare_Accs_Data+0xe>
    3244:	00 d0       	rcall	.+0      	; 0x3246 <Compare_Accs_Data+0x10>
    3246:	0f 92       	push	r0
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	9a 83       	std	Y+2, r25	; 0x02
    324e:	89 83       	std	Y+1, r24	; 0x01
    3250:	7c 83       	std	Y+4, r23	; 0x04
    3252:	6b 83       	std	Y+3, r22	; 0x03
	if (Word_index != 0)
    3254:	80 91 21 02 	lds	r24, 0x0221
    3258:	88 23       	and	r24, r24
    325a:	09 f4       	brne	.+2      	; 0x325e <Compare_Accs_Data+0x28>
    325c:	12 c1       	rjmp	.+548    	; 0x3482 <Compare_Accs_Data+0x24c>
	{
		if  (
    325e:	e9 81       	ldd	r30, Y+1	; 0x01
    3260:	fa 81       	ldd	r31, Y+2	; 0x02
    3262:	e0 80       	ld	r14, Z
    3264:	f1 80       	ldd	r15, Z+1	; 0x01
    3266:	02 81       	ldd	r16, Z+2	; 0x02
    3268:	13 81       	ldd	r17, Z+3	; 0x03
    326a:	80 91 21 02 	lds	r24, 0x0221
    326e:	28 2f       	mov	r18, r24
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	c9 01       	movw	r24, r18
    3274:	88 0f       	add	r24, r24
    3276:	99 1f       	adc	r25, r25
    3278:	82 0f       	add	r24, r18
    327a:	93 1f       	adc	r25, r19
    327c:	88 0f       	add	r24, r24
    327e:	99 1f       	adc	r25, r25
    3280:	88 0f       	add	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	9c 01       	movw	r18, r24
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	9c 81       	ldd	r25, Y+4	; 0x04
    328a:	fc 01       	movw	r30, r24
    328c:	e2 0f       	add	r30, r18
    328e:	f3 1f       	adc	r31, r19
    3290:	20 81       	ld	r18, Z
    3292:	31 81       	ldd	r19, Z+1	; 0x01
    3294:	42 81       	ldd	r20, Z+2	; 0x02
    3296:	53 81       	ldd	r21, Z+3	; 0x03
    3298:	c8 01       	movw	r24, r16
    329a:	b7 01       	movw	r22, r14
    329c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	bc 01       	movw	r22, r24
    32a6:	cd 01       	movw	r24, r26
    32a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	2f ef       	ldi	r18, 0xFF	; 255
    32b2:	87 3e       	cpi	r24, 0xE7	; 231
    32b4:	92 07       	cpc	r25, r18
    32b6:	0c f4       	brge	.+2      	; 0x32ba <Compare_Accs_Data+0x84>
    32b8:	e4 c0       	rjmp	.+456    	; 0x3482 <Compare_Accs_Data+0x24c>
    32ba:	e9 81       	ldd	r30, Y+1	; 0x01
    32bc:	fa 81       	ldd	r31, Y+2	; 0x02
    32be:	e0 80       	ld	r14, Z
    32c0:	f1 80       	ldd	r15, Z+1	; 0x01
    32c2:	02 81       	ldd	r16, Z+2	; 0x02
    32c4:	13 81       	ldd	r17, Z+3	; 0x03
    32c6:	80 91 21 02 	lds	r24, 0x0221
    32ca:	28 2f       	mov	r18, r24
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	c9 01       	movw	r24, r18
    32d0:	88 0f       	add	r24, r24
    32d2:	99 1f       	adc	r25, r25
    32d4:	82 0f       	add	r24, r18
    32d6:	93 1f       	adc	r25, r19
    32d8:	88 0f       	add	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	88 0f       	add	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	9c 01       	movw	r18, r24
    32e2:	8b 81       	ldd	r24, Y+3	; 0x03
    32e4:	9c 81       	ldd	r25, Y+4	; 0x04
    32e6:	fc 01       	movw	r30, r24
    32e8:	e2 0f       	add	r30, r18
    32ea:	f3 1f       	adc	r31, r19
    32ec:	20 81       	ld	r18, Z
    32ee:	31 81       	ldd	r19, Z+1	; 0x01
    32f0:	42 81       	ldd	r20, Z+2	; 0x02
    32f2:	53 81       	ldd	r21, Z+3	; 0x03
    32f4:	c8 01       	movw	r24, r16
    32f6:	b7 01       	movw	r22, r14
    32f8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	bc 01       	movw	r22, r24
    3302:	cd 01       	movw	r24, r26
    3304:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	8a 31       	cpi	r24, 0x1A	; 26
    330e:	91 05       	cpc	r25, r1
    3310:	0c f0       	brlt	.+2      	; 0x3314 <Compare_Accs_Data+0xde>
    3312:	b7 c0       	rjmp	.+366    	; 0x3482 <Compare_Accs_Data+0x24c>
    3314:	e9 81       	ldd	r30, Y+1	; 0x01
    3316:	fa 81       	ldd	r31, Y+2	; 0x02
    3318:	e4 80       	ldd	r14, Z+4	; 0x04
    331a:	f5 80       	ldd	r15, Z+5	; 0x05
    331c:	06 81       	ldd	r16, Z+6	; 0x06
    331e:	17 81       	ldd	r17, Z+7	; 0x07
    3320:	80 91 21 02 	lds	r24, 0x0221
    3324:	28 2f       	mov	r18, r24
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	c9 01       	movw	r24, r18
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	82 0f       	add	r24, r18
    3330:	93 1f       	adc	r25, r19
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	9c 01       	movw	r18, r24
    333c:	8b 81       	ldd	r24, Y+3	; 0x03
    333e:	9c 81       	ldd	r25, Y+4	; 0x04
    3340:	fc 01       	movw	r30, r24
    3342:	e2 0f       	add	r30, r18
    3344:	f3 1f       	adc	r31, r19
    3346:	24 81       	ldd	r18, Z+4	; 0x04
    3348:	35 81       	ldd	r19, Z+5	; 0x05
    334a:	46 81       	ldd	r20, Z+6	; 0x06
    334c:	57 81       	ldd	r21, Z+7	; 0x07
    334e:	c8 01       	movw	r24, r16
    3350:	b7 01       	movw	r22, r14
    3352:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	bc 01       	movw	r22, r24
    335c:	cd 01       	movw	r24, r26
    335e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	2f ef       	ldi	r18, 0xFF	; 255
    3368:	87 3e       	cpi	r24, 0xE7	; 231
    336a:	92 07       	cpc	r25, r18
    336c:	0c f4       	brge	.+2      	; 0x3370 <Compare_Accs_Data+0x13a>
    336e:	89 c0       	rjmp	.+274    	; 0x3482 <Compare_Accs_Data+0x24c>
    3370:	e9 81       	ldd	r30, Y+1	; 0x01
    3372:	fa 81       	ldd	r31, Y+2	; 0x02
    3374:	e4 80       	ldd	r14, Z+4	; 0x04
    3376:	f5 80       	ldd	r15, Z+5	; 0x05
    3378:	06 81       	ldd	r16, Z+6	; 0x06
    337a:	17 81       	ldd	r17, Z+7	; 0x07
    337c:	80 91 21 02 	lds	r24, 0x0221
    3380:	28 2f       	mov	r18, r24
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	c9 01       	movw	r24, r18
    3386:	88 0f       	add	r24, r24
    3388:	99 1f       	adc	r25, r25
    338a:	82 0f       	add	r24, r18
    338c:	93 1f       	adc	r25, r19
    338e:	88 0f       	add	r24, r24
    3390:	99 1f       	adc	r25, r25
    3392:	88 0f       	add	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	9c 01       	movw	r18, r24
    3398:	8b 81       	ldd	r24, Y+3	; 0x03
    339a:	9c 81       	ldd	r25, Y+4	; 0x04
    339c:	fc 01       	movw	r30, r24
    339e:	e2 0f       	add	r30, r18
    33a0:	f3 1f       	adc	r31, r19
    33a2:	24 81       	ldd	r18, Z+4	; 0x04
    33a4:	35 81       	ldd	r19, Z+5	; 0x05
    33a6:	46 81       	ldd	r20, Z+6	; 0x06
    33a8:	57 81       	ldd	r21, Z+7	; 0x07
    33aa:	c8 01       	movw	r24, r16
    33ac:	b7 01       	movw	r22, r14
    33ae:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	8a 31       	cpi	r24, 0x1A	; 26
    33c4:	91 05       	cpc	r25, r1
    33c6:	0c f0       	brlt	.+2      	; 0x33ca <Compare_Accs_Data+0x194>
    33c8:	5c c0       	rjmp	.+184    	; 0x3482 <Compare_Accs_Data+0x24c>
    33ca:	e9 81       	ldd	r30, Y+1	; 0x01
    33cc:	fa 81       	ldd	r31, Y+2	; 0x02
    33ce:	e0 84       	ldd	r14, Z+8	; 0x08
    33d0:	f1 84       	ldd	r15, Z+9	; 0x09
    33d2:	02 85       	ldd	r16, Z+10	; 0x0a
    33d4:	13 85       	ldd	r17, Z+11	; 0x0b
    33d6:	80 91 21 02 	lds	r24, 0x0221
    33da:	28 2f       	mov	r18, r24
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	c9 01       	movw	r24, r18
    33e0:	88 0f       	add	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	82 0f       	add	r24, r18
    33e6:	93 1f       	adc	r25, r19
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	88 0f       	add	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	9c 01       	movw	r18, r24
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	9c 81       	ldd	r25, Y+4	; 0x04
    33f6:	fc 01       	movw	r30, r24
    33f8:	e2 0f       	add	r30, r18
    33fa:	f3 1f       	adc	r31, r19
    33fc:	20 85       	ldd	r18, Z+8	; 0x08
    33fe:	31 85       	ldd	r19, Z+9	; 0x09
    3400:	42 85       	ldd	r20, Z+10	; 0x0a
    3402:	53 85       	ldd	r21, Z+11	; 0x0b
    3404:	c8 01       	movw	r24, r16
    3406:	b7 01       	movw	r22, r14
    3408:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	bc 01       	movw	r22, r24
    3412:	cd 01       	movw	r24, r26
    3414:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	2f ef       	ldi	r18, 0xFF	; 255
    341e:	87 3e       	cpi	r24, 0xE7	; 231
    3420:	92 07       	cpc	r25, r18
    3422:	7c f1       	brlt	.+94     	; 0x3482 <Compare_Accs_Data+0x24c>
    3424:	e9 81       	ldd	r30, Y+1	; 0x01
    3426:	fa 81       	ldd	r31, Y+2	; 0x02
    3428:	e0 84       	ldd	r14, Z+8	; 0x08
    342a:	f1 84       	ldd	r15, Z+9	; 0x09
    342c:	02 85       	ldd	r16, Z+10	; 0x0a
    342e:	13 85       	ldd	r17, Z+11	; 0x0b
    3430:	80 91 21 02 	lds	r24, 0x0221
    3434:	28 2f       	mov	r18, r24
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	c9 01       	movw	r24, r18
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	82 0f       	add	r24, r18
    3440:	93 1f       	adc	r25, r19
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	9c 01       	movw	r18, r24
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	9c 81       	ldd	r25, Y+4	; 0x04
    3450:	fc 01       	movw	r30, r24
    3452:	e2 0f       	add	r30, r18
    3454:	f3 1f       	adc	r31, r19
    3456:	20 85       	ldd	r18, Z+8	; 0x08
    3458:	31 85       	ldd	r19, Z+9	; 0x09
    345a:	42 85       	ldd	r20, Z+10	; 0x0a
    345c:	53 85       	ldd	r21, Z+11	; 0x0b
    345e:	c8 01       	movw	r24, r16
    3460:	b7 01       	movw	r22, r14
    3462:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	bc 01       	movw	r22, r24
    346c:	cd 01       	movw	r24, r26
    346e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	8a 31       	cpi	r24, 0x1A	; 26
    3478:	91 05       	cpc	r25, r1
    347a:	1c f4       	brge	.+6      	; 0x3482 <Compare_Accs_Data+0x24c>
				( abs( (Ptr_Accs_Readings->X_Axis - Ptr_Acss_Stored_Data[Word_index].X_Axis) ) <=  X_Angle_Accuracy )
			 && ( abs( (Ptr_Accs_Readings->Y_Axis - Ptr_Acss_Stored_Data[Word_index].Y_Axis) ) <=  Y_Angle_Accuracy )
			 && ( abs( (Ptr_Accs_Readings->Z_Axis - Ptr_Acss_Stored_Data[Word_index].Z_Axis) ) <=  Z_Angle_Accuracy )
			)
		{
			return 1;
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	8d 83       	std	Y+5, r24	; 0x05
    3480:	01 c0       	rjmp	.+2      	; 0x3484 <Compare_Accs_Data+0x24e>
		}

	}
	return 0;
    3482:	1d 82       	std	Y+5, r1	; 0x05
    3484:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	cf 91       	pop	r28
    3492:	df 91       	pop	r29
    3494:	1f 91       	pop	r17
    3496:	0f 91       	pop	r16
    3498:	ff 90       	pop	r15
    349a:	ef 90       	pop	r14
    349c:	08 95       	ret

0000349e <UART_init>:

#include "uart.h"
#define  BAUD_RATE (9600.0)

	void UART_init(void)
	{
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	00 d0       	rcall	.+0      	; 0x34a4 <UART_init+0x6>
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
		
		uint16 UBRR_Value= ((F_CPU /(8.0 *BAUD_RATE ) ) - 1) +0.5; 
    34a8:	8b e9       	ldi	r24, 0x9B	; 155
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	9a 83       	std	Y+2, r25	; 0x02
    34ae:	89 83       	std	Y+1, r24	; 0x01
		/* Set U2x " Double Speed Mode " */
		SET_BIT(UCSRA,U2X);
    34b0:	ab e2       	ldi	r26, 0x2B	; 43
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	eb e2       	ldi	r30, 0x2B	; 43
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	82 60       	ori	r24, 0x02	; 2
    34bc:	8c 93       	st	X, r24
		
		/* Enable Rx , Tx */
		UCSRB |= (1<<TXEN) | (1<<RXEN);
    34be:	aa e2       	ldi	r26, 0x2A	; 42
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	ea e2       	ldi	r30, 0x2A	; 42
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	88 61       	ori	r24, 0x18	; 24
    34ca:	8c 93       	st	X, r24
		
		UCSRC |= (1<<URSEL) |(1<<UCSZ0) | (1<<UCSZ1);
    34cc:	a0 e4       	ldi	r26, 0x40	; 64
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	e0 e4       	ldi	r30, 0x40	; 64
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	86 68       	ori	r24, 0x86	; 134
    34d8:	8c 93       	st	X, r24
		
		UBRRL = UBRR_Value & 0x00FF;
    34da:	e9 e2       	ldi	r30, 0x29	; 41
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	80 83       	st	Z, r24
		UBRRH = UBRR_Value >>8;
    34e2:	e0 e4       	ldi	r30, 0x40	; 64
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	89 81       	ldd	r24, Y+1	; 0x01
    34e8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ea:	89 2f       	mov	r24, r25
    34ec:	99 27       	eor	r25, r25
    34ee:	80 83       	st	Z, r24
	}
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	08 95       	ret

000034fa <UART_SendByte>:
	
	void UART_SendByte(uint8 Data)
	{
    34fa:	df 93       	push	r29
    34fc:	cf 93       	push	r28
    34fe:	0f 92       	push	r0
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
    3504:	89 83       	std	Y+1, r24	; 0x01
		/* if Send Buffer is not empty wait until it being  empty */
		while (BIT_IS_CLEAR(UCSRA,UDRE))
    3506:	eb e2       	ldi	r30, 0x2B	; 43
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 81       	ld	r24, Z
    350c:	88 2f       	mov	r24, r24
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	80 72       	andi	r24, 0x20	; 32
    3512:	90 70       	andi	r25, 0x00	; 0
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	b9 f3       	breq	.-18     	; 0x3506 <UART_SendByte+0xc>
		{
			
		}	
		UDR = Data;
    3518:	ec e2       	ldi	r30, 0x2C	; 44
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	80 83       	st	Z, r24
		
	}
    3520:	0f 90       	pop	r0
    3522:	cf 91       	pop	r28
    3524:	df 91       	pop	r29
    3526:	08 95       	ret

00003528 <UART_SendArray>:
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
    3528:	df 93       	push	r29
    352a:	cf 93       	push	r28
    352c:	00 d0       	rcall	.+0      	; 0x352e <UART_SendArray+0x6>
    352e:	00 d0       	rcall	.+0      	; 0x3530 <UART_SendArray+0x8>
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	9b 83       	std	Y+3, r25	; 0x03
    3536:	8a 83       	std	Y+2, r24	; 0x02
    3538:	6c 83       	std	Y+4, r22	; 0x04
		uint8 i = 0;
    353a:	19 82       	std	Y+1, r1	; 0x01
		
		for(i=0;i<size;i++)
    353c:	19 82       	std	Y+1, r1	; 0x01
    353e:	0e c0       	rjmp	.+28     	; 0x355c <UART_SendArray+0x34>
		{
			UART_SendByte(Data[i]);
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	28 2f       	mov	r18, r24
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	9b 81       	ldd	r25, Y+3	; 0x03
    354a:	fc 01       	movw	r30, r24
    354c:	e2 0f       	add	r30, r18
    354e:	f3 1f       	adc	r31, r19
    3550:	80 81       	ld	r24, Z
    3552:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <UART_SendByte>
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
		uint8 i = 0;
		
		for(i=0;i<size;i++)
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	8f 5f       	subi	r24, 0xFF	; 255
    355a:	89 83       	std	Y+1, r24	; 0x01
    355c:	99 81       	ldd	r25, Y+1	; 0x01
    355e:	8c 81       	ldd	r24, Y+4	; 0x04
    3560:	98 17       	cp	r25, r24
    3562:	70 f3       	brcs	.-36     	; 0x3540 <UART_SendArray+0x18>
		{
			UART_SendByte(Data[i]);
		}
	}
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	cf 91       	pop	r28
    356e:	df 91       	pop	r29
    3570:	08 95       	ret

00003572 <UART_recieveByte>:



uint8 UART_recieveByte(void)
{
    3572:	df 93       	push	r29
    3574:	cf 93       	push	r28
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    357a:	eb e2       	ldi	r30, 0x2B	; 43
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	88 23       	and	r24, r24
    3582:	dc f7       	brge	.-10     	; 0x357a <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    3584:	ec e2       	ldi	r30, 0x2C	; 44
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
}
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	08 95       	ret

00003590 <__prologue_saves__>:
    3590:	2f 92       	push	r2
    3592:	3f 92       	push	r3
    3594:	4f 92       	push	r4
    3596:	5f 92       	push	r5
    3598:	6f 92       	push	r6
    359a:	7f 92       	push	r7
    359c:	8f 92       	push	r8
    359e:	9f 92       	push	r9
    35a0:	af 92       	push	r10
    35a2:	bf 92       	push	r11
    35a4:	cf 92       	push	r12
    35a6:	df 92       	push	r13
    35a8:	ef 92       	push	r14
    35aa:	ff 92       	push	r15
    35ac:	0f 93       	push	r16
    35ae:	1f 93       	push	r17
    35b0:	cf 93       	push	r28
    35b2:	df 93       	push	r29
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	ca 1b       	sub	r28, r26
    35ba:	db 0b       	sbc	r29, r27
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	cd bf       	out	0x3d, r28	; 61
    35c6:	09 94       	ijmp

000035c8 <__epilogue_restores__>:
    35c8:	2a 88       	ldd	r2, Y+18	; 0x12
    35ca:	39 88       	ldd	r3, Y+17	; 0x11
    35cc:	48 88       	ldd	r4, Y+16	; 0x10
    35ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    35d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    35d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    35d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    35d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    35d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    35da:	b9 84       	ldd	r11, Y+9	; 0x09
    35dc:	c8 84       	ldd	r12, Y+8	; 0x08
    35de:	df 80       	ldd	r13, Y+7	; 0x07
    35e0:	ee 80       	ldd	r14, Y+6	; 0x06
    35e2:	fd 80       	ldd	r15, Y+5	; 0x05
    35e4:	0c 81       	ldd	r16, Y+4	; 0x04
    35e6:	1b 81       	ldd	r17, Y+3	; 0x03
    35e8:	aa 81       	ldd	r26, Y+2	; 0x02
    35ea:	b9 81       	ldd	r27, Y+1	; 0x01
    35ec:	ce 0f       	add	r28, r30
    35ee:	d1 1d       	adc	r29, r1
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	f8 94       	cli
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	cd bf       	out	0x3d, r28	; 61
    35fa:	ed 01       	movw	r28, r26
    35fc:	08 95       	ret

000035fe <itoa>:
    35fe:	fb 01       	movw	r30, r22
    3600:	9f 01       	movw	r18, r30
    3602:	e8 94       	clt
    3604:	42 30       	cpi	r20, 0x02	; 2
    3606:	c4 f0       	brlt	.+48     	; 0x3638 <itoa+0x3a>
    3608:	45 32       	cpi	r20, 0x25	; 37
    360a:	b4 f4       	brge	.+44     	; 0x3638 <itoa+0x3a>
    360c:	4a 30       	cpi	r20, 0x0A	; 10
    360e:	29 f4       	brne	.+10     	; 0x361a <itoa+0x1c>
    3610:	97 fb       	bst	r25, 7
    3612:	1e f4       	brtc	.+6      	; 0x361a <itoa+0x1c>
    3614:	90 95       	com	r25
    3616:	81 95       	neg	r24
    3618:	9f 4f       	sbci	r25, 0xFF	; 255
    361a:	64 2f       	mov	r22, r20
    361c:	77 27       	eor	r23, r23
    361e:	0e 94 30 1b 	call	0x3660	; 0x3660 <__udivmodhi4>
    3622:	80 5d       	subi	r24, 0xD0	; 208
    3624:	8a 33       	cpi	r24, 0x3A	; 58
    3626:	0c f0       	brlt	.+2      	; 0x362a <itoa+0x2c>
    3628:	89 5d       	subi	r24, 0xD9	; 217
    362a:	81 93       	st	Z+, r24
    362c:	cb 01       	movw	r24, r22
    362e:	00 97       	sbiw	r24, 0x00	; 0
    3630:	a1 f7       	brne	.-24     	; 0x361a <itoa+0x1c>
    3632:	16 f4       	brtc	.+4      	; 0x3638 <itoa+0x3a>
    3634:	5d e2       	ldi	r21, 0x2D	; 45
    3636:	51 93       	st	Z+, r21
    3638:	10 82       	st	Z, r1
    363a:	c9 01       	movw	r24, r18
    363c:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <strrev>

00003640 <strrev>:
    3640:	dc 01       	movw	r26, r24
    3642:	fc 01       	movw	r30, r24
    3644:	67 2f       	mov	r22, r23
    3646:	71 91       	ld	r23, Z+
    3648:	77 23       	and	r23, r23
    364a:	e1 f7       	brne	.-8      	; 0x3644 <strrev+0x4>
    364c:	32 97       	sbiw	r30, 0x02	; 2
    364e:	04 c0       	rjmp	.+8      	; 0x3658 <strrev+0x18>
    3650:	7c 91       	ld	r23, X
    3652:	6d 93       	st	X+, r22
    3654:	70 83       	st	Z, r23
    3656:	62 91       	ld	r22, -Z
    3658:	ae 17       	cp	r26, r30
    365a:	bf 07       	cpc	r27, r31
    365c:	c8 f3       	brcs	.-14     	; 0x3650 <strrev+0x10>
    365e:	08 95       	ret

00003660 <__udivmodhi4>:
    3660:	aa 1b       	sub	r26, r26
    3662:	bb 1b       	sub	r27, r27
    3664:	51 e1       	ldi	r21, 0x11	; 17
    3666:	07 c0       	rjmp	.+14     	; 0x3676 <__udivmodhi4_ep>

00003668 <__udivmodhi4_loop>:
    3668:	aa 1f       	adc	r26, r26
    366a:	bb 1f       	adc	r27, r27
    366c:	a6 17       	cp	r26, r22
    366e:	b7 07       	cpc	r27, r23
    3670:	10 f0       	brcs	.+4      	; 0x3676 <__udivmodhi4_ep>
    3672:	a6 1b       	sub	r26, r22
    3674:	b7 0b       	sbc	r27, r23

00003676 <__udivmodhi4_ep>:
    3676:	88 1f       	adc	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	5a 95       	dec	r21
    367c:	a9 f7       	brne	.-22     	; 0x3668 <__udivmodhi4_loop>
    367e:	80 95       	com	r24
    3680:	90 95       	com	r25
    3682:	bc 01       	movw	r22, r24
    3684:	cd 01       	movw	r24, r26
    3686:	08 95       	ret

00003688 <_exit>:
    3688:	f8 94       	cli

0000368a <__stop_program>:
    368a:	ff cf       	rjmp	.-2      	; 0x368a <__stop_program>
