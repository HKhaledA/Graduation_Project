
ACC_and_GYRO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003126  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00003126  000031ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080018a  0080018a  000032e4  2**0
                  ALLOC
  3 .stab         0000231c  00000000  00000000  000032e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d6  00000000  00000000  00005600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000066d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006876  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b3d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b886  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 43 16 	call	0x2c86	; 0x2c86 <main>
      8a:	0c 94 91 18 	jmp	0x3122	; 0x3122 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 18 	jmp	0x302a	; 0x302a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 18 	jmp	0x302a	; 0x302a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 25 18 	jmp	0x304a	; 0x304a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 57       	subi	r30, 0x76	; 118
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Accelerometor_init>:
 
#include "ADXL345.h"
#include "LCD.h"

void Accelerometor_init(ADX345_PowerModes Mode , ADXL345_Address EFF_Address)
{	
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Accelerometor_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	6a 83       	std	Y+2, r22	; 0x02
	I2C_ByteWrite(EFF_Address,POWER_CTRL,Mode);	
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	6d e2       	ldi	r22, 0x2D	; 45
     e40:	49 81       	ldd	r20, Y+1	; 0x01
     e42:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0x0B);
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	61 e3       	ldi	r22, 0x31	; 49
     e4a:	4b e0       	ldi	r20, 0x0B	; 11
     e4c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSX,-1);
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	6e e1       	ldi	r22, 0x1E	; 30
     e54:	4f ef       	ldi	r20, 0xFF	; 255
     e56:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSY,0);
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	6f e1       	ldi	r22, 0x1F	; 31
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSZ,-1);
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	60 e2       	ldi	r22, 0x20	; 32
     e68:	4f ef       	ldi	r20, 0xFF	; 255
     e6a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <I2C_ByteWrite>
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0);
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,8);
			
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <Accelerometor_ReadAxis>:



void Accelerometor_ReadAxis(ADXL345_Address EFF_Address ,volatile ADXL345_Data * Data_ptr)  
{
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	cd 55       	subi	r28, 0x5D	; 93
     e86:	d0 40       	sbci	r29, 0x00	; 0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	fe 01       	movw	r30, r28
     e94:	e5 5a       	subi	r30, 0xA5	; 165
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	80 83       	st	Z, r24
     e9a:	fe 01       	movw	r30, r28
     e9c:	e4 5a       	subi	r30, 0xA4	; 164
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	71 83       	std	Z+1, r23	; 0x01
     ea2:	60 83       	st	Z, r22
	uint16 X_Axis_Read;
	uint16 Y_Axis_Read;
	uint16 Z_Axis_Read;
	
	
	X_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX0);
     ea4:	fe 01       	movw	r30, r28
     ea6:	e5 5a       	subi	r30, 0xA5	; 165
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	80 81       	ld	r24, Z
     eac:	62 e3       	ldi	r22, 0x32	; 50
     eae:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <I2C_ByteRead>
     eb2:	fe 01       	movw	r30, r28
     eb4:	e7 5a       	subi	r30, 0xA7	; 167
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
     ec0:	fe 01       	movw	r30, r28
     ec2:	ef 5a       	subi	r30, 0xAF	; 175
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a0 e8       	ldi	r26, 0x80	; 128
     ecc:	bf e3       	ldi	r27, 0x3F	; 63
     ece:	80 83       	st	Z, r24
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	a2 83       	std	Z+2, r26	; 0x02
     ed4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed6:	8e 01       	movw	r16, r28
     ed8:	03 5b       	subi	r16, 0xB3	; 179
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	fe 01       	movw	r30, r28
     ede:	ef 5a       	subi	r30, 0xAF	; 175
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e8       	ldi	r19, 0x80	; 128
     eee:	4b e3       	ldi	r20, 0x3B	; 59
     ef0:	55 e4       	ldi	r21, 0x45	; 69
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	f8 01       	movw	r30, r16
     efc:	80 83       	st	Z, r24
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	a2 83       	std	Z+2, r26	; 0x02
     f02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f04:	fe 01       	movw	r30, r28
     f06:	e3 5b       	subi	r30, 0xB3	; 179
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	93 81       	ldd	r25, Z+3	; 0x03
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e8       	ldi	r20, 0x80	; 128
     f18:	5f e3       	ldi	r21, 0x3F	; 63
     f1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f1e:	88 23       	and	r24, r24
     f20:	44 f4       	brge	.+16     	; 0xf32 <Accelerometor_ReadAxis+0xba>
		__ticks = 1;
     f22:	fe 01       	movw	r30, r28
     f24:	e5 5b       	subi	r30, 0xB5	; 181
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	91 83       	std	Z+1, r25	; 0x01
     f2e:	80 83       	st	Z, r24
     f30:	64 c0       	rjmp	.+200    	; 0xffa <Accelerometor_ReadAxis+0x182>
	else if (__tmp > 65535)
     f32:	fe 01       	movw	r30, r28
     f34:	e3 5b       	subi	r30, 0xB3	; 179
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	60 81       	ld	r22, Z
     f3a:	71 81       	ldd	r23, Z+1	; 0x01
     f3c:	82 81       	ldd	r24, Z+2	; 0x02
     f3e:	93 81       	ldd	r25, Z+3	; 0x03
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	3f ef       	ldi	r19, 0xFF	; 255
     f44:	4f e7       	ldi	r20, 0x7F	; 127
     f46:	57 e4       	ldi	r21, 0x47	; 71
     f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f4c:	18 16       	cp	r1, r24
     f4e:	0c f0       	brlt	.+2      	; 0xf52 <Accelerometor_ReadAxis+0xda>
     f50:	43 c0       	rjmp	.+134    	; 0xfd8 <Accelerometor_ReadAxis+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f52:	fe 01       	movw	r30, r28
     f54:	ef 5a       	subi	r30, 0xAF	; 175
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	60 81       	ld	r22, Z
     f5a:	71 81       	ldd	r23, Z+1	; 0x01
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e2       	ldi	r20, 0x20	; 32
     f66:	51 e4       	ldi	r21, 0x41	; 65
     f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	8e 01       	movw	r16, r28
     f72:	05 5b       	subi	r16, 0xB5	; 181
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	f8 01       	movw	r30, r16
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	80 83       	st	Z, r24
     f88:	1f c0       	rjmp	.+62     	; 0xfc8 <Accelerometor_ReadAxis+0x150>
     f8a:	fe 01       	movw	r30, r28
     f8c:	e7 5b       	subi	r30, 0xB7	; 183
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	8c e2       	ldi	r24, 0x2C	; 44
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f98:	fe 01       	movw	r30, r28
     f9a:	e7 5b       	subi	r30, 0xB7	; 183
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <Accelerometor_ReadAxis+0x12a>
     fa6:	fe 01       	movw	r30, r28
     fa8:	e7 5b       	subi	r30, 0xB7	; 183
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb0:	de 01       	movw	r26, r28
     fb2:	a5 5b       	subi	r26, 0xB5	; 181
     fb4:	bf 4f       	sbci	r27, 0xFF	; 255
     fb6:	fe 01       	movw	r30, r28
     fb8:	e5 5b       	subi	r30, 0xB5	; 181
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	11 96       	adiw	r26, 0x01	; 1
     fc4:	9c 93       	st	X, r25
     fc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc8:	fe 01       	movw	r30, r28
     fca:	e5 5b       	subi	r30, 0xB5	; 181
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	d1 f6       	brne	.-76     	; 0xf8a <Accelerometor_ReadAxis+0x112>
     fd6:	27 c0       	rjmp	.+78     	; 0x1026 <Accelerometor_ReadAxis+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd8:	8e 01       	movw	r16, r28
     fda:	05 5b       	subi	r16, 0xB5	; 181
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	fe 01       	movw	r30, r28
     fe0:	e3 5b       	subi	r30, 0xB3	; 179
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	60 81       	ld	r22, Z
     fe6:	71 81       	ldd	r23, Z+1	; 0x01
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	f8 01       	movw	r30, r16
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	80 83       	st	Z, r24
     ffa:	de 01       	movw	r26, r28
     ffc:	a9 5b       	subi	r26, 0xB9	; 185
     ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    1000:	fe 01       	movw	r30, r28
    1002:	e5 5b       	subi	r30, 0xB5	; 181
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	8d 93       	st	X+, r24
    100c:	9c 93       	st	X, r25
    100e:	fe 01       	movw	r30, r28
    1010:	e9 5b       	subi	r30, 0xB9	; 185
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <Accelerometor_ReadAxis+0x1a0>
    101c:	fe 01       	movw	r30, r28
    101e:	e9 5b       	subi	r30, 0xB9	; 185
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	80 83       	st	Z, r24
	_delay_ms(1);
	X_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX1))<<8;
    1026:	fe 01       	movw	r30, r28
    1028:	e5 5a       	subi	r30, 0xA5	; 165
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	80 81       	ld	r24, Z
    102e:	63 e3       	ldi	r22, 0x33	; 51
    1030:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <I2C_ByteRead>
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	98 2f       	mov	r25, r24
    103a:	88 27       	eor	r24, r24
    103c:	9c 01       	movw	r18, r24
    103e:	de 01       	movw	r26, r28
    1040:	a7 5a       	subi	r26, 0xA7	; 167
    1042:	bf 4f       	sbci	r27, 0xFF	; 255
    1044:	fe 01       	movw	r30, r28
    1046:	e7 5a       	subi	r30, 0xA7	; 167
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	82 2b       	or	r24, r18
    1050:	93 2b       	or	r25, r19
    1052:	8d 93       	st	X+, r24
    1054:	9c 93       	st	X, r25
    1056:	fe 01       	movw	r30, r28
    1058:	ed 5b       	subi	r30, 0xBD	; 189
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 e8       	ldi	r26, 0x80	; 128
    1062:	bf e3       	ldi	r27, 0x3F	; 63
    1064:	80 83       	st	Z, r24
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	a2 83       	std	Z+2, r26	; 0x02
    106a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106c:	8e 01       	movw	r16, r28
    106e:	01 5c       	subi	r16, 0xC1	; 193
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	fe 01       	movw	r30, r28
    1074:	ed 5b       	subi	r30, 0xBD	; 189
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	93 81       	ldd	r25, Z+3	; 0x03
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e8       	ldi	r19, 0x80	; 128
    1084:	4b e3       	ldi	r20, 0x3B	; 59
    1086:	55 e4       	ldi	r21, 0x45	; 69
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	f8 01       	movw	r30, r16
    1092:	80 83       	st	Z, r24
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	a2 83       	std	Z+2, r26	; 0x02
    1098:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    109a:	fe 01       	movw	r30, r28
    109c:	ff 96       	adiw	r30, 0x3f	; 63
    109e:	60 81       	ld	r22, Z
    10a0:	71 81       	ldd	r23, Z+1	; 0x01
    10a2:	82 81       	ldd	r24, Z+2	; 0x02
    10a4:	93 81       	ldd	r25, Z+3	; 0x03
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e8       	ldi	r20, 0x80	; 128
    10ac:	5f e3       	ldi	r21, 0x3F	; 63
    10ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10b2:	88 23       	and	r24, r24
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <Accelerometor_ReadAxis+0x248>
		__ticks = 1;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9e af       	std	Y+62, r25	; 0x3e
    10bc:	8d af       	std	Y+61, r24	; 0x3d
    10be:	46 c0       	rjmp	.+140    	; 0x114c <Accelerometor_ReadAxis+0x2d4>
	else if (__tmp > 65535)
    10c0:	fe 01       	movw	r30, r28
    10c2:	ff 96       	adiw	r30, 0x3f	; 63
    10c4:	60 81       	ld	r22, Z
    10c6:	71 81       	ldd	r23, Z+1	; 0x01
    10c8:	82 81       	ldd	r24, Z+2	; 0x02
    10ca:	93 81       	ldd	r25, Z+3	; 0x03
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	3f ef       	ldi	r19, 0xFF	; 255
    10d0:	4f e7       	ldi	r20, 0x7F	; 127
    10d2:	57 e4       	ldi	r21, 0x47	; 71
    10d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10d8:	18 16       	cp	r1, r24
    10da:	64 f5       	brge	.+88     	; 0x1134 <Accelerometor_ReadAxis+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10dc:	fe 01       	movw	r30, r28
    10de:	ed 5b       	subi	r30, 0xBD	; 189
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	60 81       	ld	r22, Z
    10e4:	71 81       	ldd	r23, Z+1	; 0x01
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e2       	ldi	r20, 0x20	; 32
    10f0:	51 e4       	ldi	r21, 0x41	; 65
    10f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	bc 01       	movw	r22, r24
    10fc:	cd 01       	movw	r24, r26
    10fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9e af       	std	Y+62, r25	; 0x3e
    1108:	8d af       	std	Y+61, r24	; 0x3d
    110a:	0f c0       	rjmp	.+30     	; 0x112a <Accelerometor_ReadAxis+0x2b2>
    110c:	8c e2       	ldi	r24, 0x2C	; 44
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	9c af       	std	Y+60, r25	; 0x3c
    1112:	8b af       	std	Y+59, r24	; 0x3b
    1114:	8b ad       	ldd	r24, Y+59	; 0x3b
    1116:	9c ad       	ldd	r25, Y+60	; 0x3c
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <Accelerometor_ReadAxis+0x2a0>
    111c:	9c af       	std	Y+60, r25	; 0x3c
    111e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1120:	8d ad       	ldd	r24, Y+61	; 0x3d
    1122:	9e ad       	ldd	r25, Y+62	; 0x3e
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	9e af       	std	Y+62, r25	; 0x3e
    1128:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112a:	8d ad       	ldd	r24, Y+61	; 0x3d
    112c:	9e ad       	ldd	r25, Y+62	; 0x3e
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	69 f7       	brne	.-38     	; 0x110c <Accelerometor_ReadAxis+0x294>
    1132:	16 c0       	rjmp	.+44     	; 0x1160 <Accelerometor_ReadAxis+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1134:	fe 01       	movw	r30, r28
    1136:	ff 96       	adiw	r30, 0x3f	; 63
    1138:	60 81       	ld	r22, Z
    113a:	71 81       	ldd	r23, Z+1	; 0x01
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	9e af       	std	Y+62, r25	; 0x3e
    114a:	8d af       	std	Y+61, r24	; 0x3d
    114c:	8d ad       	ldd	r24, Y+61	; 0x3d
    114e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1150:	9a af       	std	Y+58, r25	; 0x3a
    1152:	89 af       	std	Y+57, r24	; 0x39
    1154:	89 ad       	ldd	r24, Y+57	; 0x39
    1156:	9a ad       	ldd	r25, Y+58	; 0x3a
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <Accelerometor_ReadAxis+0x2e0>
    115c:	9a af       	std	Y+58, r25	; 0x3a
    115e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	Y_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY0);
    1160:	fe 01       	movw	r30, r28
    1162:	e5 5a       	subi	r30, 0xA5	; 165
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	80 81       	ld	r24, Z
    1168:	64 e3       	ldi	r22, 0x34	; 52
    116a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <I2C_ByteRead>
    116e:	fe 01       	movw	r30, r28
    1170:	e9 5a       	subi	r30, 0xA9	; 169
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a0 e8       	ldi	r26, 0x80	; 128
    1182:	bf e3       	ldi	r27, 0x3F	; 63
    1184:	8d ab       	std	Y+53, r24	; 0x35
    1186:	9e ab       	std	Y+54, r25	; 0x36
    1188:	af ab       	std	Y+55, r26	; 0x37
    118a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	6d a9       	ldd	r22, Y+53	; 0x35
    118e:	7e a9       	ldd	r23, Y+54	; 0x36
    1190:	8f a9       	ldd	r24, Y+55	; 0x37
    1192:	98 ad       	ldd	r25, Y+56	; 0x38
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e8       	ldi	r19, 0x80	; 128
    1198:	4b e3       	ldi	r20, 0x3B	; 59
    119a:	55 e4       	ldi	r21, 0x45	; 69
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	89 ab       	std	Y+49, r24	; 0x31
    11a6:	9a ab       	std	Y+50, r25	; 0x32
    11a8:	ab ab       	std	Y+51, r26	; 0x33
    11aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11ac:	69 a9       	ldd	r22, Y+49	; 0x31
    11ae:	7a a9       	ldd	r23, Y+50	; 0x32
    11b0:	8b a9       	ldd	r24, Y+51	; 0x33
    11b2:	9c a9       	ldd	r25, Y+52	; 0x34
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	2c f4       	brge	.+10     	; 0x11ce <Accelerometor_ReadAxis+0x356>
		__ticks = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	98 ab       	std	Y+48, r25	; 0x30
    11ca:	8f a7       	std	Y+47, r24	; 0x2f
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <Accelerometor_ReadAxis+0x3d4>
	else if (__tmp > 65535)
    11ce:	69 a9       	ldd	r22, Y+49	; 0x31
    11d0:	7a a9       	ldd	r23, Y+50	; 0x32
    11d2:	8b a9       	ldd	r24, Y+51	; 0x33
    11d4:	9c a9       	ldd	r25, Y+52	; 0x34
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11e2:	18 16       	cp	r1, r24
    11e4:	4c f5       	brge	.+82     	; 0x1238 <Accelerometor_ReadAxis+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	6d a9       	ldd	r22, Y+53	; 0x35
    11e8:	7e a9       	ldd	r23, Y+54	; 0x36
    11ea:	8f a9       	ldd	r24, Y+55	; 0x37
    11ec:	98 ad       	ldd	r25, Y+56	; 0x38
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	51 e4       	ldi	r21, 0x41	; 65
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	98 ab       	std	Y+48, r25	; 0x30
    120c:	8f a7       	std	Y+47, r24	; 0x2f
    120e:	0f c0       	rjmp	.+30     	; 0x122e <Accelerometor_ReadAxis+0x3b6>
    1210:	8c e2       	ldi	r24, 0x2C	; 44
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	9e a7       	std	Y+46, r25	; 0x2e
    1216:	8d a7       	std	Y+45, r24	; 0x2d
    1218:	8d a5       	ldd	r24, Y+45	; 0x2d
    121a:	9e a5       	ldd	r25, Y+46	; 0x2e
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <Accelerometor_ReadAxis+0x3a4>
    1220:	9e a7       	std	Y+46, r25	; 0x2e
    1222:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1224:	8f a5       	ldd	r24, Y+47	; 0x2f
    1226:	98 a9       	ldd	r25, Y+48	; 0x30
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	98 ab       	std	Y+48, r25	; 0x30
    122c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1230:	98 a9       	ldd	r25, Y+48	; 0x30
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	69 f7       	brne	.-38     	; 0x1210 <Accelerometor_ReadAxis+0x398>
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <Accelerometor_ReadAxis+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	69 a9       	ldd	r22, Y+49	; 0x31
    123a:	7a a9       	ldd	r23, Y+50	; 0x32
    123c:	8b a9       	ldd	r24, Y+51	; 0x33
    123e:	9c a9       	ldd	r25, Y+52	; 0x34
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	98 ab       	std	Y+48, r25	; 0x30
    124a:	8f a7       	std	Y+47, r24	; 0x2f
    124c:	8f a5       	ldd	r24, Y+47	; 0x2f
    124e:	98 a9       	ldd	r25, Y+48	; 0x30
    1250:	9c a7       	std	Y+44, r25	; 0x2c
    1252:	8b a7       	std	Y+43, r24	; 0x2b
    1254:	8b a5       	ldd	r24, Y+43	; 0x2b
    1256:	9c a5       	ldd	r25, Y+44	; 0x2c
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <Accelerometor_ReadAxis+0x3e0>
    125c:	9c a7       	std	Y+44, r25	; 0x2c
    125e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Y_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY1))<<8;
    1260:	fe 01       	movw	r30, r28
    1262:	e5 5a       	subi	r30, 0xA5	; 165
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	80 81       	ld	r24, Z
    1268:	65 e3       	ldi	r22, 0x35	; 53
    126a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <I2C_ByteRead>
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	98 2f       	mov	r25, r24
    1274:	88 27       	eor	r24, r24
    1276:	9c 01       	movw	r18, r24
    1278:	de 01       	movw	r26, r28
    127a:	a9 5a       	subi	r26, 0xA9	; 169
    127c:	bf 4f       	sbci	r27, 0xFF	; 255
    127e:	fe 01       	movw	r30, r28
    1280:	e9 5a       	subi	r30, 0xA9	; 169
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	82 2b       	or	r24, r18
    128a:	93 2b       	or	r25, r19
    128c:	8d 93       	st	X+, r24
    128e:	9c 93       	st	X, r25
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a0 e8       	ldi	r26, 0x80	; 128
    1296:	bf e3       	ldi	r27, 0x3F	; 63
    1298:	8f a3       	std	Y+39, r24	; 0x27
    129a:	98 a7       	std	Y+40, r25	; 0x28
    129c:	a9 a7       	std	Y+41, r26	; 0x29
    129e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a0:	6f a1       	ldd	r22, Y+39	; 0x27
    12a2:	78 a5       	ldd	r23, Y+40	; 0x28
    12a4:	89 a5       	ldd	r24, Y+41	; 0x29
    12a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e8       	ldi	r19, 0x80	; 128
    12ac:	4b e3       	ldi	r20, 0x3B	; 59
    12ae:	55 e4       	ldi	r21, 0x45	; 69
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	8b a3       	std	Y+35, r24	; 0x23
    12ba:	9c a3       	std	Y+36, r25	; 0x24
    12bc:	ad a3       	std	Y+37, r26	; 0x25
    12be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c0:	6b a1       	ldd	r22, Y+35	; 0x23
    12c2:	7c a1       	ldd	r23, Y+36	; 0x24
    12c4:	8d a1       	ldd	r24, Y+37	; 0x25
    12c6:	9e a1       	ldd	r25, Y+38	; 0x26
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <Accelerometor_ReadAxis+0x46a>
		__ticks = 1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9a a3       	std	Y+34, r25	; 0x22
    12de:	89 a3       	std	Y+33, r24	; 0x21
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <Accelerometor_ReadAxis+0x4e8>
	else if (__tmp > 65535)
    12e2:	6b a1       	ldd	r22, Y+35	; 0x23
    12e4:	7c a1       	ldd	r23, Y+36	; 0x24
    12e6:	8d a1       	ldd	r24, Y+37	; 0x25
    12e8:	9e a1       	ldd	r25, Y+38	; 0x26
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	3f ef       	ldi	r19, 0xFF	; 255
    12ee:	4f e7       	ldi	r20, 0x7F	; 127
    12f0:	57 e4       	ldi	r21, 0x47	; 71
    12f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	4c f5       	brge	.+82     	; 0x134c <Accelerometor_ReadAxis+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	6f a1       	ldd	r22, Y+39	; 0x27
    12fc:	78 a5       	ldd	r23, Y+40	; 0x28
    12fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1300:	9a a5       	ldd	r25, Y+42	; 0x2a
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	51 e4       	ldi	r21, 0x41	; 65
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9a a3       	std	Y+34, r25	; 0x22
    1320:	89 a3       	std	Y+33, r24	; 0x21
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <Accelerometor_ReadAxis+0x4ca>
    1324:	8c e2       	ldi	r24, 0x2C	; 44
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	98 a3       	std	Y+32, r25	; 0x20
    132a:	8f 8f       	std	Y+31, r24	; 0x1f
    132c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    132e:	98 a1       	ldd	r25, Y+32	; 0x20
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <Accelerometor_ReadAxis+0x4b8>
    1334:	98 a3       	std	Y+32, r25	; 0x20
    1336:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1338:	89 a1       	ldd	r24, Y+33	; 0x21
    133a:	9a a1       	ldd	r25, Y+34	; 0x22
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9a a3       	std	Y+34, r25	; 0x22
    1340:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	89 a1       	ldd	r24, Y+33	; 0x21
    1344:	9a a1       	ldd	r25, Y+34	; 0x22
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f7       	brne	.-38     	; 0x1324 <Accelerometor_ReadAxis+0x4ac>
    134a:	14 c0       	rjmp	.+40     	; 0x1374 <Accelerometor_ReadAxis+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134c:	6b a1       	ldd	r22, Y+35	; 0x23
    134e:	7c a1       	ldd	r23, Y+36	; 0x24
    1350:	8d a1       	ldd	r24, Y+37	; 0x25
    1352:	9e a1       	ldd	r25, Y+38	; 0x26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9a a3       	std	Y+34, r25	; 0x22
    135e:	89 a3       	std	Y+33, r24	; 0x21
    1360:	89 a1       	ldd	r24, Y+33	; 0x21
    1362:	9a a1       	ldd	r25, Y+34	; 0x22
    1364:	9e 8f       	std	Y+30, r25	; 0x1e
    1366:	8d 8f       	std	Y+29, r24	; 0x1d
    1368:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <Accelerometor_ReadAxis+0x4f4>
    1370:	9e 8f       	std	Y+30, r25	; 0x1e
    1372:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Z_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ0);
    1374:	fe 01       	movw	r30, r28
    1376:	e5 5a       	subi	r30, 0xA5	; 165
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	80 81       	ld	r24, Z
    137c:	66 e3       	ldi	r22, 0x36	; 54
    137e:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <I2C_ByteRead>
    1382:	fe 01       	movw	r30, r28
    1384:	eb 5a       	subi	r30, 0xAB	; 171
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a0 e8       	ldi	r26, 0x80	; 128
    1396:	bf e3       	ldi	r27, 0x3F	; 63
    1398:	89 8f       	std	Y+25, r24	; 0x19
    139a:	9a 8f       	std	Y+26, r25	; 0x1a
    139c:	ab 8f       	std	Y+27, r26	; 0x1b
    139e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a0:	69 8d       	ldd	r22, Y+25	; 0x19
    13a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e8       	ldi	r19, 0x80	; 128
    13ac:	4b e3       	ldi	r20, 0x3B	; 59
    13ae:	55 e4       	ldi	r21, 0x45	; 69
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8d 8b       	std	Y+21, r24	; 0x15
    13ba:	9e 8b       	std	Y+22, r25	; 0x16
    13bc:	af 8b       	std	Y+23, r26	; 0x17
    13be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13c0:	6d 89       	ldd	r22, Y+21	; 0x15
    13c2:	7e 89       	ldd	r23, Y+22	; 0x16
    13c4:	8f 89       	ldd	r24, Y+23	; 0x17
    13c6:	98 8d       	ldd	r25, Y+24	; 0x18
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <Accelerometor_ReadAxis+0x56a>
		__ticks = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9c 8b       	std	Y+20, r25	; 0x14
    13de:	8b 8b       	std	Y+19, r24	; 0x13
    13e0:	3f c0       	rjmp	.+126    	; 0x1460 <Accelerometor_ReadAxis+0x5e8>
	else if (__tmp > 65535)
    13e2:	6d 89       	ldd	r22, Y+21	; 0x15
    13e4:	7e 89       	ldd	r23, Y+22	; 0x16
    13e6:	8f 89       	ldd	r24, Y+23	; 0x17
    13e8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	4c f5       	brge	.+82     	; 0x144c <Accelerometor_ReadAxis+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fa:	69 8d       	ldd	r22, Y+25	; 0x19
    13fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1400:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e2       	ldi	r20, 0x20	; 32
    1408:	51 e4       	ldi	r21, 0x41	; 65
    140a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9c 8b       	std	Y+20, r25	; 0x14
    1420:	8b 8b       	std	Y+19, r24	; 0x13
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <Accelerometor_ReadAxis+0x5ca>
    1424:	8c e2       	ldi	r24, 0x2C	; 44
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	9a 8b       	std	Y+18, r25	; 0x12
    142a:	89 8b       	std	Y+17, r24	; 0x11
    142c:	89 89       	ldd	r24, Y+17	; 0x11
    142e:	9a 89       	ldd	r25, Y+18	; 0x12
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <Accelerometor_ReadAxis+0x5b8>
    1434:	9a 8b       	std	Y+18, r25	; 0x12
    1436:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1438:	8b 89       	ldd	r24, Y+19	; 0x13
    143a:	9c 89       	ldd	r25, Y+20	; 0x14
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	9c 8b       	std	Y+20, r25	; 0x14
    1440:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1442:	8b 89       	ldd	r24, Y+19	; 0x13
    1444:	9c 89       	ldd	r25, Y+20	; 0x14
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	69 f7       	brne	.-38     	; 0x1424 <Accelerometor_ReadAxis+0x5ac>
    144a:	14 c0       	rjmp	.+40     	; 0x1474 <Accelerometor_ReadAxis+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144c:	6d 89       	ldd	r22, Y+21	; 0x15
    144e:	7e 89       	ldd	r23, Y+22	; 0x16
    1450:	8f 89       	ldd	r24, Y+23	; 0x17
    1452:	98 8d       	ldd	r25, Y+24	; 0x18
    1454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9c 8b       	std	Y+20, r25	; 0x14
    145e:	8b 8b       	std	Y+19, r24	; 0x13
    1460:	8b 89       	ldd	r24, Y+19	; 0x13
    1462:	9c 89       	ldd	r25, Y+20	; 0x14
    1464:	98 8b       	std	Y+16, r25	; 0x10
    1466:	8f 87       	std	Y+15, r24	; 0x0f
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	98 89       	ldd	r25, Y+16	; 0x10
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <Accelerometor_ReadAxis+0x5f4>
    1470:	98 8b       	std	Y+16, r25	; 0x10
    1472:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Z_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ1))<<8;
    1474:	fe 01       	movw	r30, r28
    1476:	e5 5a       	subi	r30, 0xA5	; 165
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	80 81       	ld	r24, Z
    147c:	67 e3       	ldi	r22, 0x37	; 55
    147e:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <I2C_ByteRead>
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	98 2f       	mov	r25, r24
    1488:	88 27       	eor	r24, r24
    148a:	9c 01       	movw	r18, r24
    148c:	de 01       	movw	r26, r28
    148e:	ab 5a       	subi	r26, 0xAB	; 171
    1490:	bf 4f       	sbci	r27, 0xFF	; 255
    1492:	fe 01       	movw	r30, r28
    1494:	eb 5a       	subi	r30, 0xAB	; 171
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	82 2b       	or	r24, r18
    149e:	93 2b       	or	r25, r19
    14a0:	8d 93       	st	X+, r24
    14a2:	9c 93       	st	X, r25
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e8       	ldi	r26, 0x80	; 128
    14aa:	bf e3       	ldi	r27, 0x3F	; 63
    14ac:	8b 87       	std	Y+11, r24	; 0x0b
    14ae:	9c 87       	std	Y+12, r25	; 0x0c
    14b0:	ad 87       	std	Y+13, r26	; 0x0d
    14b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e8       	ldi	r19, 0x80	; 128
    14c0:	4b e3       	ldi	r20, 0x3B	; 59
    14c2:	55 e4       	ldi	r21, 0x45	; 69
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8f 83       	std	Y+7, r24	; 0x07
    14ce:	98 87       	std	Y+8, r25	; 0x08
    14d0:	a9 87       	std	Y+9, r26	; 0x09
    14d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d4:	6f 81       	ldd	r22, Y+7	; 0x07
    14d6:	78 85       	ldd	r23, Y+8	; 0x08
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <Accelerometor_ReadAxis+0x67e>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <Accelerometor_ReadAxis+0x6fc>
	else if (__tmp > 65535)
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <Accelerometor_ReadAxis+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <Accelerometor_ReadAxis+0x6de>
    1538:	8c e2       	ldi	r24, 0x2C	; 44
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	9c 83       	std	Y+4, r25	; 0x04
    153e:	8b 83       	std	Y+3, r24	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <Accelerometor_ReadAxis+0x6cc>
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <Accelerometor_ReadAxis+0x6c0>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <Accelerometor_ReadAxis+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6f 81       	ldd	r22, Y+7	; 0x07
    1562:	78 85       	ldd	r23, Y+8	; 0x08
    1564:	89 85       	ldd	r24, Y+9	; 0x09
    1566:	9a 85       	ldd	r25, Y+10	; 0x0a
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <Accelerometor_ReadAxis+0x708>
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);	
	
	Data_ptr ->X_Axis= (X_Axis_Read);
    1588:	fe 01       	movw	r30, r28
    158a:	e7 5a       	subi	r30, 0xA7	; 167
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	80 81       	ld	r24, Z
    1590:	91 81       	ldd	r25, Z+1	; 0x01
    1592:	cc 01       	movw	r24, r24
    1594:	a0 e0       	ldi	r26, 0x00	; 0
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	fe 01       	movw	r30, r28
    15a6:	e4 5a       	subi	r30, 0xA4	; 164
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	01 90       	ld	r0, Z+
    15ac:	f0 81       	ld	r31, Z
    15ae:	e0 2d       	mov	r30, r0
    15b0:	80 83       	st	Z, r24
    15b2:	91 83       	std	Z+1, r25	; 0x01
    15b4:	a2 83       	std	Z+2, r26	; 0x02
    15b6:	b3 83       	std	Z+3, r27	; 0x03
	Data_ptr ->Y_Axis= (Y_Axis_Read);
    15b8:	fe 01       	movw	r30, r28
    15ba:	e9 5a       	subi	r30, 0xA9	; 169
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	80 81       	ld	r24, Z
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	cc 01       	movw	r24, r24
    15c4:	a0 e0       	ldi	r26, 0x00	; 0
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	bc 01       	movw	r22, r24
    15ca:	cd 01       	movw	r24, r26
    15cc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	fe 01       	movw	r30, r28
    15d6:	e4 5a       	subi	r30, 0xA4	; 164
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	01 90       	ld	r0, Z+
    15dc:	f0 81       	ld	r31, Z
    15de:	e0 2d       	mov	r30, r0
    15e0:	84 83       	std	Z+4, r24	; 0x04
    15e2:	95 83       	std	Z+5, r25	; 0x05
    15e4:	a6 83       	std	Z+6, r26	; 0x06
    15e6:	b7 83       	std	Z+7, r27	; 0x07
	Data_ptr ->Z_Axis= (Z_Axis_Read);
    15e8:	fe 01       	movw	r30, r28
    15ea:	eb 5a       	subi	r30, 0xAB	; 171
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	80 81       	ld	r24, Z
    15f0:	91 81       	ldd	r25, Z+1	; 0x01
    15f2:	cc 01       	movw	r24, r24
    15f4:	a0 e0       	ldi	r26, 0x00	; 0
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	fe 01       	movw	r30, r28
    1606:	e4 5a       	subi	r30, 0xA4	; 164
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	01 90       	ld	r0, Z+
    160c:	f0 81       	ld	r31, Z
    160e:	e0 2d       	mov	r30, r0
    1610:	80 87       	std	Z+8, r24	; 0x08
    1612:	91 87       	std	Z+9, r25	; 0x09
    1614:	a2 87       	std	Z+10, r26	; 0x0a
    1616:	b3 87       	std	Z+11, r27	; 0x0b
}
    1618:	c3 5a       	subi	r28, 0xA3	; 163
    161a:	df 4f       	sbci	r29, 0xFF	; 255
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <LCD_init>:


	#include "LCD.h"
	
	void LCD_init(void)
	{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
		/* Set The Control Pins Direction to OUtput */
		LCD_Control_reg_DIR |=(1<<E) | (1<<RW) | (1<<RS);
    1638:	a4 e3       	ldi	r26, 0x34	; 52
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e4 e3       	ldi	r30, 0x34	; 52
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	80 6e       	ori	r24, 0xE0	; 224
    1644:	8c 93       	st	X, r24
			LCD_Data_Reg_DIR =0xFF;
		#else
			
			#ifdef Upper_Data_port
				/* Set The Direction of The Upper Pins to OP*/
				LCD_Data_Reg_DIR |=(0xF0);
    1646:	a7 e3       	ldi	r26, 0x37	; 55
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e7 e3       	ldi	r30, 0x37	; 55
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	80 6f       	ori	r24, 0xF0	; 240
    1652:	8c 93       	st	X, r24
			#else
				/* Set The Direction of The LOWER Pins to OP*/
				LCD_Data_Reg_DIR|=(0x0F);
			#endif
			Send_instruction(Return_Home);
    1654:	82 e0       	ldi	r24, 0x02	; 2
    1656:	0e 94 39 0b 	call	0x1672	; 0x1672 <Send_instruction>
		#endif
		
		Send_instruction(Data_Set);
    165a:	88 e2       	ldi	r24, 0x28	; 40
    165c:	0e 94 39 0b 	call	0x1672	; 0x1672 <Send_instruction>
		Send_instruction(Display_on);
    1660:	8c e0       	ldi	r24, 0x0C	; 12
    1662:	0e 94 39 0b 	call	0x1672	; 0x1672 <Send_instruction>
		Send_instruction(Clear_display);
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	0e 94 39 0b 	call	0x1672	; 0x1672 <Send_instruction>
	}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <Send_instruction>:
	
	void Send_instruction(uint8 instruction)
	{
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	c3 56       	subi	r28, 0x63	; 99
    1680:	d0 40       	sbci	r29, 0x00	; 0
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	fe 01       	movw	r30, r28
    168e:	ed 59       	subi	r30, 0x9D	; 157
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 83       	st	Z, r24
		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEAR_BIT(LCD_Control_reg_OP,RS);
    1694:	a5 e3       	ldi	r26, 0x35	; 53
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e5 e3       	ldi	r30, 0x35	; 53
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 77       	andi	r24, 0x7F	; 127
    16a0:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_Control_reg_OP,RW);
    16a2:	a5 e3       	ldi	r26, 0x35	; 53
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e5 e3       	ldi	r30, 0x35	; 53
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8f 7b       	andi	r24, 0xBF	; 191
    16ae:	8c 93       	st	X, r24
    16b0:	fe 01       	movw	r30, r28
    16b2:	e1 5a       	subi	r30, 0xA1	; 161
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a0 e8       	ldi	r26, 0x80	; 128
    16bc:	bf e3       	ldi	r27, 0x3F	; 63
    16be:	80 83       	st	Z, r24
    16c0:	91 83       	std	Z+1, r25	; 0x01
    16c2:	a2 83       	std	Z+2, r26	; 0x02
    16c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c6:	8e 01       	movw	r16, r28
    16c8:	05 5a       	subi	r16, 0xA5	; 165
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	fe 01       	movw	r30, r28
    16ce:	e1 5a       	subi	r30, 0xA1	; 161
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e8       	ldi	r19, 0x80	; 128
    16de:	4b e3       	ldi	r20, 0x3B	; 59
    16e0:	55 e4       	ldi	r21, 0x45	; 69
    16e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	f8 01       	movw	r30, r16
    16ec:	80 83       	st	Z, r24
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	a2 83       	std	Z+2, r26	; 0x02
    16f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16f4:	fe 01       	movw	r30, r28
    16f6:	e5 5a       	subi	r30, 0xA5	; 165
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    170e:	88 23       	and	r24, r24
    1710:	44 f4       	brge	.+16     	; 0x1722 <Send_instruction+0xb0>
		__ticks = 1;
    1712:	fe 01       	movw	r30, r28
    1714:	e7 5a       	subi	r30, 0xA7	; 167
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	91 83       	std	Z+1, r25	; 0x01
    171e:	80 83       	st	Z, r24
    1720:	64 c0       	rjmp	.+200    	; 0x17ea <Send_instruction+0x178>
	else if (__tmp > 65535)
    1722:	fe 01       	movw	r30, r28
    1724:	e5 5a       	subi	r30, 0xA5	; 165
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	60 81       	ld	r22, Z
    172a:	71 81       	ldd	r23, Z+1	; 0x01
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	0c f0       	brlt	.+2      	; 0x1742 <Send_instruction+0xd0>
    1740:	43 c0       	rjmp	.+134    	; 0x17c8 <Send_instruction+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1742:	fe 01       	movw	r30, r28
    1744:	e1 5a       	subi	r30, 0xA1	; 161
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e2       	ldi	r20, 0x20	; 32
    1756:	51 e4       	ldi	r21, 0x41	; 65
    1758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	8e 01       	movw	r16, r28
    1762:	07 5a       	subi	r16, 0xA7	; 167
    1764:	1f 4f       	sbci	r17, 0xFF	; 255
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	f8 01       	movw	r30, r16
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
    1778:	1f c0       	rjmp	.+62     	; 0x17b8 <Send_instruction+0x146>
    177a:	fe 01       	movw	r30, r28
    177c:	e9 5a       	subi	r30, 0xA9	; 169
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	8c e2       	ldi	r24, 0x2C	; 44
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
    1788:	fe 01       	movw	r30, r28
    178a:	e9 5a       	subi	r30, 0xA9	; 169
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <Send_instruction+0x120>
    1796:	fe 01       	movw	r30, r28
    1798:	e9 5a       	subi	r30, 0xA9	; 169
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	de 01       	movw	r26, r28
    17a2:	a7 5a       	subi	r26, 0xA7	; 167
    17a4:	bf 4f       	sbci	r27, 0xFF	; 255
    17a6:	fe 01       	movw	r30, r28
    17a8:	e7 5a       	subi	r30, 0xA7	; 167
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 81       	ld	r24, Z
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	11 96       	adiw	r26, 0x01	; 1
    17b4:	9c 93       	st	X, r25
    17b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b8:	fe 01       	movw	r30, r28
    17ba:	e7 5a       	subi	r30, 0xA7	; 167
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	80 81       	ld	r24, Z
    17c0:	91 81       	ldd	r25, Z+1	; 0x01
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	d1 f6       	brne	.-76     	; 0x177a <Send_instruction+0x108>
    17c6:	27 c0       	rjmp	.+78     	; 0x1816 <Send_instruction+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c8:	8e 01       	movw	r16, r28
    17ca:	07 5a       	subi	r16, 0xA7	; 167
    17cc:	1f 4f       	sbci	r17, 0xFF	; 255
    17ce:	fe 01       	movw	r30, r28
    17d0:	e5 5a       	subi	r30, 0xA5	; 165
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	60 81       	ld	r22, Z
    17d6:	71 81       	ldd	r23, Z+1	; 0x01
    17d8:	82 81       	ldd	r24, Z+2	; 0x02
    17da:	93 81       	ldd	r25, Z+3	; 0x03
    17dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	f8 01       	movw	r30, r16
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	80 83       	st	Z, r24
    17ea:	de 01       	movw	r26, r28
    17ec:	ab 5a       	subi	r26, 0xAB	; 171
    17ee:	bf 4f       	sbci	r27, 0xFF	; 255
    17f0:	fe 01       	movw	r30, r28
    17f2:	e7 5a       	subi	r30, 0xA7	; 167
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 81       	ld	r24, Z
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	8d 93       	st	X+, r24
    17fc:	9c 93       	st	X, r25
    17fe:	fe 01       	movw	r30, r28
    1800:	eb 5a       	subi	r30, 0xAB	; 171
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	80 81       	ld	r24, Z
    1806:	91 81       	ldd	r25, Z+1	; 0x01
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <Send_instruction+0x196>
    180c:	fe 01       	movw	r30, r28
    180e:	eb 5a       	subi	r30, 0xAB	; 171
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SET_BIT(LCD_Control_reg_OP,E);
    1816:	a5 e3       	ldi	r26, 0x35	; 53
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e5 e3       	ldi	r30, 0x35	; 53
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 62       	ori	r24, 0x20	; 32
    1822:	8c 93       	st	X, r24
    1824:	fe 01       	movw	r30, r28
    1826:	ef 5a       	subi	r30, 0xAF	; 175
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	a0 e8       	ldi	r26, 0x80	; 128
    1830:	bf e3       	ldi	r27, 0x3F	; 63
    1832:	80 83       	st	Z, r24
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	a2 83       	std	Z+2, r26	; 0x02
    1838:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183a:	8e 01       	movw	r16, r28
    183c:	03 5b       	subi	r16, 0xB3	; 179
    183e:	1f 4f       	sbci	r17, 0xFF	; 255
    1840:	fe 01       	movw	r30, r28
    1842:	ef 5a       	subi	r30, 0xAF	; 175
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	60 81       	ld	r22, Z
    1848:	71 81       	ldd	r23, Z+1	; 0x01
    184a:	82 81       	ldd	r24, Z+2	; 0x02
    184c:	93 81       	ldd	r25, Z+3	; 0x03
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e8       	ldi	r19, 0x80	; 128
    1852:	4b e3       	ldi	r20, 0x3B	; 59
    1854:	55 e4       	ldi	r21, 0x45	; 69
    1856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	f8 01       	movw	r30, r16
    1860:	80 83       	st	Z, r24
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	a2 83       	std	Z+2, r26	; 0x02
    1866:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1868:	fe 01       	movw	r30, r28
    186a:	e3 5b       	subi	r30, 0xB3	; 179
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	60 81       	ld	r22, Z
    1870:	71 81       	ldd	r23, Z+1	; 0x01
    1872:	82 81       	ldd	r24, Z+2	; 0x02
    1874:	93 81       	ldd	r25, Z+3	; 0x03
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e8       	ldi	r20, 0x80	; 128
    187c:	5f e3       	ldi	r21, 0x3F	; 63
    187e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1882:	88 23       	and	r24, r24
    1884:	44 f4       	brge	.+16     	; 0x1896 <Send_instruction+0x224>
		__ticks = 1;
    1886:	fe 01       	movw	r30, r28
    1888:	e5 5b       	subi	r30, 0xB5	; 181
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	91 83       	std	Z+1, r25	; 0x01
    1892:	80 83       	st	Z, r24
    1894:	64 c0       	rjmp	.+200    	; 0x195e <Send_instruction+0x2ec>
	else if (__tmp > 65535)
    1896:	fe 01       	movw	r30, r28
    1898:	e3 5b       	subi	r30, 0xB3	; 179
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	3f ef       	ldi	r19, 0xFF	; 255
    18a8:	4f e7       	ldi	r20, 0x7F	; 127
    18aa:	57 e4       	ldi	r21, 0x47	; 71
    18ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18b0:	18 16       	cp	r1, r24
    18b2:	0c f0       	brlt	.+2      	; 0x18b6 <Send_instruction+0x244>
    18b4:	43 c0       	rjmp	.+134    	; 0x193c <Send_instruction+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b6:	fe 01       	movw	r30, r28
    18b8:	ef 5a       	subi	r30, 0xAF	; 175
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	60 81       	ld	r22, Z
    18be:	71 81       	ldd	r23, Z+1	; 0x01
    18c0:	82 81       	ldd	r24, Z+2	; 0x02
    18c2:	93 81       	ldd	r25, Z+3	; 0x03
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e2       	ldi	r20, 0x20	; 32
    18ca:	51 e4       	ldi	r21, 0x41	; 65
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	8e 01       	movw	r16, r28
    18d6:	05 5b       	subi	r16, 0xB5	; 181
    18d8:	1f 4f       	sbci	r17, 0xFF	; 255
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	f8 01       	movw	r30, r16
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	80 83       	st	Z, r24
    18ec:	1f c0       	rjmp	.+62     	; 0x192c <Send_instruction+0x2ba>
    18ee:	fe 01       	movw	r30, r28
    18f0:	e7 5b       	subi	r30, 0xB7	; 183
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	8c e2       	ldi	r24, 0x2C	; 44
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
    18fc:	fe 01       	movw	r30, r28
    18fe:	e7 5b       	subi	r30, 0xB7	; 183
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <Send_instruction+0x294>
    190a:	fe 01       	movw	r30, r28
    190c:	e7 5b       	subi	r30, 0xB7	; 183
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1914:	de 01       	movw	r26, r28
    1916:	a5 5b       	subi	r26, 0xB5	; 181
    1918:	bf 4f       	sbci	r27, 0xFF	; 255
    191a:	fe 01       	movw	r30, r28
    191c:	e5 5b       	subi	r30, 0xB5	; 181
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	80 81       	ld	r24, Z
    1922:	91 81       	ldd	r25, Z+1	; 0x01
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	11 96       	adiw	r26, 0x01	; 1
    1928:	9c 93       	st	X, r25
    192a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	fe 01       	movw	r30, r28
    192e:	e5 5b       	subi	r30, 0xB5	; 181
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	d1 f6       	brne	.-76     	; 0x18ee <Send_instruction+0x27c>
    193a:	27 c0       	rjmp	.+78     	; 0x198a <Send_instruction+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193c:	8e 01       	movw	r16, r28
    193e:	05 5b       	subi	r16, 0xB5	; 181
    1940:	1f 4f       	sbci	r17, 0xFF	; 255
    1942:	fe 01       	movw	r30, r28
    1944:	e3 5b       	subi	r30, 0xB3	; 179
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	60 81       	ld	r22, Z
    194a:	71 81       	ldd	r23, Z+1	; 0x01
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	f8 01       	movw	r30, r16
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	80 83       	st	Z, r24
    195e:	de 01       	movw	r26, r28
    1960:	a9 5b       	subi	r26, 0xB9	; 185
    1962:	bf 4f       	sbci	r27, 0xFF	; 255
    1964:	fe 01       	movw	r30, r28
    1966:	e5 5b       	subi	r30, 0xB5	; 181
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	80 81       	ld	r24, Z
    196c:	91 81       	ldd	r25, Z+1	; 0x01
    196e:	8d 93       	st	X+, r24
    1970:	9c 93       	st	X, r25
    1972:	fe 01       	movw	r30, r28
    1974:	e9 5b       	subi	r30, 0xB9	; 185
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	80 81       	ld	r24, Z
    197a:	91 81       	ldd	r25, Z+1	; 0x01
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <Send_instruction+0x30a>
    1980:	fe 01       	movw	r30, r28
    1982:	e9 5b       	subi	r30, 0xB9	; 185
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	91 83       	std	Z+1, r25	; 0x01
    1988:	80 83       	st	Z, r24
			_delay_ms(1); 
		#else 
			
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    198a:	a8 e3       	ldi	r26, 0x38	; 56
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e8 e3       	ldi	r30, 0x38	; 56
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8f 70       	andi	r24, 0x0F	; 15
    1996:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= (instruction & 0xF0);
    1998:	a8 e3       	ldi	r26, 0x38	; 56
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e8 e3       	ldi	r30, 0x38	; 56
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	98 2f       	mov	r25, r24
    19a4:	fe 01       	movw	r30, r28
    19a6:	ed 59       	subi	r30, 0x9D	; 157
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	80 7f       	andi	r24, 0xF0	; 240
    19ae:	89 2b       	or	r24, r25
    19b0:	8c 93       	st	X, r24
    19b2:	fe 01       	movw	r30, r28
    19b4:	ed 5b       	subi	r30, 0xBD	; 189
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	a0 e8       	ldi	r26, 0x80	; 128
    19be:	bf e3       	ldi	r27, 0x3F	; 63
    19c0:	80 83       	st	Z, r24
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	a2 83       	std	Z+2, r26	; 0x02
    19c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c8:	8e 01       	movw	r16, r28
    19ca:	01 5c       	subi	r16, 0xC1	; 193
    19cc:	1f 4f       	sbci	r17, 0xFF	; 255
    19ce:	fe 01       	movw	r30, r28
    19d0:	ed 5b       	subi	r30, 0xBD	; 189
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	60 81       	ld	r22, Z
    19d6:	71 81       	ldd	r23, Z+1	; 0x01
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e8       	ldi	r19, 0x80	; 128
    19e0:	4b e3       	ldi	r20, 0x3B	; 59
    19e2:	55 e4       	ldi	r21, 0x45	; 69
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	f8 01       	movw	r30, r16
    19ee:	80 83       	st	Z, r24
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	a2 83       	std	Z+2, r26	; 0x02
    19f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19f6:	fe 01       	movw	r30, r28
    19f8:	ff 96       	adiw	r30, 0x3f	; 63
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e8       	ldi	r20, 0x80	; 128
    1a08:	5f e3       	ldi	r21, 0x3F	; 63
    1a0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a0e:	88 23       	and	r24, r24
    1a10:	2c f4       	brge	.+10     	; 0x1a1c <Send_instruction+0x3aa>
		__ticks = 1;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9e af       	std	Y+62, r25	; 0x3e
    1a18:	8d af       	std	Y+61, r24	; 0x3d
    1a1a:	46 c0       	rjmp	.+140    	; 0x1aa8 <Send_instruction+0x436>
	else if (__tmp > 65535)
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	ff 96       	adiw	r30, 0x3f	; 63
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	64 f5       	brge	.+88     	; 0x1a90 <Send_instruction+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	fe 01       	movw	r30, r28
    1a3a:	ed 5b       	subi	r30, 0xBD	; 189
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	60 81       	ld	r22, Z
    1a40:	71 81       	ldd	r23, Z+1	; 0x01
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e2       	ldi	r20, 0x20	; 32
    1a4c:	51 e4       	ldi	r21, 0x41	; 65
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	9e af       	std	Y+62, r25	; 0x3e
    1a64:	8d af       	std	Y+61, r24	; 0x3d
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <Send_instruction+0x414>
    1a68:	8c e2       	ldi	r24, 0x2C	; 44
    1a6a:	91 e0       	ldi	r25, 0x01	; 1
    1a6c:	9c af       	std	Y+60, r25	; 0x3c
    1a6e:	8b af       	std	Y+59, r24	; 0x3b
    1a70:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a72:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <Send_instruction+0x402>
    1a78:	9c af       	std	Y+60, r25	; 0x3c
    1a7a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	9e af       	std	Y+62, r25	; 0x3e
    1a84:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	69 f7       	brne	.-38     	; 0x1a68 <Send_instruction+0x3f6>
    1a8e:	16 c0       	rjmp	.+44     	; 0x1abc <Send_instruction+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a90:	fe 01       	movw	r30, r28
    1a92:	ff 96       	adiw	r30, 0x3f	; 63
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e af       	std	Y+62, r25	; 0x3e
    1aa6:	8d af       	std	Y+61, r24	; 0x3d
    1aa8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aaa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aac:	9a af       	std	Y+58, r25	; 0x3a
    1aae:	89 af       	std	Y+57, r24	; 0x39
    1ab0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ab2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <Send_instruction+0x442>
    1ab8:	9a af       	std	Y+58, r25	; 0x3a
    1aba:	89 af       	std	Y+57, r24	; 0x39
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEAR_BIT(LCD_Control_reg_OP,E);
    1abc:	a5 e3       	ldi	r26, 0x35	; 53
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e5 e3       	ldi	r30, 0x35	; 53
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	8f 7d       	andi	r24, 0xDF	; 223
    1ac8:	8c 93       	st	X, r24
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a0 e8       	ldi	r26, 0x80	; 128
    1ad0:	bf e3       	ldi	r27, 0x3F	; 63
    1ad2:	8d ab       	std	Y+53, r24	; 0x35
    1ad4:	9e ab       	std	Y+54, r25	; 0x36
    1ad6:	af ab       	std	Y+55, r26	; 0x37
    1ad8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ada:	6d a9       	ldd	r22, Y+53	; 0x35
    1adc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ade:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e8       	ldi	r19, 0x80	; 128
    1ae6:	4b e3       	ldi	r20, 0x3B	; 59
    1ae8:	55 e4       	ldi	r21, 0x45	; 69
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	89 ab       	std	Y+49, r24	; 0x31
    1af4:	9a ab       	std	Y+50, r25	; 0x32
    1af6:	ab ab       	std	Y+51, r26	; 0x33
    1af8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1afa:	69 a9       	ldd	r22, Y+49	; 0x31
    1afc:	7a a9       	ldd	r23, Y+50	; 0x32
    1afe:	8b a9       	ldd	r24, Y+51	; 0x33
    1b00:	9c a9       	ldd	r25, Y+52	; 0x34
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e8       	ldi	r20, 0x80	; 128
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b0e:	88 23       	and	r24, r24
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <Send_instruction+0x4aa>
		__ticks = 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	98 ab       	std	Y+48, r25	; 0x30
    1b18:	8f a7       	std	Y+47, r24	; 0x2f
    1b1a:	3f c0       	rjmp	.+126    	; 0x1b9a <Send_instruction+0x528>
	else if (__tmp > 65535)
    1b1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b20:	8b a9       	ldd	r24, Y+51	; 0x33
    1b22:	9c a9       	ldd	r25, Y+52	; 0x34
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	4c f5       	brge	.+82     	; 0x1b86 <Send_instruction+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b34:	6d a9       	ldd	r22, Y+53	; 0x35
    1b36:	7e a9       	ldd	r23, Y+54	; 0x36
    1b38:	8f a9       	ldd	r24, Y+55	; 0x37
    1b3a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e2       	ldi	r20, 0x20	; 32
    1b42:	51 e4       	ldi	r21, 0x41	; 65
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	98 ab       	std	Y+48, r25	; 0x30
    1b5a:	8f a7       	std	Y+47, r24	; 0x2f
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <Send_instruction+0x50a>
    1b5e:	8c e2       	ldi	r24, 0x2C	; 44
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	9e a7       	std	Y+46, r25	; 0x2e
    1b64:	8d a7       	std	Y+45, r24	; 0x2d
    1b66:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b68:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <Send_instruction+0x4f8>
    1b6e:	9e a7       	std	Y+46, r25	; 0x2e
    1b70:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b74:	98 a9       	ldd	r25, Y+48	; 0x30
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	98 ab       	std	Y+48, r25	; 0x30
    1b7a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	69 f7       	brne	.-38     	; 0x1b5e <Send_instruction+0x4ec>
    1b84:	14 c0       	rjmp	.+40     	; 0x1bae <Send_instruction+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b86:	69 a9       	ldd	r22, Y+49	; 0x31
    1b88:	7a a9       	ldd	r23, Y+50	; 0x32
    1b8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	98 ab       	std	Y+48, r25	; 0x30
    1b98:	8f a7       	std	Y+47, r24	; 0x2f
    1b9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9e:	9c a7       	std	Y+44, r25	; 0x2c
    1ba0:	8b a7       	std	Y+43, r24	; 0x2b
    1ba2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <Send_instruction+0x534>
    1baa:	9c a7       	std	Y+44, r25	; 0x2c
    1bac:	8b a7       	std	Y+43, r24	; 0x2b
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SET_BIT(LCD_Control_reg_OP,E);
    1bae:	a5 e3       	ldi	r26, 0x35	; 53
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e5 e3       	ldi	r30, 0x35	; 53
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 62       	ori	r24, 0x20	; 32
    1bba:	8c 93       	st	X, r24
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e8       	ldi	r26, 0x80	; 128
    1bc2:	bf e3       	ldi	r27, 0x3F	; 63
    1bc4:	8f a3       	std	Y+39, r24	; 0x27
    1bc6:	98 a7       	std	Y+40, r25	; 0x28
    1bc8:	a9 a7       	std	Y+41, r26	; 0x29
    1bca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	6f a1       	ldd	r22, Y+39	; 0x27
    1bce:	78 a5       	ldd	r23, Y+40	; 0x28
    1bd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1bd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e8       	ldi	r19, 0x80	; 128
    1bd8:	4b e3       	ldi	r20, 0x3B	; 59
    1bda:	55 e4       	ldi	r21, 0x45	; 69
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8b a3       	std	Y+35, r24	; 0x23
    1be6:	9c a3       	std	Y+36, r25	; 0x24
    1be8:	ad a3       	std	Y+37, r26	; 0x25
    1bea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bec:	6b a1       	ldd	r22, Y+35	; 0x23
    1bee:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <Send_instruction+0x59c>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9a a3       	std	Y+34, r25	; 0x22
    1c0a:	89 a3       	std	Y+33, r24	; 0x21
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <Send_instruction+0x61a>
	else if (__tmp > 65535)
    1c0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c10:	7c a1       	ldd	r23, Y+36	; 0x24
    1c12:	8d a1       	ldd	r24, Y+37	; 0x25
    1c14:	9e a1       	ldd	r25, Y+38	; 0x26
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <Send_instruction+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	6f a1       	ldd	r22, Y+39	; 0x27
    1c28:	78 a5       	ldd	r23, Y+40	; 0x28
    1c2a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9a a3       	std	Y+34, r25	; 0x22
    1c4c:	89 a3       	std	Y+33, r24	; 0x21
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <Send_instruction+0x5fc>
    1c50:	8c e2       	ldi	r24, 0x2C	; 44
    1c52:	91 e0       	ldi	r25, 0x01	; 1
    1c54:	98 a3       	std	Y+32, r25	; 0x20
    1c56:	8f 8f       	std	Y+31, r24	; 0x1f
    1c58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c5a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <Send_instruction+0x5ea>
    1c60:	98 a3       	std	Y+32, r25	; 0x20
    1c62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	89 a1       	ldd	r24, Y+33	; 0x21
    1c66:	9a a1       	ldd	r25, Y+34	; 0x22
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9a a3       	std	Y+34, r25	; 0x22
    1c6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c70:	9a a1       	ldd	r25, Y+34	; 0x22
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <Send_instruction+0x5de>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <Send_instruction+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6b a1       	ldd	r22, Y+35	; 0x23
    1c7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9a a3       	std	Y+34, r25	; 0x22
    1c8a:	89 a3       	std	Y+33, r24	; 0x21
    1c8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c90:	9e 8f       	std	Y+30, r25	; 0x1e
    1c92:	8d 8f       	std	Y+29, r24	; 0x1d
    1c94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <Send_instruction+0x626>
    1c9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c9e:	8d 8f       	std	Y+29, r24	; 0x1d
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    1ca0:	a8 e3       	ldi	r26, 0x38	; 56
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e8 e3       	ldi	r30, 0x38	; 56
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	8f 70       	andi	r24, 0x0F	; 15
    1cac:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= ((instruction <<4) & 0xF0);
    1cae:	a8 e3       	ldi	r26, 0x38	; 56
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e8 e3       	ldi	r30, 0x38	; 56
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	28 2f       	mov	r18, r24
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ed 59       	subi	r30, 0x9D	; 157
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	82 95       	swap	r24
    1cc8:	92 95       	swap	r25
    1cca:	90 7f       	andi	r25, 0xF0	; 240
    1ccc:	98 27       	eor	r25, r24
    1cce:	80 7f       	andi	r24, 0xF0	; 240
    1cd0:	98 27       	eor	r25, r24
    1cd2:	82 2b       	or	r24, r18
    1cd4:	8c 93       	st	X, r24
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e8       	ldi	r26, 0x80	; 128
    1cdc:	bf e3       	ldi	r27, 0x3F	; 63
    1cde:	89 8f       	std	Y+25, r24	; 0x19
    1ce0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e8       	ldi	r19, 0x80	; 128
    1cf2:	4b e3       	ldi	r20, 0x3B	; 59
    1cf4:	55 e4       	ldi	r21, 0x45	; 69
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8d 8b       	std	Y+21, r24	; 0x15
    1d00:	9e 8b       	std	Y+22, r25	; 0x16
    1d02:	af 8b       	std	Y+23, r26	; 0x17
    1d04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d06:	6d 89       	ldd	r22, Y+21	; 0x15
    1d08:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <Send_instruction+0x6b6>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9c 8b       	std	Y+20, r25	; 0x14
    1d24:	8b 8b       	std	Y+19, r24	; 0x13
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <Send_instruction+0x734>
	else if (__tmp > 65535)
    1d28:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <Send_instruction+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	69 8d       	ldd	r22, Y+25	; 0x19
    1d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <Send_instruction+0x716>
    1d6a:	8c e2       	ldi	r24, 0x2C	; 44
    1d6c:	91 e0       	ldi	r25, 0x01	; 1
    1d6e:	9a 8b       	std	Y+18, r25	; 0x12
    1d70:	89 8b       	std	Y+17, r24	; 0x11
    1d72:	89 89       	ldd	r24, Y+17	; 0x11
    1d74:	9a 89       	ldd	r25, Y+18	; 0x12
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <Send_instruction+0x704>
    1d7a:	9a 8b       	std	Y+18, r25	; 0x12
    1d7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9c 8b       	std	Y+20, r25	; 0x14
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <Send_instruction+0x6f8>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <Send_instruction+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9c 8b       	std	Y+20, r25	; 0x14
    1da4:	8b 8b       	std	Y+19, r24	; 0x13
    1da6:	8b 89       	ldd	r24, Y+19	; 0x13
    1da8:	9c 89       	ldd	r25, Y+20	; 0x14
    1daa:	98 8b       	std	Y+16, r25	; 0x10
    1dac:	8f 87       	std	Y+15, r24	; 0x0f
    1dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db0:	98 89       	ldd	r25, Y+16	; 0x10
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <Send_instruction+0x740>
    1db6:	98 8b       	std	Y+16, r25	; 0x10
    1db8:	8f 87       	std	Y+15, r24	; 0x0f
				LCD_Data_Reg_OP |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEAR_BIT(LCD_Control_reg_OP,E);
    1dba:	a5 e3       	ldi	r26, 0x35	; 53
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e5 e3       	ldi	r30, 0x35	; 53
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8f 7d       	andi	r24, 0xDF	; 223
    1dc6:	8c 93       	st	X, r24
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a0 e8       	ldi	r26, 0x80	; 128
    1dce:	bf e3       	ldi	r27, 0x3F	; 63
    1dd0:	8b 87       	std	Y+11, r24	; 0x0b
    1dd2:	9c 87       	std	Y+12, r25	; 0x0c
    1dd4:	ad 87       	std	Y+13, r26	; 0x0d
    1dd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e8       	ldi	r19, 0x80	; 128
    1de4:	4b e3       	ldi	r20, 0x3B	; 59
    1de6:	55 e4       	ldi	r21, 0x45	; 69
    1de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	8f 83       	std	Y+7, r24	; 0x07
    1df2:	98 87       	std	Y+8, r25	; 0x08
    1df4:	a9 87       	std	Y+9, r26	; 0x09
    1df6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfa:	78 85       	ldd	r23, Y+8	; 0x08
    1dfc:	89 85       	ldd	r24, Y+9	; 0x09
    1dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e8       	ldi	r20, 0x80	; 128
    1e06:	5f e3       	ldi	r21, 0x3F	; 63
    1e08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e0c:	88 23       	and	r24, r24
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <Send_instruction+0x7a8>
		__ticks = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9e 83       	std	Y+6, r25	; 0x06
    1e16:	8d 83       	std	Y+5, r24	; 0x05
    1e18:	3f c0       	rjmp	.+126    	; 0x1e98 <Send_instruction+0x826>
	else if (__tmp > 65535)
    1e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1c:	78 85       	ldd	r23, Y+8	; 0x08
    1e1e:	89 85       	ldd	r24, Y+9	; 0x09
    1e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	3f ef       	ldi	r19, 0xFF	; 255
    1e26:	4f e7       	ldi	r20, 0x7F	; 127
    1e28:	57 e4       	ldi	r21, 0x47	; 71
    1e2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e2e:	18 16       	cp	r1, r24
    1e30:	4c f5       	brge	.+82     	; 0x1e84 <Send_instruction+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e2       	ldi	r20, 0x20	; 32
    1e40:	51 e4       	ldi	r21, 0x41	; 65
    1e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	bc 01       	movw	r22, r24
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9e 83       	std	Y+6, r25	; 0x06
    1e58:	8d 83       	std	Y+5, r24	; 0x05
    1e5a:	0f c0       	rjmp	.+30     	; 0x1e7a <Send_instruction+0x808>
    1e5c:	8c e2       	ldi	r24, 0x2C	; 44
    1e5e:	91 e0       	ldi	r25, 0x01	; 1
    1e60:	9c 83       	std	Y+4, r25	; 0x04
    1e62:	8b 83       	std	Y+3, r24	; 0x03
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <Send_instruction+0x7f6>
    1e6c:	9c 83       	std	Y+4, r25	; 0x04
    1e6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	9e 83       	std	Y+6, r25	; 0x06
    1e78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	69 f7       	brne	.-38     	; 0x1e5c <Send_instruction+0x7ea>
    1e82:	14 c0       	rjmp	.+40     	; 0x1eac <Send_instruction+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e84:	6f 81       	ldd	r22, Y+7	; 0x07
    1e86:	78 85       	ldd	r23, Y+8	; 0x08
    1e88:	89 85       	ldd	r24, Y+9	; 0x09
    1e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <Send_instruction+0x832>
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
				/* Data Hold delay Th = 10ns */
				_delay_ms(1);
		#endif
	}
    1eac:	cd 59       	subi	r28, 0x9D	; 157
    1eae:	df 4f       	sbci	r29, 0xFF	; 255
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <LCD_DisplayChar>:
	
	
	void LCD_DisplayChar(uint8 Data)
	{
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	c3 56       	subi	r28, 0x63	; 99
    1ed2:	d0 40       	sbci	r29, 0x00	; 0
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ed 59       	subi	r30, 0x9D	; 157
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 83       	st	Z, r24
		/* RW  Should be 0  and RS should be 1 when Writing Data to LCD */
		SET_BIT(LCD_Control_reg_OP,RS);
    1ee6:	a5 e3       	ldi	r26, 0x35	; 53
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e5 e3       	ldi	r30, 0x35	; 53
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 68       	ori	r24, 0x80	; 128
    1ef2:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_Control_reg_OP,RW);
    1ef4:	a5 e3       	ldi	r26, 0x35	; 53
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e5 e3       	ldi	r30, 0x35	; 53
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8f 7b       	andi	r24, 0xBF	; 191
    1f00:	8c 93       	st	X, r24
    1f02:	fe 01       	movw	r30, r28
    1f04:	e1 5a       	subi	r30, 0xA1	; 161
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e8       	ldi	r26, 0x80	; 128
    1f0e:	bf e3       	ldi	r27, 0x3F	; 63
    1f10:	80 83       	st	Z, r24
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	a2 83       	std	Z+2, r26	; 0x02
    1f16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f18:	8e 01       	movw	r16, r28
    1f1a:	05 5a       	subi	r16, 0xA5	; 165
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	fe 01       	movw	r30, r28
    1f20:	e1 5a       	subi	r30, 0xA1	; 161
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	60 81       	ld	r22, Z
    1f26:	71 81       	ldd	r23, Z+1	; 0x01
    1f28:	82 81       	ldd	r24, Z+2	; 0x02
    1f2a:	93 81       	ldd	r25, Z+3	; 0x03
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e8       	ldi	r19, 0x80	; 128
    1f30:	4b e3       	ldi	r20, 0x3B	; 59
    1f32:	55 e4       	ldi	r21, 0x45	; 69
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	80 83       	st	Z, r24
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	a2 83       	std	Z+2, r26	; 0x02
    1f44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f46:	fe 01       	movw	r30, r28
    1f48:	e5 5a       	subi	r30, 0xA5	; 165
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f60:	88 23       	and	r24, r24
    1f62:	44 f4       	brge	.+16     	; 0x1f74 <LCD_DisplayChar+0xb0>
		__ticks = 1;
    1f64:	fe 01       	movw	r30, r28
    1f66:	e7 5a       	subi	r30, 0xA7	; 167
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	80 83       	st	Z, r24
    1f72:	64 c0       	rjmp	.+200    	; 0x203c <LCD_DisplayChar+0x178>
	else if (__tmp > 65535)
    1f74:	fe 01       	movw	r30, r28
    1f76:	e5 5a       	subi	r30, 0xA5	; 165
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	0c f0       	brlt	.+2      	; 0x1f94 <LCD_DisplayChar+0xd0>
    1f92:	43 c0       	rjmp	.+134    	; 0x201a <LCD_DisplayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f94:	fe 01       	movw	r30, r28
    1f96:	e1 5a       	subi	r30, 0xA1	; 161
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	60 81       	ld	r22, Z
    1f9c:	71 81       	ldd	r23, Z+1	; 0x01
    1f9e:	82 81       	ldd	r24, Z+2	; 0x02
    1fa0:	93 81       	ldd	r25, Z+3	; 0x03
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	51 e4       	ldi	r21, 0x41	; 65
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	8e 01       	movw	r16, r28
    1fb4:	07 5a       	subi	r16, 0xA7	; 167
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	80 83       	st	Z, r24
    1fca:	1f c0       	rjmp	.+62     	; 0x200a <LCD_DisplayChar+0x146>
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e9 5a       	subi	r30, 0xA9	; 169
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	8c e2       	ldi	r24, 0x2C	; 44
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	80 83       	st	Z, r24
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e9 5a       	subi	r30, 0xA9	; 169
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_DisplayChar+0x120>
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e9 5a       	subi	r30, 0xA9	; 169
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff2:	de 01       	movw	r26, r28
    1ff4:	a7 5a       	subi	r26, 0xA7	; 167
    1ff6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e7 5a       	subi	r30, 0xA7	; 167
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 81       	ld	r24, Z
    2000:	91 81       	ldd	r25, Z+1	; 0x01
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	11 96       	adiw	r26, 0x01	; 1
    2006:	9c 93       	st	X, r25
    2008:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200a:	fe 01       	movw	r30, r28
    200c:	e7 5a       	subi	r30, 0xA7	; 167
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 81       	ld	r24, Z
    2012:	91 81       	ldd	r25, Z+1	; 0x01
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	d1 f6       	brne	.-76     	; 0x1fcc <LCD_DisplayChar+0x108>
    2018:	27 c0       	rjmp	.+78     	; 0x2068 <LCD_DisplayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201a:	8e 01       	movw	r16, r28
    201c:	07 5a       	subi	r16, 0xA7	; 167
    201e:	1f 4f       	sbci	r17, 0xFF	; 255
    2020:	fe 01       	movw	r30, r28
    2022:	e5 5a       	subi	r30, 0xA5	; 165
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	f8 01       	movw	r30, r16
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	80 83       	st	Z, r24
    203c:	de 01       	movw	r26, r28
    203e:	ab 5a       	subi	r26, 0xAB	; 171
    2040:	bf 4f       	sbci	r27, 0xFF	; 255
    2042:	fe 01       	movw	r30, r28
    2044:	e7 5a       	subi	r30, 0xA7	; 167
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	80 81       	ld	r24, Z
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	8d 93       	st	X+, r24
    204e:	9c 93       	st	X, r25
    2050:	fe 01       	movw	r30, r28
    2052:	eb 5a       	subi	r30, 0xAB	; 171
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_DisplayChar+0x196>
    205e:	fe 01       	movw	r30, r28
    2060:	eb 5a       	subi	r30, 0xAB	; 171
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		/* Enable LCD E=1 */
		SET_BIT(LCD_Control_reg_OP,E);
    2068:	a5 e3       	ldi	r26, 0x35	; 53
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e5 e3       	ldi	r30, 0x35	; 53
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	80 62       	ori	r24, 0x20	; 32
    2074:	8c 93       	st	X, r24
    2076:	fe 01       	movw	r30, r28
    2078:	ef 5a       	subi	r30, 0xAF	; 175
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a0 e8       	ldi	r26, 0x80	; 128
    2082:	bf e3       	ldi	r27, 0x3F	; 63
    2084:	80 83       	st	Z, r24
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	a2 83       	std	Z+2, r26	; 0x02
    208a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	8e 01       	movw	r16, r28
    208e:	03 5b       	subi	r16, 0xB3	; 179
    2090:	1f 4f       	sbci	r17, 0xFF	; 255
    2092:	fe 01       	movw	r30, r28
    2094:	ef 5a       	subi	r30, 0xAF	; 175
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	60 81       	ld	r22, Z
    209a:	71 81       	ldd	r23, Z+1	; 0x01
    209c:	82 81       	ldd	r24, Z+2	; 0x02
    209e:	93 81       	ldd	r25, Z+3	; 0x03
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e8       	ldi	r19, 0x80	; 128
    20a4:	4b e3       	ldi	r20, 0x3B	; 59
    20a6:	55 e4       	ldi	r21, 0x45	; 69
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	f8 01       	movw	r30, r16
    20b2:	80 83       	st	Z, r24
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	a2 83       	std	Z+2, r26	; 0x02
    20b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ba:	fe 01       	movw	r30, r28
    20bc:	e3 5b       	subi	r30, 0xB3	; 179
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	44 f4       	brge	.+16     	; 0x20e8 <LCD_DisplayChar+0x224>
		__ticks = 1;
    20d8:	fe 01       	movw	r30, r28
    20da:	e5 5b       	subi	r30, 0xB5	; 181
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	91 83       	std	Z+1, r25	; 0x01
    20e4:	80 83       	st	Z, r24
    20e6:	64 c0       	rjmp	.+200    	; 0x21b0 <LCD_DisplayChar+0x2ec>
	else if (__tmp > 65535)
    20e8:	fe 01       	movw	r30, r28
    20ea:	e3 5b       	subi	r30, 0xB3	; 179
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	60 81       	ld	r22, Z
    20f0:	71 81       	ldd	r23, Z+1	; 0x01
    20f2:	82 81       	ldd	r24, Z+2	; 0x02
    20f4:	93 81       	ldd	r25, Z+3	; 0x03
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2102:	18 16       	cp	r1, r24
    2104:	0c f0       	brlt	.+2      	; 0x2108 <LCD_DisplayChar+0x244>
    2106:	43 c0       	rjmp	.+134    	; 0x218e <LCD_DisplayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2108:	fe 01       	movw	r30, r28
    210a:	ef 5a       	subi	r30, 0xAF	; 175
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	60 81       	ld	r22, Z
    2110:	71 81       	ldd	r23, Z+1	; 0x01
    2112:	82 81       	ldd	r24, Z+2	; 0x02
    2114:	93 81       	ldd	r25, Z+3	; 0x03
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e2       	ldi	r20, 0x20	; 32
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8e 01       	movw	r16, r28
    2128:	05 5b       	subi	r16, 0xB5	; 181
    212a:	1f 4f       	sbci	r17, 0xFF	; 255
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	f8 01       	movw	r30, r16
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	80 83       	st	Z, r24
    213e:	1f c0       	rjmp	.+62     	; 0x217e <LCD_DisplayChar+0x2ba>
    2140:	fe 01       	movw	r30, r28
    2142:	e7 5b       	subi	r30, 0xB7	; 183
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	8c e2       	ldi	r24, 0x2C	; 44
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
    214e:	fe 01       	movw	r30, r28
    2150:	e7 5b       	subi	r30, 0xB7	; 183
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 81       	ld	r24, Z
    2156:	91 81       	ldd	r25, Z+1	; 0x01
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_DisplayChar+0x294>
    215c:	fe 01       	movw	r30, r28
    215e:	e7 5b       	subi	r30, 0xB7	; 183
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	de 01       	movw	r26, r28
    2168:	a5 5b       	subi	r26, 0xB5	; 181
    216a:	bf 4f       	sbci	r27, 0xFF	; 255
    216c:	fe 01       	movw	r30, r28
    216e:	e5 5b       	subi	r30, 0xB5	; 181
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	11 96       	adiw	r26, 0x01	; 1
    217a:	9c 93       	st	X, r25
    217c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217e:	fe 01       	movw	r30, r28
    2180:	e5 5b       	subi	r30, 0xB5	; 181
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	91 81       	ldd	r25, Z+1	; 0x01
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	d1 f6       	brne	.-76     	; 0x2140 <LCD_DisplayChar+0x27c>
    218c:	27 c0       	rjmp	.+78     	; 0x21dc <LCD_DisplayChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218e:	8e 01       	movw	r16, r28
    2190:	05 5b       	subi	r16, 0xB5	; 181
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	fe 01       	movw	r30, r28
    2196:	e3 5b       	subi	r30, 0xB3	; 179
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	f8 01       	movw	r30, r16
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	80 83       	st	Z, r24
    21b0:	de 01       	movw	r26, r28
    21b2:	a9 5b       	subi	r26, 0xB9	; 185
    21b4:	bf 4f       	sbci	r27, 0xFF	; 255
    21b6:	fe 01       	movw	r30, r28
    21b8:	e5 5b       	subi	r30, 0xB5	; 181
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 81       	ld	r24, Z
    21be:	91 81       	ldd	r25, Z+1	; 0x01
    21c0:	8d 93       	st	X+, r24
    21c2:	9c 93       	st	X, r25
    21c4:	fe 01       	movw	r30, r28
    21c6:	e9 5b       	subi	r30, 0xB9	; 185
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	80 81       	ld	r24, Z
    21cc:	91 81       	ldd	r25, Z+1	; 0x01
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_DisplayChar+0x30a>
    21d2:	fe 01       	movw	r30, r28
    21d4:	e9 5b       	subi	r30, 0xB9	; 185
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	80 83       	st	Z, r24
		#if eight_bitdata
			LCD_Data_Reg_OP=Data;
		#else
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    21dc:	a8 e3       	ldi	r26, 0x38	; 56
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e8 e3       	ldi	r30, 0x38	; 56
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8f 70       	andi	r24, 0x0F	; 15
    21e8:	8c 93       	st	X, r24
				/* Send MSB (4-bits )*/
				LCD_Data_Reg_OP |= (Data & 0xF0);
    21ea:	a8 e3       	ldi	r26, 0x38	; 56
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e8 e3       	ldi	r30, 0x38	; 56
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	98 2f       	mov	r25, r24
    21f6:	fe 01       	movw	r30, r28
    21f8:	ed 59       	subi	r30, 0x9D	; 157
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	80 7f       	andi	r24, 0xF0	; 240
    2200:	89 2b       	or	r24, r25
    2202:	8c 93       	st	X, r24
    2204:	fe 01       	movw	r30, r28
    2206:	ed 5b       	subi	r30, 0xBD	; 189
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a0 e8       	ldi	r26, 0x80	; 128
    2210:	bf e3       	ldi	r27, 0x3F	; 63
    2212:	80 83       	st	Z, r24
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	a2 83       	std	Z+2, r26	; 0x02
    2218:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221a:	8e 01       	movw	r16, r28
    221c:	01 5c       	subi	r16, 0xC1	; 193
    221e:	1f 4f       	sbci	r17, 0xFF	; 255
    2220:	fe 01       	movw	r30, r28
    2222:	ed 5b       	subi	r30, 0xBD	; 189
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	60 81       	ld	r22, Z
    2228:	71 81       	ldd	r23, Z+1	; 0x01
    222a:	82 81       	ldd	r24, Z+2	; 0x02
    222c:	93 81       	ldd	r25, Z+3	; 0x03
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e8       	ldi	r19, 0x80	; 128
    2232:	4b e3       	ldi	r20, 0x3B	; 59
    2234:	55 e4       	ldi	r21, 0x45	; 69
    2236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	f8 01       	movw	r30, r16
    2240:	80 83       	st	Z, r24
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	a2 83       	std	Z+2, r26	; 0x02
    2246:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2248:	fe 01       	movw	r30, r28
    224a:	ff 96       	adiw	r30, 0x3f	; 63
    224c:	60 81       	ld	r22, Z
    224e:	71 81       	ldd	r23, Z+1	; 0x01
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	93 81       	ldd	r25, Z+3	; 0x03
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <LCD_DisplayChar+0x3aa>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9e af       	std	Y+62, r25	; 0x3e
    226a:	8d af       	std	Y+61, r24	; 0x3d
    226c:	46 c0       	rjmp	.+140    	; 0x22fa <LCD_DisplayChar+0x436>
	else if (__tmp > 65535)
    226e:	fe 01       	movw	r30, r28
    2270:	ff 96       	adiw	r30, 0x3f	; 63
    2272:	60 81       	ld	r22, Z
    2274:	71 81       	ldd	r23, Z+1	; 0x01
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	64 f5       	brge	.+88     	; 0x22e2 <LCD_DisplayChar+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	fe 01       	movw	r30, r28
    228c:	ed 5b       	subi	r30, 0xBD	; 189
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e af       	std	Y+62, r25	; 0x3e
    22b6:	8d af       	std	Y+61, r24	; 0x3d
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <LCD_DisplayChar+0x414>
    22ba:	8c e2       	ldi	r24, 0x2C	; 44
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	9c af       	std	Y+60, r25	; 0x3c
    22c0:	8b af       	std	Y+59, r24	; 0x3b
    22c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    22c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <LCD_DisplayChar+0x402>
    22ca:	9c af       	std	Y+60, r25	; 0x3c
    22cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    22d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	9e af       	std	Y+62, r25	; 0x3e
    22d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    22da:	9e ad       	ldd	r25, Y+62	; 0x3e
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	69 f7       	brne	.-38     	; 0x22ba <LCD_DisplayChar+0x3f6>
    22e0:	16 c0       	rjmp	.+44     	; 0x230e <LCD_DisplayChar+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e2:	fe 01       	movw	r30, r28
    22e4:	ff 96       	adiw	r30, 0x3f	; 63
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9e af       	std	Y+62, r25	; 0x3e
    22f8:	8d af       	std	Y+61, r24	; 0x3d
    22fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    22fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    22fe:	9a af       	std	Y+58, r25	; 0x3a
    2300:	89 af       	std	Y+57, r24	; 0x39
    2302:	89 ad       	ldd	r24, Y+57	; 0x39
    2304:	9a ad       	ldd	r25, Y+58	; 0x3a
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_DisplayChar+0x442>
    230a:	9a af       	std	Y+58, r25	; 0x3a
    230c:	89 af       	std	Y+57, r24	; 0x39
			#endif
				
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
			/* disable LCD E=0 */
			CLEAR_BIT(LCD_Control_reg_OP,E);
    230e:	a5 e3       	ldi	r26, 0x35	; 53
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e5 e3       	ldi	r30, 0x35	; 53
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	8f 7d       	andi	r24, 0xDF	; 223
    231a:	8c 93       	st	X, r24
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	a0 e8       	ldi	r26, 0x80	; 128
    2322:	bf e3       	ldi	r27, 0x3F	; 63
    2324:	8d ab       	std	Y+53, r24	; 0x35
    2326:	9e ab       	std	Y+54, r25	; 0x36
    2328:	af ab       	std	Y+55, r26	; 0x37
    232a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232c:	6d a9       	ldd	r22, Y+53	; 0x35
    232e:	7e a9       	ldd	r23, Y+54	; 0x36
    2330:	8f a9       	ldd	r24, Y+55	; 0x37
    2332:	98 ad       	ldd	r25, Y+56	; 0x38
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e8       	ldi	r19, 0x80	; 128
    2338:	4b e3       	ldi	r20, 0x3B	; 59
    233a:	55 e4       	ldi	r21, 0x45	; 69
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	89 ab       	std	Y+49, r24	; 0x31
    2346:	9a ab       	std	Y+50, r25	; 0x32
    2348:	ab ab       	std	Y+51, r26	; 0x33
    234a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    234c:	69 a9       	ldd	r22, Y+49	; 0x31
    234e:	7a a9       	ldd	r23, Y+50	; 0x32
    2350:	8b a9       	ldd	r24, Y+51	; 0x33
    2352:	9c a9       	ldd	r25, Y+52	; 0x34
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e8       	ldi	r20, 0x80	; 128
    235a:	5f e3       	ldi	r21, 0x3F	; 63
    235c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2360:	88 23       	and	r24, r24
    2362:	2c f4       	brge	.+10     	; 0x236e <LCD_DisplayChar+0x4aa>
		__ticks = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	98 ab       	std	Y+48, r25	; 0x30
    236a:	8f a7       	std	Y+47, r24	; 0x2f
    236c:	3f c0       	rjmp	.+126    	; 0x23ec <LCD_DisplayChar+0x528>
	else if (__tmp > 65535)
    236e:	69 a9       	ldd	r22, Y+49	; 0x31
    2370:	7a a9       	ldd	r23, Y+50	; 0x32
    2372:	8b a9       	ldd	r24, Y+51	; 0x33
    2374:	9c a9       	ldd	r25, Y+52	; 0x34
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	3f ef       	ldi	r19, 0xFF	; 255
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	57 e4       	ldi	r21, 0x47	; 71
    237e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2382:	18 16       	cp	r1, r24
    2384:	4c f5       	brge	.+82     	; 0x23d8 <LCD_DisplayChar+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2386:	6d a9       	ldd	r22, Y+53	; 0x35
    2388:	7e a9       	ldd	r23, Y+54	; 0x36
    238a:	8f a9       	ldd	r24, Y+55	; 0x37
    238c:	98 ad       	ldd	r25, Y+56	; 0x38
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e2       	ldi	r20, 0x20	; 32
    2394:	51 e4       	ldi	r21, 0x41	; 65
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	98 ab       	std	Y+48, r25	; 0x30
    23ac:	8f a7       	std	Y+47, r24	; 0x2f
    23ae:	0f c0       	rjmp	.+30     	; 0x23ce <LCD_DisplayChar+0x50a>
    23b0:	8c e2       	ldi	r24, 0x2C	; 44
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	9e a7       	std	Y+46, r25	; 0x2e
    23b6:	8d a7       	std	Y+45, r24	; 0x2d
    23b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    23ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <LCD_DisplayChar+0x4f8>
    23c0:	9e a7       	std	Y+46, r25	; 0x2e
    23c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c6:	98 a9       	ldd	r25, Y+48	; 0x30
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	98 ab       	std	Y+48, r25	; 0x30
    23cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d0:	98 a9       	ldd	r25, Y+48	; 0x30
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	69 f7       	brne	.-38     	; 0x23b0 <LCD_DisplayChar+0x4ec>
    23d6:	14 c0       	rjmp	.+40     	; 0x2400 <LCD_DisplayChar+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d8:	69 a9       	ldd	r22, Y+49	; 0x31
    23da:	7a a9       	ldd	r23, Y+50	; 0x32
    23dc:	8b a9       	ldd	r24, Y+51	; 0x33
    23de:	9c a9       	ldd	r25, Y+52	; 0x34
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	98 ab       	std	Y+48, r25	; 0x30
    23ea:	8f a7       	std	Y+47, r24	; 0x2f
    23ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ee:	98 a9       	ldd	r25, Y+48	; 0x30
    23f0:	9c a7       	std	Y+44, r25	; 0x2c
    23f2:	8b a7       	std	Y+43, r24	; 0x2b
    23f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <LCD_DisplayChar+0x534>
    23fc:	9c a7       	std	Y+44, r25	; 0x2c
    23fe:	8b a7       	std	Y+43, r24	; 0x2b
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			/* Enable LCD E=1 */
			SET_BIT(LCD_Control_reg_OP,E); 
    2400:	a5 e3       	ldi	r26, 0x35	; 53
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e5 e3       	ldi	r30, 0x35	; 53
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	80 62       	ori	r24, 0x20	; 32
    240c:	8c 93       	st	X, r24
				
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    240e:	a8 e3       	ldi	r26, 0x38	; 56
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e8 e3       	ldi	r30, 0x38	; 56
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	8f 70       	andi	r24, 0x0F	; 15
    241a:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= ((Data <<4) & 0xF0);
    241c:	a8 e3       	ldi	r26, 0x38	; 56
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	e8 e3       	ldi	r30, 0x38	; 56
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	28 2f       	mov	r18, r24
    2428:	fe 01       	movw	r30, r28
    242a:	ed 59       	subi	r30, 0x9D	; 157
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	88 2f       	mov	r24, r24
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	82 95       	swap	r24
    2436:	92 95       	swap	r25
    2438:	90 7f       	andi	r25, 0xF0	; 240
    243a:	98 27       	eor	r25, r24
    243c:	80 7f       	andi	r24, 0xF0	; 240
    243e:	98 27       	eor	r25, r24
    2440:	82 2b       	or	r24, r18
    2442:	8c 93       	st	X, r24
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	a0 e8       	ldi	r26, 0x80	; 128
    244a:	bf e3       	ldi	r27, 0x3F	; 63
    244c:	8f a3       	std	Y+39, r24	; 0x27
    244e:	98 a7       	std	Y+40, r25	; 0x28
    2450:	a9 a7       	std	Y+41, r26	; 0x29
    2452:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2454:	6f a1       	ldd	r22, Y+39	; 0x27
    2456:	78 a5       	ldd	r23, Y+40	; 0x28
    2458:	89 a5       	ldd	r24, Y+41	; 0x29
    245a:	9a a5       	ldd	r25, Y+42	; 0x2a
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e8       	ldi	r19, 0x80	; 128
    2460:	4b e3       	ldi	r20, 0x3B	; 59
    2462:	55 e4       	ldi	r21, 0x45	; 69
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	8b a3       	std	Y+35, r24	; 0x23
    246e:	9c a3       	std	Y+36, r25	; 0x24
    2470:	ad a3       	std	Y+37, r26	; 0x25
    2472:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2474:	6b a1       	ldd	r22, Y+35	; 0x23
    2476:	7c a1       	ldd	r23, Y+36	; 0x24
    2478:	8d a1       	ldd	r24, Y+37	; 0x25
    247a:	9e a1       	ldd	r25, Y+38	; 0x26
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e8       	ldi	r20, 0x80	; 128
    2482:	5f e3       	ldi	r21, 0x3F	; 63
    2484:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2488:	88 23       	and	r24, r24
    248a:	2c f4       	brge	.+10     	; 0x2496 <LCD_DisplayChar+0x5d2>
		__ticks = 1;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9a a3       	std	Y+34, r25	; 0x22
    2492:	89 a3       	std	Y+33, r24	; 0x21
    2494:	3f c0       	rjmp	.+126    	; 0x2514 <LCD_DisplayChar+0x650>
	else if (__tmp > 65535)
    2496:	6b a1       	ldd	r22, Y+35	; 0x23
    2498:	7c a1       	ldd	r23, Y+36	; 0x24
    249a:	8d a1       	ldd	r24, Y+37	; 0x25
    249c:	9e a1       	ldd	r25, Y+38	; 0x26
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	3f ef       	ldi	r19, 0xFF	; 255
    24a2:	4f e7       	ldi	r20, 0x7F	; 127
    24a4:	57 e4       	ldi	r21, 0x47	; 71
    24a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24aa:	18 16       	cp	r1, r24
    24ac:	4c f5       	brge	.+82     	; 0x2500 <LCD_DisplayChar+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ae:	6f a1       	ldd	r22, Y+39	; 0x27
    24b0:	78 a5       	ldd	r23, Y+40	; 0x28
    24b2:	89 a5       	ldd	r24, Y+41	; 0x29
    24b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e2       	ldi	r20, 0x20	; 32
    24bc:	51 e4       	ldi	r21, 0x41	; 65
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9a a3       	std	Y+34, r25	; 0x22
    24d4:	89 a3       	std	Y+33, r24	; 0x21
    24d6:	0f c0       	rjmp	.+30     	; 0x24f6 <LCD_DisplayChar+0x632>
    24d8:	8c e2       	ldi	r24, 0x2C	; 44
    24da:	91 e0       	ldi	r25, 0x01	; 1
    24dc:	98 a3       	std	Y+32, r25	; 0x20
    24de:	8f 8f       	std	Y+31, r24	; 0x1f
    24e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24e2:	98 a1       	ldd	r25, Y+32	; 0x20
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_DisplayChar+0x620>
    24e8:	98 a3       	std	Y+32, r25	; 0x20
    24ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ec:	89 a1       	ldd	r24, Y+33	; 0x21
    24ee:	9a a1       	ldd	r25, Y+34	; 0x22
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	9a a3       	std	Y+34, r25	; 0x22
    24f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f6:	89 a1       	ldd	r24, Y+33	; 0x21
    24f8:	9a a1       	ldd	r25, Y+34	; 0x22
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	69 f7       	brne	.-38     	; 0x24d8 <LCD_DisplayChar+0x614>
    24fe:	14 c0       	rjmp	.+40     	; 0x2528 <LCD_DisplayChar+0x664>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2500:	6b a1       	ldd	r22, Y+35	; 0x23
    2502:	7c a1       	ldd	r23, Y+36	; 0x24
    2504:	8d a1       	ldd	r24, Y+37	; 0x25
    2506:	9e a1       	ldd	r25, Y+38	; 0x26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9a a3       	std	Y+34, r25	; 0x22
    2512:	89 a3       	std	Y+33, r24	; 0x21
    2514:	89 a1       	ldd	r24, Y+33	; 0x21
    2516:	9a a1       	ldd	r25, Y+34	; 0x22
    2518:	9e 8f       	std	Y+30, r25	; 0x1e
    251a:	8d 8f       	std	Y+29, r24	; 0x1d
    251c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    251e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <LCD_DisplayChar+0x65c>
    2524:	9e 8f       	std	Y+30, r25	; 0x1e
    2526:	8d 8f       	std	Y+29, r24	; 0x1d
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	a0 e8       	ldi	r26, 0x80	; 128
    252e:	bf e3       	ldi	r27, 0x3F	; 63
    2530:	89 8f       	std	Y+25, r24	; 0x19
    2532:	9a 8f       	std	Y+26, r25	; 0x1a
    2534:	ab 8f       	std	Y+27, r26	; 0x1b
    2536:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	69 8d       	ldd	r22, Y+25	; 0x19
    253a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e8       	ldi	r19, 0x80	; 128
    2544:	4b e3       	ldi	r20, 0x3B	; 59
    2546:	55 e4       	ldi	r21, 0x45	; 69
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8d 8b       	std	Y+21, r24	; 0x15
    2552:	9e 8b       	std	Y+22, r25	; 0x16
    2554:	af 8b       	std	Y+23, r26	; 0x17
    2556:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2558:	6d 89       	ldd	r22, Y+21	; 0x15
    255a:	7e 89       	ldd	r23, Y+22	; 0x16
    255c:	8f 89       	ldd	r24, Y+23	; 0x17
    255e:	98 8d       	ldd	r25, Y+24	; 0x18
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <LCD_DisplayChar+0x6b6>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9c 8b       	std	Y+20, r25	; 0x14
    2576:	8b 8b       	std	Y+19, r24	; 0x13
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <LCD_DisplayChar+0x734>
	else if (__tmp > 65535)
    257a:	6d 89       	ldd	r22, Y+21	; 0x15
    257c:	7e 89       	ldd	r23, Y+22	; 0x16
    257e:	8f 89       	ldd	r24, Y+23	; 0x17
    2580:	98 8d       	ldd	r25, Y+24	; 0x18
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <LCD_DisplayChar+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	69 8d       	ldd	r22, Y+25	; 0x19
    2594:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9c 8b       	std	Y+20, r25	; 0x14
    25b8:	8b 8b       	std	Y+19, r24	; 0x13
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <LCD_DisplayChar+0x716>
    25bc:	8c e2       	ldi	r24, 0x2C	; 44
    25be:	91 e0       	ldi	r25, 0x01	; 1
    25c0:	9a 8b       	std	Y+18, r25	; 0x12
    25c2:	89 8b       	std	Y+17, r24	; 0x11
    25c4:	89 89       	ldd	r24, Y+17	; 0x11
    25c6:	9a 89       	ldd	r25, Y+18	; 0x12
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <LCD_DisplayChar+0x704>
    25cc:	9a 8b       	std	Y+18, r25	; 0x12
    25ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8b 89       	ldd	r24, Y+19	; 0x13
    25d2:	9c 89       	ldd	r25, Y+20	; 0x14
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	9c 8b       	std	Y+20, r25	; 0x14
    25d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8b 89       	ldd	r24, Y+19	; 0x13
    25dc:	9c 89       	ldd	r25, Y+20	; 0x14
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <LCD_DisplayChar+0x6f8>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <LCD_DisplayChar+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	6d 89       	ldd	r22, Y+21	; 0x15
    25e6:	7e 89       	ldd	r23, Y+22	; 0x16
    25e8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ea:	98 8d       	ldd	r25, Y+24	; 0x18
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9c 8b       	std	Y+20, r25	; 0x14
    25f6:	8b 8b       	std	Y+19, r24	; 0x13
    25f8:	8b 89       	ldd	r24, Y+19	; 0x13
    25fa:	9c 89       	ldd	r25, Y+20	; 0x14
    25fc:	98 8b       	std	Y+16, r25	; 0x10
    25fe:	8f 87       	std	Y+15, r24	; 0x0f
    2600:	8f 85       	ldd	r24, Y+15	; 0x0f
    2602:	98 89       	ldd	r25, Y+16	; 0x10
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_DisplayChar+0x740>
    2608:	98 8b       	std	Y+16, r25	; 0x10
    260a:	8f 87       	std	Y+15, r24	; 0x0f
			
			#endif
		/* Data set-up time delay  Tdsw = 195 ns */
		_delay_ms(1);
		/* disable LCD E=0 */
		CLEAR_BIT(LCD_Control_reg_OP,E);						
    260c:	a5 e3       	ldi	r26, 0x35	; 53
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e5 e3       	ldi	r30, 0x35	; 53
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8f 7d       	andi	r24, 0xDF	; 223
    2618:	8c 93       	st	X, r24
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	a0 e8       	ldi	r26, 0x80	; 128
    2620:	bf e3       	ldi	r27, 0x3F	; 63
    2622:	8b 87       	std	Y+11, r24	; 0x0b
    2624:	9c 87       	std	Y+12, r25	; 0x0c
    2626:	ad 87       	std	Y+13, r26	; 0x0d
    2628:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262a:	6b 85       	ldd	r22, Y+11	; 0x0b
    262c:	7c 85       	ldd	r23, Y+12	; 0x0c
    262e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2630:	9e 85       	ldd	r25, Y+14	; 0x0e
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e8       	ldi	r19, 0x80	; 128
    2636:	4b e3       	ldi	r20, 0x3B	; 59
    2638:	55 e4       	ldi	r21, 0x45	; 69
    263a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	8f 83       	std	Y+7, r24	; 0x07
    2644:	98 87       	std	Y+8, r25	; 0x08
    2646:	a9 87       	std	Y+9, r26	; 0x09
    2648:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    264a:	6f 81       	ldd	r22, Y+7	; 0x07
    264c:	78 85       	ldd	r23, Y+8	; 0x08
    264e:	89 85       	ldd	r24, Y+9	; 0x09
    2650:	9a 85       	ldd	r25, Y+10	; 0x0a
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e8       	ldi	r20, 0x80	; 128
    2658:	5f e3       	ldi	r21, 0x3F	; 63
    265a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    265e:	88 23       	and	r24, r24
    2660:	2c f4       	brge	.+10     	; 0x266c <LCD_DisplayChar+0x7a8>
		__ticks = 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	3f c0       	rjmp	.+126    	; 0x26ea <LCD_DisplayChar+0x826>
	else if (__tmp > 65535)
    266c:	6f 81       	ldd	r22, Y+7	; 0x07
    266e:	78 85       	ldd	r23, Y+8	; 0x08
    2670:	89 85       	ldd	r24, Y+9	; 0x09
    2672:	9a 85       	ldd	r25, Y+10	; 0x0a
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	3f ef       	ldi	r19, 0xFF	; 255
    2678:	4f e7       	ldi	r20, 0x7F	; 127
    267a:	57 e4       	ldi	r21, 0x47	; 71
    267c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2680:	18 16       	cp	r1, r24
    2682:	4c f5       	brge	.+82     	; 0x26d6 <LCD_DisplayChar+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2684:	6b 85       	ldd	r22, Y+11	; 0x0b
    2686:	7c 85       	ldd	r23, Y+12	; 0x0c
    2688:	8d 85       	ldd	r24, Y+13	; 0x0d
    268a:	9e 85       	ldd	r25, Y+14	; 0x0e
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e2       	ldi	r20, 0x20	; 32
    2692:	51 e4       	ldi	r21, 0x41	; 65
    2694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <LCD_DisplayChar+0x808>
    26ae:	8c e2       	ldi	r24, 0x2C	; 44
    26b0:	91 e0       	ldi	r25, 0x01	; 1
    26b2:	9c 83       	std	Y+4, r25	; 0x04
    26b4:	8b 83       	std	Y+3, r24	; 0x03
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <LCD_DisplayChar+0x7f6>
    26be:	9c 83       	std	Y+4, r25	; 0x04
    26c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	9e 83       	std	Y+6, r25	; 0x06
    26ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	9e 81       	ldd	r25, Y+6	; 0x06
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	69 f7       	brne	.-38     	; 0x26ae <LCD_DisplayChar+0x7ea>
    26d4:	14 c0       	rjmp	.+40     	; 0x26fe <LCD_DisplayChar+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d6:	6f 81       	ldd	r22, Y+7	; 0x07
    26d8:	78 85       	ldd	r23, Y+8	; 0x08
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9e 83       	std	Y+6, r25	; 0x06
    26e8:	8d 83       	std	Y+5, r24	; 0x05
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	9a 83       	std	Y+2, r25	; 0x02
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	9a 81       	ldd	r25, Y+2	; 0x02
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <LCD_DisplayChar+0x832>
    26fa:	9a 83       	std	Y+2, r25	; 0x02
    26fc:	89 83       	std	Y+1, r24	; 0x01
		/* Data Hold delay Th = 10ns */
		_delay_ms(1);
		
	}
    26fe:	cd 59       	subi	r28, 0x9D	; 157
    2700:	df 4f       	sbci	r29, 0xFF	; 255
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	08 95       	ret

00002716 <LCD_Clear>:
	
	void LCD_Clear(void)
	{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
		/* Clear Screen */
		Send_instruction(Clear_display); 
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	0e 94 39 0b 	call	0x1672	; 0x1672 <Send_instruction>
	}
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <LCD_DisplayString>:
	
	
	void LCD_DisplayString(char * ptr)
	{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	00 d0       	rcall	.+0      	; 0x2730 <LCD_DisplayString+0x6>
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	9a 83       	std	Y+2, r25	; 0x02
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	0a c0       	rjmp	.+20     	; 0x274e <LCD_DisplayString+0x24>
		while(*ptr != '\0')
		{
			LCD_DisplayChar(*ptr);
    273a:	e9 81       	ldd	r30, Y+1	; 0x01
    273c:	fa 81       	ldd	r31, Y+2	; 0x02
    273e:	80 81       	ld	r24, Z
    2740:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_DisplayChar>
			ptr++;
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	9a 83       	std	Y+2, r25	; 0x02
    274c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
    274e:	e9 81       	ldd	r30, Y+1	; 0x01
    2750:	fa 81       	ldd	r31, Y+2	; 0x02
    2752:	80 81       	ld	r24, Z
    2754:	88 23       	and	r24, r24
    2756:	89 f7       	brne	.-30     	; 0x273a <LCD_DisplayString+0x10>
		{
			LCD_DisplayChar(*ptr);
			ptr++;
		}
	}
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <LCD_Select_RowCol>:
	
	void LCD_Select_RowCol(uint8 Row , uint8 col)
	{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <LCD_Select_RowCol+0x6>
    2768:	00 d0       	rcall	.+0      	; 0x276a <LCD_Select_RowCol+0x8>
    276a:	0f 92       	push	r0
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	8a 83       	std	Y+2, r24	; 0x02
    2772:	6b 83       	std	Y+3, r22	; 0x03
		uint8 Address=0;
    2774:	19 82       	std	Y+1, r1	; 0x01
		
		switch(Row)
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	3d 83       	std	Y+5, r19	; 0x05
    277e:	2c 83       	std	Y+4, r18	; 0x04
    2780:	8c 81       	ldd	r24, Y+4	; 0x04
    2782:	9d 81       	ldd	r25, Y+5	; 0x05
    2784:	81 30       	cpi	r24, 0x01	; 1
    2786:	91 05       	cpc	r25, r1
    2788:	c1 f0       	breq	.+48     	; 0x27ba <LCD_Select_RowCol+0x58>
    278a:	2c 81       	ldd	r18, Y+4	; 0x04
    278c:	3d 81       	ldd	r19, Y+5	; 0x05
    278e:	22 30       	cpi	r18, 0x02	; 2
    2790:	31 05       	cpc	r19, r1
    2792:	2c f4       	brge	.+10     	; 0x279e <LCD_Select_RowCol+0x3c>
    2794:	8c 81       	ldd	r24, Y+4	; 0x04
    2796:	9d 81       	ldd	r25, Y+5	; 0x05
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	61 f0       	breq	.+24     	; 0x27b4 <LCD_Select_RowCol+0x52>
    279c:	19 c0       	rjmp	.+50     	; 0x27d0 <LCD_Select_RowCol+0x6e>
    279e:	2c 81       	ldd	r18, Y+4	; 0x04
    27a0:	3d 81       	ldd	r19, Y+5	; 0x05
    27a2:	22 30       	cpi	r18, 0x02	; 2
    27a4:	31 05       	cpc	r19, r1
    27a6:	69 f0       	breq	.+26     	; 0x27c2 <LCD_Select_RowCol+0x60>
    27a8:	8c 81       	ldd	r24, Y+4	; 0x04
    27aa:	9d 81       	ldd	r25, Y+5	; 0x05
    27ac:	83 30       	cpi	r24, 0x03	; 3
    27ae:	91 05       	cpc	r25, r1
    27b0:	61 f0       	breq	.+24     	; 0x27ca <LCD_Select_RowCol+0x68>
    27b2:	0e c0       	rjmp	.+28     	; 0x27d0 <LCD_Select_RowCol+0x6e>
		{
			case 0:
					/* When Writing To LCD 1st Col The Base Address is 0x00 */
						Address=col | LCD_1ST_BASE;
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	0b c0       	rjmp	.+22     	; 0x27d0 <LCD_Select_RowCol+0x6e>
						break;
			case 1:
					/* When Writing To LCD 2nd Col The Base Address is 0x40 */
						Address=col | LCD_2ND_BASE;
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	80 64       	ori	r24, 0x40	; 64
    27be:	89 83       	std	Y+1, r24	; 0x01
    27c0:	07 c0       	rjmp	.+14     	; 0x27d0 <LCD_Select_RowCol+0x6e>
						break;
			case 2:
					/* When Writing To LCD 1st Col The Base Address is 0x10 */
						Address = col | LCD_3RD_BASE;
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	80 61       	ori	r24, 0x10	; 16
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	03 c0       	rjmp	.+6      	; 0x27d0 <LCD_Select_RowCol+0x6e>
						break;
			case 3:
					/* When Writing To LCD 1st Col The Base Address is 0x50 */
						Address=col| LCD_4TH_BASE;
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	80 65       	ori	r24, 0x50	; 80
    27ce:	89 83       	std	Y+1, r24	; 0x01
						break;		
		}
		
		Send_instruction(DDRAM_CONST|Address);
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	80 68       	ori	r24, 0x80	; 128
    27d4:	0e 94 39 0b 	call	0x1672	; 0x1672 <Send_instruction>
	}
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <LCD_DisplayInt>:
	
	
	void LCD_DisplayInt(sint32 data)
	{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	65 97       	sbiw	r28, 0x15	; 21
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	6a 8b       	std	Y+18, r22	; 0x12
    27fe:	7b 8b       	std	Y+19, r23	; 0x13
    2800:	8c 8b       	std	Y+20, r24	; 0x14
    2802:	9d 8b       	std	Y+21, r25	; 0x15
		/* String to hold the ascii result */
		char Result[17]; 
		 /* 10 for decimal */
		itoa(data,Result,10);
    2804:	8a 89       	ldd	r24, Y+18	; 0x12
    2806:	9b 89       	ldd	r25, Y+19	; 0x13
    2808:	9e 01       	movw	r18, r28
    280a:	2f 5f       	subi	r18, 0xFF	; 255
    280c:	3f 4f       	sbci	r19, 0xFF	; 255
    280e:	b9 01       	movw	r22, r18
    2810:	4a e0       	ldi	r20, 0x0A	; 10
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	0e 94 4c 18 	call	0x3098	; 0x3098 <itoa>
		/* Display The Result */
		LCD_DisplayString(Result);
    2818:	ce 01       	movw	r24, r28
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_DisplayString>
	}
    2820:	65 96       	adiw	r28, 0x15	; 21
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <TWI_Init>:

#include "i2c.h"
#include "LCD.h"

void TWI_Init(I2C_Prescaler Prescale , I2C_interruptState int_state , uint32 F_SCL , uint8 Address)
{
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	29 97       	sbiw	r28, 0x09	; 9
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	89 83       	std	Y+1, r24	; 0x01
    284c:	6a 83       	std	Y+2, r22	; 0x02
    284e:	2b 83       	std	Y+3, r18	; 0x03
    2850:	3c 83       	std	Y+4, r19	; 0x04
    2852:	4d 83       	std	Y+5, r20	; 0x05
    2854:	5e 83       	std	Y+6, r21	; 0x06
    2856:	0f 83       	std	Y+7, r16	; 0x07
	TWAR = Address<<1;
    2858:	e2 e2       	ldi	r30, 0x22	; 34
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	8f 81       	ldd	r24, Y+7	; 0x07
    285e:	88 0f       	add	r24, r24
    2860:	80 83       	st	Z, r24
	 /*  Calculating Bit Rate: */
	switch (Prescale)
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	28 2f       	mov	r18, r24
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	39 87       	std	Y+9, r19	; 0x09
    286a:	28 87       	std	Y+8, r18	; 0x08
    286c:	88 85       	ldd	r24, Y+8	; 0x08
    286e:	99 85       	ldd	r25, Y+9	; 0x09
    2870:	81 30       	cpi	r24, 0x01	; 1
    2872:	91 05       	cpc	r25, r1
    2874:	09 f4       	brne	.+2      	; 0x2878 <TWI_Init+0x46>
    2876:	45 c0       	rjmp	.+138    	; 0x2902 <TWI_Init+0xd0>
    2878:	e8 85       	ldd	r30, Y+8	; 0x08
    287a:	f9 85       	ldd	r31, Y+9	; 0x09
    287c:	e2 30       	cpi	r30, 0x02	; 2
    287e:	f1 05       	cpc	r31, r1
    2880:	34 f4       	brge	.+12     	; 0x288e <TWI_Init+0x5c>
    2882:	28 85       	ldd	r18, Y+8	; 0x08
    2884:	39 85       	ldd	r19, Y+9	; 0x09
    2886:	21 15       	cp	r18, r1
    2888:	31 05       	cpc	r19, r1
    288a:	71 f0       	breq	.+28     	; 0x28a8 <TWI_Init+0x76>
    288c:	e8 c0       	rjmp	.+464    	; 0x2a5e <TWI_Init+0x22c>
    288e:	88 85       	ldd	r24, Y+8	; 0x08
    2890:	99 85       	ldd	r25, Y+9	; 0x09
    2892:	82 30       	cpi	r24, 0x02	; 2
    2894:	91 05       	cpc	r25, r1
    2896:	09 f4       	brne	.+2      	; 0x289a <TWI_Init+0x68>
    2898:	65 c0       	rjmp	.+202    	; 0x2964 <TWI_Init+0x132>
    289a:	e8 85       	ldd	r30, Y+8	; 0x08
    289c:	f9 85       	ldd	r31, Y+9	; 0x09
    289e:	e3 30       	cpi	r30, 0x03	; 3
    28a0:	f1 05       	cpc	r31, r1
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <TWI_Init+0x74>
    28a4:	9a c0       	rjmp	.+308    	; 0x29da <TWI_Init+0x1a8>
    28a6:	db c0       	rjmp	.+438    	; 0x2a5e <TWI_Init+0x22c>
	{
		case I2C_PRESCALE1:
								TWBR = (uint8) (((float)F_CPU/(2.0*F_SCL)) -8);
    28a8:	00 e2       	ldi	r16, 0x20	; 32
    28aa:	10 e0       	ldi	r17, 0x00	; 0
    28ac:	6b 81       	ldd	r22, Y+3	; 0x03
    28ae:	7c 81       	ldd	r23, Y+4	; 0x04
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    28b8:	9b 01       	movw	r18, r22
    28ba:	ac 01       	movw	r20, r24
    28bc:	ca 01       	movw	r24, r20
    28be:	b9 01       	movw	r22, r18
    28c0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9c 01       	movw	r18, r24
    28ca:	ad 01       	movw	r20, r26
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	7b e1       	ldi	r23, 0x1B	; 27
    28d0:	87 e3       	ldi	r24, 0x37	; 55
    28d2:	9b e4       	ldi	r25, 0x4B	; 75
    28d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e0       	ldi	r20, 0x00	; 0
    28e6:	51 e4       	ldi	r21, 0x41	; 65
    28e8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	f8 01       	movw	r30, r16
    28fe:	80 83       	st	Z, r24
    2900:	ae c0       	rjmp	.+348    	; 0x2a5e <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE4:
								TWBR = (uint8) (((float)F_CPU/(8.0*F_SCL)) -2);
    2902:	00 e2       	ldi	r16, 0x20	; 32
    2904:	10 e0       	ldi	r17, 0x00	; 0
    2906:	6b 81       	ldd	r22, Y+3	; 0x03
    2908:	7c 81       	ldd	r23, Y+4	; 0x04
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	bc 01       	movw	r22, r24
    2918:	cd 01       	movw	r24, r26
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e0       	ldi	r20, 0x00	; 0
    2920:	51 e4       	ldi	r21, 0x41	; 65
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9c 01       	movw	r18, r24
    292c:	ad 01       	movw	r20, r26
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	7b e1       	ldi	r23, 0x1B	; 27
    2932:	87 e3       	ldi	r24, 0x37	; 55
    2934:	9b e4       	ldi	r25, 0x4B	; 75
    2936:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	50 e4       	ldi	r21, 0x40	; 64
    294a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	f8 01       	movw	r30, r16
    2960:	80 83       	st	Z, r24
    2962:	7d c0       	rjmp	.+250    	; 0x2a5e <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE16:
								TWBR = (uint8) (((float)F_CPU/(32*F_SCL)) -0.5);
    2964:	00 e2       	ldi	r16, 0x20	; 32
    2966:	10 e0       	ldi	r17, 0x00	; 0
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	9c 81       	ldd	r25, Y+4	; 0x04
    296c:	ad 81       	ldd	r26, Y+5	; 0x05
    296e:	be 81       	ldd	r27, Y+6	; 0x06
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	aa 1f       	adc	r26, r26
    2976:	bb 1f       	adc	r27, r27
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	aa 1f       	adc	r26, r26
    297e:	bb 1f       	adc	r27, r27
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	aa 1f       	adc	r26, r26
    2986:	bb 1f       	adc	r27, r27
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	aa 1f       	adc	r26, r26
    298e:	bb 1f       	adc	r27, r27
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	aa 1f       	adc	r26, r26
    2996:	bb 1f       	adc	r27, r27
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    29a0:	9b 01       	movw	r18, r22
    29a2:	ac 01       	movw	r20, r24
    29a4:	60 e0       	ldi	r22, 0x00	; 0
    29a6:	7b e1       	ldi	r23, 0x1B	; 27
    29a8:	87 e3       	ldi	r24, 0x37	; 55
    29aa:	9b e4       	ldi	r25, 0x4B	; 75
    29ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	5f e3       	ldi	r21, 0x3F	; 63
    29c0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	f8 01       	movw	r30, r16
    29d6:	80 83       	st	Z, r24
    29d8:	42 c0       	rjmp	.+132    	; 0x2a5e <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE64:
								TWBR = (uint8) (((float)F_CPU/(128*F_SCL)) -0.125);
    29da:	00 e2       	ldi	r16, 0x20	; 32
    29dc:	10 e0       	ldi	r17, 0x00	; 0
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	ad 81       	ldd	r26, Y+5	; 0x05
    29e4:	be 81       	ldd	r27, Y+6	; 0x06
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	aa 1f       	adc	r26, r26
    29ec:	bb 1f       	adc	r27, r27
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	aa 1f       	adc	r26, r26
    29f4:	bb 1f       	adc	r27, r27
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	aa 1f       	adc	r26, r26
    29fc:	bb 1f       	adc	r27, r27
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	aa 1f       	adc	r26, r26
    2a04:	bb 1f       	adc	r27, r27
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	aa 1f       	adc	r26, r26
    2a0c:	bb 1f       	adc	r27, r27
    2a0e:	88 0f       	add	r24, r24
    2a10:	99 1f       	adc	r25, r25
    2a12:	aa 1f       	adc	r26, r26
    2a14:	bb 1f       	adc	r27, r27
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	aa 1f       	adc	r26, r26
    2a1c:	bb 1f       	adc	r27, r27
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a26:	9b 01       	movw	r18, r22
    2a28:	ac 01       	movw	r20, r24
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	7b e1       	ldi	r23, 0x1B	; 27
    2a2e:	87 e3       	ldi	r24, 0x37	; 55
    2a30:	9b e4       	ldi	r25, 0x4B	; 75
    2a32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	5e e3       	ldi	r21, 0x3E	; 62
    2a46:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	80 83       	st	Z, r24
		default:
					break;
	}
   
	
	TWSR |= (Prescale & 0x03);
    2a5e:	a1 e2       	ldi	r26, 0x21	; 33
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	e1 e2       	ldi	r30, 0x21	; 33
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	98 2f       	mov	r25, r24
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	83 70       	andi	r24, 0x03	; 3
    2a6e:	89 2b       	or	r24, r25
    2a70:	8c 93       	st	X, r24
	TWCR |= (1<<TWEN) | (int_state & 0x01) ;
    2a72:	a6 e5       	ldi	r26, 0x56	; 86
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e6 e5       	ldi	r30, 0x56	; 86
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	98 2f       	mov	r25, r24
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	81 70       	andi	r24, 0x01	; 1
    2a82:	84 60       	ori	r24, 0x04	; 4
    2a84:	89 2b       	or	r24, r25
    2a86:	8c 93       	st	X, r24
}
    2a88:	29 96       	adiw	r28, 0x09	; 9
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	1f 91       	pop	r17
    2a9a:	0f 91       	pop	r16
    2a9c:	08 95       	ret

00002a9e <TWI_Start>:

void TWI_Start(void)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
    2aa6:	e6 e5       	ldi	r30, 0x56	; 86
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	84 ea       	ldi	r24, 0xA4	; 164
    2aac:	80 83       	st	Z, r24
 
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    2aae:	e6 e5       	ldi	r30, 0x56	; 86
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	88 23       	and	r24, r24
    2ab6:	dc f7       	brge	.-10     	; 0x2aae <TWI_Start+0x10>
}
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <TWI_Stop>:

void TWI_Stop(void)
{
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
    2ac6:	e6 e5       	ldi	r30, 0x56	; 86
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	84 e9       	ldi	r24, 0x94	; 148
    2acc:	80 83       	st	Z, r24
 
}
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	08 95       	ret

00002ad4 <TWI_Write>:

void TWI_Write(uint8 data)
{
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	0f 92       	push	r0
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2ae0:	e3 e2       	ldi	r30, 0x23	; 35
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
   TWCR = (1<<TWEN) | (1<<TWINT);
    2ae8:	e6 e5       	ldi	r30, 0x56	; 86
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	84 e8       	ldi	r24, 0x84	; 132
    2aee:	80 83       	st	Z, r24
   
   /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    2af0:	e6 e5       	ldi	r30, 0x56	; 86
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	88 23       	and	r24, r24
    2af8:	dc f7       	brge	.-10     	; 0x2af0 <TWI_Write+0x1c>
}
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 

    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);    
    2b0a:	e6 e5       	ldi	r30, 0x56	; 86
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	84 ec       	ldi	r24, 0xC4	; 196
    2b10:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b12:	e6 e5       	ldi	r30, 0x56	; 86
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	88 23       	and	r24, r24
    2b1a:	dc f7       	brge	.-10     	; 0x2b12 <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    2b1c:	e3 e2       	ldi	r30, 0x23	; 35
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
}
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62



		TWCR =(1<<TWEN) | (1<<TWINT);
    2b30:	e6 e5       	ldi	r30, 0x56	; 86
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	84 e8       	ldi	r24, 0x84	; 132
    2b36:	80 83       	st	Z, r24
/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
while(BIT_IS_CLEAR(TWCR,TWINT));
    2b38:	e6 e5       	ldi	r30, 0x56	; 86
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	88 23       	and	r24, r24
    2b40:	dc f7       	brge	.-10     	; 0x2b38 <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    2b42:	e3 e2       	ldi	r30, 0x23	; 35
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
}
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	cd b7       	in	r28, 0x3d	; 61
    2b54:	de b7       	in	r29, 0x3e	; 62
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    2b56:	e1 e2       	ldi	r30, 0x21	; 33
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	88 7f       	andi	r24, 0xF8	; 248
}
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <I2C_ByteWrite>:




void I2C_ByteWrite(uint8 SL_Address,uint8 Reg_Address ,uint8 Data )
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	00 d0       	rcall	.+0      	; 0x2b6a <I2C_ByteWrite+0x6>
    2b6a:	0f 92       	push	r0
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	6a 83       	std	Y+2, r22	; 0x02
    2b74:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();
    2b76:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    2b7a:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <TWI_Get_Status>
    2b7e:	88 30       	cpi	r24, 0x08	; 8
    2b80:	19 f0       	breq	.+6      	; 0x2b88 <I2C_ByteWrite+0x24>
	{
		TWI_Stop();
    2b82:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TWI_Stop>
    2b86:	21 c0       	rjmp	.+66     	; 0x2bca <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write((SL_Address<<1));
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	88 0f       	add	r24, r24
    2b8c:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <TWI_Write>
if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    2b90:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <TWI_Get_Status>
    2b94:	88 31       	cpi	r24, 0x18	; 24
    2b96:	19 f0       	breq	.+6      	; 0x2b9e <I2C_ByteWrite+0x3a>
	{

		TWI_Stop();
    2b98:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TWI_Stop>
    2b9c:	16 c0       	rjmp	.+44     	; 0x2bca <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write(Reg_Address);
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2ba4:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <TWI_Get_Status>
    2ba8:	88 32       	cpi	r24, 0x28	; 40
    2baa:	19 f0       	breq	.+6      	; 0x2bb2 <I2C_ByteWrite+0x4e>
	{
		TWI_Stop();
    2bac:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TWI_Stop>
    2bb0:	0c c0       	rjmp	.+24     	; 0x2bca <I2C_ByteWrite+0x66>
		return ;
	}
	
TWI_Write(Data);
    2bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb4:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2bb8:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <TWI_Get_Status>
    2bbc:	88 32       	cpi	r24, 0x28	; 40
    2bbe:	19 f0       	breq	.+6      	; 0x2bc6 <I2C_ByteWrite+0x62>
	{

		TWI_Stop();
    2bc0:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TWI_Stop>
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
    2bc6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TWI_Stop>
	return ;

}
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <I2C_ByteRead>:

 

 
uint8 I2C_ByteRead(uint8 SL_Address , uint8 Reg_Address)
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <I2C_ByteRead+0x6>
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <I2C_ByteRead+0x8>
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	8a 83       	std	Y+2, r24	; 0x02
    2be4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Data=0;
    2be6:	19 82       	std	Y+1, r1	; 0x01
	
	
	TWI_Start();
    2be8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    2bec:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <TWI_Get_Status>
    2bf0:	88 30       	cpi	r24, 0x08	; 8
    2bf2:	29 f0       	breq	.+10     	; 0x2bfe <I2C_ByteRead+0x28>
	{
		TWI_Stop();
    2bf4:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TWI_Stop>
		return 1;
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	8c 83       	std	Y+4, r24	; 0x04
    2bfc:	3c c0       	rjmp	.+120    	; 0x2c76 <I2C_ByteRead+0xa0>
	}
	
	
	TWI_Write((SL_Address<<1));
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	88 0f       	add	r24, r24
    2c02:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    2c06:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <TWI_Get_Status>
    2c0a:	88 31       	cpi	r24, 0x18	; 24
    2c0c:	29 f0       	breq	.+10     	; 0x2c18 <I2C_ByteRead+0x42>
	{

		TWI_Stop();
    2c0e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TWI_Stop>
		return 2;
    2c12:	82 e0       	ldi	r24, 0x02	; 2
    2c14:	8c 83       	std	Y+4, r24	; 0x04
    2c16:	2f c0       	rjmp	.+94     	; 0x2c76 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write(Reg_Address);
    2c18:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1a:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2c1e:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <TWI_Get_Status>
    2c22:	88 32       	cpi	r24, 0x28	; 40
    2c24:	29 f0       	breq	.+10     	; 0x2c30 <I2C_ByteRead+0x5a>
	{
		TWI_Stop();
    2c26:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TWI_Stop>
		return 3;
    2c2a:	83 e0       	ldi	r24, 0x03	; 3
    2c2c:	8c 83       	std	Y+4, r24	; 0x04
    2c2e:	23 c0       	rjmp	.+70     	; 0x2c76 <I2C_ByteRead+0xa0>
	}
	
	TWI_Start();
    2c30:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    2c34:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <TWI_Get_Status>
    2c38:	80 31       	cpi	r24, 0x10	; 16
    2c3a:	29 f0       	breq	.+10     	; 0x2c46 <I2C_ByteRead+0x70>
	{
		TWI_Stop();
    2c3c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TWI_Stop>
		return 4;
    2c40:	84 e0       	ldi	r24, 0x04	; 4
    2c42:	8c 83       	std	Y+4, r24	; 0x04
    2c44:	18 c0       	rjmp	.+48     	; 0x2c76 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write((SL_Address<<1) | READ);
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	88 2f       	mov	r24, r24
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	81 60       	ori	r24, 0x01	; 1
    2c52:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    2c56:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <TWI_Get_Status>
    2c5a:	80 34       	cpi	r24, 0x40	; 64
    2c5c:	29 f0       	breq	.+10     	; 0x2c68 <I2C_ByteRead+0x92>
	{

		TWI_Stop();
    2c5e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TWI_Stop>
		return 5;
    2c62:	85 e0       	ldi	r24, 0x05	; 5
    2c64:	8c 83       	std	Y+4, r24	; 0x04
    2c66:	07 c0       	rjmp	.+14     	; 0x2c76 <I2C_ByteRead+0xa0>
	}
	Data=TWI_Read_With_NACK();
    2c68:	0e 94 94 15 	call	0x2b28	; 0x2b28 <TWI_Read_With_NACK>
    2c6c:	89 83       	std	Y+1, r24	; 0x01
	TWI_Stop();
    2c6e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <TWI_Stop>
	
	return Data;		
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	8c 83       	std	Y+4, r24	; 0x04
    2c76:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <main>:
#include "ADXL345.h"

#define F_ADXL 400000UL
volatile ADXL345_Data Live_Data;
int main(void)
{
    2c86:	0f 93       	push	r16
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	aa 97       	sbiw	r28, 0x2a	; 42
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    2c9c:	0e 94 18 0b 	call	0x1630	; 0x1630 <LCD_init>
	TWI_Init(I2C_PRESCALE1,I2C_intDisable,F_ADXL,0x01);
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	60 e0       	ldi	r22, 0x00	; 0
    2ca4:	20 e8       	ldi	r18, 0x80	; 128
    2ca6:	3a e1       	ldi	r19, 0x1A	; 26
    2ca8:	46 e0       	ldi	r20, 0x06	; 6
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	01 e0       	ldi	r16, 0x01	; 1
    2cae:	0e 94 19 14 	call	0x2832	; 0x2832 <TWI_Init>
	Accelerometor_init(ADXL345_MessureMode,ADXL345_ALTERNATIVE_ADDRESS);
    2cb2:	88 e0       	ldi	r24, 0x08	; 8
    2cb4:	63 e5       	ldi	r22, 0x53	; 83
    2cb6:	0e 94 17 07 	call	0xe2e	; 0xe2e <Accelerometor_init>
	LCD_DisplayString("Testing LCD");
    2cba:	80 e6       	ldi	r24, 0x60	; 96
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_DisplayString>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	aa e7       	ldi	r26, 0x7A	; 122
    2cc8:	b4 e4       	ldi	r27, 0x44	; 68
    2cca:	8f a3       	std	Y+39, r24	; 0x27
    2ccc:	98 a7       	std	Y+40, r25	; 0x28
    2cce:	a9 a7       	std	Y+41, r26	; 0x29
    2cd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	6f a1       	ldd	r22, Y+39	; 0x27
    2cd4:	78 a5       	ldd	r23, Y+40	; 0x28
    2cd6:	89 a5       	ldd	r24, Y+41	; 0x29
    2cd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e8       	ldi	r19, 0x80	; 128
    2cde:	4b e3       	ldi	r20, 0x3B	; 59
    2ce0:	55 e4       	ldi	r21, 0x45	; 69
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8b a3       	std	Y+35, r24	; 0x23
    2cec:	9c a3       	std	Y+36, r25	; 0x24
    2cee:	ad a3       	std	Y+37, r26	; 0x25
    2cf0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e8       	ldi	r20, 0x80	; 128
    2d00:	5f e3       	ldi	r21, 0x3F	; 63
    2d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d06:	88 23       	and	r24, r24
    2d08:	2c f4       	brge	.+10     	; 0x2d14 <main+0x8e>
		__ticks = 1;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	9a a3       	std	Y+34, r25	; 0x22
    2d10:	89 a3       	std	Y+33, r24	; 0x21
    2d12:	3f c0       	rjmp	.+126    	; 0x2d92 <main+0x10c>
	else if (__tmp > 65535)
    2d14:	6b a1       	ldd	r22, Y+35	; 0x23
    2d16:	7c a1       	ldd	r23, Y+36	; 0x24
    2d18:	8d a1       	ldd	r24, Y+37	; 0x25
    2d1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	3f ef       	ldi	r19, 0xFF	; 255
    2d20:	4f e7       	ldi	r20, 0x7F	; 127
    2d22:	57 e4       	ldi	r21, 0x47	; 71
    2d24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d28:	18 16       	cp	r1, r24
    2d2a:	4c f5       	brge	.+82     	; 0x2d7e <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d2e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d30:	89 a5       	ldd	r24, Y+41	; 0x29
    2d32:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e2       	ldi	r20, 0x20	; 32
    2d3a:	51 e4       	ldi	r21, 0x41	; 65
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	9a a3       	std	Y+34, r25	; 0x22
    2d52:	89 a3       	std	Y+33, r24	; 0x21
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <main+0xee>
    2d56:	8c e2       	ldi	r24, 0x2C	; 44
    2d58:	91 e0       	ldi	r25, 0x01	; 1
    2d5a:	98 a3       	std	Y+32, r25	; 0x20
    2d5c:	8f 8f       	std	Y+31, r24	; 0x1f
    2d5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d60:	98 a1       	ldd	r25, Y+32	; 0x20
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <main+0xdc>
    2d66:	98 a3       	std	Y+32, r25	; 0x20
    2d68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	9a a3       	std	Y+34, r25	; 0x22
    2d72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d74:	89 a1       	ldd	r24, Y+33	; 0x21
    2d76:	9a a1       	ldd	r25, Y+34	; 0x22
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	69 f7       	brne	.-38     	; 0x2d56 <main+0xd0>
    2d7c:	14 c0       	rjmp	.+40     	; 0x2da6 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d80:	7c a1       	ldd	r23, Y+36	; 0x24
    2d82:	8d a1       	ldd	r24, Y+37	; 0x25
    2d84:	9e a1       	ldd	r25, Y+38	; 0x26
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	9a a3       	std	Y+34, r25	; 0x22
    2d90:	89 a3       	std	Y+33, r24	; 0x21
    2d92:	89 a1       	ldd	r24, Y+33	; 0x21
    2d94:	9a a1       	ldd	r25, Y+34	; 0x22
    2d96:	9e 8f       	std	Y+30, r25	; 0x1e
    2d98:	8d 8f       	std	Y+29, r24	; 0x1d
    2d9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <main+0x118>
    2da2:	9e 8f       	std	Y+30, r25	; 0x1e
    2da4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	
    while(1)
    {
		Accelerometor_ReadAxis(ADXL345_ALTERNATIVE_ADDRESS,&Live_Data);
    2da6:	2a e8       	ldi	r18, 0x8A	; 138
    2da8:	31 e0       	ldi	r19, 0x01	; 1
    2daa:	83 e5       	ldi	r24, 0x53	; 83
    2dac:	b9 01       	movw	r22, r18
    2dae:	0e 94 3c 07 	call	0xe78	; 0xe78 <Accelerometor_ReadAxis>
        LCD_Clear();
    2db2:	0e 94 8b 13 	call	0x2716	; 0x2716 <LCD_Clear>
		LCD_DisplayString("X=");
    2db6:	8c e6       	ldi	r24, 0x6C	; 108
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_DisplayString>
		LCD_DisplayInt((uint16) (Live_Data.X_Axis));
    2dbe:	80 91 8a 01 	lds	r24, 0x018A
    2dc2:	90 91 8b 01 	lds	r25, 0x018B
    2dc6:	a0 91 8c 01 	lds	r26, 0x018C
    2dca:	b0 91 8d 01 	lds	r27, 0x018D
    2dce:	bc 01       	movw	r22, r24
    2dd0:	cd 01       	movw	r24, r26
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	cc 01       	movw	r24, r24
    2ddc:	a0 e0       	ldi	r26, 0x00	; 0
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <LCD_DisplayInt>
		LCD_DisplayString(" Y=");
    2de8:	8f e6       	ldi	r24, 0x6F	; 111
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_DisplayString>
		LCD_DisplayInt((uint16) (Live_Data.Y_Axis));
    2df0:	80 91 8e 01 	lds	r24, 0x018E
    2df4:	90 91 8f 01 	lds	r25, 0x018F
    2df8:	a0 91 90 01 	lds	r26, 0x0190
    2dfc:	b0 91 91 01 	lds	r27, 0x0191
    2e00:	bc 01       	movw	r22, r24
    2e02:	cd 01       	movw	r24, r26
    2e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	cc 01       	movw	r24, r24
    2e0e:	a0 e0       	ldi	r26, 0x00	; 0
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	bc 01       	movw	r22, r24
    2e14:	cd 01       	movw	r24, r26
    2e16:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <LCD_DisplayInt>
		LCD_Select_RowCol(1,0);
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	60 e0       	ldi	r22, 0x00	; 0
    2e1e:	0e 94 b1 13 	call	0x2762	; 0x2762 <LCD_Select_RowCol>
		LCD_DisplayString("Z=");
    2e22:	83 e7       	ldi	r24, 0x73	; 115
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_DisplayString>
		LCD_DisplayInt((uint16) (Live_Data.Z_Axis));
    2e2a:	80 91 92 01 	lds	r24, 0x0192
    2e2e:	90 91 93 01 	lds	r25, 0x0193
    2e32:	a0 91 94 01 	lds	r26, 0x0194
    2e36:	b0 91 95 01 	lds	r27, 0x0195
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	cc 01       	movw	r24, r24
    2e48:	a0 e0       	ldi	r26, 0x00	; 0
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <LCD_DisplayInt>
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	aa ef       	ldi	r26, 0xFA	; 250
    2e5a:	b3 e4       	ldi	r27, 0x43	; 67
    2e5c:	89 8f       	std	Y+25, r24	; 0x19
    2e5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e60:	ab 8f       	std	Y+27, r26	; 0x1b
    2e62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e64:	69 8d       	ldd	r22, Y+25	; 0x19
    2e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e8       	ldi	r19, 0x80	; 128
    2e70:	4b e3       	ldi	r20, 0x3B	; 59
    2e72:	55 e4       	ldi	r21, 0x45	; 69
    2e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	8d 8b       	std	Y+21, r24	; 0x15
    2e7e:	9e 8b       	std	Y+22, r25	; 0x16
    2e80:	af 8b       	std	Y+23, r26	; 0x17
    2e82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e84:	6d 89       	ldd	r22, Y+21	; 0x15
    2e86:	7e 89       	ldd	r23, Y+22	; 0x16
    2e88:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	40 e8       	ldi	r20, 0x80	; 128
    2e92:	5f e3       	ldi	r21, 0x3F	; 63
    2e94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e98:	88 23       	and	r24, r24
    2e9a:	2c f4       	brge	.+10     	; 0x2ea6 <main+0x220>
		__ticks = 1;
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	9c 8b       	std	Y+20, r25	; 0x14
    2ea2:	8b 8b       	std	Y+19, r24	; 0x13
    2ea4:	3f c0       	rjmp	.+126    	; 0x2f24 <main+0x29e>
	else if (__tmp > 65535)
    2ea6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    2eac:	98 8d       	ldd	r25, Y+24	; 0x18
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	3f ef       	ldi	r19, 0xFF	; 255
    2eb2:	4f e7       	ldi	r20, 0x7F	; 127
    2eb4:	57 e4       	ldi	r21, 0x47	; 71
    2eb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eba:	18 16       	cp	r1, r24
    2ebc:	4c f5       	brge	.+82     	; 0x2f10 <main+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ebe:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	40 e2       	ldi	r20, 0x20	; 32
    2ecc:	51 e4       	ldi	r21, 0x41	; 65
    2ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	bc 01       	movw	r22, r24
    2ed8:	cd 01       	movw	r24, r26
    2eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	9c 8b       	std	Y+20, r25	; 0x14
    2ee4:	8b 8b       	std	Y+19, r24	; 0x13
    2ee6:	0f c0       	rjmp	.+30     	; 0x2f06 <main+0x280>
    2ee8:	8c e2       	ldi	r24, 0x2C	; 44
    2eea:	91 e0       	ldi	r25, 0x01	; 1
    2eec:	9a 8b       	std	Y+18, r25	; 0x12
    2eee:	89 8b       	std	Y+17, r24	; 0x11
    2ef0:	89 89       	ldd	r24, Y+17	; 0x11
    2ef2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	f1 f7       	brne	.-4      	; 0x2ef4 <main+0x26e>
    2ef8:	9a 8b       	std	Y+18, r25	; 0x12
    2efa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efc:	8b 89       	ldd	r24, Y+19	; 0x13
    2efe:	9c 89       	ldd	r25, Y+20	; 0x14
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	9c 8b       	std	Y+20, r25	; 0x14
    2f04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f06:	8b 89       	ldd	r24, Y+19	; 0x13
    2f08:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	69 f7       	brne	.-38     	; 0x2ee8 <main+0x262>
    2f0e:	14 c0       	rjmp	.+40     	; 0x2f38 <main+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f10:	6d 89       	ldd	r22, Y+21	; 0x15
    2f12:	7e 89       	ldd	r23, Y+22	; 0x16
    2f14:	8f 89       	ldd	r24, Y+23	; 0x17
    2f16:	98 8d       	ldd	r25, Y+24	; 0x18
    2f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	9c 8b       	std	Y+20, r25	; 0x14
    2f22:	8b 8b       	std	Y+19, r24	; 0x13
    2f24:	8b 89       	ldd	r24, Y+19	; 0x13
    2f26:	9c 89       	ldd	r25, Y+20	; 0x14
    2f28:	98 8b       	std	Y+16, r25	; 0x10
    2f2a:	8f 87       	std	Y+15, r24	; 0x0f
    2f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2e:	98 89       	ldd	r25, Y+16	; 0x10
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <main+0x2aa>
    2f34:	98 8b       	std	Y+16, r25	; 0x10
    2f36:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_Clear();
    2f38:	0e 94 8b 13 	call	0x2716	; 0x2716 <LCD_Clear>
		LCD_DisplayString("Updating ..");
    2f3c:	86 e7       	ldi	r24, 0x76	; 118
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_DisplayString>
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	aa ef       	ldi	r26, 0xFA	; 250
    2f4a:	b3 e4       	ldi	r27, 0x43	; 67
    2f4c:	8b 87       	std	Y+11, r24	; 0x0b
    2f4e:	9c 87       	std	Y+12, r25	; 0x0c
    2f50:	ad 87       	std	Y+13, r26	; 0x0d
    2f52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e8       	ldi	r19, 0x80	; 128
    2f60:	4b e3       	ldi	r20, 0x3B	; 59
    2f62:	55 e4       	ldi	r21, 0x45	; 69
    2f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	8f 83       	std	Y+7, r24	; 0x07
    2f6e:	98 87       	std	Y+8, r25	; 0x08
    2f70:	a9 87       	std	Y+9, r26	; 0x09
    2f72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f74:	6f 81       	ldd	r22, Y+7	; 0x07
    2f76:	78 85       	ldd	r23, Y+8	; 0x08
    2f78:	89 85       	ldd	r24, Y+9	; 0x09
    2f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e8       	ldi	r20, 0x80	; 128
    2f82:	5f e3       	ldi	r21, 0x3F	; 63
    2f84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f88:	88 23       	and	r24, r24
    2f8a:	2c f4       	brge	.+10     	; 0x2f96 <main+0x310>
		__ticks = 1;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
    2f94:	3f c0       	rjmp	.+126    	; 0x3014 <main+0x38e>
	else if (__tmp > 65535)
    2f96:	6f 81       	ldd	r22, Y+7	; 0x07
    2f98:	78 85       	ldd	r23, Y+8	; 0x08
    2f9a:	89 85       	ldd	r24, Y+9	; 0x09
    2f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	3f ef       	ldi	r19, 0xFF	; 255
    2fa2:	4f e7       	ldi	r20, 0x7F	; 127
    2fa4:	57 e4       	ldi	r21, 0x47	; 71
    2fa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2faa:	18 16       	cp	r1, r24
    2fac:	4c f5       	brge	.+82     	; 0x3000 <main+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e2       	ldi	r20, 0x20	; 32
    2fbc:	51 e4       	ldi	r21, 0x41	; 65
    2fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
    2fd6:	0f c0       	rjmp	.+30     	; 0x2ff6 <main+0x370>
    2fd8:	8c e2       	ldi	r24, 0x2C	; 44
    2fda:	91 e0       	ldi	r25, 0x01	; 1
    2fdc:	9c 83       	std	Y+4, r25	; 0x04
    2fde:	8b 83       	std	Y+3, r24	; 0x03
    2fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <main+0x35e>
    2fe8:	9c 83       	std	Y+4, r25	; 0x04
    2fea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fec:	8d 81       	ldd	r24, Y+5	; 0x05
    2fee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	9e 83       	std	Y+6, r25	; 0x06
    2ff4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffa:	00 97       	sbiw	r24, 0x00	; 0
    2ffc:	69 f7       	brne	.-38     	; 0x2fd8 <main+0x352>
    2ffe:	d3 ce       	rjmp	.-602    	; 0x2da6 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3000:	6f 81       	ldd	r22, Y+7	; 0x07
    3002:	78 85       	ldd	r23, Y+8	; 0x08
    3004:	89 85       	ldd	r24, Y+9	; 0x09
    3006:	9a 85       	ldd	r25, Y+10	; 0x0a
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	9e 83       	std	Y+6, r25	; 0x06
    3012:	8d 83       	std	Y+5, r24	; 0x05
    3014:	8d 81       	ldd	r24, Y+5	; 0x05
    3016:	9e 81       	ldd	r25, Y+6	; 0x06
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <main+0x39a>
    3024:	9a 83       	std	Y+2, r25	; 0x02
    3026:	89 83       	std	Y+1, r24	; 0x01
    3028:	be ce       	rjmp	.-644    	; 0x2da6 <main+0x120>

0000302a <__prologue_saves__>:
    302a:	2f 92       	push	r2
    302c:	3f 92       	push	r3
    302e:	4f 92       	push	r4
    3030:	5f 92       	push	r5
    3032:	6f 92       	push	r6
    3034:	7f 92       	push	r7
    3036:	8f 92       	push	r8
    3038:	9f 92       	push	r9
    303a:	af 92       	push	r10
    303c:	bf 92       	push	r11
    303e:	cf 92       	push	r12
    3040:	df 92       	push	r13
    3042:	ef 92       	push	r14
    3044:	ff 92       	push	r15
    3046:	0f 93       	push	r16
    3048:	1f 93       	push	r17
    304a:	cf 93       	push	r28
    304c:	df 93       	push	r29
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	ca 1b       	sub	r28, r26
    3054:	db 0b       	sbc	r29, r27
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	09 94       	ijmp

00003062 <__epilogue_restores__>:
    3062:	2a 88       	ldd	r2, Y+18	; 0x12
    3064:	39 88       	ldd	r3, Y+17	; 0x11
    3066:	48 88       	ldd	r4, Y+16	; 0x10
    3068:	5f 84       	ldd	r5, Y+15	; 0x0f
    306a:	6e 84       	ldd	r6, Y+14	; 0x0e
    306c:	7d 84       	ldd	r7, Y+13	; 0x0d
    306e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3070:	9b 84       	ldd	r9, Y+11	; 0x0b
    3072:	aa 84       	ldd	r10, Y+10	; 0x0a
    3074:	b9 84       	ldd	r11, Y+9	; 0x09
    3076:	c8 84       	ldd	r12, Y+8	; 0x08
    3078:	df 80       	ldd	r13, Y+7	; 0x07
    307a:	ee 80       	ldd	r14, Y+6	; 0x06
    307c:	fd 80       	ldd	r15, Y+5	; 0x05
    307e:	0c 81       	ldd	r16, Y+4	; 0x04
    3080:	1b 81       	ldd	r17, Y+3	; 0x03
    3082:	aa 81       	ldd	r26, Y+2	; 0x02
    3084:	b9 81       	ldd	r27, Y+1	; 0x01
    3086:	ce 0f       	add	r28, r30
    3088:	d1 1d       	adc	r29, r1
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	ed 01       	movw	r28, r26
    3096:	08 95       	ret

00003098 <itoa>:
    3098:	fb 01       	movw	r30, r22
    309a:	9f 01       	movw	r18, r30
    309c:	e8 94       	clt
    309e:	42 30       	cpi	r20, 0x02	; 2
    30a0:	c4 f0       	brlt	.+48     	; 0x30d2 <itoa+0x3a>
    30a2:	45 32       	cpi	r20, 0x25	; 37
    30a4:	b4 f4       	brge	.+44     	; 0x30d2 <itoa+0x3a>
    30a6:	4a 30       	cpi	r20, 0x0A	; 10
    30a8:	29 f4       	brne	.+10     	; 0x30b4 <itoa+0x1c>
    30aa:	97 fb       	bst	r25, 7
    30ac:	1e f4       	brtc	.+6      	; 0x30b4 <itoa+0x1c>
    30ae:	90 95       	com	r25
    30b0:	81 95       	neg	r24
    30b2:	9f 4f       	sbci	r25, 0xFF	; 255
    30b4:	64 2f       	mov	r22, r20
    30b6:	77 27       	eor	r23, r23
    30b8:	0e 94 7d 18 	call	0x30fa	; 0x30fa <__udivmodhi4>
    30bc:	80 5d       	subi	r24, 0xD0	; 208
    30be:	8a 33       	cpi	r24, 0x3A	; 58
    30c0:	0c f0       	brlt	.+2      	; 0x30c4 <itoa+0x2c>
    30c2:	89 5d       	subi	r24, 0xD9	; 217
    30c4:	81 93       	st	Z+, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	a1 f7       	brne	.-24     	; 0x30b4 <itoa+0x1c>
    30cc:	16 f4       	brtc	.+4      	; 0x30d2 <itoa+0x3a>
    30ce:	5d e2       	ldi	r21, 0x2D	; 45
    30d0:	51 93       	st	Z+, r21
    30d2:	10 82       	st	Z, r1
    30d4:	c9 01       	movw	r24, r18
    30d6:	0c 94 6d 18 	jmp	0x30da	; 0x30da <strrev>

000030da <strrev>:
    30da:	dc 01       	movw	r26, r24
    30dc:	fc 01       	movw	r30, r24
    30de:	67 2f       	mov	r22, r23
    30e0:	71 91       	ld	r23, Z+
    30e2:	77 23       	and	r23, r23
    30e4:	e1 f7       	brne	.-8      	; 0x30de <strrev+0x4>
    30e6:	32 97       	sbiw	r30, 0x02	; 2
    30e8:	04 c0       	rjmp	.+8      	; 0x30f2 <strrev+0x18>
    30ea:	7c 91       	ld	r23, X
    30ec:	6d 93       	st	X+, r22
    30ee:	70 83       	st	Z, r23
    30f0:	62 91       	ld	r22, -Z
    30f2:	ae 17       	cp	r26, r30
    30f4:	bf 07       	cpc	r27, r31
    30f6:	c8 f3       	brcs	.-14     	; 0x30ea <strrev+0x10>
    30f8:	08 95       	ret

000030fa <__udivmodhi4>:
    30fa:	aa 1b       	sub	r26, r26
    30fc:	bb 1b       	sub	r27, r27
    30fe:	51 e1       	ldi	r21, 0x11	; 17
    3100:	07 c0       	rjmp	.+14     	; 0x3110 <__udivmodhi4_ep>

00003102 <__udivmodhi4_loop>:
    3102:	aa 1f       	adc	r26, r26
    3104:	bb 1f       	adc	r27, r27
    3106:	a6 17       	cp	r26, r22
    3108:	b7 07       	cpc	r27, r23
    310a:	10 f0       	brcs	.+4      	; 0x3110 <__udivmodhi4_ep>
    310c:	a6 1b       	sub	r26, r22
    310e:	b7 0b       	sbc	r27, r23

00003110 <__udivmodhi4_ep>:
    3110:	88 1f       	adc	r24, r24
    3112:	99 1f       	adc	r25, r25
    3114:	5a 95       	dec	r21
    3116:	a9 f7       	brne	.-22     	; 0x3102 <__udivmodhi4_loop>
    3118:	80 95       	com	r24
    311a:	90 95       	com	r25
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	08 95       	ret

00003122 <_exit>:
    3122:	f8 94       	cli

00003124 <__stop_program>:
    3124:	ff cf       	rjmp	.-2      	; 0x3124 <__stop_program>
