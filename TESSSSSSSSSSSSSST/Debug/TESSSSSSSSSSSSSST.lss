
TESSSSSSSSSSSSSST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d0  00800060  00003f86  0000401a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800230  00800230  000041ea  2**0
                  ALLOC
  3 .stab         00003618  00000000  00000000  000041ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000182e  00000000  00000000  00007804  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009032  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000091d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000093c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cb55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000dd2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000deec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e1e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 35       	cpi	r26, 0x51	; 81
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 15 	call	0x2b24	; 0x2b24 <main>
      8a:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4d 1f 	jmp	0x3e9a	; 0x3e9a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e7       	ldi	r22, 0x78	; 120
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 4d 1f 	jmp	0x3e9a	; 0x3e9a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 58       	subi	r30, 0x80	; 128
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
#include<avr/io.h>
#include"std_types.h"
#include "ADC.h"

void ADC_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e36:	a6 e2       	ldi	r26, 0x26	; 38
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e6 e2       	ldi	r30, 0x26	; 38
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	87 68       	ori	r24, 0x87	; 135
     e42:	8c 93       	st	X, r24
//	ADMUX|=(1<<REFS0)|(1<<REFS1)|(1<<ADLAR);
	ADMUX|=(1<<REFS0)|(1<<ADLAR);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 66       	ori	r24, 0x60	; 96
     e50:	8c 93       	st	X, r24
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <ADC_GetResult>:

int ADC_GetResult(u8 channel)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <ADC_GetResult+0x6>
     e5e:	0f 92       	push	r0
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	8b 83       	std	Y+3, r24	; 0x03
	int value;
	ADMUX &= 0b01111000;
     e66:	a7 e2       	ldi	r26, 0x27	; 39
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e7 e2       	ldi	r30, 0x27	; 39
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 77       	andi	r24, 0x78	; 120
     e72:	8c 93       	st	X, r24
	ADMUX |= (channel & (0b00000111) );
     e74:	a7 e2       	ldi	r26, 0x27	; 39
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e7 e2       	ldi	r30, 0x27	; 39
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	98 2f       	mov	r25, r24
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	87 70       	andi	r24, 0x07	; 7
     e84:	89 2b       	or	r24, r25
     e86:	8c 93       	st	X, r24
	ADCSRA|= (1<<ADSC);
     e88:	a6 e2       	ldi	r26, 0x26	; 38
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e6 e2       	ldi	r30, 0x26	; 38
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	8c 93       	st	X, r24
	while((ADCSRA & (1<<ADSC))!=0);
     e96:	e6 e2       	ldi	r30, 0x26	; 38
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	80 74       	andi	r24, 0x40	; 64
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	b9 f7       	brne	.-18     	; 0xe96 <ADC_GetResult+0x3e>
	value=ADCH;
     ea8:	e5 e2       	ldi	r30, 0x25	; 37
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|= 0x10;
     eb6:	a6 e2       	ldi	r26, 0x26	; 38
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e6 e2       	ldi	r30, 0x26	; 38
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 61       	ori	r24, 0x10	; 16
     ec2:	8c 93       	st	X, r24
	return value;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <LCD_init>:


	#include "LCD.h"
	
	void LCD_init(void)
	{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
		/* Set The Control Pins Direction to OUtput */
		LCD_Control_reg_DIR |=(1<<E) | (1<<RW) | (1<<RS);
     edc:	a7 e3       	ldi	r26, 0x37	; 55
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e7 e3       	ldi	r30, 0x37	; 55
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	87 60       	ori	r24, 0x07	; 7
     ee8:	8c 93       	st	X, r24
			LCD_Data_Reg_DIR =0xFF;
		#else
			
			#ifdef Upper_Data_port
				/* Set The Direction of The Upper Pins to OP*/
				LCD_Data_Reg_DIR |=(0xF0);
     eea:	a1 e3       	ldi	r26, 0x31	; 49
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e1 e3       	ldi	r30, 0x31	; 49
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	80 6f       	ori	r24, 0xF0	; 240
     ef6:	8c 93       	st	X, r24
			#else
				/* Set The Direction of The LOWER Pins to OP*/
				LCD_Data_Reg_DIR|=(0x0F);
			#endif
			Send_instruction(Return_Home);
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	0e 94 8b 07 	call	0xf16	; 0xf16 <Send_instruction>
		#endif
		
		Send_instruction(Data_Set);
     efe:	88 e2       	ldi	r24, 0x28	; 40
     f00:	0e 94 8b 07 	call	0xf16	; 0xf16 <Send_instruction>
		Send_instruction(Display_on);
     f04:	8c e0       	ldi	r24, 0x0C	; 12
     f06:	0e 94 8b 07 	call	0xf16	; 0xf16 <Send_instruction>
		Send_instruction(Clear_display);
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	0e 94 8b 07 	call	0xf16	; 0xf16 <Send_instruction>
	}
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <Send_instruction>:
	
	void Send_instruction(uint8 instruction)
	{
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	c3 56       	subi	r28, 0x63	; 99
     f24:	d0 40       	sbci	r29, 0x00	; 0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	fe 01       	movw	r30, r28
     f32:	ed 59       	subi	r30, 0x9D	; 157
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	80 83       	st	Z, r24
		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEAR_BIT(LCD_Control_reg_OP,RS);
     f38:	a8 e3       	ldi	r26, 0x38	; 56
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e8 e3       	ldi	r30, 0x38	; 56
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8b 7f       	andi	r24, 0xFB	; 251
     f44:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_Control_reg_OP,RW);
     f46:	a8 e3       	ldi	r26, 0x38	; 56
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e8 e3       	ldi	r30, 0x38	; 56
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8d 7f       	andi	r24, 0xFD	; 253
     f52:	8c 93       	st	X, r24
     f54:	fe 01       	movw	r30, r28
     f56:	e1 5a       	subi	r30, 0xA1	; 161
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e8       	ldi	r26, 0x80	; 128
     f60:	bf e3       	ldi	r27, 0x3F	; 63
     f62:	80 83       	st	Z, r24
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	a2 83       	std	Z+2, r26	; 0x02
     f68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f6a:	8e 01       	movw	r16, r28
     f6c:	05 5a       	subi	r16, 0xA5	; 165
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	fe 01       	movw	r30, r28
     f72:	e1 5a       	subi	r30, 0xA1	; 161
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e8       	ldi	r19, 0x80	; 128
     f82:	4b e3       	ldi	r20, 0x3B	; 59
     f84:	55 e4       	ldi	r21, 0x45	; 69
     f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	f8 01       	movw	r30, r16
     f90:	80 83       	st	Z, r24
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	a2 83       	std	Z+2, r26	; 0x02
     f96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f98:	fe 01       	movw	r30, r28
     f9a:	e5 5a       	subi	r30, 0xA5	; 165
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	60 81       	ld	r22, Z
     fa0:	71 81       	ldd	r23, Z+1	; 0x01
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	5f e3       	ldi	r21, 0x3F	; 63
     fae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fb2:	88 23       	and	r24, r24
     fb4:	44 f4       	brge	.+16     	; 0xfc6 <Send_instruction+0xb0>
		__ticks = 1;
     fb6:	fe 01       	movw	r30, r28
     fb8:	e7 5a       	subi	r30, 0xA7	; 167
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
     fc4:	64 c0       	rjmp	.+200    	; 0x108e <Send_instruction+0x178>
	else if (__tmp > 65535)
     fc6:	fe 01       	movw	r30, r28
     fc8:	e5 5a       	subi	r30, 0xA5	; 165
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	60 81       	ld	r22, Z
     fce:	71 81       	ldd	r23, Z+1	; 0x01
     fd0:	82 81       	ldd	r24, Z+2	; 0x02
     fd2:	93 81       	ldd	r25, Z+3	; 0x03
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	3f ef       	ldi	r19, 0xFF	; 255
     fd8:	4f e7       	ldi	r20, 0x7F	; 127
     fda:	57 e4       	ldi	r21, 0x47	; 71
     fdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fe0:	18 16       	cp	r1, r24
     fe2:	0c f0       	brlt	.+2      	; 0xfe6 <Send_instruction+0xd0>
     fe4:	43 c0       	rjmp	.+134    	; 0x106c <Send_instruction+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe6:	fe 01       	movw	r30, r28
     fe8:	e1 5a       	subi	r30, 0xA1	; 161
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	60 81       	ld	r22, Z
     fee:	71 81       	ldd	r23, Z+1	; 0x01
     ff0:	82 81       	ldd	r24, Z+2	; 0x02
     ff2:	93 81       	ldd	r25, Z+3	; 0x03
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e2       	ldi	r20, 0x20	; 32
     ffa:	51 e4       	ldi	r21, 0x41	; 65
     ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	8e 01       	movw	r16, r28
    1006:	07 5a       	subi	r16, 0xA7	; 167
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	f8 01       	movw	r30, r16
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	80 83       	st	Z, r24
    101c:	1f c0       	rjmp	.+62     	; 0x105c <Send_instruction+0x146>
    101e:	fe 01       	movw	r30, r28
    1020:	e9 5a       	subi	r30, 0xA9	; 169
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	8c e2       	ldi	r24, 0x2C	; 44
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    102c:	fe 01       	movw	r30, r28
    102e:	e9 5a       	subi	r30, 0xA9	; 169
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <Send_instruction+0x120>
    103a:	fe 01       	movw	r30, r28
    103c:	e9 5a       	subi	r30, 0xA9	; 169
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1044:	de 01       	movw	r26, r28
    1046:	a7 5a       	subi	r26, 0xA7	; 167
    1048:	bf 4f       	sbci	r27, 0xFF	; 255
    104a:	fe 01       	movw	r30, r28
    104c:	e7 5a       	subi	r30, 0xA7	; 167
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	11 96       	adiw	r26, 0x01	; 1
    1058:	9c 93       	st	X, r25
    105a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105c:	fe 01       	movw	r30, r28
    105e:	e7 5a       	subi	r30, 0xA7	; 167
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	d1 f6       	brne	.-76     	; 0x101e <Send_instruction+0x108>
    106a:	27 c0       	rjmp	.+78     	; 0x10ba <Send_instruction+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106c:	8e 01       	movw	r16, r28
    106e:	07 5a       	subi	r16, 0xA7	; 167
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	fe 01       	movw	r30, r28
    1074:	e5 5a       	subi	r30, 0xA5	; 165
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	93 81       	ldd	r25, Z+3	; 0x03
    1080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	f8 01       	movw	r30, r16
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	80 83       	st	Z, r24
    108e:	de 01       	movw	r26, r28
    1090:	ab 5a       	subi	r26, 0xAB	; 171
    1092:	bf 4f       	sbci	r27, 0xFF	; 255
    1094:	fe 01       	movw	r30, r28
    1096:	e7 5a       	subi	r30, 0xA7	; 167
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	8d 93       	st	X+, r24
    10a0:	9c 93       	st	X, r25
    10a2:	fe 01       	movw	r30, r28
    10a4:	eb 5a       	subi	r30, 0xAB	; 171
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <Send_instruction+0x196>
    10b0:	fe 01       	movw	r30, r28
    10b2:	eb 5a       	subi	r30, 0xAB	; 171
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	80 83       	st	Z, r24
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SET_BIT(LCD_Control_reg_OP,E);
    10ba:	a8 e3       	ldi	r26, 0x38	; 56
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e8 e3       	ldi	r30, 0x38	; 56
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	81 60       	ori	r24, 0x01	; 1
    10c6:	8c 93       	st	X, r24
    10c8:	fe 01       	movw	r30, r28
    10ca:	ef 5a       	subi	r30, 0xAF	; 175
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	a0 e8       	ldi	r26, 0x80	; 128
    10d4:	bf e3       	ldi	r27, 0x3F	; 63
    10d6:	80 83       	st	Z, r24
    10d8:	91 83       	std	Z+1, r25	; 0x01
    10da:	a2 83       	std	Z+2, r26	; 0x02
    10dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10de:	8e 01       	movw	r16, r28
    10e0:	03 5b       	subi	r16, 0xB3	; 179
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	fe 01       	movw	r30, r28
    10e6:	ef 5a       	subi	r30, 0xAF	; 175
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	60 81       	ld	r22, Z
    10ec:	71 81       	ldd	r23, Z+1	; 0x01
    10ee:	82 81       	ldd	r24, Z+2	; 0x02
    10f0:	93 81       	ldd	r25, Z+3	; 0x03
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e8       	ldi	r19, 0x80	; 128
    10f6:	4b e3       	ldi	r20, 0x3B	; 59
    10f8:	55 e4       	ldi	r21, 0x45	; 69
    10fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	f8 01       	movw	r30, r16
    1104:	80 83       	st	Z, r24
    1106:	91 83       	std	Z+1, r25	; 0x01
    1108:	a2 83       	std	Z+2, r26	; 0x02
    110a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    110c:	fe 01       	movw	r30, r28
    110e:	e3 5b       	subi	r30, 0xB3	; 179
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	60 81       	ld	r22, Z
    1114:	71 81       	ldd	r23, Z+1	; 0x01
    1116:	82 81       	ldd	r24, Z+2	; 0x02
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	5f e3       	ldi	r21, 0x3F	; 63
    1122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1126:	88 23       	and	r24, r24
    1128:	44 f4       	brge	.+16     	; 0x113a <Send_instruction+0x224>
		__ticks = 1;
    112a:	fe 01       	movw	r30, r28
    112c:	e5 5b       	subi	r30, 0xB5	; 181
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	91 83       	std	Z+1, r25	; 0x01
    1136:	80 83       	st	Z, r24
    1138:	64 c0       	rjmp	.+200    	; 0x1202 <Send_instruction+0x2ec>
	else if (__tmp > 65535)
    113a:	fe 01       	movw	r30, r28
    113c:	e3 5b       	subi	r30, 0xB3	; 179
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	60 81       	ld	r22, Z
    1142:	71 81       	ldd	r23, Z+1	; 0x01
    1144:	82 81       	ldd	r24, Z+2	; 0x02
    1146:	93 81       	ldd	r25, Z+3	; 0x03
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	3f ef       	ldi	r19, 0xFF	; 255
    114c:	4f e7       	ldi	r20, 0x7F	; 127
    114e:	57 e4       	ldi	r21, 0x47	; 71
    1150:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1154:	18 16       	cp	r1, r24
    1156:	0c f0       	brlt	.+2      	; 0x115a <Send_instruction+0x244>
    1158:	43 c0       	rjmp	.+134    	; 0x11e0 <Send_instruction+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115a:	fe 01       	movw	r30, r28
    115c:	ef 5a       	subi	r30, 0xAF	; 175
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	60 81       	ld	r22, Z
    1162:	71 81       	ldd	r23, Z+1	; 0x01
    1164:	82 81       	ldd	r24, Z+2	; 0x02
    1166:	93 81       	ldd	r25, Z+3	; 0x03
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e2       	ldi	r20, 0x20	; 32
    116e:	51 e4       	ldi	r21, 0x41	; 65
    1170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	8e 01       	movw	r16, r28
    117a:	05 5b       	subi	r16, 0xB5	; 181
    117c:	1f 4f       	sbci	r17, 0xFF	; 255
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	f8 01       	movw	r30, r16
    118c:	91 83       	std	Z+1, r25	; 0x01
    118e:	80 83       	st	Z, r24
    1190:	1f c0       	rjmp	.+62     	; 0x11d0 <Send_instruction+0x2ba>
    1192:	fe 01       	movw	r30, r28
    1194:	e7 5b       	subi	r30, 0xB7	; 183
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	8c e2       	ldi	r24, 0x2C	; 44
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	80 83       	st	Z, r24
    11a0:	fe 01       	movw	r30, r28
    11a2:	e7 5b       	subi	r30, 0xB7	; 183
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	80 81       	ld	r24, Z
    11a8:	91 81       	ldd	r25, Z+1	; 0x01
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <Send_instruction+0x294>
    11ae:	fe 01       	movw	r30, r28
    11b0:	e7 5b       	subi	r30, 0xB7	; 183
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	91 83       	std	Z+1, r25	; 0x01
    11b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b8:	de 01       	movw	r26, r28
    11ba:	a5 5b       	subi	r26, 0xB5	; 181
    11bc:	bf 4f       	sbci	r27, 0xFF	; 255
    11be:	fe 01       	movw	r30, r28
    11c0:	e5 5b       	subi	r30, 0xB5	; 181
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	11 96       	adiw	r26, 0x01	; 1
    11cc:	9c 93       	st	X, r25
    11ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d0:	fe 01       	movw	r30, r28
    11d2:	e5 5b       	subi	r30, 0xB5	; 181
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	d1 f6       	brne	.-76     	; 0x1192 <Send_instruction+0x27c>
    11de:	27 c0       	rjmp	.+78     	; 0x122e <Send_instruction+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e0:	8e 01       	movw	r16, r28
    11e2:	05 5b       	subi	r16, 0xB5	; 181
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	fe 01       	movw	r30, r28
    11e8:	e3 5b       	subi	r30, 0xB3	; 179
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	60 81       	ld	r22, Z
    11ee:	71 81       	ldd	r23, Z+1	; 0x01
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	93 81       	ldd	r25, Z+3	; 0x03
    11f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	f8 01       	movw	r30, r16
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	80 83       	st	Z, r24
    1202:	de 01       	movw	r26, r28
    1204:	a9 5b       	subi	r26, 0xB9	; 185
    1206:	bf 4f       	sbci	r27, 0xFF	; 255
    1208:	fe 01       	movw	r30, r28
    120a:	e5 5b       	subi	r30, 0xB5	; 181
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	80 81       	ld	r24, Z
    1210:	91 81       	ldd	r25, Z+1	; 0x01
    1212:	8d 93       	st	X+, r24
    1214:	9c 93       	st	X, r25
    1216:	fe 01       	movw	r30, r28
    1218:	e9 5b       	subi	r30, 0xB9	; 185
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <Send_instruction+0x30a>
    1224:	fe 01       	movw	r30, r28
    1226:	e9 5b       	subi	r30, 0xB9	; 185
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	80 83       	st	Z, r24
			_delay_ms(1); 
		#else 
			
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    122e:	a2 e3       	ldi	r26, 0x32	; 50
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e2 e3       	ldi	r30, 0x32	; 50
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8f 70       	andi	r24, 0x0F	; 15
    123a:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= (instruction & 0xF0);
    123c:	a2 e3       	ldi	r26, 0x32	; 50
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e2 e3       	ldi	r30, 0x32	; 50
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	98 2f       	mov	r25, r24
    1248:	fe 01       	movw	r30, r28
    124a:	ed 59       	subi	r30, 0x9D	; 157
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	80 81       	ld	r24, Z
    1250:	80 7f       	andi	r24, 0xF0	; 240
    1252:	89 2b       	or	r24, r25
    1254:	8c 93       	st	X, r24
    1256:	fe 01       	movw	r30, r28
    1258:	ed 5b       	subi	r30, 0xBD	; 189
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a0 e8       	ldi	r26, 0x80	; 128
    1262:	bf e3       	ldi	r27, 0x3F	; 63
    1264:	80 83       	st	Z, r24
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	a2 83       	std	Z+2, r26	; 0x02
    126a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	8e 01       	movw	r16, r28
    126e:	01 5c       	subi	r16, 0xC1	; 193
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
    1272:	fe 01       	movw	r30, r28
    1274:	ed 5b       	subi	r30, 0xBD	; 189
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	60 81       	ld	r22, Z
    127a:	71 81       	ldd	r23, Z+1	; 0x01
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	93 81       	ldd	r25, Z+3	; 0x03
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e8       	ldi	r19, 0x80	; 128
    1284:	4b e3       	ldi	r20, 0x3B	; 59
    1286:	55 e4       	ldi	r21, 0x45	; 69
    1288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	f8 01       	movw	r30, r16
    1292:	80 83       	st	Z, r24
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	a2 83       	std	Z+2, r26	; 0x02
    1298:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    129a:	fe 01       	movw	r30, r28
    129c:	ff 96       	adiw	r30, 0x3f	; 63
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e8       	ldi	r20, 0x80	; 128
    12ac:	5f e3       	ldi	r21, 0x3F	; 63
    12ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12b2:	88 23       	and	r24, r24
    12b4:	2c f4       	brge	.+10     	; 0x12c0 <Send_instruction+0x3aa>
		__ticks = 1;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9e af       	std	Y+62, r25	; 0x3e
    12bc:	8d af       	std	Y+61, r24	; 0x3d
    12be:	46 c0       	rjmp	.+140    	; 0x134c <Send_instruction+0x436>
	else if (__tmp > 65535)
    12c0:	fe 01       	movw	r30, r28
    12c2:	ff 96       	adiw	r30, 0x3f	; 63
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	3f ef       	ldi	r19, 0xFF	; 255
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	57 e4       	ldi	r21, 0x47	; 71
    12d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12d8:	18 16       	cp	r1, r24
    12da:	64 f5       	brge	.+88     	; 0x1334 <Send_instruction+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12dc:	fe 01       	movw	r30, r28
    12de:	ed 5b       	subi	r30, 0xBD	; 189
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	60 81       	ld	r22, Z
    12e4:	71 81       	ldd	r23, Z+1	; 0x01
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	93 81       	ldd	r25, Z+3	; 0x03
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e2       	ldi	r20, 0x20	; 32
    12f0:	51 e4       	ldi	r21, 0x41	; 65
    12f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	9e af       	std	Y+62, r25	; 0x3e
    1308:	8d af       	std	Y+61, r24	; 0x3d
    130a:	0f c0       	rjmp	.+30     	; 0x132a <Send_instruction+0x414>
    130c:	8c e2       	ldi	r24, 0x2C	; 44
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	9c af       	std	Y+60, r25	; 0x3c
    1312:	8b af       	std	Y+59, r24	; 0x3b
    1314:	8b ad       	ldd	r24, Y+59	; 0x3b
    1316:	9c ad       	ldd	r25, Y+60	; 0x3c
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <Send_instruction+0x402>
    131c:	9c af       	std	Y+60, r25	; 0x3c
    131e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1320:	8d ad       	ldd	r24, Y+61	; 0x3d
    1322:	9e ad       	ldd	r25, Y+62	; 0x3e
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	9e af       	std	Y+62, r25	; 0x3e
    1328:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132a:	8d ad       	ldd	r24, Y+61	; 0x3d
    132c:	9e ad       	ldd	r25, Y+62	; 0x3e
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	69 f7       	brne	.-38     	; 0x130c <Send_instruction+0x3f6>
    1332:	16 c0       	rjmp	.+44     	; 0x1360 <Send_instruction+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1334:	fe 01       	movw	r30, r28
    1336:	ff 96       	adiw	r30, 0x3f	; 63
    1338:	60 81       	ld	r22, Z
    133a:	71 81       	ldd	r23, Z+1	; 0x01
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	93 81       	ldd	r25, Z+3	; 0x03
    1340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	9e af       	std	Y+62, r25	; 0x3e
    134a:	8d af       	std	Y+61, r24	; 0x3d
    134c:	8d ad       	ldd	r24, Y+61	; 0x3d
    134e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1350:	9a af       	std	Y+58, r25	; 0x3a
    1352:	89 af       	std	Y+57, r24	; 0x39
    1354:	89 ad       	ldd	r24, Y+57	; 0x39
    1356:	9a ad       	ldd	r25, Y+58	; 0x3a
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <Send_instruction+0x442>
    135c:	9a af       	std	Y+58, r25	; 0x3a
    135e:	89 af       	std	Y+57, r24	; 0x39
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEAR_BIT(LCD_Control_reg_OP,E);
    1360:	a8 e3       	ldi	r26, 0x38	; 56
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e8 e3       	ldi	r30, 0x38	; 56
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8e 7f       	andi	r24, 0xFE	; 254
    136c:	8c 93       	st	X, r24
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a0 e8       	ldi	r26, 0x80	; 128
    1374:	bf e3       	ldi	r27, 0x3F	; 63
    1376:	8d ab       	std	Y+53, r24	; 0x35
    1378:	9e ab       	std	Y+54, r25	; 0x36
    137a:	af ab       	std	Y+55, r26	; 0x37
    137c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137e:	6d a9       	ldd	r22, Y+53	; 0x35
    1380:	7e a9       	ldd	r23, Y+54	; 0x36
    1382:	8f a9       	ldd	r24, Y+55	; 0x37
    1384:	98 ad       	ldd	r25, Y+56	; 0x38
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e8       	ldi	r19, 0x80	; 128
    138a:	4b e3       	ldi	r20, 0x3B	; 59
    138c:	55 e4       	ldi	r21, 0x45	; 69
    138e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	89 ab       	std	Y+49, r24	; 0x31
    1398:	9a ab       	std	Y+50, r25	; 0x32
    139a:	ab ab       	std	Y+51, r26	; 0x33
    139c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    139e:	69 a9       	ldd	r22, Y+49	; 0x31
    13a0:	7a a9       	ldd	r23, Y+50	; 0x32
    13a2:	8b a9       	ldd	r24, Y+51	; 0x33
    13a4:	9c a9       	ldd	r25, Y+52	; 0x34
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e8       	ldi	r20, 0x80	; 128
    13ac:	5f e3       	ldi	r21, 0x3F	; 63
    13ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13b2:	88 23       	and	r24, r24
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <Send_instruction+0x4aa>
		__ticks = 1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	98 ab       	std	Y+48, r25	; 0x30
    13bc:	8f a7       	std	Y+47, r24	; 0x2f
    13be:	3f c0       	rjmp	.+126    	; 0x143e <Send_instruction+0x528>
	else if (__tmp > 65535)
    13c0:	69 a9       	ldd	r22, Y+49	; 0x31
    13c2:	7a a9       	ldd	r23, Y+50	; 0x32
    13c4:	8b a9       	ldd	r24, Y+51	; 0x33
    13c6:	9c a9       	ldd	r25, Y+52	; 0x34
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	3f ef       	ldi	r19, 0xFF	; 255
    13cc:	4f e7       	ldi	r20, 0x7F	; 127
    13ce:	57 e4       	ldi	r21, 0x47	; 71
    13d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13d4:	18 16       	cp	r1, r24
    13d6:	4c f5       	brge	.+82     	; 0x142a <Send_instruction+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d8:	6d a9       	ldd	r22, Y+53	; 0x35
    13da:	7e a9       	ldd	r23, Y+54	; 0x36
    13dc:	8f a9       	ldd	r24, Y+55	; 0x37
    13de:	98 ad       	ldd	r25, Y+56	; 0x38
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	51 e4       	ldi	r21, 0x41	; 65
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	bc 01       	movw	r22, r24
    13f2:	cd 01       	movw	r24, r26
    13f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	98 ab       	std	Y+48, r25	; 0x30
    13fe:	8f a7       	std	Y+47, r24	; 0x2f
    1400:	0f c0       	rjmp	.+30     	; 0x1420 <Send_instruction+0x50a>
    1402:	8c e2       	ldi	r24, 0x2C	; 44
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	9e a7       	std	Y+46, r25	; 0x2e
    1408:	8d a7       	std	Y+45, r24	; 0x2d
    140a:	8d a5       	ldd	r24, Y+45	; 0x2d
    140c:	9e a5       	ldd	r25, Y+46	; 0x2e
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <Send_instruction+0x4f8>
    1412:	9e a7       	std	Y+46, r25	; 0x2e
    1414:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1416:	8f a5       	ldd	r24, Y+47	; 0x2f
    1418:	98 a9       	ldd	r25, Y+48	; 0x30
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	98 ab       	std	Y+48, r25	; 0x30
    141e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1420:	8f a5       	ldd	r24, Y+47	; 0x2f
    1422:	98 a9       	ldd	r25, Y+48	; 0x30
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	69 f7       	brne	.-38     	; 0x1402 <Send_instruction+0x4ec>
    1428:	14 c0       	rjmp	.+40     	; 0x1452 <Send_instruction+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142a:	69 a9       	ldd	r22, Y+49	; 0x31
    142c:	7a a9       	ldd	r23, Y+50	; 0x32
    142e:	8b a9       	ldd	r24, Y+51	; 0x33
    1430:	9c a9       	ldd	r25, Y+52	; 0x34
    1432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	98 ab       	std	Y+48, r25	; 0x30
    143c:	8f a7       	std	Y+47, r24	; 0x2f
    143e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1440:	98 a9       	ldd	r25, Y+48	; 0x30
    1442:	9c a7       	std	Y+44, r25	; 0x2c
    1444:	8b a7       	std	Y+43, r24	; 0x2b
    1446:	8b a5       	ldd	r24, Y+43	; 0x2b
    1448:	9c a5       	ldd	r25, Y+44	; 0x2c
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <Send_instruction+0x534>
    144e:	9c a7       	std	Y+44, r25	; 0x2c
    1450:	8b a7       	std	Y+43, r24	; 0x2b
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SET_BIT(LCD_Control_reg_OP,E);
    1452:	a8 e3       	ldi	r26, 0x38	; 56
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e8 e3       	ldi	r30, 0x38	; 56
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	81 60       	ori	r24, 0x01	; 1
    145e:	8c 93       	st	X, r24
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 e8       	ldi	r26, 0x80	; 128
    1466:	bf e3       	ldi	r27, 0x3F	; 63
    1468:	8f a3       	std	Y+39, r24	; 0x27
    146a:	98 a7       	std	Y+40, r25	; 0x28
    146c:	a9 a7       	std	Y+41, r26	; 0x29
    146e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	6f a1       	ldd	r22, Y+39	; 0x27
    1472:	78 a5       	ldd	r23, Y+40	; 0x28
    1474:	89 a5       	ldd	r24, Y+41	; 0x29
    1476:	9a a5       	ldd	r25, Y+42	; 0x2a
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e8       	ldi	r19, 0x80	; 128
    147c:	4b e3       	ldi	r20, 0x3B	; 59
    147e:	55 e4       	ldi	r21, 0x45	; 69
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8b a3       	std	Y+35, r24	; 0x23
    148a:	9c a3       	std	Y+36, r25	; 0x24
    148c:	ad a3       	std	Y+37, r26	; 0x25
    148e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1490:	6b a1       	ldd	r22, Y+35	; 0x23
    1492:	7c a1       	ldd	r23, Y+36	; 0x24
    1494:	8d a1       	ldd	r24, Y+37	; 0x25
    1496:	9e a1       	ldd	r25, Y+38	; 0x26
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <Send_instruction+0x59c>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9a a3       	std	Y+34, r25	; 0x22
    14ae:	89 a3       	std	Y+33, r24	; 0x21
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <Send_instruction+0x61a>
	else if (__tmp > 65535)
    14b2:	6b a1       	ldd	r22, Y+35	; 0x23
    14b4:	7c a1       	ldd	r23, Y+36	; 0x24
    14b6:	8d a1       	ldd	r24, Y+37	; 0x25
    14b8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <Send_instruction+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	6f a1       	ldd	r22, Y+39	; 0x27
    14cc:	78 a5       	ldd	r23, Y+40	; 0x28
    14ce:	89 a5       	ldd	r24, Y+41	; 0x29
    14d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9a a3       	std	Y+34, r25	; 0x22
    14f0:	89 a3       	std	Y+33, r24	; 0x21
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <Send_instruction+0x5fc>
    14f4:	8c e2       	ldi	r24, 0x2C	; 44
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	98 a3       	std	Y+32, r25	; 0x20
    14fa:	8f 8f       	std	Y+31, r24	; 0x1f
    14fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <Send_instruction+0x5ea>
    1504:	98 a3       	std	Y+32, r25	; 0x20
    1506:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	89 a1       	ldd	r24, Y+33	; 0x21
    150a:	9a a1       	ldd	r25, Y+34	; 0x22
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9a a3       	std	Y+34, r25	; 0x22
    1510:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	89 a1       	ldd	r24, Y+33	; 0x21
    1514:	9a a1       	ldd	r25, Y+34	; 0x22
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <Send_instruction+0x5de>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <Send_instruction+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6b a1       	ldd	r22, Y+35	; 0x23
    151e:	7c a1       	ldd	r23, Y+36	; 0x24
    1520:	8d a1       	ldd	r24, Y+37	; 0x25
    1522:	9e a1       	ldd	r25, Y+38	; 0x26
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9a a3       	std	Y+34, r25	; 0x22
    152e:	89 a3       	std	Y+33, r24	; 0x21
    1530:	89 a1       	ldd	r24, Y+33	; 0x21
    1532:	9a a1       	ldd	r25, Y+34	; 0x22
    1534:	9e 8f       	std	Y+30, r25	; 0x1e
    1536:	8d 8f       	std	Y+29, r24	; 0x1d
    1538:	8d 8d       	ldd	r24, Y+29	; 0x1d
    153a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <Send_instruction+0x626>
    1540:	9e 8f       	std	Y+30, r25	; 0x1e
    1542:	8d 8f       	std	Y+29, r24	; 0x1d
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    1544:	a2 e3       	ldi	r26, 0x32	; 50
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e2 e3       	ldi	r30, 0x32	; 50
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	8f 70       	andi	r24, 0x0F	; 15
    1550:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= ((instruction <<4) & 0xF0);
    1552:	a2 e3       	ldi	r26, 0x32	; 50
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e2 e3       	ldi	r30, 0x32	; 50
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	28 2f       	mov	r18, r24
    155e:	fe 01       	movw	r30, r28
    1560:	ed 59       	subi	r30, 0x9D	; 157
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	80 81       	ld	r24, Z
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	82 95       	swap	r24
    156c:	92 95       	swap	r25
    156e:	90 7f       	andi	r25, 0xF0	; 240
    1570:	98 27       	eor	r25, r24
    1572:	80 7f       	andi	r24, 0xF0	; 240
    1574:	98 27       	eor	r25, r24
    1576:	82 2b       	or	r24, r18
    1578:	8c 93       	st	X, r24
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e8       	ldi	r26, 0x80	; 128
    1580:	bf e3       	ldi	r27, 0x3F	; 63
    1582:	89 8f       	std	Y+25, r24	; 0x19
    1584:	9a 8f       	std	Y+26, r25	; 0x1a
    1586:	ab 8f       	std	Y+27, r26	; 0x1b
    1588:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	69 8d       	ldd	r22, Y+25	; 0x19
    158c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    158e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e8       	ldi	r19, 0x80	; 128
    1596:	4b e3       	ldi	r20, 0x3B	; 59
    1598:	55 e4       	ldi	r21, 0x45	; 69
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8d 8b       	std	Y+21, r24	; 0x15
    15a4:	9e 8b       	std	Y+22, r25	; 0x16
    15a6:	af 8b       	std	Y+23, r26	; 0x17
    15a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15aa:	6d 89       	ldd	r22, Y+21	; 0x15
    15ac:	7e 89       	ldd	r23, Y+22	; 0x16
    15ae:	8f 89       	ldd	r24, Y+23	; 0x17
    15b0:	98 8d       	ldd	r25, Y+24	; 0x18
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15be:	88 23       	and	r24, r24
    15c0:	2c f4       	brge	.+10     	; 0x15cc <Send_instruction+0x6b6>
		__ticks = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9c 8b       	std	Y+20, r25	; 0x14
    15c8:	8b 8b       	std	Y+19, r24	; 0x13
    15ca:	3f c0       	rjmp	.+126    	; 0x164a <Send_instruction+0x734>
	else if (__tmp > 65535)
    15cc:	6d 89       	ldd	r22, Y+21	; 0x15
    15ce:	7e 89       	ldd	r23, Y+22	; 0x16
    15d0:	8f 89       	ldd	r24, Y+23	; 0x17
    15d2:	98 8d       	ldd	r25, Y+24	; 0x18
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	4f e7       	ldi	r20, 0x7F	; 127
    15da:	57 e4       	ldi	r21, 0x47	; 71
    15dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	4c f5       	brge	.+82     	; 0x1636 <Send_instruction+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	69 8d       	ldd	r22, Y+25	; 0x19
    15e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9c 8b       	std	Y+20, r25	; 0x14
    160a:	8b 8b       	std	Y+19, r24	; 0x13
    160c:	0f c0       	rjmp	.+30     	; 0x162c <Send_instruction+0x716>
    160e:	8c e2       	ldi	r24, 0x2C	; 44
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	9a 8b       	std	Y+18, r25	; 0x12
    1614:	89 8b       	std	Y+17, r24	; 0x11
    1616:	89 89       	ldd	r24, Y+17	; 0x11
    1618:	9a 89       	ldd	r25, Y+18	; 0x12
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <Send_instruction+0x704>
    161e:	9a 8b       	std	Y+18, r25	; 0x12
    1620:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	8b 89       	ldd	r24, Y+19	; 0x13
    1624:	9c 89       	ldd	r25, Y+20	; 0x14
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9c 8b       	std	Y+20, r25	; 0x14
    162a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	8b 89       	ldd	r24, Y+19	; 0x13
    162e:	9c 89       	ldd	r25, Y+20	; 0x14
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f7       	brne	.-38     	; 0x160e <Send_instruction+0x6f8>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <Send_instruction+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	6d 89       	ldd	r22, Y+21	; 0x15
    1638:	7e 89       	ldd	r23, Y+22	; 0x16
    163a:	8f 89       	ldd	r24, Y+23	; 0x17
    163c:	98 8d       	ldd	r25, Y+24	; 0x18
    163e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9c 8b       	std	Y+20, r25	; 0x14
    1648:	8b 8b       	std	Y+19, r24	; 0x13
    164a:	8b 89       	ldd	r24, Y+19	; 0x13
    164c:	9c 89       	ldd	r25, Y+20	; 0x14
    164e:	98 8b       	std	Y+16, r25	; 0x10
    1650:	8f 87       	std	Y+15, r24	; 0x0f
    1652:	8f 85       	ldd	r24, Y+15	; 0x0f
    1654:	98 89       	ldd	r25, Y+16	; 0x10
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <Send_instruction+0x740>
    165a:	98 8b       	std	Y+16, r25	; 0x10
    165c:	8f 87       	std	Y+15, r24	; 0x0f
				LCD_Data_Reg_OP |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEAR_BIT(LCD_Control_reg_OP,E);
    165e:	a8 e3       	ldi	r26, 0x38	; 56
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e8 e3       	ldi	r30, 0x38	; 56
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8e 7f       	andi	r24, 0xFE	; 254
    166a:	8c 93       	st	X, r24
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e8       	ldi	r26, 0x80	; 128
    1672:	bf e3       	ldi	r27, 0x3F	; 63
    1674:	8b 87       	std	Y+11, r24	; 0x0b
    1676:	9c 87       	std	Y+12, r25	; 0x0c
    1678:	ad 87       	std	Y+13, r26	; 0x0d
    167a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167c:	6b 85       	ldd	r22, Y+11	; 0x0b
    167e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1680:	8d 85       	ldd	r24, Y+13	; 0x0d
    1682:	9e 85       	ldd	r25, Y+14	; 0x0e
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e8       	ldi	r19, 0x80	; 128
    1688:	4b e3       	ldi	r20, 0x3B	; 59
    168a:	55 e4       	ldi	r21, 0x45	; 69
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8f 83       	std	Y+7, r24	; 0x07
    1696:	98 87       	std	Y+8, r25	; 0x08
    1698:	a9 87       	std	Y+9, r26	; 0x09
    169a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    169c:	6f 81       	ldd	r22, Y+7	; 0x07
    169e:	78 85       	ldd	r23, Y+8	; 0x08
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	2c f4       	brge	.+10     	; 0x16be <Send_instruction+0x7a8>
		__ticks = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9e 83       	std	Y+6, r25	; 0x06
    16ba:	8d 83       	std	Y+5, r24	; 0x05
    16bc:	3f c0       	rjmp	.+126    	; 0x173c <Send_instruction+0x826>
	else if (__tmp > 65535)
    16be:	6f 81       	ldd	r22, Y+7	; 0x07
    16c0:	78 85       	ldd	r23, Y+8	; 0x08
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	4c f5       	brge	.+82     	; 0x1728 <Send_instruction+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16da:	8d 85       	ldd	r24, Y+13	; 0x0d
    16dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e2       	ldi	r20, 0x20	; 32
    16e4:	51 e4       	ldi	r21, 0x41	; 65
    16e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9e 83       	std	Y+6, r25	; 0x06
    16fc:	8d 83       	std	Y+5, r24	; 0x05
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <Send_instruction+0x808>
    1700:	8c e2       	ldi	r24, 0x2C	; 44
    1702:	91 e0       	ldi	r25, 0x01	; 1
    1704:	9c 83       	std	Y+4, r25	; 0x04
    1706:	8b 83       	std	Y+3, r24	; 0x03
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <Send_instruction+0x7f6>
    1710:	9c 83       	std	Y+4, r25	; 0x04
    1712:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	9e 83       	std	Y+6, r25	; 0x06
    171c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	69 f7       	brne	.-38     	; 0x1700 <Send_instruction+0x7ea>
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <Send_instruction+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	8d 83       	std	Y+5, r24	; 0x05
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <Send_instruction+0x832>
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
				/* Data Hold delay Th = 10ns */
				_delay_ms(1);
		#endif
	}
    1750:	cd 59       	subi	r28, 0x9D	; 157
    1752:	df 4f       	sbci	r29, 0xFF	; 255
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	08 95       	ret

00001768 <LCD_DisplayChar>:
	
	
	void LCD_DisplayChar(uint8 Data)
	{
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	c3 56       	subi	r28, 0x63	; 99
    1776:	d0 40       	sbci	r29, 0x00	; 0
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	fe 01       	movw	r30, r28
    1784:	ed 59       	subi	r30, 0x9D	; 157
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 83       	st	Z, r24
		/* RW  Should be 0  and RS should be 1 when Writing Data to LCD */
		SET_BIT(LCD_Control_reg_OP,RS);
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	84 60       	ori	r24, 0x04	; 4
    1796:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_Control_reg_OP,RW);
    1798:	a8 e3       	ldi	r26, 0x38	; 56
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e8 e3       	ldi	r30, 0x38	; 56
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8d 7f       	andi	r24, 0xFD	; 253
    17a4:	8c 93       	st	X, r24
    17a6:	fe 01       	movw	r30, r28
    17a8:	e1 5a       	subi	r30, 0xA1	; 161
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a0 e8       	ldi	r26, 0x80	; 128
    17b2:	bf e3       	ldi	r27, 0x3F	; 63
    17b4:	80 83       	st	Z, r24
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	a2 83       	std	Z+2, r26	; 0x02
    17ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17bc:	8e 01       	movw	r16, r28
    17be:	05 5a       	subi	r16, 0xA5	; 165
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	fe 01       	movw	r30, r28
    17c4:	e1 5a       	subi	r30, 0xA1	; 161
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e8       	ldi	r19, 0x80	; 128
    17d4:	4b e3       	ldi	r20, 0x3B	; 59
    17d6:	55 e4       	ldi	r21, 0x45	; 69
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	f8 01       	movw	r30, r16
    17e2:	80 83       	st	Z, r24
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	a2 83       	std	Z+2, r26	; 0x02
    17e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ea:	fe 01       	movw	r30, r28
    17ec:	e5 5a       	subi	r30, 0xA5	; 165
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	60 81       	ld	r22, Z
    17f2:	71 81       	ldd	r23, Z+1	; 0x01
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e8       	ldi	r20, 0x80	; 128
    17fe:	5f e3       	ldi	r21, 0x3F	; 63
    1800:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1804:	88 23       	and	r24, r24
    1806:	44 f4       	brge	.+16     	; 0x1818 <LCD_DisplayChar+0xb0>
		__ticks = 1;
    1808:	fe 01       	movw	r30, r28
    180a:	e7 5a       	subi	r30, 0xA7	; 167
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    1816:	64 c0       	rjmp	.+200    	; 0x18e0 <LCD_DisplayChar+0x178>
	else if (__tmp > 65535)
    1818:	fe 01       	movw	r30, r28
    181a:	e5 5a       	subi	r30, 0xA5	; 165
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	0c f0       	brlt	.+2      	; 0x1838 <LCD_DisplayChar+0xd0>
    1836:	43 c0       	rjmp	.+134    	; 0x18be <LCD_DisplayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1838:	fe 01       	movw	r30, r28
    183a:	e1 5a       	subi	r30, 0xA1	; 161
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	8e 01       	movw	r16, r28
    1858:	07 5a       	subi	r16, 0xA7	; 167
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	f8 01       	movw	r30, r16
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	80 83       	st	Z, r24
    186e:	1f c0       	rjmp	.+62     	; 0x18ae <LCD_DisplayChar+0x146>
    1870:	fe 01       	movw	r30, r28
    1872:	e9 5a       	subi	r30, 0xA9	; 169
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	8c e2       	ldi	r24, 0x2C	; 44
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	80 83       	st	Z, r24
    187e:	fe 01       	movw	r30, r28
    1880:	e9 5a       	subi	r30, 0xA9	; 169
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <LCD_DisplayChar+0x120>
    188c:	fe 01       	movw	r30, r28
    188e:	e9 5a       	subi	r30, 0xA9	; 169
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1896:	de 01       	movw	r26, r28
    1898:	a7 5a       	subi	r26, 0xA7	; 167
    189a:	bf 4f       	sbci	r27, 0xFF	; 255
    189c:	fe 01       	movw	r30, r28
    189e:	e7 5a       	subi	r30, 0xA7	; 167
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	11 96       	adiw	r26, 0x01	; 1
    18aa:	9c 93       	st	X, r25
    18ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ae:	fe 01       	movw	r30, r28
    18b0:	e7 5a       	subi	r30, 0xA7	; 167
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	d1 f6       	brne	.-76     	; 0x1870 <LCD_DisplayChar+0x108>
    18bc:	27 c0       	rjmp	.+78     	; 0x190c <LCD_DisplayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	8e 01       	movw	r16, r28
    18c0:	07 5a       	subi	r16, 0xA7	; 167
    18c2:	1f 4f       	sbci	r17, 0xFF	; 255
    18c4:	fe 01       	movw	r30, r28
    18c6:	e5 5a       	subi	r30, 0xA5	; 165
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	60 81       	ld	r22, Z
    18cc:	71 81       	ldd	r23, Z+1	; 0x01
    18ce:	82 81       	ldd	r24, Z+2	; 0x02
    18d0:	93 81       	ldd	r25, Z+3	; 0x03
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	f8 01       	movw	r30, r16
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
    18e0:	de 01       	movw	r26, r28
    18e2:	ab 5a       	subi	r26, 0xAB	; 171
    18e4:	bf 4f       	sbci	r27, 0xFF	; 255
    18e6:	fe 01       	movw	r30, r28
    18e8:	e7 5a       	subi	r30, 0xA7	; 167
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	8d 93       	st	X+, r24
    18f2:	9c 93       	st	X, r25
    18f4:	fe 01       	movw	r30, r28
    18f6:	eb 5a       	subi	r30, 0xAB	; 171
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_DisplayChar+0x196>
    1902:	fe 01       	movw	r30, r28
    1904:	eb 5a       	subi	r30, 0xAB	; 171
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		/* Enable LCD E=1 */
		SET_BIT(LCD_Control_reg_OP,E);
    190c:	a8 e3       	ldi	r26, 0x38	; 56
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e8 e3       	ldi	r30, 0x38	; 56
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	81 60       	ori	r24, 0x01	; 1
    1918:	8c 93       	st	X, r24
    191a:	fe 01       	movw	r30, r28
    191c:	ef 5a       	subi	r30, 0xAF	; 175
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	a0 e8       	ldi	r26, 0x80	; 128
    1926:	bf e3       	ldi	r27, 0x3F	; 63
    1928:	80 83       	st	Z, r24
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	a2 83       	std	Z+2, r26	; 0x02
    192e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1930:	8e 01       	movw	r16, r28
    1932:	03 5b       	subi	r16, 0xB3	; 179
    1934:	1f 4f       	sbci	r17, 0xFF	; 255
    1936:	fe 01       	movw	r30, r28
    1938:	ef 5a       	subi	r30, 0xAF	; 175
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	60 81       	ld	r22, Z
    193e:	71 81       	ldd	r23, Z+1	; 0x01
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e8       	ldi	r19, 0x80	; 128
    1948:	4b e3       	ldi	r20, 0x3B	; 59
    194a:	55 e4       	ldi	r21, 0x45	; 69
    194c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	f8 01       	movw	r30, r16
    1956:	80 83       	st	Z, r24
    1958:	91 83       	std	Z+1, r25	; 0x01
    195a:	a2 83       	std	Z+2, r26	; 0x02
    195c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    195e:	fe 01       	movw	r30, r28
    1960:	e3 5b       	subi	r30, 0xB3	; 179
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e8       	ldi	r20, 0x80	; 128
    1972:	5f e3       	ldi	r21, 0x3F	; 63
    1974:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1978:	88 23       	and	r24, r24
    197a:	44 f4       	brge	.+16     	; 0x198c <LCD_DisplayChar+0x224>
		__ticks = 1;
    197c:	fe 01       	movw	r30, r28
    197e:	e5 5b       	subi	r30, 0xB5	; 181
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	91 83       	std	Z+1, r25	; 0x01
    1988:	80 83       	st	Z, r24
    198a:	64 c0       	rjmp	.+200    	; 0x1a54 <LCD_DisplayChar+0x2ec>
	else if (__tmp > 65535)
    198c:	fe 01       	movw	r30, r28
    198e:	e3 5b       	subi	r30, 0xB3	; 179
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	60 81       	ld	r22, Z
    1994:	71 81       	ldd	r23, Z+1	; 0x01
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	0c f0       	brlt	.+2      	; 0x19ac <LCD_DisplayChar+0x244>
    19aa:	43 c0       	rjmp	.+134    	; 0x1a32 <LCD_DisplayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ac:	fe 01       	movw	r30, r28
    19ae:	ef 5a       	subi	r30, 0xAF	; 175
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e2       	ldi	r20, 0x20	; 32
    19c0:	51 e4       	ldi	r21, 0x41	; 65
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8e 01       	movw	r16, r28
    19cc:	05 5b       	subi	r16, 0xB5	; 181
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	bc 01       	movw	r22, r24
    19d2:	cd 01       	movw	r24, r26
    19d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	f8 01       	movw	r30, r16
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
    19e2:	1f c0       	rjmp	.+62     	; 0x1a22 <LCD_DisplayChar+0x2ba>
    19e4:	fe 01       	movw	r30, r28
    19e6:	e7 5b       	subi	r30, 0xB7	; 183
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	8c e2       	ldi	r24, 0x2C	; 44
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
    19f2:	fe 01       	movw	r30, r28
    19f4:	e7 5b       	subi	r30, 0xB7	; 183
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <LCD_DisplayChar+0x294>
    1a00:	fe 01       	movw	r30, r28
    1a02:	e7 5b       	subi	r30, 0xB7	; 183
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0a:	de 01       	movw	r26, r28
    1a0c:	a5 5b       	subi	r26, 0xB5	; 181
    1a0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a10:	fe 01       	movw	r30, r28
    1a12:	e5 5b       	subi	r30, 0xB5	; 181
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 81       	ld	r24, Z
    1a18:	91 81       	ldd	r25, Z+1	; 0x01
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	11 96       	adiw	r26, 0x01	; 1
    1a1e:	9c 93       	st	X, r25
    1a20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	fe 01       	movw	r30, r28
    1a24:	e5 5b       	subi	r30, 0xB5	; 181
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 81       	ld	r24, Z
    1a2a:	91 81       	ldd	r25, Z+1	; 0x01
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	d1 f6       	brne	.-76     	; 0x19e4 <LCD_DisplayChar+0x27c>
    1a30:	27 c0       	rjmp	.+78     	; 0x1a80 <LCD_DisplayChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a32:	8e 01       	movw	r16, r28
    1a34:	05 5b       	subi	r16, 0xB5	; 181
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e3 5b       	subi	r30, 0xB3	; 179
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	60 81       	ld	r22, Z
    1a40:	71 81       	ldd	r23, Z+1	; 0x01
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	f8 01       	movw	r30, r16
    1a50:	91 83       	std	Z+1, r25	; 0x01
    1a52:	80 83       	st	Z, r24
    1a54:	de 01       	movw	r26, r28
    1a56:	a9 5b       	subi	r26, 0xB9	; 185
    1a58:	bf 4f       	sbci	r27, 0xFF	; 255
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e5 5b       	subi	r30, 0xB5	; 181
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 81       	ld	r24, Z
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
    1a64:	8d 93       	st	X+, r24
    1a66:	9c 93       	st	X, r25
    1a68:	fe 01       	movw	r30, r28
    1a6a:	e9 5b       	subi	r30, 0xB9	; 185
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LCD_DisplayChar+0x30a>
    1a76:	fe 01       	movw	r30, r28
    1a78:	e9 5b       	subi	r30, 0xB9	; 185
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	80 83       	st	Z, r24
		#if eight_bitdata
			LCD_Data_Reg_OP=Data;
		#else
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    1a80:	a2 e3       	ldi	r26, 0x32	; 50
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e2 e3       	ldi	r30, 0x32	; 50
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8f 70       	andi	r24, 0x0F	; 15
    1a8c:	8c 93       	st	X, r24
				/* Send MSB (4-bits )*/
				LCD_Data_Reg_OP |= (Data & 0xF0);
    1a8e:	a2 e3       	ldi	r26, 0x32	; 50
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e2 e3       	ldi	r30, 0x32	; 50
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	98 2f       	mov	r25, r24
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ed 59       	subi	r30, 0x9D	; 157
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 7f       	andi	r24, 0xF0	; 240
    1aa4:	89 2b       	or	r24, r25
    1aa6:	8c 93       	st	X, r24
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	ed 5b       	subi	r30, 0xBD	; 189
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e8       	ldi	r26, 0x80	; 128
    1ab4:	bf e3       	ldi	r27, 0x3F	; 63
    1ab6:	80 83       	st	Z, r24
    1ab8:	91 83       	std	Z+1, r25	; 0x01
    1aba:	a2 83       	std	Z+2, r26	; 0x02
    1abc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	8e 01       	movw	r16, r28
    1ac0:	01 5c       	subi	r16, 0xC1	; 193
    1ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ed 5b       	subi	r30, 0xBD	; 189
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e8       	ldi	r19, 0x80	; 128
    1ad6:	4b e3       	ldi	r20, 0x3B	; 59
    1ad8:	55 e4       	ldi	r21, 0x45	; 69
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	80 83       	st	Z, r24
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	a2 83       	std	Z+2, r26	; 0x02
    1aea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aec:	fe 01       	movw	r30, r28
    1aee:	ff 96       	adiw	r30, 0x3f	; 63
    1af0:	60 81       	ld	r22, Z
    1af2:	71 81       	ldd	r23, Z+1	; 0x01
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e8       	ldi	r20, 0x80	; 128
    1afe:	5f e3       	ldi	r21, 0x3F	; 63
    1b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b04:	88 23       	and	r24, r24
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <LCD_DisplayChar+0x3aa>
		__ticks = 1;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9e af       	std	Y+62, r25	; 0x3e
    1b0e:	8d af       	std	Y+61, r24	; 0x3d
    1b10:	46 c0       	rjmp	.+140    	; 0x1b9e <LCD_DisplayChar+0x436>
	else if (__tmp > 65535)
    1b12:	fe 01       	movw	r30, r28
    1b14:	ff 96       	adiw	r30, 0x3f	; 63
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	3f ef       	ldi	r19, 0xFF	; 255
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	57 e4       	ldi	r21, 0x47	; 71
    1b26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	64 f5       	brge	.+88     	; 0x1b86 <LCD_DisplayChar+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ed 5b       	subi	r30, 0xBD	; 189
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e2       	ldi	r20, 0x20	; 32
    1b42:	51 e4       	ldi	r21, 0x41	; 65
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9e af       	std	Y+62, r25	; 0x3e
    1b5a:	8d af       	std	Y+61, r24	; 0x3d
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <LCD_DisplayChar+0x414>
    1b5e:	8c e2       	ldi	r24, 0x2C	; 44
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	9c af       	std	Y+60, r25	; 0x3c
    1b64:	8b af       	std	Y+59, r24	; 0x3b
    1b66:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b68:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <LCD_DisplayChar+0x402>
    1b6e:	9c af       	std	Y+60, r25	; 0x3c
    1b70:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b72:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b74:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	9e af       	std	Y+62, r25	; 0x3e
    1b7a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	69 f7       	brne	.-38     	; 0x1b5e <LCD_DisplayChar+0x3f6>
    1b84:	16 c0       	rjmp	.+44     	; 0x1bb2 <LCD_DisplayChar+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b86:	fe 01       	movw	r30, r28
    1b88:	ff 96       	adiw	r30, 0x3f	; 63
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9e af       	std	Y+62, r25	; 0x3e
    1b9c:	8d af       	std	Y+61, r24	; 0x3d
    1b9e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ba0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ba2:	9a af       	std	Y+58, r25	; 0x3a
    1ba4:	89 af       	std	Y+57, r24	; 0x39
    1ba6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ba8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_DisplayChar+0x442>
    1bae:	9a af       	std	Y+58, r25	; 0x3a
    1bb0:	89 af       	std	Y+57, r24	; 0x39
			#endif
				
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
			/* disable LCD E=0 */
			CLEAR_BIT(LCD_Control_reg_OP,E);
    1bb2:	a8 e3       	ldi	r26, 0x38	; 56
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e8 e3       	ldi	r30, 0x38	; 56
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	8e 7f       	andi	r24, 0xFE	; 254
    1bbe:	8c 93       	st	X, r24
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a0 e8       	ldi	r26, 0x80	; 128
    1bc6:	bf e3       	ldi	r27, 0x3F	; 63
    1bc8:	8d ab       	std	Y+53, r24	; 0x35
    1bca:	9e ab       	std	Y+54, r25	; 0x36
    1bcc:	af ab       	std	Y+55, r26	; 0x37
    1bce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	6d a9       	ldd	r22, Y+53	; 0x35
    1bd2:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e8       	ldi	r19, 0x80	; 128
    1bdc:	4b e3       	ldi	r20, 0x3B	; 59
    1bde:	55 e4       	ldi	r21, 0x45	; 69
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	89 ab       	std	Y+49, r24	; 0x31
    1bea:	9a ab       	std	Y+50, r25	; 0x32
    1bec:	ab ab       	std	Y+51, r26	; 0x33
    1bee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bf0:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf2:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <LCD_DisplayChar+0x4aa>
		__ticks = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	98 ab       	std	Y+48, r25	; 0x30
    1c0e:	8f a7       	std	Y+47, r24	; 0x2f
    1c10:	3f c0       	rjmp	.+126    	; 0x1c90 <LCD_DisplayChar+0x528>
	else if (__tmp > 65535)
    1c12:	69 a9       	ldd	r22, Y+49	; 0x31
    1c14:	7a a9       	ldd	r23, Y+50	; 0x32
    1c16:	8b a9       	ldd	r24, Y+51	; 0x33
    1c18:	9c a9       	ldd	r25, Y+52	; 0x34
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c26:	18 16       	cp	r1, r24
    1c28:	4c f5       	brge	.+82     	; 0x1c7c <LCD_DisplayChar+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c2c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c2e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c30:	98 ad       	ldd	r25, Y+56	; 0x38
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	98 ab       	std	Y+48, r25	; 0x30
    1c50:	8f a7       	std	Y+47, r24	; 0x2f
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <LCD_DisplayChar+0x50a>
    1c54:	8c e2       	ldi	r24, 0x2C	; 44
    1c56:	91 e0       	ldi	r25, 0x01	; 1
    1c58:	9e a7       	std	Y+46, r25	; 0x2e
    1c5a:	8d a7       	std	Y+45, r24	; 0x2d
    1c5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD_DisplayChar+0x4f8>
    1c64:	9e a7       	std	Y+46, r25	; 0x2e
    1c66:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	98 ab       	std	Y+48, r25	; 0x30
    1c70:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c74:	98 a9       	ldd	r25, Y+48	; 0x30
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	69 f7       	brne	.-38     	; 0x1c54 <LCD_DisplayChar+0x4ec>
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <LCD_DisplayChar+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c80:	8b a9       	ldd	r24, Y+51	; 0x33
    1c82:	9c a9       	ldd	r25, Y+52	; 0x34
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	98 ab       	std	Y+48, r25	; 0x30
    1c8e:	8f a7       	std	Y+47, r24	; 0x2f
    1c90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c92:	98 a9       	ldd	r25, Y+48	; 0x30
    1c94:	9c a7       	std	Y+44, r25	; 0x2c
    1c96:	8b a7       	std	Y+43, r24	; 0x2b
    1c98:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <LCD_DisplayChar+0x534>
    1ca0:	9c a7       	std	Y+44, r25	; 0x2c
    1ca2:	8b a7       	std	Y+43, r24	; 0x2b
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			/* Enable LCD E=1 */
			SET_BIT(LCD_Control_reg_OP,E); 
    1ca4:	a8 e3       	ldi	r26, 0x38	; 56
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e8 e3       	ldi	r30, 0x38	; 56
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	81 60       	ori	r24, 0x01	; 1
    1cb0:	8c 93       	st	X, r24
				
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    1cb2:	a2 e3       	ldi	r26, 0x32	; 50
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e2 e3       	ldi	r30, 0x32	; 50
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	8f 70       	andi	r24, 0x0F	; 15
    1cbe:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= ((Data <<4) & 0xF0);
    1cc0:	a2 e3       	ldi	r26, 0x32	; 50
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e2 e3       	ldi	r30, 0x32	; 50
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	28 2f       	mov	r18, r24
    1ccc:	fe 01       	movw	r30, r28
    1cce:	ed 59       	subi	r30, 0x9D	; 157
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	82 95       	swap	r24
    1cda:	92 95       	swap	r25
    1cdc:	90 7f       	andi	r25, 0xF0	; 240
    1cde:	98 27       	eor	r25, r24
    1ce0:	80 7f       	andi	r24, 0xF0	; 240
    1ce2:	98 27       	eor	r25, r24
    1ce4:	82 2b       	or	r24, r18
    1ce6:	8c 93       	st	X, r24
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a0 e8       	ldi	r26, 0x80	; 128
    1cee:	bf e3       	ldi	r27, 0x3F	; 63
    1cf0:	8f a3       	std	Y+39, r24	; 0x27
    1cf2:	98 a7       	std	Y+40, r25	; 0x28
    1cf4:	a9 a7       	std	Y+41, r26	; 0x29
    1cf6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf8:	6f a1       	ldd	r22, Y+39	; 0x27
    1cfa:	78 a5       	ldd	r23, Y+40	; 0x28
    1cfc:	89 a5       	ldd	r24, Y+41	; 0x29
    1cfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e8       	ldi	r19, 0x80	; 128
    1d04:	4b e3       	ldi	r20, 0x3B	; 59
    1d06:	55 e4       	ldi	r21, 0x45	; 69
    1d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	8b a3       	std	Y+35, r24	; 0x23
    1d12:	9c a3       	std	Y+36, r25	; 0x24
    1d14:	ad a3       	std	Y+37, r26	; 0x25
    1d16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d18:	6b a1       	ldd	r22, Y+35	; 0x23
    1d1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d2c:	88 23       	and	r24, r24
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <LCD_DisplayChar+0x5d2>
		__ticks = 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9a a3       	std	Y+34, r25	; 0x22
    1d36:	89 a3       	std	Y+33, r24	; 0x21
    1d38:	3f c0       	rjmp	.+126    	; 0x1db8 <LCD_DisplayChar+0x650>
	else if (__tmp > 65535)
    1d3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d40:	9e a1       	ldd	r25, Y+38	; 0x26
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	3f ef       	ldi	r19, 0xFF	; 255
    1d46:	4f e7       	ldi	r20, 0x7F	; 127
    1d48:	57 e4       	ldi	r21, 0x47	; 71
    1d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4e:	18 16       	cp	r1, r24
    1d50:	4c f5       	brge	.+82     	; 0x1da4 <LCD_DisplayChar+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d52:	6f a1       	ldd	r22, Y+39	; 0x27
    1d54:	78 a5       	ldd	r23, Y+40	; 0x28
    1d56:	89 a5       	ldd	r24, Y+41	; 0x29
    1d58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e2       	ldi	r20, 0x20	; 32
    1d60:	51 e4       	ldi	r21, 0x41	; 65
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9a a3       	std	Y+34, r25	; 0x22
    1d78:	89 a3       	std	Y+33, r24	; 0x21
    1d7a:	0f c0       	rjmp	.+30     	; 0x1d9a <LCD_DisplayChar+0x632>
    1d7c:	8c e2       	ldi	r24, 0x2C	; 44
    1d7e:	91 e0       	ldi	r25, 0x01	; 1
    1d80:	98 a3       	std	Y+32, r25	; 0x20
    1d82:	8f 8f       	std	Y+31, r24	; 0x1f
    1d84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d86:	98 a1       	ldd	r25, Y+32	; 0x20
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_DisplayChar+0x620>
    1d8c:	98 a3       	std	Y+32, r25	; 0x20
    1d8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d90:	89 a1       	ldd	r24, Y+33	; 0x21
    1d92:	9a a1       	ldd	r25, Y+34	; 0x22
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	9a a3       	std	Y+34, r25	; 0x22
    1d98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	69 f7       	brne	.-38     	; 0x1d7c <LCD_DisplayChar+0x614>
    1da2:	14 c0       	rjmp	.+40     	; 0x1dcc <LCD_DisplayChar+0x664>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da4:	6b a1       	ldd	r22, Y+35	; 0x23
    1da6:	7c a1       	ldd	r23, Y+36	; 0x24
    1da8:	8d a1       	ldd	r24, Y+37	; 0x25
    1daa:	9e a1       	ldd	r25, Y+38	; 0x26
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9a a3       	std	Y+34, r25	; 0x22
    1db6:	89 a3       	std	Y+33, r24	; 0x21
    1db8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dba:	9a a1       	ldd	r25, Y+34	; 0x22
    1dbc:	9e 8f       	std	Y+30, r25	; 0x1e
    1dbe:	8d 8f       	std	Y+29, r24	; 0x1d
    1dc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_DisplayChar+0x65c>
    1dc8:	9e 8f       	std	Y+30, r25	; 0x1e
    1dca:	8d 8f       	std	Y+29, r24	; 0x1d
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a0 e8       	ldi	r26, 0x80	; 128
    1dd2:	bf e3       	ldi	r27, 0x3F	; 63
    1dd4:	89 8f       	std	Y+25, r24	; 0x19
    1dd6:	9a 8f       	std	Y+26, r25	; 0x1a
    1dd8:	ab 8f       	std	Y+27, r26	; 0x1b
    1dda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ddc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e8       	ldi	r19, 0x80	; 128
    1de8:	4b e3       	ldi	r20, 0x3B	; 59
    1dea:	55 e4       	ldi	r21, 0x45	; 69
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	8d 8b       	std	Y+21, r24	; 0x15
    1df6:	9e 8b       	std	Y+22, r25	; 0x16
    1df8:	af 8b       	std	Y+23, r26	; 0x17
    1dfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1e00:	8f 89       	ldd	r24, Y+23	; 0x17
    1e02:	98 8d       	ldd	r25, Y+24	; 0x18
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	5f e3       	ldi	r21, 0x3F	; 63
    1e0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e10:	88 23       	and	r24, r24
    1e12:	2c f4       	brge	.+10     	; 0x1e1e <LCD_DisplayChar+0x6b6>
		__ticks = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9c 8b       	std	Y+20, r25	; 0x14
    1e1a:	8b 8b       	std	Y+19, r24	; 0x13
    1e1c:	3f c0       	rjmp	.+126    	; 0x1e9c <LCD_DisplayChar+0x734>
	else if (__tmp > 65535)
    1e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e20:	7e 89       	ldd	r23, Y+22	; 0x16
    1e22:	8f 89       	ldd	r24, Y+23	; 0x17
    1e24:	98 8d       	ldd	r25, Y+24	; 0x18
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	3f ef       	ldi	r19, 0xFF	; 255
    1e2a:	4f e7       	ldi	r20, 0x7F	; 127
    1e2c:	57 e4       	ldi	r21, 0x47	; 71
    1e2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e32:	18 16       	cp	r1, r24
    1e34:	4c f5       	brge	.+82     	; 0x1e88 <LCD_DisplayChar+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e36:	69 8d       	ldd	r22, Y+25	; 0x19
    1e38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e2       	ldi	r20, 0x20	; 32
    1e44:	51 e4       	ldi	r21, 0x41	; 65
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9c 8b       	std	Y+20, r25	; 0x14
    1e5c:	8b 8b       	std	Y+19, r24	; 0x13
    1e5e:	0f c0       	rjmp	.+30     	; 0x1e7e <LCD_DisplayChar+0x716>
    1e60:	8c e2       	ldi	r24, 0x2C	; 44
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	9a 8b       	std	Y+18, r25	; 0x12
    1e66:	89 8b       	std	Y+17, r24	; 0x11
    1e68:	89 89       	ldd	r24, Y+17	; 0x11
    1e6a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_DisplayChar+0x704>
    1e70:	9a 8b       	std	Y+18, r25	; 0x12
    1e72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e74:	8b 89       	ldd	r24, Y+19	; 0x13
    1e76:	9c 89       	ldd	r25, Y+20	; 0x14
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	9c 8b       	std	Y+20, r25	; 0x14
    1e7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e80:	9c 89       	ldd	r25, Y+20	; 0x14
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	69 f7       	brne	.-38     	; 0x1e60 <LCD_DisplayChar+0x6f8>
    1e86:	14 c0       	rjmp	.+40     	; 0x1eb0 <LCD_DisplayChar+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	9c 8b       	std	Y+20, r25	; 0x14
    1e9a:	8b 8b       	std	Y+19, r24	; 0x13
    1e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea0:	98 8b       	std	Y+16, r25	; 0x10
    1ea2:	8f 87       	std	Y+15, r24	; 0x0f
    1ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea6:	98 89       	ldd	r25, Y+16	; 0x10
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_DisplayChar+0x740>
    1eac:	98 8b       	std	Y+16, r25	; 0x10
    1eae:	8f 87       	std	Y+15, r24	; 0x0f
			
			#endif
		/* Data set-up time delay  Tdsw = 195 ns */
		_delay_ms(1);
		/* disable LCD E=0 */
		CLEAR_BIT(LCD_Control_reg_OP,E);						
    1eb0:	a8 e3       	ldi	r26, 0x38	; 56
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e8 e3       	ldi	r30, 0x38	; 56
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	8e 7f       	andi	r24, 0xFE	; 254
    1ebc:	8c 93       	st	X, r24
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a0 e8       	ldi	r26, 0x80	; 128
    1ec4:	bf e3       	ldi	r27, 0x3F	; 63
    1ec6:	8b 87       	std	Y+11, r24	; 0x0b
    1ec8:	9c 87       	std	Y+12, r25	; 0x0c
    1eca:	ad 87       	std	Y+13, r26	; 0x0d
    1ecc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e8       	ldi	r19, 0x80	; 128
    1eda:	4b e3       	ldi	r20, 0x3B	; 59
    1edc:	55 e4       	ldi	r21, 0x45	; 69
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8f 83       	std	Y+7, r24	; 0x07
    1ee8:	98 87       	std	Y+8, r25	; 0x08
    1eea:	a9 87       	std	Y+9, r26	; 0x09
    1eec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef0:	78 85       	ldd	r23, Y+8	; 0x08
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <LCD_DisplayChar+0x7a8>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <LCD_DisplayChar+0x826>
	else if (__tmp > 65535)
    1f10:	6f 81       	ldd	r22, Y+7	; 0x07
    1f12:	78 85       	ldd	r23, Y+8	; 0x08
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <LCD_DisplayChar+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <LCD_DisplayChar+0x808>
    1f52:	8c e2       	ldi	r24, 0x2C	; 44
    1f54:	91 e0       	ldi	r25, 0x01	; 1
    1f56:	9c 83       	std	Y+4, r25	; 0x04
    1f58:	8b 83       	std	Y+3, r24	; 0x03
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_DisplayChar+0x7f6>
    1f62:	9c 83       	std	Y+4, r25	; 0x04
    1f64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <LCD_DisplayChar+0x7ea>
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <LCD_DisplayChar+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7c:	78 85       	ldd	r23, Y+8	; 0x08
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <LCD_DisplayChar+0x832>
    1f9e:	9a 83       	std	Y+2, r25	; 0x02
    1fa0:	89 83       	std	Y+1, r24	; 0x01
		/* Data Hold delay Th = 10ns */
		_delay_ms(1);
		
	}
    1fa2:	cd 59       	subi	r28, 0x9D	; 157
    1fa4:	df 4f       	sbci	r29, 0xFF	; 255
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	08 95       	ret

00001fba <LCD_Clear>:
	
	void LCD_Clear(void)
	{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
		/* Clear Screen */
		Send_instruction(Clear_display); 
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	0e 94 8b 07 	call	0xf16	; 0xf16 <Send_instruction>
	}
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <LCD_DisplayString>:
	
	
	void LCD_DisplayString(char * ptr)
	{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <LCD_DisplayString+0x6>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	0a c0       	rjmp	.+20     	; 0x1ff2 <LCD_DisplayString+0x24>
		while(*ptr != '\0')
		{
			LCD_DisplayChar(*ptr);
    1fde:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe2:	80 81       	ld	r24, Z
    1fe4:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_DisplayChar>
			ptr++;
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	01 96       	adiw	r24, 0x01	; 1
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
    1ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff6:	80 81       	ld	r24, Z
    1ff8:	88 23       	and	r24, r24
    1ffa:	89 f7       	brne	.-30     	; 0x1fde <LCD_DisplayString+0x10>
		{
			LCD_DisplayChar(*ptr);
			ptr++;
		}
	}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <LCD_Select_RowCol>:
	
	void LCD_Select_RowCol(uint8 Row , uint8 col)
	{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <LCD_Select_RowCol+0x6>
    200c:	00 d0       	rcall	.+0      	; 0x200e <LCD_Select_RowCol+0x8>
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	8a 83       	std	Y+2, r24	; 0x02
    2016:	6b 83       	std	Y+3, r22	; 0x03
		uint8 Address=0;
    2018:	19 82       	std	Y+1, r1	; 0x01
		
		switch(Row)
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	3d 83       	std	Y+5, r19	; 0x05
    2022:	2c 83       	std	Y+4, r18	; 0x04
    2024:	8c 81       	ldd	r24, Y+4	; 0x04
    2026:	9d 81       	ldd	r25, Y+5	; 0x05
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	91 05       	cpc	r25, r1
    202c:	c1 f0       	breq	.+48     	; 0x205e <LCD_Select_RowCol+0x58>
    202e:	2c 81       	ldd	r18, Y+4	; 0x04
    2030:	3d 81       	ldd	r19, Y+5	; 0x05
    2032:	22 30       	cpi	r18, 0x02	; 2
    2034:	31 05       	cpc	r19, r1
    2036:	2c f4       	brge	.+10     	; 0x2042 <LCD_Select_RowCol+0x3c>
    2038:	8c 81       	ldd	r24, Y+4	; 0x04
    203a:	9d 81       	ldd	r25, Y+5	; 0x05
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	61 f0       	breq	.+24     	; 0x2058 <LCD_Select_RowCol+0x52>
    2040:	19 c0       	rjmp	.+50     	; 0x2074 <LCD_Select_RowCol+0x6e>
    2042:	2c 81       	ldd	r18, Y+4	; 0x04
    2044:	3d 81       	ldd	r19, Y+5	; 0x05
    2046:	22 30       	cpi	r18, 0x02	; 2
    2048:	31 05       	cpc	r19, r1
    204a:	69 f0       	breq	.+26     	; 0x2066 <LCD_Select_RowCol+0x60>
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
    204e:	9d 81       	ldd	r25, Y+5	; 0x05
    2050:	83 30       	cpi	r24, 0x03	; 3
    2052:	91 05       	cpc	r25, r1
    2054:	61 f0       	breq	.+24     	; 0x206e <LCD_Select_RowCol+0x68>
    2056:	0e c0       	rjmp	.+28     	; 0x2074 <LCD_Select_RowCol+0x6e>
		{
			case 0:
					/* When Writing To LCD 1st Col The Base Address is 0x00 */
						Address=col | LCD_1ST_BASE;
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	0b c0       	rjmp	.+22     	; 0x2074 <LCD_Select_RowCol+0x6e>
						break;
			case 1:
					/* When Writing To LCD 2nd Col The Base Address is 0x40 */
						Address=col | LCD_2ND_BASE;
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	80 64       	ori	r24, 0x40	; 64
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	07 c0       	rjmp	.+14     	; 0x2074 <LCD_Select_RowCol+0x6e>
						break;
			case 2:
					/* When Writing To LCD 1st Col The Base Address is 0x10 */
						Address = col | LCD_3RD_BASE;
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	80 61       	ori	r24, 0x10	; 16
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <LCD_Select_RowCol+0x6e>
						break;
			case 3:
					/* When Writing To LCD 1st Col The Base Address is 0x50 */
						Address=col| LCD_4TH_BASE;
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	80 65       	ori	r24, 0x50	; 80
    2072:	89 83       	std	Y+1, r24	; 0x01
						break;		
		}
		
		Send_instruction(DDRAM_CONST|Address);
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	80 68       	ori	r24, 0x80	; 128
    2078:	0e 94 8b 07 	call	0xf16	; 0xf16 <Send_instruction>
	}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <LCD_DisplayInt>:
	
	
	void LCD_DisplayInt(sint32 data)
	{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	65 97       	sbiw	r28, 0x15	; 21
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	6a 8b       	std	Y+18, r22	; 0x12
    20a2:	7b 8b       	std	Y+19, r23	; 0x13
    20a4:	8c 8b       	std	Y+20, r24	; 0x14
    20a6:	9d 8b       	std	Y+21, r25	; 0x15
		/* String to hold the ascii result */
		char Result[17]; 
		 /* 10 for decimal */
		itoa(data,Result,10);
    20a8:	8a 89       	ldd	r24, Y+18	; 0x12
    20aa:	9b 89       	ldd	r25, Y+19	; 0x13
    20ac:	9e 01       	movw	r18, r28
    20ae:	2f 5f       	subi	r18, 0xFF	; 255
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	b9 01       	movw	r22, r18
    20b4:	4a e0       	ldi	r20, 0x0A	; 10
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <itoa>
		/* Display The Result */
		LCD_DisplayString(Result);
    20bc:	ce 01       	movw	r24, r28
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <LCD_DisplayString>
	}
    20c4:	65 96       	adiw	r28, 0x15	; 21
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <LCD_WriteString>:
	
	/********************************************************************/
	

	void LCD_WriteString(u8* pu8StringCpy)
	{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	61 97       	sbiw	r28, 0x11	; 17
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	99 8b       	std	Y+17, r25	; 0x11
    20ec:	88 8b       	std	Y+16, r24	; 0x10

	  /* Local loop index */
	  u8 u8Index = 0;
    20ee:	1f 86       	std	Y+15, r1	; 0x0f
    20f0:	80 c0       	rjmp	.+256    	; 0x21f2 <LCD_WriteString+0x11c>

	  while (pu8StringCpy [u8Index] != 0)
	  {
	    /* Write Character on LCD */
	    LCD_DisplayChar(pu8StringCpy [u8Index]);
    20f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	88 89       	ldd	r24, Y+16	; 0x10
    20fa:	99 89       	ldd	r25, Y+17	; 0x11
    20fc:	fc 01       	movw	r30, r24
    20fe:	e2 0f       	add	r30, r18
    2100:	f3 1f       	adc	r31, r19
    2102:	80 81       	ld	r24, Z
    2104:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_DisplayChar>

	    /* Increment local loop index */
	    u8Index++;
    2108:	8f 85       	ldd	r24, Y+15	; 0x0f
    210a:	8f 5f       	subi	r24, 0xFF	; 255
    210c:	8f 87       	std	Y+15, r24	; 0x0f
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	a0 e0       	ldi	r26, 0x00	; 0
    2114:	b0 e4       	ldi	r27, 0x40	; 64
    2116:	8b 87       	std	Y+11, r24	; 0x0b
    2118:	9c 87       	std	Y+12, r25	; 0x0c
    211a:	ad 87       	std	Y+13, r26	; 0x0d
    211c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2120:	7c 85       	ldd	r23, Y+12	; 0x0c
    2122:	8d 85       	ldd	r24, Y+13	; 0x0d
    2124:	9e 85       	ldd	r25, Y+14	; 0x0e
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e8       	ldi	r19, 0x80	; 128
    212a:	4b e3       	ldi	r20, 0x3B	; 59
    212c:	55 e4       	ldi	r21, 0x45	; 69
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	8f 83       	std	Y+7, r24	; 0x07
    2138:	98 87       	std	Y+8, r25	; 0x08
    213a:	a9 87       	std	Y+9, r26	; 0x09
    213c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    213e:	6f 81       	ldd	r22, Y+7	; 0x07
    2140:	78 85       	ldd	r23, Y+8	; 0x08
    2142:	89 85       	ldd	r24, Y+9	; 0x09
    2144:	9a 85       	ldd	r25, Y+10	; 0x0a
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e8       	ldi	r20, 0x80	; 128
    214c:	5f e3       	ldi	r21, 0x3F	; 63
    214e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2152:	88 23       	and	r24, r24
    2154:	2c f4       	brge	.+10     	; 0x2160 <LCD_WriteString+0x8a>
		__ticks = 1;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	3f c0       	rjmp	.+126    	; 0x21de <LCD_WriteString+0x108>
	else if (__tmp > 65535)
    2160:	6f 81       	ldd	r22, Y+7	; 0x07
    2162:	78 85       	ldd	r23, Y+8	; 0x08
    2164:	89 85       	ldd	r24, Y+9	; 0x09
    2166:	9a 85       	ldd	r25, Y+10	; 0x0a
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	3f ef       	ldi	r19, 0xFF	; 255
    216c:	4f e7       	ldi	r20, 0x7F	; 127
    216e:	57 e4       	ldi	r21, 0x47	; 71
    2170:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2174:	18 16       	cp	r1, r24
    2176:	4c f5       	brge	.+82     	; 0x21ca <LCD_WriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2178:	6b 85       	ldd	r22, Y+11	; 0x0b
    217a:	7c 85       	ldd	r23, Y+12	; 0x0c
    217c:	8d 85       	ldd	r24, Y+13	; 0x0d
    217e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	51 e4       	ldi	r21, 0x41	; 65
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	bc 01       	movw	r22, r24
    2192:	cd 01       	movw	r24, r26
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9e 83       	std	Y+6, r25	; 0x06
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	0f c0       	rjmp	.+30     	; 0x21c0 <LCD_WriteString+0xea>
    21a2:	8c e2       	ldi	r24, 0x2C	; 44
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	9c 83       	std	Y+4, r25	; 0x04
    21a8:	8b 83       	std	Y+3, r24	; 0x03
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <LCD_WriteString+0xd8>
    21b2:	9c 83       	std	Y+4, r25	; 0x04
    21b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c0:	8d 81       	ldd	r24, Y+5	; 0x05
    21c2:	9e 81       	ldd	r25, Y+6	; 0x06
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	69 f7       	brne	.-38     	; 0x21a2 <LCD_WriteString+0xcc>
    21c8:	14 c0       	rjmp	.+40     	; 0x21f2 <LCD_WriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ca:	6f 81       	ldd	r22, Y+7	; 0x07
    21cc:	78 85       	ldd	r23, Y+8	; 0x08
    21ce:	89 85       	ldd	r24, Y+9	; 0x09
    21d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_WriteString+0x114>
    21ee:	9a 83       	std	Y+2, r25	; 0x02
    21f0:	89 83       	std	Y+1, r24	; 0x01
	{

	  /* Local loop index */
	  u8 u8Index = 0;

	  while (pu8StringCpy [u8Index] != 0)
    21f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	88 89       	ldd	r24, Y+16	; 0x10
    21fa:	99 89       	ldd	r25, Y+17	; 0x11
    21fc:	fc 01       	movw	r30, r24
    21fe:	e2 0f       	add	r30, r18
    2200:	f3 1f       	adc	r31, r19
    2202:	80 81       	ld	r24, Z
    2204:	88 23       	and	r24, r24
    2206:	09 f0       	breq	.+2      	; 0x220a <LCD_WriteString+0x134>
    2208:	74 cf       	rjmp	.-280    	; 0x20f2 <LCD_WriteString+0x1c>

	    /* Delay to let the LCD show the character */
	    _delay_ms(2);
	  }

	}
    220a:	61 96       	adiw	r28, 0x11	; 17
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <LCD_Goto_xy>:

	void LCD_Goto_xy(u8 x, u8 y)
	{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	64 97       	sbiw	r28, 0x14	; 20
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	8b 8b       	std	Y+19, r24	; 0x13
    2232:	6c 8b       	std	Y+20, r22	; 0x14
		u8 firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
    2234:	80 e8       	ldi	r24, 0x80	; 128
    2236:	8f 87       	std	Y+15, r24	; 0x0f
    2238:	80 ec       	ldi	r24, 0xC0	; 192
    223a:	88 8b       	std	Y+16, r24	; 0x10
    223c:	84 e9       	ldi	r24, 0x94	; 148
    223e:	89 8b       	std	Y+17, r24	; 0x11
    2240:	84 ed       	ldi	r24, 0xD4	; 212
    2242:	8a 8b       	std	Y+18, r24	; 0x12
		Send_instruction (firstcharAdr[y-1] + x - 1);
    2244:	8c 89       	ldd	r24, Y+20	; 0x14
    2246:	88 2f       	mov	r24, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9c 01       	movw	r18, r24
    224c:	21 50       	subi	r18, 0x01	; 1
    224e:	30 40       	sbci	r19, 0x00	; 0
    2250:	ce 01       	movw	r24, r28
    2252:	0f 96       	adiw	r24, 0x0f	; 15
    2254:	fc 01       	movw	r30, r24
    2256:	e2 0f       	add	r30, r18
    2258:	f3 1f       	adc	r31, r19
    225a:	90 81       	ld	r25, Z
    225c:	8b 89       	ldd	r24, Y+19	; 0x13
    225e:	89 0f       	add	r24, r25
    2260:	81 50       	subi	r24, 0x01	; 1
    2262:	0e 94 8b 07 	call	0xf16	; 0xf16 <Send_instruction>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a0 e8       	ldi	r26, 0x80	; 128
    226c:	bf e3       	ldi	r27, 0x3F	; 63
    226e:	8b 87       	std	Y+11, r24	; 0x0b
    2270:	9c 87       	std	Y+12, r25	; 0x0c
    2272:	ad 87       	std	Y+13, r26	; 0x0d
    2274:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2276:	6b 85       	ldd	r22, Y+11	; 0x0b
    2278:	7c 85       	ldd	r23, Y+12	; 0x0c
    227a:	8d 85       	ldd	r24, Y+13	; 0x0d
    227c:	9e 85       	ldd	r25, Y+14	; 0x0e
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e8       	ldi	r19, 0x80	; 128
    2282:	4b e3       	ldi	r20, 0x3B	; 59
    2284:	55 e4       	ldi	r21, 0x45	; 69
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	8f 83       	std	Y+7, r24	; 0x07
    2290:	98 87       	std	Y+8, r25	; 0x08
    2292:	a9 87       	std	Y+9, r26	; 0x09
    2294:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <LCD_Goto_xy+0x9c>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <LCD_Goto_xy+0x11a>
	else if (__tmp > 65535)
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	3f ef       	ldi	r19, 0xFF	; 255
    22c4:	4f e7       	ldi	r20, 0x7F	; 127
    22c6:	57 e4       	ldi	r21, 0x47	; 71
    22c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	4c f5       	brge	.+82     	; 0x2322 <LCD_Goto_xy+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e2       	ldi	r20, 0x20	; 32
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9e 83       	std	Y+6, r25	; 0x06
    22f6:	8d 83       	std	Y+5, r24	; 0x05
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <LCD_Goto_xy+0xfc>
    22fa:	8c e2       	ldi	r24, 0x2C	; 44
    22fc:	91 e0       	ldi	r25, 0x01	; 1
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	8b 83       	std	Y+3, r24	; 0x03
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_Goto_xy+0xea>
    230a:	9c 83       	std	Y+4, r25	; 0x04
    230c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	69 f7       	brne	.-38     	; 0x22fa <LCD_Goto_xy+0xde>
    2320:	14 c0       	rjmp	.+40     	; 0x234a <LCD_Goto_xy+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	6f 81       	ldd	r22, Y+7	; 0x07
    2324:	78 85       	ldd	r23, Y+8	; 0x08
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	9a 81       	ldd	r25, Y+2	; 0x02
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <LCD_Goto_xy+0x126>
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
    234a:	64 96       	adiw	r28, 0x14	; 20
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <LCD_WriteString_xy>:


	void LCD_WriteString_xy(u8 x, u8 y, u8* pu8StringCpy)
	{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	00 d0       	rcall	.+0      	; 0x2362 <LCD_WriteString_xy+0x6>
    2362:	00 d0       	rcall	.+0      	; 0x2364 <LCD_WriteString_xy+0x8>
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	6a 83       	std	Y+2, r22	; 0x02
    236c:	5c 83       	std	Y+4, r21	; 0x04
    236e:	4b 83       	std	Y+3, r20	; 0x03
		LCD_Goto_xy(x,y);
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	6a 81       	ldd	r22, Y+2	; 0x02
    2374:	0e 94 0e 11 	call	0x221c	; 0x221c <LCD_Goto_xy>
		LCD_WriteString(pu8StringCpy);
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_WriteString>
	}
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <LCD_WriteInteger_xy>:

	void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
	{
    238e:	ef 92       	push	r14
    2390:	ff 92       	push	r15
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	29 97       	sbiw	r28, 0x09	; 9
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	8b 83       	std	Y+3, r24	; 0x03
    23ac:	6c 83       	std	Y+4, r22	; 0x04
    23ae:	5e 83       	std	Y+6, r21	; 0x06
    23b0:	4d 83       	std	Y+5, r20	; 0x05
    23b2:	2f 83       	std	Y+7, r18	; 0x07
		u8 StringToDisplay[NumberOfDigits];
		itoa (IntegerToDisplay, StringToDisplay, 10);
		LCD_WriteString_xy (x, y, StringToDisplay);
		LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)

	}
    23b4:	0d b7       	in	r16, 0x3d	; 61
    23b6:	1e b7       	in	r17, 0x3e	; 62
		LCD_Goto_xy(x,y);
		LCD_WriteString(pu8StringCpy);
	}

	void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
	{
    23b8:	8d b7       	in	r24, 0x3d	; 61
    23ba:	9e b7       	in	r25, 0x3e	; 62
    23bc:	7c 01       	movw	r14, r24
		u8 StringToDisplay[NumberOfDigits];
    23be:	8f 81       	ldd	r24, Y+7	; 0x07
    23c0:	88 2f       	mov	r24, r24
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	2d b7       	in	r18, 0x3d	; 61
    23c6:	3e b7       	in	r19, 0x3e	; 62
    23c8:	28 1b       	sub	r18, r24
    23ca:	39 0b       	sbc	r19, r25
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	3e bf       	out	0x3e, r19	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	2d bf       	out	0x3d, r18	; 61
    23d6:	8d b7       	in	r24, 0x3d	; 61
    23d8:	9e b7       	in	r25, 0x3e	; 62
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	99 87       	std	Y+9, r25	; 0x09
    23de:	88 87       	std	Y+8, r24	; 0x08
    23e0:	88 85       	ldd	r24, Y+8	; 0x08
    23e2:	99 85       	ldd	r25, Y+9	; 0x09
    23e4:	00 96       	adiw	r24, 0x00	; 0
    23e6:	99 87       	std	Y+9, r25	; 0x09
    23e8:	88 87       	std	Y+8, r24	; 0x08
    23ea:	28 85       	ldd	r18, Y+8	; 0x08
    23ec:	39 85       	ldd	r19, Y+9	; 0x09
    23ee:	3a 83       	std	Y+2, r19	; 0x02
    23f0:	29 83       	std	Y+1, r18	; 0x01
		itoa (IntegerToDisplay, StringToDisplay, 10);
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	29 81       	ldd	r18, Y+1	; 0x01
    23f8:	3a 81       	ldd	r19, Y+2	; 0x02
    23fa:	b9 01       	movw	r22, r18
    23fc:	4a e0       	ldi	r20, 0x0A	; 10
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <itoa>
		LCD_WriteString_xy (x, y, StringToDisplay);
    2404:	29 81       	ldd	r18, Y+1	; 0x01
    2406:	3a 81       	ldd	r19, Y+2	; 0x02
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	6c 81       	ldd	r22, Y+4	; 0x04
    240c:	a9 01       	movw	r20, r18
    240e:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_WriteString_xy>
		LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)
    2412:	80 e6       	ldi	r24, 0x60	; 96
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <LCD_WriteString>
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	fe be       	out	0x3e, r15	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	ed be       	out	0x3d, r14	; 61

	}
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	1e bf       	out	0x3e, r17	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	0d bf       	out	0x3d, r16	; 61
    242e:	29 96       	adiw	r28, 0x09	; 9
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	ff 90       	pop	r15
    2444:	ef 90       	pop	r14
    2446:	08 95       	ret

00002448 <sendData>:

uint8 defaultBuffer[]={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	2f 97       	sbiw	r28, 0x0f	; 15
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
    245c:	1f 86       	std	Y+15, r1	; 0x0f
    245e:	1a c0       	rjmp	.+52     	; 0x2494 <sendData+0x4c>
	{
		UART_SendByte(dataBuffer[counter]);
    2460:	8f 85       	ldd	r24, Y+15	; 0x0f
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	fc 01       	movw	r30, r24
    2468:	e8 57       	subi	r30, 0x78	; 120
    246a:	fe 4f       	sbci	r31, 0xFE	; 254
    246c:	80 81       	ld	r24, Z
    246e:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <UART_SendByte>
		dataBuffer[counter] = defaultBuffer[counter];
    2472:	8f 85       	ldd	r24, Y+15	; 0x0f
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	8f 85       	ldd	r24, Y+15	; 0x0f
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	fc 01       	movw	r30, r24
    2480:	e0 58       	subi	r30, 0x80	; 128
    2482:	fe 4f       	sbci	r31, 0xFE	; 254
    2484:	80 81       	ld	r24, Z
    2486:	f9 01       	movw	r30, r18
    2488:	e8 57       	subi	r30, 0x78	; 120
    248a:	fe 4f       	sbci	r31, 0xFE	; 254
    248c:	80 83       	st	Z, r24
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
    248e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2490:	8f 5f       	subi	r24, 0xFF	; 255
    2492:	8f 87       	std	Y+15, r24	; 0x0f
    2494:	8f 85       	ldd	r24, Y+15	; 0x0f
    2496:	88 30       	cpi	r24, 0x08	; 8
    2498:	18 f3       	brcs	.-58     	; 0x2460 <sendData+0x18>
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	a8 ec       	ldi	r26, 0xC8	; 200
    24a0:	b2 e4       	ldi	r27, 0x42	; 66
    24a2:	8b 87       	std	Y+11, r24	; 0x0b
    24a4:	9c 87       	std	Y+12, r25	; 0x0c
    24a6:	ad 87       	std	Y+13, r26	; 0x0d
    24a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e8       	ldi	r19, 0x80	; 128
    24b6:	4b e3       	ldi	r20, 0x3B	; 59
    24b8:	55 e4       	ldi	r21, 0x45	; 69
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	8f 83       	std	Y+7, r24	; 0x07
    24c4:	98 87       	std	Y+8, r25	; 0x08
    24c6:	a9 87       	std	Y+9, r26	; 0x09
    24c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24de:	88 23       	and	r24, r24
    24e0:	2c f4       	brge	.+10     	; 0x24ec <sendData+0xa4>
		__ticks = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
    24ea:	3f c0       	rjmp	.+126    	; 0x256a <sendData+0x122>
	else if (__tmp > 65535)
    24ec:	6f 81       	ldd	r22, Y+7	; 0x07
    24ee:	78 85       	ldd	r23, Y+8	; 0x08
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	3f ef       	ldi	r19, 0xFF	; 255
    24f8:	4f e7       	ldi	r20, 0x7F	; 127
    24fa:	57 e4       	ldi	r21, 0x47	; 71
    24fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2500:	18 16       	cp	r1, r24
    2502:	4c f5       	brge	.+82     	; 0x2556 <sendData+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2504:	6b 85       	ldd	r22, Y+11	; 0x0b
    2506:	7c 85       	ldd	r23, Y+12	; 0x0c
    2508:	8d 85       	ldd	r24, Y+13	; 0x0d
    250a:	9e 85       	ldd	r25, Y+14	; 0x0e
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
    252c:	0f c0       	rjmp	.+30     	; 0x254c <sendData+0x104>
    252e:	8c e2       	ldi	r24, 0x2C	; 44
    2530:	91 e0       	ldi	r25, 0x01	; 1
    2532:	9c 83       	std	Y+4, r25	; 0x04
    2534:	8b 83       	std	Y+3, r24	; 0x03
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <sendData+0xf2>
    253e:	9c 83       	std	Y+4, r25	; 0x04
    2540:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	69 f7       	brne	.-38     	; 0x252e <sendData+0xe6>
    2554:	14 c0       	rjmp	.+40     	; 0x257e <sendData+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2556:	6f 81       	ldd	r22, Y+7	; 0x07
    2558:	78 85       	ldd	r23, Y+8	; 0x08
    255a:	89 85       	ldd	r24, Y+9	; 0x09
    255c:	9a 85       	ldd	r25, Y+10	; 0x0a
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	9a 83       	std	Y+2, r25	; 0x02
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	9a 81       	ldd	r25, Y+2	; 0x02
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <sendData+0x12e>
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_SendByte(dataBuffer[counter]);
		dataBuffer[counter] = defaultBuffer[counter];
	}
	_delay_ms(100);
}
    257e:	2f 96       	adiw	r28, 0x0f	; 15
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <DFPlayer_init>:

void DFPlayer_init(void)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
	/* set Digital to Analog converter (DAC) online */
	dataBuffer[3] = DAC_ONLINE ; /*command to set DAC online */
    2598:	8a e1       	ldi	r24, 0x1A	; 26
    259a:	80 93 8b 01 	sts	0x018B, r24
	sendData(); /* send this command through uart to DFPlayer module*/
    259e:	0e 94 24 12 	call	0x2448	; 0x2448 <sendData>
}
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <DFPlayer_CMD_play>:
void DFPlayer_CMD_play(uint16 songNumber)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <DFPlayer_CMD_play+0x6>
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	9a 83       	std	Y+2, r25	; 0x02
    25b4:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SELECTSONG ; /* command to play song */
    25b6:	83 e0       	ldi	r24, 0x03	; 3
    25b8:	80 93 8b 01 	sts	0x018B, r24
	if(songNumber < 256)
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	8f 3f       	cpi	r24, 0xFF	; 255
    25c2:	91 05       	cpc	r25, r1
    25c4:	09 f0       	breq	.+2      	; 0x25c8 <DFPlayer_CMD_play+0x20>
    25c6:	20 f4       	brcc	.+8      	; 0x25d0 <DFPlayer_CMD_play+0x28>
	{
		dataBuffer[6] = songNumber ;
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	80 93 8e 01 	sts	0x018E, r24
    25ce:	0b c0       	rjmp	.+22     	; 0x25e6 <DFPlayer_CMD_play+0x3e>
	}
	else
	{
		dataBuffer[6] = (uint8)songNumber;
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	80 93 8e 01 	sts	0x018E, r24
		dataBuffer[5] = (uint8)songNumber >> 8 ;
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	89 2f       	mov	r24, r25
    25de:	99 0f       	add	r25, r25
    25e0:	99 0b       	sbc	r25, r25
    25e2:	80 93 8d 01 	sts	0x018D, r24
	}
	sendData();
    25e6:	0e 94 24 12 	call	0x2448	; 0x2448 <sendData>
}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <DFPlayer_CMD_setVolume>:


void DFPlayer_CMD_setVolume(uint8 volume)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	0f 92       	push	r0
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	89 83       	std	Y+1, r24	; 0x01
	if(volume > 30)
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	8f 31       	cpi	r24, 0x1F	; 31
    2604:	10 f0       	brcs	.+4      	; 0x260a <DFPlayer_CMD_setVolume+0x16>
	{
		volume = 30;
    2606:	8e e1       	ldi	r24, 0x1E	; 30
    2608:	89 83       	std	Y+1, r24	; 0x01
	}
	dataBuffer[3] = SPE_VOL ;
    260a:	86 e0       	ldi	r24, 0x06	; 6
    260c:	80 93 8b 01 	sts	0x018B, r24
	dataBuffer[6] = volume;
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	80 93 8e 01 	sts	0x018E, r24
	sendData();
    2616:	0e 94 24 12 	call	0x2448	; 0x2448 <sendData>
}
    261a:	0f 90       	pop	r0
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	08 95       	ret

00002622 <DFPlayer_CMD_playContinues>:
void DFPlayer_CMD_playContinues(uint8 songNumber)
{
    2622:	df 93       	push	r29
    2624:	cf 93       	push	r28
    2626:	0f 92       	push	r0
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SPPLAYBACKMODE ; /* command to play song continue sly */
    262e:	88 e0       	ldi	r24, 0x08	; 8
    2630:	80 93 8b 01 	sts	0x018B, r24
	if(songNumber < 256)
	{
		dataBuffer[6] = songNumber ;
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	80 93 8e 01 	sts	0x018E, r24
	else
	{
		dataBuffer[6] = (uint8)songNumber;
		dataBuffer[5] = (uint8)songNumber >> 8 ;
	}
	sendData();
    263a:	0e 94 24 12 	call	0x2448	; 0x2448 <sendData>
}
    263e:	0f 90       	pop	r0
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <DFPlayer_CMD_pause>:

void DFPlayer_CMD_pause(void)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PAUSE ;
    264e:	8e e0       	ldi	r24, 0x0E	; 14
    2650:	80 93 8b 01 	sts	0x018B, r24
	sendData();
    2654:	0e 94 24 12 	call	0x2448	; 0x2448 <sendData>
}
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <DFPlayer_CMD_stop>:

void DFPlayer_CMD_stop(void)
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = STOP;
    2666:	86 e1       	ldi	r24, 0x16	; 22
    2668:	80 93 8b 01 	sts	0x018B, r24
	sendData();
    266c:	0e 94 24 12 	call	0x2448	; 0x2448 <sendData>
}
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <DFPlayer_CMD_continue>:
void DFPlayer_CMD_continue(void)
{
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PLAYBACK;
    267e:	8d e0       	ldi	r24, 0x0D	; 13
    2680:	80 93 8b 01 	sts	0x018B, r24
	sendData();
    2684:	0e 94 24 12 	call	0x2448	; 0x2448 <sendData>
}
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <DFPlayer_CMD_Reset>:
void DFPlayer_CMD_Reset(void)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = RESET;
    2696:	8c e0       	ldi	r24, 0x0C	; 12
    2698:	80 93 8b 01 	sts	0x018B, r24
	sendData();
    269c:	0e 94 24 12 	call	0x2448	; 0x2448 <sendData>
}
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <play_sound>:

void play_sound(uint16 Sound)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <play_sound+0x6>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
	DFPlayer_CMD_pause();
    26b4:	0e 94 23 13 	call	0x2646	; 0x2646 <DFPlayer_CMD_pause>
	DFPlayer_CMD_setVolume(30);
    26b8:	8e e1       	ldi	r24, 0x1E	; 30
    26ba:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <DFPlayer_CMD_setVolume>
	DFPlayer_CMD_play(Sound);
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <DFPlayer_CMD_play>
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <TWI_Init>:

#include "i2c.h"
#include "LCD.h"

void TWI_Init(I2C_Prescaler Prescale , I2C_interruptState int_state , uint32 F_SCL , uint8 Address)
{
    26d0:	0f 93       	push	r16
    26d2:	1f 93       	push	r17
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	29 97       	sbiw	r28, 0x09	; 9
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	6a 83       	std	Y+2, r22	; 0x02
    26ec:	2b 83       	std	Y+3, r18	; 0x03
    26ee:	3c 83       	std	Y+4, r19	; 0x04
    26f0:	4d 83       	std	Y+5, r20	; 0x05
    26f2:	5e 83       	std	Y+6, r21	; 0x06
    26f4:	0f 83       	std	Y+7, r16	; 0x07
	TWAR = Address<<1;
    26f6:	e2 e2       	ldi	r30, 0x22	; 34
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	8f 81       	ldd	r24, Y+7	; 0x07
    26fc:	88 0f       	add	r24, r24
    26fe:	80 83       	st	Z, r24
	 /*  Calculating Bit Rate: */
	switch (Prescale)
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	28 2f       	mov	r18, r24
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	39 87       	std	Y+9, r19	; 0x09
    2708:	28 87       	std	Y+8, r18	; 0x08
    270a:	88 85       	ldd	r24, Y+8	; 0x08
    270c:	99 85       	ldd	r25, Y+9	; 0x09
    270e:	81 30       	cpi	r24, 0x01	; 1
    2710:	91 05       	cpc	r25, r1
    2712:	09 f4       	brne	.+2      	; 0x2716 <TWI_Init+0x46>
    2714:	45 c0       	rjmp	.+138    	; 0x27a0 <TWI_Init+0xd0>
    2716:	e8 85       	ldd	r30, Y+8	; 0x08
    2718:	f9 85       	ldd	r31, Y+9	; 0x09
    271a:	e2 30       	cpi	r30, 0x02	; 2
    271c:	f1 05       	cpc	r31, r1
    271e:	34 f4       	brge	.+12     	; 0x272c <TWI_Init+0x5c>
    2720:	28 85       	ldd	r18, Y+8	; 0x08
    2722:	39 85       	ldd	r19, Y+9	; 0x09
    2724:	21 15       	cp	r18, r1
    2726:	31 05       	cpc	r19, r1
    2728:	71 f0       	breq	.+28     	; 0x2746 <TWI_Init+0x76>
    272a:	e8 c0       	rjmp	.+464    	; 0x28fc <TWI_Init+0x22c>
    272c:	88 85       	ldd	r24, Y+8	; 0x08
    272e:	99 85       	ldd	r25, Y+9	; 0x09
    2730:	82 30       	cpi	r24, 0x02	; 2
    2732:	91 05       	cpc	r25, r1
    2734:	09 f4       	brne	.+2      	; 0x2738 <TWI_Init+0x68>
    2736:	65 c0       	rjmp	.+202    	; 0x2802 <TWI_Init+0x132>
    2738:	e8 85       	ldd	r30, Y+8	; 0x08
    273a:	f9 85       	ldd	r31, Y+9	; 0x09
    273c:	e3 30       	cpi	r30, 0x03	; 3
    273e:	f1 05       	cpc	r31, r1
    2740:	09 f4       	brne	.+2      	; 0x2744 <TWI_Init+0x74>
    2742:	9a c0       	rjmp	.+308    	; 0x2878 <TWI_Init+0x1a8>
    2744:	db c0       	rjmp	.+438    	; 0x28fc <TWI_Init+0x22c>
	{
		case I2C_PRESCALE1:
								TWBR = (uint8) (((float)F_CPU/(2.0*F_SCL)) -8);
    2746:	00 e2       	ldi	r16, 0x20	; 32
    2748:	10 e0       	ldi	r17, 0x00	; 0
    274a:	6b 81       	ldd	r22, Y+3	; 0x03
    274c:	7c 81       	ldd	r23, Y+4	; 0x04
    274e:	8d 81       	ldd	r24, Y+5	; 0x05
    2750:	9e 81       	ldd	r25, Y+6	; 0x06
    2752:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2756:	9b 01       	movw	r18, r22
    2758:	ac 01       	movw	r20, r24
    275a:	ca 01       	movw	r24, r20
    275c:	b9 01       	movw	r22, r18
    275e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9c 01       	movw	r18, r24
    2768:	ad 01       	movw	r20, r26
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	7b e1       	ldi	r23, 0x1B	; 27
    276e:	87 e3       	ldi	r24, 0x37	; 55
    2770:	9b e4       	ldi	r25, 0x4B	; 75
    2772:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	51 e4       	ldi	r21, 0x41	; 65
    2786:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	bc 01       	movw	r22, r24
    2790:	cd 01       	movw	r24, r26
    2792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	f8 01       	movw	r30, r16
    279c:	80 83       	st	Z, r24
    279e:	ae c0       	rjmp	.+348    	; 0x28fc <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE4:
								TWBR = (uint8) (((float)F_CPU/(8.0*F_SCL)) -2);
    27a0:	00 e2       	ldi	r16, 0x20	; 32
    27a2:	10 e0       	ldi	r17, 0x00	; 0
    27a4:	6b 81       	ldd	r22, Y+3	; 0x03
    27a6:	7c 81       	ldd	r23, Y+4	; 0x04
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	9c 01       	movw	r18, r24
    27ca:	ad 01       	movw	r20, r26
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	7b e1       	ldi	r23, 0x1B	; 27
    27d0:	87 e3       	ldi	r24, 0x37	; 55
    27d2:	9b e4       	ldi	r25, 0x4B	; 75
    27d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	bc 01       	movw	r22, r24
    27de:	cd 01       	movw	r24, r26
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e0       	ldi	r20, 0x00	; 0
    27e6:	50 e4       	ldi	r21, 0x40	; 64
    27e8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	f8 01       	movw	r30, r16
    27fe:	80 83       	st	Z, r24
    2800:	7d c0       	rjmp	.+250    	; 0x28fc <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE16:
								TWBR = (uint8) (((float)F_CPU/(32*F_SCL)) -0.5);
    2802:	00 e2       	ldi	r16, 0x20	; 32
    2804:	10 e0       	ldi	r17, 0x00	; 0
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	9c 81       	ldd	r25, Y+4	; 0x04
    280a:	ad 81       	ldd	r26, Y+5	; 0x05
    280c:	be 81       	ldd	r27, Y+6	; 0x06
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	aa 1f       	adc	r26, r26
    2814:	bb 1f       	adc	r27, r27
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	aa 1f       	adc	r26, r26
    281c:	bb 1f       	adc	r27, r27
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	aa 1f       	adc	r26, r26
    2824:	bb 1f       	adc	r27, r27
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	aa 1f       	adc	r26, r26
    282c:	bb 1f       	adc	r27, r27
    282e:	88 0f       	add	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	aa 1f       	adc	r26, r26
    2834:	bb 1f       	adc	r27, r27
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    283e:	9b 01       	movw	r18, r22
    2840:	ac 01       	movw	r20, r24
    2842:	60 e0       	ldi	r22, 0x00	; 0
    2844:	7b e1       	ldi	r23, 0x1B	; 27
    2846:	87 e3       	ldi	r24, 0x37	; 55
    2848:	9b e4       	ldi	r25, 0x4B	; 75
    284a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	bc 01       	movw	r22, r24
    2854:	cd 01       	movw	r24, r26
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	5f e3       	ldi	r21, 0x3F	; 63
    285e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	f8 01       	movw	r30, r16
    2874:	80 83       	st	Z, r24
    2876:	42 c0       	rjmp	.+132    	; 0x28fc <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE64:
								TWBR = (uint8) (((float)F_CPU/(128*F_SCL)) -0.125);
    2878:	00 e2       	ldi	r16, 0x20	; 32
    287a:	10 e0       	ldi	r17, 0x00	; 0
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	ad 81       	ldd	r26, Y+5	; 0x05
    2882:	be 81       	ldd	r27, Y+6	; 0x06
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	aa 1f       	adc	r26, r26
    288a:	bb 1f       	adc	r27, r27
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	aa 1f       	adc	r26, r26
    2892:	bb 1f       	adc	r27, r27
    2894:	88 0f       	add	r24, r24
    2896:	99 1f       	adc	r25, r25
    2898:	aa 1f       	adc	r26, r26
    289a:	bb 1f       	adc	r27, r27
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	aa 1f       	adc	r26, r26
    28a2:	bb 1f       	adc	r27, r27
    28a4:	88 0f       	add	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	aa 1f       	adc	r26, r26
    28aa:	bb 1f       	adc	r27, r27
    28ac:	88 0f       	add	r24, r24
    28ae:	99 1f       	adc	r25, r25
    28b0:	aa 1f       	adc	r26, r26
    28b2:	bb 1f       	adc	r27, r27
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	aa 1f       	adc	r26, r26
    28ba:	bb 1f       	adc	r27, r27
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    28c4:	9b 01       	movw	r18, r22
    28c6:	ac 01       	movw	r20, r24
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	7b e1       	ldi	r23, 0x1B	; 27
    28cc:	87 e3       	ldi	r24, 0x37	; 55
    28ce:	9b e4       	ldi	r25, 0x4B	; 75
    28d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	5e e3       	ldi	r21, 0x3E	; 62
    28e4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	f8 01       	movw	r30, r16
    28fa:	80 83       	st	Z, r24
		default:
					break;
	}
   
	
	TWSR |= (Prescale & 0x03);
    28fc:	a1 e2       	ldi	r26, 0x21	; 33
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e1 e2       	ldi	r30, 0x21	; 33
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	98 2f       	mov	r25, r24
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	83 70       	andi	r24, 0x03	; 3
    290c:	89 2b       	or	r24, r25
    290e:	8c 93       	st	X, r24
	TWCR |= (1<<TWEN) | (int_state & 0x01) ;
    2910:	a6 e5       	ldi	r26, 0x56	; 86
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e6 e5       	ldi	r30, 0x56	; 86
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	98 2f       	mov	r25, r24
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	81 70       	andi	r24, 0x01	; 1
    2920:	84 60       	ori	r24, 0x04	; 4
    2922:	89 2b       	or	r24, r25
    2924:	8c 93       	st	X, r24
}
    2926:	29 96       	adiw	r28, 0x09	; 9
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	08 95       	ret

0000293c <TWI_Start>:

void TWI_Start(void)
{
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
    2944:	e6 e5       	ldi	r30, 0x56	; 86
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	84 ea       	ldi	r24, 0xA4	; 164
    294a:	80 83       	st	Z, r24
 
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    294c:	e6 e5       	ldi	r30, 0x56	; 86
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	88 23       	and	r24, r24
    2954:	dc f7       	brge	.-10     	; 0x294c <TWI_Start+0x10>
}
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <TWI_Stop>:

void TWI_Stop(void)
{
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
    2964:	e6 e5       	ldi	r30, 0x56	; 86
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	84 e9       	ldi	r24, 0x94	; 148
    296a:	80 83       	st	Z, r24
 
}
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <TWI_Write>:

void TWI_Write(uint8 data)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	0f 92       	push	r0
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    297e:	e3 e2       	ldi	r30, 0x23	; 35
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
   TWCR = (1<<TWEN) | (1<<TWINT);
    2986:	e6 e5       	ldi	r30, 0x56	; 86
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	84 e8       	ldi	r24, 0x84	; 132
    298c:	80 83       	st	Z, r24
   
   /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    298e:	e6 e5       	ldi	r30, 0x56	; 86
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	88 23       	and	r24, r24
    2996:	dc f7       	brge	.-10     	; 0x298e <TWI_Write+0x1c>
}
    2998:	0f 90       	pop	r0
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	08 95       	ret

000029a0 <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 

    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);    
    29a8:	e6 e5       	ldi	r30, 0x56	; 86
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	84 ec       	ldi	r24, 0xC4	; 196
    29ae:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    29b0:	e6 e5       	ldi	r30, 0x56	; 86
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	88 23       	and	r24, r24
    29b8:	dc f7       	brge	.-10     	; 0x29b0 <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    29ba:	e3 e2       	ldi	r30, 0x23	; 35
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
}
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62



		TWCR =(1<<TWEN) | (1<<TWINT);
    29ce:	e6 e5       	ldi	r30, 0x56	; 86
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	84 e8       	ldi	r24, 0x84	; 132
    29d4:	80 83       	st	Z, r24
/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
while(BIT_IS_CLEAR(TWCR,TWINT));
    29d6:	e6 e5       	ldi	r30, 0x56	; 86
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	88 23       	and	r24, r24
    29de:	dc f7       	brge	.-10     	; 0x29d6 <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    29e0:	e3 e2       	ldi	r30, 0x23	; 35
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
}
    29e6:	cf 91       	pop	r28
    29e8:	df 91       	pop	r29
    29ea:	08 95       	ret

000029ec <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    29f4:	e1 e2       	ldi	r30, 0x21	; 33
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	88 7f       	andi	r24, 0xF8	; 248
}
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <I2C_ByteWrite>:




void I2C_ByteWrite(uint8 SL_Address,uint8 Reg_Address ,uint8 Data )
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <I2C_ByteWrite+0x6>
    2a08:	0f 92       	push	r0
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	89 83       	std	Y+1, r24	; 0x01
    2a10:	6a 83       	std	Y+2, r22	; 0x02
    2a12:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();
    2a14:	0e 94 9e 14 	call	0x293c	; 0x293c <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    2a18:	0e 94 f6 14 	call	0x29ec	; 0x29ec <TWI_Get_Status>
    2a1c:	88 30       	cpi	r24, 0x08	; 8
    2a1e:	19 f0       	breq	.+6      	; 0x2a26 <I2C_ByteWrite+0x24>
	{
		TWI_Stop();
    2a20:	0e 94 ae 14 	call	0x295c	; 0x295c <TWI_Stop>
    2a24:	21 c0       	rjmp	.+66     	; 0x2a68 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write((SL_Address<<1));
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	88 0f       	add	r24, r24
    2a2a:	0e 94 b9 14 	call	0x2972	; 0x2972 <TWI_Write>
if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    2a2e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <TWI_Get_Status>
    2a32:	88 31       	cpi	r24, 0x18	; 24
    2a34:	19 f0       	breq	.+6      	; 0x2a3c <I2C_ByteWrite+0x3a>
	{

		TWI_Stop();
    2a36:	0e 94 ae 14 	call	0x295c	; 0x295c <TWI_Stop>
    2a3a:	16 c0       	rjmp	.+44     	; 0x2a68 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write(Reg_Address);
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	0e 94 b9 14 	call	0x2972	; 0x2972 <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2a42:	0e 94 f6 14 	call	0x29ec	; 0x29ec <TWI_Get_Status>
    2a46:	88 32       	cpi	r24, 0x28	; 40
    2a48:	19 f0       	breq	.+6      	; 0x2a50 <I2C_ByteWrite+0x4e>
	{
		TWI_Stop();
    2a4a:	0e 94 ae 14 	call	0x295c	; 0x295c <TWI_Stop>
    2a4e:	0c c0       	rjmp	.+24     	; 0x2a68 <I2C_ByteWrite+0x66>
		return ;
	}
	
TWI_Write(Data);
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	0e 94 b9 14 	call	0x2972	; 0x2972 <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2a56:	0e 94 f6 14 	call	0x29ec	; 0x29ec <TWI_Get_Status>
    2a5a:	88 32       	cpi	r24, 0x28	; 40
    2a5c:	19 f0       	breq	.+6      	; 0x2a64 <I2C_ByteWrite+0x62>
	{

		TWI_Stop();
    2a5e:	0e 94 ae 14 	call	0x295c	; 0x295c <TWI_Stop>
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
    2a64:	0e 94 ae 14 	call	0x295c	; 0x295c <TWI_Stop>
	return ;

}
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	cf 91       	pop	r28
    2a70:	df 91       	pop	r29
    2a72:	08 95       	ret

00002a74 <I2C_ByteRead>:

 

 
uint8 I2C_ByteRead(uint8 SL_Address , uint8 Reg_Address)
{
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	00 d0       	rcall	.+0      	; 0x2a7a <I2C_ByteRead+0x6>
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <I2C_ByteRead+0x8>
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	8a 83       	std	Y+2, r24	; 0x02
    2a82:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Data=0;
    2a84:	19 82       	std	Y+1, r1	; 0x01
	
	
	TWI_Start();
    2a86:	0e 94 9e 14 	call	0x293c	; 0x293c <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    2a8a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <TWI_Get_Status>
    2a8e:	88 30       	cpi	r24, 0x08	; 8
    2a90:	29 f0       	breq	.+10     	; 0x2a9c <I2C_ByteRead+0x28>
	{
		TWI_Stop();
    2a92:	0e 94 ae 14 	call	0x295c	; 0x295c <TWI_Stop>
		return 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	8c 83       	std	Y+4, r24	; 0x04
    2a9a:	3c c0       	rjmp	.+120    	; 0x2b14 <I2C_ByteRead+0xa0>
	}
	
	
	TWI_Write((SL_Address<<1));
    2a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9e:	88 0f       	add	r24, r24
    2aa0:	0e 94 b9 14 	call	0x2972	; 0x2972 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    2aa4:	0e 94 f6 14 	call	0x29ec	; 0x29ec <TWI_Get_Status>
    2aa8:	88 31       	cpi	r24, 0x18	; 24
    2aaa:	29 f0       	breq	.+10     	; 0x2ab6 <I2C_ByteRead+0x42>
	{

		TWI_Stop();
    2aac:	0e 94 ae 14 	call	0x295c	; 0x295c <TWI_Stop>
		return 2;
    2ab0:	82 e0       	ldi	r24, 0x02	; 2
    2ab2:	8c 83       	std	Y+4, r24	; 0x04
    2ab4:	2f c0       	rjmp	.+94     	; 0x2b14 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write(Reg_Address);
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	0e 94 b9 14 	call	0x2972	; 0x2972 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2abc:	0e 94 f6 14 	call	0x29ec	; 0x29ec <TWI_Get_Status>
    2ac0:	88 32       	cpi	r24, 0x28	; 40
    2ac2:	29 f0       	breq	.+10     	; 0x2ace <I2C_ByteRead+0x5a>
	{
		TWI_Stop();
    2ac4:	0e 94 ae 14 	call	0x295c	; 0x295c <TWI_Stop>
		return 3;
    2ac8:	83 e0       	ldi	r24, 0x03	; 3
    2aca:	8c 83       	std	Y+4, r24	; 0x04
    2acc:	23 c0       	rjmp	.+70     	; 0x2b14 <I2C_ByteRead+0xa0>
	}
	
	TWI_Start();
    2ace:	0e 94 9e 14 	call	0x293c	; 0x293c <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    2ad2:	0e 94 f6 14 	call	0x29ec	; 0x29ec <TWI_Get_Status>
    2ad6:	80 31       	cpi	r24, 0x10	; 16
    2ad8:	29 f0       	breq	.+10     	; 0x2ae4 <I2C_ByteRead+0x70>
	{
		TWI_Stop();
    2ada:	0e 94 ae 14 	call	0x295c	; 0x295c <TWI_Stop>
		return 4;
    2ade:	84 e0       	ldi	r24, 0x04	; 4
    2ae0:	8c 83       	std	Y+4, r24	; 0x04
    2ae2:	18 c0       	rjmp	.+48     	; 0x2b14 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write((SL_Address<<1) | READ);
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	88 2f       	mov	r24, r24
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	88 0f       	add	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	81 60       	ori	r24, 0x01	; 1
    2af0:	0e 94 b9 14 	call	0x2972	; 0x2972 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    2af4:	0e 94 f6 14 	call	0x29ec	; 0x29ec <TWI_Get_Status>
    2af8:	80 34       	cpi	r24, 0x40	; 64
    2afa:	29 f0       	breq	.+10     	; 0x2b06 <I2C_ByteRead+0x92>
	{

		TWI_Stop();
    2afc:	0e 94 ae 14 	call	0x295c	; 0x295c <TWI_Stop>
		return 5;
    2b00:	85 e0       	ldi	r24, 0x05	; 5
    2b02:	8c 83       	std	Y+4, r24	; 0x04
    2b04:	07 c0       	rjmp	.+14     	; 0x2b14 <I2C_ByteRead+0xa0>
	}
	Data=TWI_Read_With_NACK();
    2b06:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <TWI_Read_With_NACK>
    2b0a:	89 83       	std	Y+1, r24	; 0x01
	TWI_Stop();
    2b0c:	0e 94 ae 14 	call	0x295c	; 0x295c <TWI_Stop>
	
	return Data;		
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	8c 83       	std	Y+4, r24	; 0x04
    2b14:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	cf 91       	pop	r28
    2b20:	df 91       	pop	r29
    2b22:	08 95       	ret

00002b24 <main>:
void Accelerometor_ReadAxis(ADXL345_Address EFF_Address , Letters_and_Words * Ptr_Acc);
/*-------------------------------------------------------------*/


int main (void)
{
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	c6 55       	subi	r28, 0x56	; 86
    2b32:	d0 40       	sbci	r29, 0x00	; 0
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
		Letter_B,
		Letter_C,
		Letter_D,
	};
//	DDRA=0x00;  "reserved for ADCs"
	DDRC=0xff;
    2b3e:	e4 e3       	ldi	r30, 0x34	; 52
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	8f ef       	ldi	r24, 0xFF	; 255
    2b44:	80 83       	st	Z, r24

	LCD_init();
    2b46:	0e 94 6a 07 	call	0xed4	; 0xed4 <LCD_init>
	UART_init();
    2b4a:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <UART_init>
	TWI_Init(I2C_PRESCALE1,I2C_intDisable,F_ADXL,0x01);
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	20 e8       	ldi	r18, 0x80	; 128
    2b54:	3a e1       	ldi	r19, 0x1A	; 26
    2b56:	46 e0       	ldi	r20, 0x06	; 6
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	01 e0       	ldi	r16, 0x01	; 1
    2b5c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <TWI_Init>
	Accelerometor_init(ADXL345_MessureMode,ADXL345_ALTERNATIVE_ADDRESS);
    2b60:	88 e0       	ldi	r24, 0x08	; 8
    2b62:	63 e5       	ldi	r22, 0x53	; 83
    2b64:	0e 94 cb 1a 	call	0x3596	; 0x3596 <Accelerometor_init>
	DFPlayer_init();
    2b68:	0e 94 c8 12 	call	0x2590	; 0x2590 <DFPlayer_init>
	ADC_init();
    2b6c:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>

	while(1)
	{
		Update_Flexs(&Sensors_Readings);
    2b70:	80 e3       	ldi	r24, 0x30	; 48
    2b72:	92 e0       	ldi	r25, 0x02	; 2
    2b74:	0e 94 00 1a 	call	0x3400	; 0x3400 <Update_Flexs>
		Accelerometor_ReadAxis(ADXL345_ALTERNATIVE_ADDRESS,&Sensors_Readings);
    2b78:	20 e3       	ldi	r18, 0x30	; 48
    2b7a:	32 e0       	ldi	r19, 0x02	; 2
    2b7c:	83 e5       	ldi	r24, 0x53	; 83
    2b7e:	b9 01       	movw	r22, r18
    2b80:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <Accelerometor_ReadAxis>

		LCD_DisplayChar(Sensors_Readings.Arr_Flex[0]);
    2b84:	80 91 30 02 	lds	r24, 0x0230
    2b88:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_DisplayChar>
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	ef 5a       	subi	r30, 0xAF	; 175
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	aa e7       	ldi	r26, 0x7A	; 122
    2b98:	b4 e4       	ldi	r27, 0x44	; 68
    2b9a:	80 83       	st	Z, r24
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	a2 83       	std	Z+2, r26	; 0x02
    2ba0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba2:	8e 01       	movw	r16, r28
    2ba4:	03 5b       	subi	r16, 0xB3	; 179
    2ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ef 5a       	subi	r30, 0xAF	; 175
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	60 81       	ld	r22, Z
    2bb0:	71 81       	ldd	r23, Z+1	; 0x01
    2bb2:	82 81       	ldd	r24, Z+2	; 0x02
    2bb4:	93 81       	ldd	r25, Z+3	; 0x03
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e8       	ldi	r19, 0x80	; 128
    2bba:	4b e3       	ldi	r20, 0x3B	; 59
    2bbc:	55 e4       	ldi	r21, 0x45	; 69
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	f8 01       	movw	r30, r16
    2bc8:	80 83       	st	Z, r24
    2bca:	91 83       	std	Z+1, r25	; 0x01
    2bcc:	a2 83       	std	Z+2, r26	; 0x02
    2bce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e3 5b       	subi	r30, 0xB3	; 179
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e8       	ldi	r20, 0x80	; 128
    2be4:	5f e3       	ldi	r21, 0x3F	; 63
    2be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bea:	88 23       	and	r24, r24
    2bec:	44 f4       	brge	.+16     	; 0x2bfe <main+0xda>
		__ticks = 1;
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e5 5b       	subi	r30, 0xB5	; 181
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	80 83       	st	Z, r24
    2bfc:	64 c0       	rjmp	.+200    	; 0x2cc6 <main+0x1a2>
	else if (__tmp > 65535)
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e3 5b       	subi	r30, 0xB3	; 179
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	60 81       	ld	r22, Z
    2c06:	71 81       	ldd	r23, Z+1	; 0x01
    2c08:	82 81       	ldd	r24, Z+2	; 0x02
    2c0a:	93 81       	ldd	r25, Z+3	; 0x03
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	3f ef       	ldi	r19, 0xFF	; 255
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	57 e4       	ldi	r21, 0x47	; 71
    2c14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	0c f0       	brlt	.+2      	; 0x2c1e <main+0xfa>
    2c1c:	43 c0       	rjmp	.+134    	; 0x2ca4 <main+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1e:	fe 01       	movw	r30, r28
    2c20:	ef 5a       	subi	r30, 0xAF	; 175
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	8e 01       	movw	r16, r28
    2c3e:	05 5b       	subi	r16, 0xB5	; 181
    2c40:	1f 4f       	sbci	r17, 0xFF	; 255
    2c42:	bc 01       	movw	r22, r24
    2c44:	cd 01       	movw	r24, r26
    2c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	f8 01       	movw	r30, r16
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	80 83       	st	Z, r24
    2c54:	1f c0       	rjmp	.+62     	; 0x2c94 <main+0x170>
    2c56:	fe 01       	movw	r30, r28
    2c58:	e7 5b       	subi	r30, 0xB7	; 183
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	8c e2       	ldi	r24, 0x2C	; 44
    2c5e:	91 e0       	ldi	r25, 0x01	; 1
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	80 83       	st	Z, r24
    2c64:	fe 01       	movw	r30, r28
    2c66:	e7 5b       	subi	r30, 0xB7	; 183
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	80 81       	ld	r24, Z
    2c6c:	91 81       	ldd	r25, Z+1	; 0x01
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <main+0x14a>
    2c72:	fe 01       	movw	r30, r28
    2c74:	e7 5b       	subi	r30, 0xB7	; 183
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7c:	de 01       	movw	r26, r28
    2c7e:	a5 5b       	subi	r26, 0xB5	; 181
    2c80:	bf 4f       	sbci	r27, 0xFF	; 255
    2c82:	fe 01       	movw	r30, r28
    2c84:	e5 5b       	subi	r30, 0xB5	; 181
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 81       	ld	r24, Z
    2c8a:	91 81       	ldd	r25, Z+1	; 0x01
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	11 96       	adiw	r26, 0x01	; 1
    2c90:	9c 93       	st	X, r25
    2c92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c94:	fe 01       	movw	r30, r28
    2c96:	e5 5b       	subi	r30, 0xB5	; 181
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	91 81       	ldd	r25, Z+1	; 0x01
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	d1 f6       	brne	.-76     	; 0x2c56 <main+0x132>
    2ca2:	27 c0       	rjmp	.+78     	; 0x2cf2 <main+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca4:	8e 01       	movw	r16, r28
    2ca6:	05 5b       	subi	r16, 0xB5	; 181
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	e3 5b       	subi	r30, 0xB3	; 179
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	f8 01       	movw	r30, r16
    2cc2:	91 83       	std	Z+1, r25	; 0x01
    2cc4:	80 83       	st	Z, r24
    2cc6:	de 01       	movw	r26, r28
    2cc8:	a9 5b       	subi	r26, 0xB9	; 185
    2cca:	bf 4f       	sbci	r27, 0xFF	; 255
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e5 5b       	subi	r30, 0xB5	; 181
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	8d 93       	st	X+, r24
    2cd8:	9c 93       	st	X, r25
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e9 5b       	subi	r30, 0xB9	; 185
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	91 81       	ldd	r25, Z+1	; 0x01
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <main+0x1c0>
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e9 5b       	subi	r30, 0xB9	; 185
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24
		_delay_ms(1000);
//LABEL_ACC:
        LCD_Clear();
    2cf2:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_Clear>
		LCD_DisplayString("X=");
    2cf6:	82 e6       	ldi	r24, 0x62	; 98
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <LCD_DisplayString>
		LCD_DisplayInt((uint16) (Sensors_Readings.X_Axis));
    2cfe:	80 91 34 02 	lds	r24, 0x0234
    2d02:	90 91 35 02 	lds	r25, 0x0235
    2d06:	a0 91 36 02 	lds	r26, 0x0236
    2d0a:	b0 91 37 02 	lds	r27, 0x0237
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	cc 01       	movw	r24, r24
    2d1c:	a0 e0       	ldi	r26, 0x00	; 0
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	0e 94 46 10 	call	0x208c	; 0x208c <LCD_DisplayInt>
		LCD_DisplayString(" Y=");
    2d28:	85 e6       	ldi	r24, 0x65	; 101
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <LCD_DisplayString>
		LCD_DisplayInt((uint16) (Sensors_Readings.Y_Axis));
    2d30:	80 91 38 02 	lds	r24, 0x0238
    2d34:	90 91 39 02 	lds	r25, 0x0239
    2d38:	a0 91 3a 02 	lds	r26, 0x023A
    2d3c:	b0 91 3b 02 	lds	r27, 0x023B
    2d40:	bc 01       	movw	r22, r24
    2d42:	cd 01       	movw	r24, r26
    2d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	cc 01       	movw	r24, r24
    2d4e:	a0 e0       	ldi	r26, 0x00	; 0
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	bc 01       	movw	r22, r24
    2d54:	cd 01       	movw	r24, r26
    2d56:	0e 94 46 10 	call	0x208c	; 0x208c <LCD_DisplayInt>
		LCD_Select_RowCol(1,0);
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	0e 94 03 10 	call	0x2006	; 0x2006 <LCD_Select_RowCol>
		LCD_DisplayString("Z=");
    2d62:	89 e6       	ldi	r24, 0x69	; 105
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <LCD_DisplayString>
		LCD_DisplayInt((uint16) (Sensors_Readings.Z_Axis));
    2d6a:	80 91 3c 02 	lds	r24, 0x023C
    2d6e:	90 91 3d 02 	lds	r25, 0x023D
    2d72:	a0 91 3e 02 	lds	r26, 0x023E
    2d76:	b0 91 3f 02 	lds	r27, 0x023F
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	cc 01       	movw	r24, r24
    2d88:	a0 e0       	ldi	r26, 0x00	; 0
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 46 10 	call	0x208c	; 0x208c <LCD_DisplayInt>
		LCD_DisplayString(" F=");
    2d94:	8c e6       	ldi	r24, 0x6C	; 108
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <LCD_DisplayString>
		LCD_DisplayInt((uint16) (Sensors_Readings.Arr_Flex[0]));
    2d9c:	80 91 30 02 	lds	r24, 0x0230
    2da0:	88 2f       	mov	r24, r24
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	a0 e0       	ldi	r26, 0x00	; 0
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	bc 01       	movw	r22, r24
    2daa:	cd 01       	movw	r24, r26
    2dac:	0e 94 46 10 	call	0x208c	; 0x208c <LCD_DisplayInt>
    2db0:	fe 01       	movw	r30, r28
    2db2:	ed 5b       	subi	r30, 0xBD	; 189
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	aa ef       	ldi	r26, 0xFA	; 250
    2dbc:	b3 e4       	ldi	r27, 0x43	; 67
    2dbe:	80 83       	st	Z, r24
    2dc0:	91 83       	std	Z+1, r25	; 0x01
    2dc2:	a2 83       	std	Z+2, r26	; 0x02
    2dc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc6:	8e 01       	movw	r16, r28
    2dc8:	01 5c       	subi	r16, 0xC1	; 193
    2dca:	1f 4f       	sbci	r17, 0xFF	; 255
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ed 5b       	subi	r30, 0xBD	; 189
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	60 81       	ld	r22, Z
    2dd4:	71 81       	ldd	r23, Z+1	; 0x01
    2dd6:	82 81       	ldd	r24, Z+2	; 0x02
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e8       	ldi	r19, 0x80	; 128
    2dde:	4b e3       	ldi	r20, 0x3B	; 59
    2de0:	55 e4       	ldi	r21, 0x45	; 69
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	f8 01       	movw	r30, r16
    2dec:	80 83       	st	Z, r24
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	a2 83       	std	Z+2, r26	; 0x02
    2df2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2df4:	fe 01       	movw	r30, r28
    2df6:	ff 96       	adiw	r30, 0x3f	; 63
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e8       	ldi	r20, 0x80	; 128
    2e06:	5f e3       	ldi	r21, 0x3F	; 63
    2e08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e0c:	88 23       	and	r24, r24
    2e0e:	2c f4       	brge	.+10     	; 0x2e1a <main+0x2f6>
		__ticks = 1;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9e af       	std	Y+62, r25	; 0x3e
    2e16:	8d af       	std	Y+61, r24	; 0x3d
    2e18:	46 c0       	rjmp	.+140    	; 0x2ea6 <main+0x382>
	else if (__tmp > 65535)
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	ff 96       	adiw	r30, 0x3f	; 63
    2e1e:	60 81       	ld	r22, Z
    2e20:	71 81       	ldd	r23, Z+1	; 0x01
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	3f ef       	ldi	r19, 0xFF	; 255
    2e2a:	4f e7       	ldi	r20, 0x7F	; 127
    2e2c:	57 e4       	ldi	r21, 0x47	; 71
    2e2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e32:	18 16       	cp	r1, r24
    2e34:	64 f5       	brge	.+88     	; 0x2e8e <main+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e36:	fe 01       	movw	r30, r28
    2e38:	ed 5b       	subi	r30, 0xBD	; 189
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	60 81       	ld	r22, Z
    2e3e:	71 81       	ldd	r23, Z+1	; 0x01
    2e40:	82 81       	ldd	r24, Z+2	; 0x02
    2e42:	93 81       	ldd	r25, Z+3	; 0x03
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e2       	ldi	r20, 0x20	; 32
    2e4a:	51 e4       	ldi	r21, 0x41	; 65
    2e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	bc 01       	movw	r22, r24
    2e56:	cd 01       	movw	r24, r26
    2e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	9e af       	std	Y+62, r25	; 0x3e
    2e62:	8d af       	std	Y+61, r24	; 0x3d
    2e64:	0f c0       	rjmp	.+30     	; 0x2e84 <main+0x360>
    2e66:	8c e2       	ldi	r24, 0x2C	; 44
    2e68:	91 e0       	ldi	r25, 0x01	; 1
    2e6a:	9c af       	std	Y+60, r25	; 0x3c
    2e6c:	8b af       	std	Y+59, r24	; 0x3b
    2e6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e70:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <main+0x34e>
    2e76:	9c af       	std	Y+60, r25	; 0x3c
    2e78:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	9e af       	std	Y+62, r25	; 0x3e
    2e82:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e84:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e86:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e88:	00 97       	sbiw	r24, 0x00	; 0
    2e8a:	69 f7       	brne	.-38     	; 0x2e66 <main+0x342>
    2e8c:	16 c0       	rjmp	.+44     	; 0x2eba <main+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8e:	fe 01       	movw	r30, r28
    2e90:	ff 96       	adiw	r30, 0x3f	; 63
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	9e af       	std	Y+62, r25	; 0x3e
    2ea4:	8d af       	std	Y+61, r24	; 0x3d
    2ea6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ea8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eaa:	9a af       	std	Y+58, r25	; 0x3a
    2eac:	89 af       	std	Y+57, r24	; 0x39
    2eae:	89 ad       	ldd	r24, Y+57	; 0x39
    2eb0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <main+0x38e>
    2eb6:	9a af       	std	Y+58, r25	; 0x3a
    2eb8:	89 af       	std	Y+57, r24	; 0x39
*/
			_delay_ms(500);

//	goto LABEL_ACC;

		if( Compare_Data(&Sensors_Readings, &Stored_Data) )
    2eba:	80 e3       	ldi	r24, 0x30	; 48
    2ebc:	92 e0       	ldi	r25, 0x02	; 2
    2ebe:	20 e9       	ldi	r18, 0x90	; 144
    2ec0:	31 e0       	ldi	r19, 0x01	; 1
    2ec2:	b9 01       	movw	r22, r18
    2ec4:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <Compare_Data>
    2ec8:	88 23       	and	r24, r24
    2eca:	09 f4       	brne	.+2      	; 0x2ece <main+0x3aa>
    2ecc:	34 c2       	rjmp	.+1128   	; 0x3336 <main+0x812>
		{
			switch(Word_index)
    2ece:	80 91 44 02 	lds	r24, 0x0244
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	67 96       	adiw	r28, 0x17	; 23
    2ed8:	3f af       	std	Y+63, r19	; 0x3f
    2eda:	2e af       	std	Y+62, r18	; 0x3e
    2edc:	67 97       	sbiw	r28, 0x17	; 23
    2ede:	67 96       	adiw	r28, 0x17	; 23
    2ee0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ee2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ee4:	67 97       	sbiw	r28, 0x17	; 23
    2ee6:	82 30       	cpi	r24, 0x02	; 2
    2ee8:	91 05       	cpc	r25, r1
    2eea:	09 f4       	brne	.+2      	; 0x2eee <main+0x3ca>
    2eec:	a1 c0       	rjmp	.+322    	; 0x3030 <main+0x50c>
    2eee:	67 96       	adiw	r28, 0x17	; 23
    2ef0:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ef2:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ef4:	67 97       	sbiw	r28, 0x17	; 23
    2ef6:	e3 30       	cpi	r30, 0x03	; 3
    2ef8:	f1 05       	cpc	r31, r1
    2efa:	44 f4       	brge	.+16     	; 0x2f0c <main+0x3e8>
    2efc:	67 96       	adiw	r28, 0x17	; 23
    2efe:	2e ad       	ldd	r18, Y+62	; 0x3e
    2f00:	3f ad       	ldd	r19, Y+63	; 0x3f
    2f02:	67 97       	sbiw	r28, 0x17	; 23
    2f04:	21 30       	cpi	r18, 0x01	; 1
    2f06:	31 05       	cpc	r19, r1
    2f08:	91 f0       	breq	.+36     	; 0x2f2e <main+0x40a>
    2f0a:	32 ce       	rjmp	.-924    	; 0x2b70 <main+0x4c>
    2f0c:	67 96       	adiw	r28, 0x17	; 23
    2f0e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f10:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f12:	67 97       	sbiw	r28, 0x17	; 23
    2f14:	83 30       	cpi	r24, 0x03	; 3
    2f16:	91 05       	cpc	r25, r1
    2f18:	09 f4       	brne	.+2      	; 0x2f1c <main+0x3f8>
    2f1a:	0b c1       	rjmp	.+534    	; 0x3132 <main+0x60e>
    2f1c:	67 96       	adiw	r28, 0x17	; 23
    2f1e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f20:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f22:	67 97       	sbiw	r28, 0x17	; 23
    2f24:	e4 30       	cpi	r30, 0x04	; 4
    2f26:	f1 05       	cpc	r31, r1
    2f28:	09 f4       	brne	.+2      	; 0x2f2c <main+0x408>
    2f2a:	84 c1       	rjmp	.+776    	; 0x3234 <main+0x710>
    2f2c:	21 ce       	rjmp	.-958    	; 0x2b70 <main+0x4c>
			{
			case Letter_A:
				PORTC=0x01;
    2f2e:	e5 e3       	ldi	r30, 0x35	; 53
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	80 83       	st	Z, r24
				LCD_Clear();
    2f36:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_Clear>
				LCD_DisplayString("A");
    2f3a:	80 e7       	ldi	r24, 0x70	; 112
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <LCD_DisplayString>
				play_sound(Letter_A);
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	0e 94 53 13 	call	0x26a6	; 0x26a6 <play_sound>
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	aa ef       	ldi	r26, 0xFA	; 250
    2f50:	b3 e4       	ldi	r27, 0x43	; 67
    2f52:	8d ab       	std	Y+53, r24	; 0x35
    2f54:	9e ab       	std	Y+54, r25	; 0x36
    2f56:	af ab       	std	Y+55, r26	; 0x37
    2f58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f5c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f5e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f60:	98 ad       	ldd	r25, Y+56	; 0x38
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e8       	ldi	r19, 0x80	; 128
    2f66:	4b e3       	ldi	r20, 0x3B	; 59
    2f68:	55 e4       	ldi	r21, 0x45	; 69
    2f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	89 ab       	std	Y+49, r24	; 0x31
    2f74:	9a ab       	std	Y+50, r25	; 0x32
    2f76:	ab ab       	std	Y+51, r26	; 0x33
    2f78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f80:	9c a9       	ldd	r25, Y+52	; 0x34
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e8       	ldi	r20, 0x80	; 128
    2f88:	5f e3       	ldi	r21, 0x3F	; 63
    2f8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f8e:	88 23       	and	r24, r24
    2f90:	2c f4       	brge	.+10     	; 0x2f9c <main+0x478>
		__ticks = 1;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	98 ab       	std	Y+48, r25	; 0x30
    2f98:	8f a7       	std	Y+47, r24	; 0x2f
    2f9a:	3f c0       	rjmp	.+126    	; 0x301a <main+0x4f6>
	else if (__tmp > 65535)
    2f9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2fa0:	8b a9       	ldd	r24, Y+51	; 0x33
    2fa2:	9c a9       	ldd	r25, Y+52	; 0x34
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	3f ef       	ldi	r19, 0xFF	; 255
    2fa8:	4f e7       	ldi	r20, 0x7F	; 127
    2faa:	57 e4       	ldi	r21, 0x47	; 71
    2fac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fb0:	18 16       	cp	r1, r24
    2fb2:	4c f5       	brge	.+82     	; 0x3006 <main+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb4:	6d a9       	ldd	r22, Y+53	; 0x35
    2fb6:	7e a9       	ldd	r23, Y+54	; 0x36
    2fb8:	8f a9       	ldd	r24, Y+55	; 0x37
    2fba:	98 ad       	ldd	r25, Y+56	; 0x38
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e2       	ldi	r20, 0x20	; 32
    2fc2:	51 e4       	ldi	r21, 0x41	; 65
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	bc 01       	movw	r22, r24
    2fce:	cd 01       	movw	r24, r26
    2fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	98 ab       	std	Y+48, r25	; 0x30
    2fda:	8f a7       	std	Y+47, r24	; 0x2f
    2fdc:	0f c0       	rjmp	.+30     	; 0x2ffc <main+0x4d8>
    2fde:	8c e2       	ldi	r24, 0x2C	; 44
    2fe0:	91 e0       	ldi	r25, 0x01	; 1
    2fe2:	9e a7       	std	Y+46, r25	; 0x2e
    2fe4:	8d a7       	std	Y+45, r24	; 0x2d
    2fe6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fe8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <main+0x4c6>
    2fee:	9e a7       	std	Y+46, r25	; 0x2e
    2ff0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ff4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	98 ab       	std	Y+48, r25	; 0x30
    2ffa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ffe:	98 a9       	ldd	r25, Y+48	; 0x30
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	69 f7       	brne	.-38     	; 0x2fde <main+0x4ba>
    3004:	b5 cd       	rjmp	.-1174   	; 0x2b70 <main+0x4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3006:	69 a9       	ldd	r22, Y+49	; 0x31
    3008:	7a a9       	ldd	r23, Y+50	; 0x32
    300a:	8b a9       	ldd	r24, Y+51	; 0x33
    300c:	9c a9       	ldd	r25, Y+52	; 0x34
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	98 ab       	std	Y+48, r25	; 0x30
    3018:	8f a7       	std	Y+47, r24	; 0x2f
    301a:	8f a5       	ldd	r24, Y+47	; 0x2f
    301c:	98 a9       	ldd	r25, Y+48	; 0x30
    301e:	9c a7       	std	Y+44, r25	; 0x2c
    3020:	8b a7       	std	Y+43, r24	; 0x2b
    3022:	8b a5       	ldd	r24, Y+43	; 0x2b
    3024:	9c a5       	ldd	r25, Y+44	; 0x2c
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <main+0x502>
    302a:	9c a7       	std	Y+44, r25	; 0x2c
    302c:	8b a7       	std	Y+43, r24	; 0x2b
    302e:	a0 cd       	rjmp	.-1216   	; 0x2b70 <main+0x4c>
				_delay_ms(500);
				break;
			case Letter_B:
				PORTC=0x02;
    3030:	e5 e3       	ldi	r30, 0x35	; 53
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	82 e0       	ldi	r24, 0x02	; 2
    3036:	80 83       	st	Z, r24
				LCD_Clear();
    3038:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_Clear>
				LCD_DisplayString("B");
    303c:	82 e7       	ldi	r24, 0x72	; 114
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <LCD_DisplayString>
				play_sound(Letter_B);
    3044:	82 e0       	ldi	r24, 0x02	; 2
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	0e 94 53 13 	call	0x26a6	; 0x26a6 <play_sound>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	aa ef       	ldi	r26, 0xFA	; 250
    3052:	b3 e4       	ldi	r27, 0x43	; 67
    3054:	8f a3       	std	Y+39, r24	; 0x27
    3056:	98 a7       	std	Y+40, r25	; 0x28
    3058:	a9 a7       	std	Y+41, r26	; 0x29
    305a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305c:	6f a1       	ldd	r22, Y+39	; 0x27
    305e:	78 a5       	ldd	r23, Y+40	; 0x28
    3060:	89 a5       	ldd	r24, Y+41	; 0x29
    3062:	9a a5       	ldd	r25, Y+42	; 0x2a
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e8       	ldi	r19, 0x80	; 128
    3068:	4b e3       	ldi	r20, 0x3B	; 59
    306a:	55 e4       	ldi	r21, 0x45	; 69
    306c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	8b a3       	std	Y+35, r24	; 0x23
    3076:	9c a3       	std	Y+36, r25	; 0x24
    3078:	ad a3       	std	Y+37, r26	; 0x25
    307a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    307c:	6b a1       	ldd	r22, Y+35	; 0x23
    307e:	7c a1       	ldd	r23, Y+36	; 0x24
    3080:	8d a1       	ldd	r24, Y+37	; 0x25
    3082:	9e a1       	ldd	r25, Y+38	; 0x26
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e8       	ldi	r20, 0x80	; 128
    308a:	5f e3       	ldi	r21, 0x3F	; 63
    308c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3090:	88 23       	and	r24, r24
    3092:	2c f4       	brge	.+10     	; 0x309e <main+0x57a>
		__ticks = 1;
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	9a a3       	std	Y+34, r25	; 0x22
    309a:	89 a3       	std	Y+33, r24	; 0x21
    309c:	3f c0       	rjmp	.+126    	; 0x311c <main+0x5f8>
	else if (__tmp > 65535)
    309e:	6b a1       	ldd	r22, Y+35	; 0x23
    30a0:	7c a1       	ldd	r23, Y+36	; 0x24
    30a2:	8d a1       	ldd	r24, Y+37	; 0x25
    30a4:	9e a1       	ldd	r25, Y+38	; 0x26
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	3f ef       	ldi	r19, 0xFF	; 255
    30aa:	4f e7       	ldi	r20, 0x7F	; 127
    30ac:	57 e4       	ldi	r21, 0x47	; 71
    30ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30b2:	18 16       	cp	r1, r24
    30b4:	4c f5       	brge	.+82     	; 0x3108 <main+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b6:	6f a1       	ldd	r22, Y+39	; 0x27
    30b8:	78 a5       	ldd	r23, Y+40	; 0x28
    30ba:	89 a5       	ldd	r24, Y+41	; 0x29
    30bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e2       	ldi	r20, 0x20	; 32
    30c4:	51 e4       	ldi	r21, 0x41	; 65
    30c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	9a a3       	std	Y+34, r25	; 0x22
    30dc:	89 a3       	std	Y+33, r24	; 0x21
    30de:	0f c0       	rjmp	.+30     	; 0x30fe <main+0x5da>
    30e0:	8c e2       	ldi	r24, 0x2C	; 44
    30e2:	91 e0       	ldi	r25, 0x01	; 1
    30e4:	98 a3       	std	Y+32, r25	; 0x20
    30e6:	8f 8f       	std	Y+31, r24	; 0x1f
    30e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30ea:	98 a1       	ldd	r25, Y+32	; 0x20
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <main+0x5c8>
    30f0:	98 a3       	std	Y+32, r25	; 0x20
    30f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f4:	89 a1       	ldd	r24, Y+33	; 0x21
    30f6:	9a a1       	ldd	r25, Y+34	; 0x22
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	9a a3       	std	Y+34, r25	; 0x22
    30fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3100:	9a a1       	ldd	r25, Y+34	; 0x22
    3102:	00 97       	sbiw	r24, 0x00	; 0
    3104:	69 f7       	brne	.-38     	; 0x30e0 <main+0x5bc>
    3106:	34 cd       	rjmp	.-1432   	; 0x2b70 <main+0x4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3108:	6b a1       	ldd	r22, Y+35	; 0x23
    310a:	7c a1       	ldd	r23, Y+36	; 0x24
    310c:	8d a1       	ldd	r24, Y+37	; 0x25
    310e:	9e a1       	ldd	r25, Y+38	; 0x26
    3110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	9a a3       	std	Y+34, r25	; 0x22
    311a:	89 a3       	std	Y+33, r24	; 0x21
    311c:	89 a1       	ldd	r24, Y+33	; 0x21
    311e:	9a a1       	ldd	r25, Y+34	; 0x22
    3120:	9e 8f       	std	Y+30, r25	; 0x1e
    3122:	8d 8f       	std	Y+29, r24	; 0x1d
    3124:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3126:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <main+0x604>
    312c:	9e 8f       	std	Y+30, r25	; 0x1e
    312e:	8d 8f       	std	Y+29, r24	; 0x1d
    3130:	1f cd       	rjmp	.-1474   	; 0x2b70 <main+0x4c>
				_delay_ms(500);
				break;
			case Letter_C:
				PORTC=0x04;
    3132:	e5 e3       	ldi	r30, 0x35	; 53
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	84 e0       	ldi	r24, 0x04	; 4
    3138:	80 83       	st	Z, r24
				LCD_Clear();
    313a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_Clear>
				LCD_DisplayString("C");
    313e:	84 e7       	ldi	r24, 0x74	; 116
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <LCD_DisplayString>
				play_sound(Letter_C);
    3146:	83 e0       	ldi	r24, 0x03	; 3
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <play_sound>
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	aa ef       	ldi	r26, 0xFA	; 250
    3154:	b3 e4       	ldi	r27, 0x43	; 67
    3156:	89 8f       	std	Y+25, r24	; 0x19
    3158:	9a 8f       	std	Y+26, r25	; 0x1a
    315a:	ab 8f       	std	Y+27, r26	; 0x1b
    315c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315e:	69 8d       	ldd	r22, Y+25	; 0x19
    3160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e8       	ldi	r19, 0x80	; 128
    316a:	4b e3       	ldi	r20, 0x3B	; 59
    316c:	55 e4       	ldi	r21, 0x45	; 69
    316e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	8d 8b       	std	Y+21, r24	; 0x15
    3178:	9e 8b       	std	Y+22, r25	; 0x16
    317a:	af 8b       	std	Y+23, r26	; 0x17
    317c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    317e:	6d 89       	ldd	r22, Y+21	; 0x15
    3180:	7e 89       	ldd	r23, Y+22	; 0x16
    3182:	8f 89       	ldd	r24, Y+23	; 0x17
    3184:	98 8d       	ldd	r25, Y+24	; 0x18
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e8       	ldi	r20, 0x80	; 128
    318c:	5f e3       	ldi	r21, 0x3F	; 63
    318e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3192:	88 23       	and	r24, r24
    3194:	2c f4       	brge	.+10     	; 0x31a0 <main+0x67c>
		__ticks = 1;
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	9c 8b       	std	Y+20, r25	; 0x14
    319c:	8b 8b       	std	Y+19, r24	; 0x13
    319e:	3f c0       	rjmp	.+126    	; 0x321e <main+0x6fa>
	else if (__tmp > 65535)
    31a0:	6d 89       	ldd	r22, Y+21	; 0x15
    31a2:	7e 89       	ldd	r23, Y+22	; 0x16
    31a4:	8f 89       	ldd	r24, Y+23	; 0x17
    31a6:	98 8d       	ldd	r25, Y+24	; 0x18
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	3f ef       	ldi	r19, 0xFF	; 255
    31ac:	4f e7       	ldi	r20, 0x7F	; 127
    31ae:	57 e4       	ldi	r21, 0x47	; 71
    31b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31b4:	18 16       	cp	r1, r24
    31b6:	4c f5       	brge	.+82     	; 0x320a <main+0x6e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b8:	69 8d       	ldd	r22, Y+25	; 0x19
    31ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e2       	ldi	r20, 0x20	; 32
    31c6:	51 e4       	ldi	r21, 0x41	; 65
    31c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	bc 01       	movw	r22, r24
    31d2:	cd 01       	movw	r24, r26
    31d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	9c 8b       	std	Y+20, r25	; 0x14
    31de:	8b 8b       	std	Y+19, r24	; 0x13
    31e0:	0f c0       	rjmp	.+30     	; 0x3200 <main+0x6dc>
    31e2:	8c e2       	ldi	r24, 0x2C	; 44
    31e4:	91 e0       	ldi	r25, 0x01	; 1
    31e6:	9a 8b       	std	Y+18, r25	; 0x12
    31e8:	89 8b       	std	Y+17, r24	; 0x11
    31ea:	89 89       	ldd	r24, Y+17	; 0x11
    31ec:	9a 89       	ldd	r25, Y+18	; 0x12
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	f1 f7       	brne	.-4      	; 0x31ee <main+0x6ca>
    31f2:	9a 8b       	std	Y+18, r25	; 0x12
    31f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f6:	8b 89       	ldd	r24, Y+19	; 0x13
    31f8:	9c 89       	ldd	r25, Y+20	; 0x14
    31fa:	01 97       	sbiw	r24, 0x01	; 1
    31fc:	9c 8b       	std	Y+20, r25	; 0x14
    31fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3200:	8b 89       	ldd	r24, Y+19	; 0x13
    3202:	9c 89       	ldd	r25, Y+20	; 0x14
    3204:	00 97       	sbiw	r24, 0x00	; 0
    3206:	69 f7       	brne	.-38     	; 0x31e2 <main+0x6be>
    3208:	b3 cc       	rjmp	.-1690   	; 0x2b70 <main+0x4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    320a:	6d 89       	ldd	r22, Y+21	; 0x15
    320c:	7e 89       	ldd	r23, Y+22	; 0x16
    320e:	8f 89       	ldd	r24, Y+23	; 0x17
    3210:	98 8d       	ldd	r25, Y+24	; 0x18
    3212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	9c 8b       	std	Y+20, r25	; 0x14
    321c:	8b 8b       	std	Y+19, r24	; 0x13
    321e:	8b 89       	ldd	r24, Y+19	; 0x13
    3220:	9c 89       	ldd	r25, Y+20	; 0x14
    3222:	98 8b       	std	Y+16, r25	; 0x10
    3224:	8f 87       	std	Y+15, r24	; 0x0f
    3226:	8f 85       	ldd	r24, Y+15	; 0x0f
    3228:	98 89       	ldd	r25, Y+16	; 0x10
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	f1 f7       	brne	.-4      	; 0x322a <main+0x706>
    322e:	98 8b       	std	Y+16, r25	; 0x10
    3230:	8f 87       	std	Y+15, r24	; 0x0f
    3232:	9e cc       	rjmp	.-1732   	; 0x2b70 <main+0x4c>
				_delay_ms(500);
				break;
			case Letter_D:
				PORTC=0x08;
    3234:	e5 e3       	ldi	r30, 0x35	; 53
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	88 e0       	ldi	r24, 0x08	; 8
    323a:	80 83       	st	Z, r24
				LCD_Clear();
    323c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_Clear>
				LCD_DisplayString("D");
    3240:	86 e7       	ldi	r24, 0x76	; 118
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <LCD_DisplayString>
				play_sound(Letter_D);
    3248:	84 e0       	ldi	r24, 0x04	; 4
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <play_sound>
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	aa ef       	ldi	r26, 0xFA	; 250
    3256:	b3 e4       	ldi	r27, 0x43	; 67
    3258:	8b 87       	std	Y+11, r24	; 0x0b
    325a:	9c 87       	std	Y+12, r25	; 0x0c
    325c:	ad 87       	std	Y+13, r26	; 0x0d
    325e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3260:	6b 85       	ldd	r22, Y+11	; 0x0b
    3262:	7c 85       	ldd	r23, Y+12	; 0x0c
    3264:	8d 85       	ldd	r24, Y+13	; 0x0d
    3266:	9e 85       	ldd	r25, Y+14	; 0x0e
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e8       	ldi	r19, 0x80	; 128
    326c:	4b e3       	ldi	r20, 0x3B	; 59
    326e:	55 e4       	ldi	r21, 0x45	; 69
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	8f 83       	std	Y+7, r24	; 0x07
    327a:	98 87       	std	Y+8, r25	; 0x08
    327c:	a9 87       	std	Y+9, r26	; 0x09
    327e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3280:	6f 81       	ldd	r22, Y+7	; 0x07
    3282:	78 85       	ldd	r23, Y+8	; 0x08
    3284:	89 85       	ldd	r24, Y+9	; 0x09
    3286:	9a 85       	ldd	r25, Y+10	; 0x0a
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e8       	ldi	r20, 0x80	; 128
    328e:	5f e3       	ldi	r21, 0x3F	; 63
    3290:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3294:	88 23       	and	r24, r24
    3296:	2c f4       	brge	.+10     	; 0x32a2 <main+0x77e>
		__ticks = 1;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	3f c0       	rjmp	.+126    	; 0x3320 <main+0x7fc>
	else if (__tmp > 65535)
    32a2:	6f 81       	ldd	r22, Y+7	; 0x07
    32a4:	78 85       	ldd	r23, Y+8	; 0x08
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	3f ef       	ldi	r19, 0xFF	; 255
    32ae:	4f e7       	ldi	r20, 0x7F	; 127
    32b0:	57 e4       	ldi	r21, 0x47	; 71
    32b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b6:	18 16       	cp	r1, r24
    32b8:	4c f5       	brge	.+82     	; 0x330c <main+0x7e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    32bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32be:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e2       	ldi	r20, 0x20	; 32
    32c8:	51 e4       	ldi	r21, 0x41	; 65
    32ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	9e 83       	std	Y+6, r25	; 0x06
    32e0:	8d 83       	std	Y+5, r24	; 0x05
    32e2:	0f c0       	rjmp	.+30     	; 0x3302 <main+0x7de>
    32e4:	8c e2       	ldi	r24, 0x2C	; 44
    32e6:	91 e0       	ldi	r25, 0x01	; 1
    32e8:	9c 83       	std	Y+4, r25	; 0x04
    32ea:	8b 83       	std	Y+3, r24	; 0x03
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	9c 81       	ldd	r25, Y+4	; 0x04
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <main+0x7cc>
    32f4:	9c 83       	std	Y+4, r25	; 0x04
    32f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f8:	8d 81       	ldd	r24, Y+5	; 0x05
    32fa:	9e 81       	ldd	r25, Y+6	; 0x06
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	9e 83       	std	Y+6, r25	; 0x06
    3300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	69 f7       	brne	.-38     	; 0x32e4 <main+0x7c0>
    330a:	32 cc       	rjmp	.-1948   	; 0x2b70 <main+0x4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330c:	6f 81       	ldd	r22, Y+7	; 0x07
    330e:	78 85       	ldd	r23, Y+8	; 0x08
    3310:	89 85       	ldd	r24, Y+9	; 0x09
    3312:	9a 85       	ldd	r25, Y+10	; 0x0a
    3314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	9e 83       	std	Y+6, r25	; 0x06
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	8d 81       	ldd	r24, Y+5	; 0x05
    3322:	9e 81       	ldd	r25, Y+6	; 0x06
    3324:	9a 83       	std	Y+2, r25	; 0x02
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <main+0x808>
    3330:	9a 83       	std	Y+2, r25	; 0x02
    3332:	89 83       	std	Y+1, r24	; 0x01
    3334:	1d cc       	rjmp	.-1990   	; 0x2b70 <main+0x4c>
				break;
			}
		}
		else
		{
			PORTC=0x00;
    3336:	e5 e3       	ldi	r30, 0x35	; 53
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	10 82       	st	Z, r1
    333c:	19 cc       	rjmp	.-1998   	; 0x2b70 <main+0x4c>

0000333e <Adjust_Flex_Range>:
	return 0;
}
/*---------------------------------------------------------------*/

void Adjust_Flex_Range( u8 Flex_adcChannel_Number, u16 adcDigial_Value)
{
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	00 d0       	rcall	.+0      	; 0x3344 <Adjust_Flex_Range+0x6>
    3344:	0f 92       	push	r0
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	89 83       	std	Y+1, r24	; 0x01
    334c:	7b 83       	std	Y+3, r23	; 0x03
    334e:	6a 83       	std	Y+2, r22	; 0x02
	if ( (adcDigial_Value > 0) && (adcDigial_Value <= 15) )
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	9b 81       	ldd	r25, Y+3	; 0x03
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	71 f0       	breq	.+28     	; 0x3374 <Adjust_Flex_Range+0x36>
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	9b 81       	ldd	r25, Y+3	; 0x03
    335c:	80 31       	cpi	r24, 0x10	; 16
    335e:	91 05       	cpc	r25, r1
    3360:	48 f4       	brcc	.+18     	; 0x3374 <Adjust_Flex_Range+0x36>
		Flex[Flex_adcChannel_Number]=1;
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	88 2f       	mov	r24, r24
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	fc 01       	movw	r30, r24
    336a:	e0 5c       	subi	r30, 0xC0	; 192
    336c:	fd 4f       	sbci	r31, 0xFD	; 253
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	80 83       	st	Z, r24
    3372:	40 c0       	rjmp	.+128    	; 0x33f4 <Adjust_Flex_Range+0xb6>
	else if ( (adcDigial_Value > 15) && (adcDigial_Value <= 30) )
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	9b 81       	ldd	r25, Y+3	; 0x03
    3378:	80 31       	cpi	r24, 0x10	; 16
    337a:	91 05       	cpc	r25, r1
    337c:	70 f0       	brcs	.+28     	; 0x339a <Adjust_Flex_Range+0x5c>
    337e:	8a 81       	ldd	r24, Y+2	; 0x02
    3380:	9b 81       	ldd	r25, Y+3	; 0x03
    3382:	8f 31       	cpi	r24, 0x1F	; 31
    3384:	91 05       	cpc	r25, r1
    3386:	48 f4       	brcc	.+18     	; 0x339a <Adjust_Flex_Range+0x5c>
		Flex[Flex_adcChannel_Number]=2;
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	88 2f       	mov	r24, r24
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	fc 01       	movw	r30, r24
    3390:	e0 5c       	subi	r30, 0xC0	; 192
    3392:	fd 4f       	sbci	r31, 0xFD	; 253
    3394:	82 e0       	ldi	r24, 0x02	; 2
    3396:	80 83       	st	Z, r24
    3398:	2d c0       	rjmp	.+90     	; 0x33f4 <Adjust_Flex_Range+0xb6>
	else if ( (adcDigial_Value > 30) && (adcDigial_Value <= 45) )
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	9b 81       	ldd	r25, Y+3	; 0x03
    339e:	8f 31       	cpi	r24, 0x1F	; 31
    33a0:	91 05       	cpc	r25, r1
    33a2:	70 f0       	brcs	.+28     	; 0x33c0 <Adjust_Flex_Range+0x82>
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	9b 81       	ldd	r25, Y+3	; 0x03
    33a8:	8e 32       	cpi	r24, 0x2E	; 46
    33aa:	91 05       	cpc	r25, r1
    33ac:	48 f4       	brcc	.+18     	; 0x33c0 <Adjust_Flex_Range+0x82>
		Flex[Flex_adcChannel_Number]=3;
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
    33b0:	88 2f       	mov	r24, r24
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	fc 01       	movw	r30, r24
    33b6:	e0 5c       	subi	r30, 0xC0	; 192
    33b8:	fd 4f       	sbci	r31, 0xFD	; 253
    33ba:	83 e0       	ldi	r24, 0x03	; 3
    33bc:	80 83       	st	Z, r24
    33be:	1a c0       	rjmp	.+52     	; 0x33f4 <Adjust_Flex_Range+0xb6>
	else if ( (adcDigial_Value > 45) && (adcDigial_Value <= 60) )
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	9b 81       	ldd	r25, Y+3	; 0x03
    33c4:	8e 32       	cpi	r24, 0x2E	; 46
    33c6:	91 05       	cpc	r25, r1
    33c8:	70 f0       	brcs	.+28     	; 0x33e6 <Adjust_Flex_Range+0xa8>
    33ca:	8a 81       	ldd	r24, Y+2	; 0x02
    33cc:	9b 81       	ldd	r25, Y+3	; 0x03
    33ce:	8d 33       	cpi	r24, 0x3D	; 61
    33d0:	91 05       	cpc	r25, r1
    33d2:	48 f4       	brcc	.+18     	; 0x33e6 <Adjust_Flex_Range+0xa8>
		Flex[Flex_adcChannel_Number]=4;
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
    33d6:	88 2f       	mov	r24, r24
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	fc 01       	movw	r30, r24
    33dc:	e0 5c       	subi	r30, 0xC0	; 192
    33de:	fd 4f       	sbci	r31, 0xFD	; 253
    33e0:	84 e0       	ldi	r24, 0x04	; 4
    33e2:	80 83       	st	Z, r24
    33e4:	07 c0       	rjmp	.+14     	; 0x33f4 <Adjust_Flex_Range+0xb6>
	else
		Flex[Flex_adcChannel_Number]=0;
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	88 2f       	mov	r24, r24
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	fc 01       	movw	r30, r24
    33ee:	e0 5c       	subi	r30, 0xC0	; 192
    33f0:	fd 4f       	sbci	r31, 0xFD	; 253
    33f2:	10 82       	st	Z, r1
}
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	cf 91       	pop	r28
    33fc:	df 91       	pop	r29
    33fe:	08 95       	ret

00003400 <Update_Flexs>:
/*---------------------------------------------------------------*/

void Update_Flexs (Letters_and_Words * PTR_Flex)
{
    3400:	df 93       	push	r29
    3402:	cf 93       	push	r28
    3404:	00 d0       	rcall	.+0      	; 0x3406 <Update_Flexs+0x6>
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	9a 83       	std	Y+2, r25	; 0x02
    340c:	89 83       	std	Y+1, r24	; 0x01
	Flex[0]= ADC_GetResult(0);
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    3414:	80 93 40 02 	sts	0x0240, r24
	Adjust_Flex_Range(0, Flex[0]);
    3418:	80 91 40 02 	lds	r24, 0x0240
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	b9 01       	movw	r22, r18
    3424:	0e 94 9f 19 	call	0x333e	; 0x333e <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[0]= Flex[0];
    3428:	80 91 40 02 	lds	r24, 0x0240
    342c:	e9 81       	ldd	r30, Y+1	; 0x01
    342e:	fa 81       	ldd	r31, Y+2	; 0x02
    3430:	80 83       	st	Z, r24

	Flex[1]= ADC_GetResult(1);
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    3438:	80 93 41 02 	sts	0x0241, r24
	Adjust_Flex_Range(1, Flex[1]);
    343c:	80 91 41 02 	lds	r24, 0x0241
    3440:	28 2f       	mov	r18, r24
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	b9 01       	movw	r22, r18
    3448:	0e 94 9f 19 	call	0x333e	; 0x333e <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[1]= Flex[1];
    344c:	80 91 41 02 	lds	r24, 0x0241
    3450:	e9 81       	ldd	r30, Y+1	; 0x01
    3452:	fa 81       	ldd	r31, Y+2	; 0x02
    3454:	81 83       	std	Z+1, r24	; 0x01

	Flex[2]= ADC_GetResult(2);
    3456:	82 e0       	ldi	r24, 0x02	; 2
    3458:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    345c:	80 93 42 02 	sts	0x0242, r24
	Adjust_Flex_Range(2, Flex[2]);
    3460:	80 91 42 02 	lds	r24, 0x0242
    3464:	28 2f       	mov	r18, r24
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	82 e0       	ldi	r24, 0x02	; 2
    346a:	b9 01       	movw	r22, r18
    346c:	0e 94 9f 19 	call	0x333e	; 0x333e <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[2]= Flex[2];
    3470:	80 91 42 02 	lds	r24, 0x0242
    3474:	e9 81       	ldd	r30, Y+1	; 0x01
    3476:	fa 81       	ldd	r31, Y+2	; 0x02
    3478:	82 83       	std	Z+2, r24	; 0x02

	Flex[3]= ADC_GetResult(3);
    347a:	83 e0       	ldi	r24, 0x03	; 3
    347c:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    3480:	80 93 43 02 	sts	0x0243, r24
	Adjust_Flex_Range(3, Flex[3]);
    3484:	80 91 43 02 	lds	r24, 0x0243
    3488:	28 2f       	mov	r18, r24
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	83 e0       	ldi	r24, 0x03	; 3
    348e:	b9 01       	movw	r22, r18
    3490:	0e 94 9f 19 	call	0x333e	; 0x333e <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[3]= Flex[3];
    3494:	80 91 43 02 	lds	r24, 0x0243
    3498:	e9 81       	ldd	r30, Y+1	; 0x01
    349a:	fa 81       	ldd	r31, Y+2	; 0x02
    349c:	83 83       	std	Z+3, r24	; 0x03
}
    349e:	0f 90       	pop	r0
    34a0:	0f 90       	pop	r0
    34a2:	cf 91       	pop	r28
    34a4:	df 91       	pop	r29
    34a6:	08 95       	ret

000034a8 <Compare_Data>:
/*---------------------------------------------------------------*/

u8  Compare_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data)
{
    34a8:	df 93       	push	r29
    34aa:	cf 93       	push	r28
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
    34b0:	27 97       	sbiw	r28, 0x07	; 7
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	9c 83       	std	Y+4, r25	; 0x04
    34be:	8b 83       	std	Y+3, r24	; 0x03
    34c0:	7e 83       	std	Y+6, r23	; 0x06
    34c2:	6d 83       	std	Y+5, r22	; 0x05
	u8 _2nd_Counter;
	u8 _1st_Counter;
	Word_index=0;
    34c4:	10 92 44 02 	sts	0x0244, r1

	for (_1st_Counter=0; _1st_Counter<10; _1st_Counter++)
    34c8:	19 82       	std	Y+1, r1	; 0x01
    34ca:	56 c0       	rjmp	.+172    	; 0x3578 <Compare_Data+0xd0>
	{
		for (_2nd_Counter=0; _2nd_Counter<NumberOfFlexs; _2nd_Counter++)
    34cc:	1a 82       	std	Y+2, r1	; 0x02
    34ce:	4d c0       	rjmp	.+154    	; 0x356a <Compare_Data+0xc2>
			{
				if ( Ptr_Sensor_Readings ->Arr_Flex[_2nd_Counter] != Ptr_Stored_Data[_1st_Counter].Arr_Flex[_2nd_Counter])
    34d0:	8a 81       	ldd	r24, Y+2	; 0x02
    34d2:	28 2f       	mov	r18, r24
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	8b 81       	ldd	r24, Y+3	; 0x03
    34d8:	9c 81       	ldd	r25, Y+4	; 0x04
    34da:	fc 01       	movw	r30, r24
    34dc:	e2 0f       	add	r30, r18
    34de:	f3 1f       	adc	r31, r19
    34e0:	40 81       	ld	r20, Z
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	88 2f       	mov	r24, r24
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	9c 01       	movw	r18, r24
    34ea:	22 95       	swap	r18
    34ec:	32 95       	swap	r19
    34ee:	30 7f       	andi	r19, 0xF0	; 240
    34f0:	32 27       	eor	r19, r18
    34f2:	20 7f       	andi	r18, 0xF0	; 240
    34f4:	32 27       	eor	r19, r18
    34f6:	8d 81       	ldd	r24, Y+5	; 0x05
    34f8:	9e 81       	ldd	r25, Y+6	; 0x06
    34fa:	28 0f       	add	r18, r24
    34fc:	39 1f       	adc	r19, r25
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	88 2f       	mov	r24, r24
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	f9 01       	movw	r30, r18
    3506:	e8 0f       	add	r30, r24
    3508:	f9 1f       	adc	r31, r25
    350a:	80 81       	ld	r24, Z
    350c:	48 17       	cp	r20, r24
    350e:	89 f5       	brne	.+98     	; 0x3572 <Compare_Data+0xca>
				{
	//				return 0;
					break;
				}
					if (_2nd_Counter == NumberOfFlexs-1)
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	83 30       	cpi	r24, 0x03	; 3
    3514:	39 f5       	brne	.+78     	; 0x3564 <Compare_Data+0xbc>
					{
						if ( Ptr_Sensor_Readings ->Arr_Flex[_2nd_Counter] == Ptr_Stored_Data[_1st_Counter].Arr_Flex[_2nd_Counter])
    3516:	8a 81       	ldd	r24, Y+2	; 0x02
    3518:	28 2f       	mov	r18, r24
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	9c 81       	ldd	r25, Y+4	; 0x04
    3520:	fc 01       	movw	r30, r24
    3522:	e2 0f       	add	r30, r18
    3524:	f3 1f       	adc	r31, r19
    3526:	40 81       	ld	r20, Z
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	88 2f       	mov	r24, r24
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	9c 01       	movw	r18, r24
    3530:	22 95       	swap	r18
    3532:	32 95       	swap	r19
    3534:	30 7f       	andi	r19, 0xF0	; 240
    3536:	32 27       	eor	r19, r18
    3538:	20 7f       	andi	r18, 0xF0	; 240
    353a:	32 27       	eor	r19, r18
    353c:	8d 81       	ldd	r24, Y+5	; 0x05
    353e:	9e 81       	ldd	r25, Y+6	; 0x06
    3540:	28 0f       	add	r18, r24
    3542:	39 1f       	adc	r19, r25
    3544:	8a 81       	ldd	r24, Y+2	; 0x02
    3546:	88 2f       	mov	r24, r24
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	f9 01       	movw	r30, r18
    354c:	e8 0f       	add	r30, r24
    354e:	f9 1f       	adc	r31, r25
    3550:	80 81       	ld	r24, Z
    3552:	48 17       	cp	r20, r24
    3554:	39 f4       	brne	.+14     	; 0x3564 <Compare_Data+0xbc>
									 && ( (Ptr_Sensor_Readings->Z_Axis - Ptr_Stored_Data[_1st_Counter]->Z_Axis ) >= - Z_Angle_Accuracy )
									 && ( (Ptr_Sensor_Readings->Z_Axis - Ptr_Stored_Data[_1st_Counter]->Z_Axis ) <=   Z_Angle_Accuracy )
								   )
									{
*/
										Word_index= _1st_Counter + 1;
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	8f 5f       	subi	r24, 0xFF	; 255
    355a:	80 93 44 02 	sts	0x0244, r24
										return 1;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	8f 83       	std	Y+7, r24	; 0x07
    3562:	0f c0       	rjmp	.+30     	; 0x3582 <Compare_Data+0xda>
	u8 _1st_Counter;
	Word_index=0;

	for (_1st_Counter=0; _1st_Counter<10; _1st_Counter++)
	{
		for (_2nd_Counter=0; _2nd_Counter<NumberOfFlexs; _2nd_Counter++)
    3564:	8a 81       	ldd	r24, Y+2	; 0x02
    3566:	8f 5f       	subi	r24, 0xFF	; 255
    3568:	8a 83       	std	Y+2, r24	; 0x02
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	84 30       	cpi	r24, 0x04	; 4
    356e:	08 f4       	brcc	.+2      	; 0x3572 <Compare_Data+0xca>
    3570:	af cf       	rjmp	.-162    	; 0x34d0 <Compare_Data+0x28>
{
	u8 _2nd_Counter;
	u8 _1st_Counter;
	Word_index=0;

	for (_1st_Counter=0; _1st_Counter<10; _1st_Counter++)
    3572:	89 81       	ldd	r24, Y+1	; 0x01
    3574:	8f 5f       	subi	r24, 0xFF	; 255
    3576:	89 83       	std	Y+1, r24	; 0x01
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	8a 30       	cpi	r24, 0x0A	; 10
    357c:	08 f4       	brcc	.+2      	; 0x3580 <Compare_Data+0xd8>
    357e:	a6 cf       	rjmp	.-180    	; 0x34cc <Compare_Data+0x24>
/*
		if ( Matching_flag == TRUE)
		break;
*/
	}
	return 0;
    3580:	1f 82       	std	Y+7, r1	; 0x07
    3582:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3584:	27 96       	adiw	r28, 0x07	; 7
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	cf 91       	pop	r28
    3592:	df 91       	pop	r29
    3594:	08 95       	ret

00003596 <Accelerometor_init>:
/*-----------------------------------------------------------------------------*/

void Accelerometor_init(ADX345_PowerModes Mode , ADXL345_Address EFF_Address)
{
    3596:	df 93       	push	r29
    3598:	cf 93       	push	r28
    359a:	00 d0       	rcall	.+0      	; 0x359c <Accelerometor_init+0x6>
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
    35a0:	89 83       	std	Y+1, r24	; 0x01
    35a2:	6a 83       	std	Y+2, r22	; 0x02
	I2C_ByteWrite(EFF_Address,POWER_CTRL,Mode);
    35a4:	8a 81       	ldd	r24, Y+2	; 0x02
    35a6:	6d e2       	ldi	r22, 0x2D	; 45
    35a8:	49 81       	ldd	r20, Y+1	; 0x01
    35aa:	0e 94 01 15 	call	0x2a02	; 0x2a02 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0x0B);
    35ae:	8a 81       	ldd	r24, Y+2	; 0x02
    35b0:	61 e3       	ldi	r22, 0x31	; 49
    35b2:	4b e0       	ldi	r20, 0x0B	; 11
    35b4:	0e 94 01 15 	call	0x2a02	; 0x2a02 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSX,-1);
    35b8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ba:	6e e1       	ldi	r22, 0x1E	; 30
    35bc:	4f ef       	ldi	r20, 0xFF	; 255
    35be:	0e 94 01 15 	call	0x2a02	; 0x2a02 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSY,0);
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	6f e1       	ldi	r22, 0x1F	; 31
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	0e 94 01 15 	call	0x2a02	; 0x2a02 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSZ,-1);
    35cc:	8a 81       	ldd	r24, Y+2	; 0x02
    35ce:	60 e2       	ldi	r22, 0x20	; 32
    35d0:	4f ef       	ldi	r20, 0xFF	; 255
    35d2:	0e 94 01 15 	call	0x2a02	; 0x2a02 <I2C_ByteWrite>
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0);
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,8);
}
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	08 95       	ret

000035e0 <Accelerometor_ReadAxis>:
/*-----------------------------------------------------------------------------*/

void Accelerometor_ReadAxis(ADXL345_Address EFF_Address , Letters_and_Words * Ptr_Acc)
{
    35e0:	0f 93       	push	r16
    35e2:	1f 93       	push	r17
    35e4:	df 93       	push	r29
    35e6:	cf 93       	push	r28
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
    35ec:	cd 55       	subi	r28, 0x5D	; 93
    35ee:	d0 40       	sbci	r29, 0x00	; 0
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	f8 94       	cli
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	cd bf       	out	0x3d, r28	; 61
    35fa:	fe 01       	movw	r30, r28
    35fc:	e5 5a       	subi	r30, 0xA5	; 165
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	80 83       	st	Z, r24
    3602:	fe 01       	movw	r30, r28
    3604:	e4 5a       	subi	r30, 0xA4	; 164
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	71 83       	std	Z+1, r23	; 0x01
    360a:	60 83       	st	Z, r22
	uint16 X_Axis_Read;
	uint16 Y_Axis_Read;
	uint16 Z_Axis_Read;


	X_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX0);
    360c:	fe 01       	movw	r30, r28
    360e:	e5 5a       	subi	r30, 0xA5	; 165
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	80 81       	ld	r24, Z
    3614:	62 e3       	ldi	r22, 0x32	; 50
    3616:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <I2C_ByteRead>
    361a:	fe 01       	movw	r30, r28
    361c:	e7 5a       	subi	r30, 0xA7	; 167
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	88 2f       	mov	r24, r24
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	91 83       	std	Z+1, r25	; 0x01
    3626:	80 83       	st	Z, r24
    3628:	fe 01       	movw	r30, r28
    362a:	ef 5a       	subi	r30, 0xAF	; 175
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	a0 e8       	ldi	r26, 0x80	; 128
    3634:	bf e3       	ldi	r27, 0x3F	; 63
    3636:	80 83       	st	Z, r24
    3638:	91 83       	std	Z+1, r25	; 0x01
    363a:	a2 83       	std	Z+2, r26	; 0x02
    363c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363e:	8e 01       	movw	r16, r28
    3640:	03 5b       	subi	r16, 0xB3	; 179
    3642:	1f 4f       	sbci	r17, 0xFF	; 255
    3644:	fe 01       	movw	r30, r28
    3646:	ef 5a       	subi	r30, 0xAF	; 175
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	60 81       	ld	r22, Z
    364c:	71 81       	ldd	r23, Z+1	; 0x01
    364e:	82 81       	ldd	r24, Z+2	; 0x02
    3650:	93 81       	ldd	r25, Z+3	; 0x03
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e8       	ldi	r19, 0x80	; 128
    3656:	4b e3       	ldi	r20, 0x3B	; 59
    3658:	55 e4       	ldi	r21, 0x45	; 69
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	f8 01       	movw	r30, r16
    3664:	80 83       	st	Z, r24
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	a2 83       	std	Z+2, r26	; 0x02
    366a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    366c:	fe 01       	movw	r30, r28
    366e:	e3 5b       	subi	r30, 0xB3	; 179
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	60 81       	ld	r22, Z
    3674:	71 81       	ldd	r23, Z+1	; 0x01
    3676:	82 81       	ldd	r24, Z+2	; 0x02
    3678:	93 81       	ldd	r25, Z+3	; 0x03
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e8       	ldi	r20, 0x80	; 128
    3680:	5f e3       	ldi	r21, 0x3F	; 63
    3682:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3686:	88 23       	and	r24, r24
    3688:	44 f4       	brge	.+16     	; 0x369a <Accelerometor_ReadAxis+0xba>
		__ticks = 1;
    368a:	fe 01       	movw	r30, r28
    368c:	e5 5b       	subi	r30, 0xB5	; 181
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	80 83       	st	Z, r24
    3698:	64 c0       	rjmp	.+200    	; 0x3762 <Accelerometor_ReadAxis+0x182>
	else if (__tmp > 65535)
    369a:	fe 01       	movw	r30, r28
    369c:	e3 5b       	subi	r30, 0xB3	; 179
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	60 81       	ld	r22, Z
    36a2:	71 81       	ldd	r23, Z+1	; 0x01
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	3f ef       	ldi	r19, 0xFF	; 255
    36ac:	4f e7       	ldi	r20, 0x7F	; 127
    36ae:	57 e4       	ldi	r21, 0x47	; 71
    36b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36b4:	18 16       	cp	r1, r24
    36b6:	0c f0       	brlt	.+2      	; 0x36ba <Accelerometor_ReadAxis+0xda>
    36b8:	43 c0       	rjmp	.+134    	; 0x3740 <Accelerometor_ReadAxis+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ba:	fe 01       	movw	r30, r28
    36bc:	ef 5a       	subi	r30, 0xAF	; 175
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e2       	ldi	r20, 0x20	; 32
    36ce:	51 e4       	ldi	r21, 0x41	; 65
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	8e 01       	movw	r16, r28
    36da:	05 5b       	subi	r16, 0xB5	; 181
    36dc:	1f 4f       	sbci	r17, 0xFF	; 255
    36de:	bc 01       	movw	r22, r24
    36e0:	cd 01       	movw	r24, r26
    36e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	f8 01       	movw	r30, r16
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	80 83       	st	Z, r24
    36f0:	1f c0       	rjmp	.+62     	; 0x3730 <Accelerometor_ReadAxis+0x150>
    36f2:	fe 01       	movw	r30, r28
    36f4:	e7 5b       	subi	r30, 0xB7	; 183
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	8c e2       	ldi	r24, 0x2C	; 44
    36fa:	91 e0       	ldi	r25, 0x01	; 1
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	80 83       	st	Z, r24
    3700:	fe 01       	movw	r30, r28
    3702:	e7 5b       	subi	r30, 0xB7	; 183
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	f1 f7       	brne	.-4      	; 0x370a <Accelerometor_ReadAxis+0x12a>
    370e:	fe 01       	movw	r30, r28
    3710:	e7 5b       	subi	r30, 0xB7	; 183
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	91 83       	std	Z+1, r25	; 0x01
    3716:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3718:	de 01       	movw	r26, r28
    371a:	a5 5b       	subi	r26, 0xB5	; 181
    371c:	bf 4f       	sbci	r27, 0xFF	; 255
    371e:	fe 01       	movw	r30, r28
    3720:	e5 5b       	subi	r30, 0xB5	; 181
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	11 96       	adiw	r26, 0x01	; 1
    372c:	9c 93       	st	X, r25
    372e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3730:	fe 01       	movw	r30, r28
    3732:	e5 5b       	subi	r30, 0xB5	; 181
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 81       	ld	r24, Z
    3738:	91 81       	ldd	r25, Z+1	; 0x01
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	d1 f6       	brne	.-76     	; 0x36f2 <Accelerometor_ReadAxis+0x112>
    373e:	27 c0       	rjmp	.+78     	; 0x378e <Accelerometor_ReadAxis+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3740:	8e 01       	movw	r16, r28
    3742:	05 5b       	subi	r16, 0xB5	; 181
    3744:	1f 4f       	sbci	r17, 0xFF	; 255
    3746:	fe 01       	movw	r30, r28
    3748:	e3 5b       	subi	r30, 0xB3	; 179
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	60 81       	ld	r22, Z
    374e:	71 81       	ldd	r23, Z+1	; 0x01
    3750:	82 81       	ldd	r24, Z+2	; 0x02
    3752:	93 81       	ldd	r25, Z+3	; 0x03
    3754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	f8 01       	movw	r30, r16
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
    3762:	de 01       	movw	r26, r28
    3764:	a9 5b       	subi	r26, 0xB9	; 185
    3766:	bf 4f       	sbci	r27, 0xFF	; 255
    3768:	fe 01       	movw	r30, r28
    376a:	e5 5b       	subi	r30, 0xB5	; 181
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	80 81       	ld	r24, Z
    3770:	91 81       	ldd	r25, Z+1	; 0x01
    3772:	8d 93       	st	X+, r24
    3774:	9c 93       	st	X, r25
    3776:	fe 01       	movw	r30, r28
    3778:	e9 5b       	subi	r30, 0xB9	; 185
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	80 81       	ld	r24, Z
    377e:	91 81       	ldd	r25, Z+1	; 0x01
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <Accelerometor_ReadAxis+0x1a0>
    3784:	fe 01       	movw	r30, r28
    3786:	e9 5b       	subi	r30, 0xB9	; 185
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	91 83       	std	Z+1, r25	; 0x01
    378c:	80 83       	st	Z, r24
	_delay_ms(1);
	X_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX1))<<8;
    378e:	fe 01       	movw	r30, r28
    3790:	e5 5a       	subi	r30, 0xA5	; 165
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	80 81       	ld	r24, Z
    3796:	63 e3       	ldi	r22, 0x33	; 51
    3798:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <I2C_ByteRead>
    379c:	88 2f       	mov	r24, r24
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	98 2f       	mov	r25, r24
    37a2:	88 27       	eor	r24, r24
    37a4:	9c 01       	movw	r18, r24
    37a6:	de 01       	movw	r26, r28
    37a8:	a7 5a       	subi	r26, 0xA7	; 167
    37aa:	bf 4f       	sbci	r27, 0xFF	; 255
    37ac:	fe 01       	movw	r30, r28
    37ae:	e7 5a       	subi	r30, 0xA7	; 167
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	80 81       	ld	r24, Z
    37b4:	91 81       	ldd	r25, Z+1	; 0x01
    37b6:	82 2b       	or	r24, r18
    37b8:	93 2b       	or	r25, r19
    37ba:	8d 93       	st	X+, r24
    37bc:	9c 93       	st	X, r25
    37be:	fe 01       	movw	r30, r28
    37c0:	ed 5b       	subi	r30, 0xBD	; 189
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	a0 e8       	ldi	r26, 0x80	; 128
    37ca:	bf e3       	ldi	r27, 0x3F	; 63
    37cc:	80 83       	st	Z, r24
    37ce:	91 83       	std	Z+1, r25	; 0x01
    37d0:	a2 83       	std	Z+2, r26	; 0x02
    37d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d4:	8e 01       	movw	r16, r28
    37d6:	01 5c       	subi	r16, 0xC1	; 193
    37d8:	1f 4f       	sbci	r17, 0xFF	; 255
    37da:	fe 01       	movw	r30, r28
    37dc:	ed 5b       	subi	r30, 0xBD	; 189
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	60 81       	ld	r22, Z
    37e2:	71 81       	ldd	r23, Z+1	; 0x01
    37e4:	82 81       	ldd	r24, Z+2	; 0x02
    37e6:	93 81       	ldd	r25, Z+3	; 0x03
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e8       	ldi	r19, 0x80	; 128
    37ec:	4b e3       	ldi	r20, 0x3B	; 59
    37ee:	55 e4       	ldi	r21, 0x45	; 69
    37f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	f8 01       	movw	r30, r16
    37fa:	80 83       	st	Z, r24
    37fc:	91 83       	std	Z+1, r25	; 0x01
    37fe:	a2 83       	std	Z+2, r26	; 0x02
    3800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3802:	fe 01       	movw	r30, r28
    3804:	ff 96       	adiw	r30, 0x3f	; 63
    3806:	60 81       	ld	r22, Z
    3808:	71 81       	ldd	r23, Z+1	; 0x01
    380a:	82 81       	ldd	r24, Z+2	; 0x02
    380c:	93 81       	ldd	r25, Z+3	; 0x03
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	40 e8       	ldi	r20, 0x80	; 128
    3814:	5f e3       	ldi	r21, 0x3F	; 63
    3816:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    381a:	88 23       	and	r24, r24
    381c:	2c f4       	brge	.+10     	; 0x3828 <Accelerometor_ReadAxis+0x248>
		__ticks = 1;
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	9e af       	std	Y+62, r25	; 0x3e
    3824:	8d af       	std	Y+61, r24	; 0x3d
    3826:	46 c0       	rjmp	.+140    	; 0x38b4 <Accelerometor_ReadAxis+0x2d4>
	else if (__tmp > 65535)
    3828:	fe 01       	movw	r30, r28
    382a:	ff 96       	adiw	r30, 0x3f	; 63
    382c:	60 81       	ld	r22, Z
    382e:	71 81       	ldd	r23, Z+1	; 0x01
    3830:	82 81       	ldd	r24, Z+2	; 0x02
    3832:	93 81       	ldd	r25, Z+3	; 0x03
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	3f ef       	ldi	r19, 0xFF	; 255
    3838:	4f e7       	ldi	r20, 0x7F	; 127
    383a:	57 e4       	ldi	r21, 0x47	; 71
    383c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3840:	18 16       	cp	r1, r24
    3842:	64 f5       	brge	.+88     	; 0x389c <Accelerometor_ReadAxis+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3844:	fe 01       	movw	r30, r28
    3846:	ed 5b       	subi	r30, 0xBD	; 189
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	60 81       	ld	r22, Z
    384c:	71 81       	ldd	r23, Z+1	; 0x01
    384e:	82 81       	ldd	r24, Z+2	; 0x02
    3850:	93 81       	ldd	r25, Z+3	; 0x03
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	40 e2       	ldi	r20, 0x20	; 32
    3858:	51 e4       	ldi	r21, 0x41	; 65
    385a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	bc 01       	movw	r22, r24
    3864:	cd 01       	movw	r24, r26
    3866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	9e af       	std	Y+62, r25	; 0x3e
    3870:	8d af       	std	Y+61, r24	; 0x3d
    3872:	0f c0       	rjmp	.+30     	; 0x3892 <Accelerometor_ReadAxis+0x2b2>
    3874:	8c e2       	ldi	r24, 0x2C	; 44
    3876:	91 e0       	ldi	r25, 0x01	; 1
    3878:	9c af       	std	Y+60, r25	; 0x3c
    387a:	8b af       	std	Y+59, r24	; 0x3b
    387c:	8b ad       	ldd	r24, Y+59	; 0x3b
    387e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	f1 f7       	brne	.-4      	; 0x3880 <Accelerometor_ReadAxis+0x2a0>
    3884:	9c af       	std	Y+60, r25	; 0x3c
    3886:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3888:	8d ad       	ldd	r24, Y+61	; 0x3d
    388a:	9e ad       	ldd	r25, Y+62	; 0x3e
    388c:	01 97       	sbiw	r24, 0x01	; 1
    388e:	9e af       	std	Y+62, r25	; 0x3e
    3890:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3892:	8d ad       	ldd	r24, Y+61	; 0x3d
    3894:	9e ad       	ldd	r25, Y+62	; 0x3e
    3896:	00 97       	sbiw	r24, 0x00	; 0
    3898:	69 f7       	brne	.-38     	; 0x3874 <Accelerometor_ReadAxis+0x294>
    389a:	16 c0       	rjmp	.+44     	; 0x38c8 <Accelerometor_ReadAxis+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    389c:	fe 01       	movw	r30, r28
    389e:	ff 96       	adiw	r30, 0x3f	; 63
    38a0:	60 81       	ld	r22, Z
    38a2:	71 81       	ldd	r23, Z+1	; 0x01
    38a4:	82 81       	ldd	r24, Z+2	; 0x02
    38a6:	93 81       	ldd	r25, Z+3	; 0x03
    38a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	9e af       	std	Y+62, r25	; 0x3e
    38b2:	8d af       	std	Y+61, r24	; 0x3d
    38b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    38b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    38b8:	9a af       	std	Y+58, r25	; 0x3a
    38ba:	89 af       	std	Y+57, r24	; 0x39
    38bc:	89 ad       	ldd	r24, Y+57	; 0x39
    38be:	9a ad       	ldd	r25, Y+58	; 0x3a
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <Accelerometor_ReadAxis+0x2e0>
    38c4:	9a af       	std	Y+58, r25	; 0x3a
    38c6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	Y_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY0);
    38c8:	fe 01       	movw	r30, r28
    38ca:	e5 5a       	subi	r30, 0xA5	; 165
    38cc:	ff 4f       	sbci	r31, 0xFF	; 255
    38ce:	80 81       	ld	r24, Z
    38d0:	64 e3       	ldi	r22, 0x34	; 52
    38d2:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <I2C_ByteRead>
    38d6:	fe 01       	movw	r30, r28
    38d8:	e9 5a       	subi	r30, 0xA9	; 169
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	88 2f       	mov	r24, r24
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	91 83       	std	Z+1, r25	; 0x01
    38e2:	80 83       	st	Z, r24
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	a0 e8       	ldi	r26, 0x80	; 128
    38ea:	bf e3       	ldi	r27, 0x3F	; 63
    38ec:	8d ab       	std	Y+53, r24	; 0x35
    38ee:	9e ab       	std	Y+54, r25	; 0x36
    38f0:	af ab       	std	Y+55, r26	; 0x37
    38f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f4:	6d a9       	ldd	r22, Y+53	; 0x35
    38f6:	7e a9       	ldd	r23, Y+54	; 0x36
    38f8:	8f a9       	ldd	r24, Y+55	; 0x37
    38fa:	98 ad       	ldd	r25, Y+56	; 0x38
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e8       	ldi	r19, 0x80	; 128
    3900:	4b e3       	ldi	r20, 0x3B	; 59
    3902:	55 e4       	ldi	r21, 0x45	; 69
    3904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	89 ab       	std	Y+49, r24	; 0x31
    390e:	9a ab       	std	Y+50, r25	; 0x32
    3910:	ab ab       	std	Y+51, r26	; 0x33
    3912:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3914:	69 a9       	ldd	r22, Y+49	; 0x31
    3916:	7a a9       	ldd	r23, Y+50	; 0x32
    3918:	8b a9       	ldd	r24, Y+51	; 0x33
    391a:	9c a9       	ldd	r25, Y+52	; 0x34
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e8       	ldi	r20, 0x80	; 128
    3922:	5f e3       	ldi	r21, 0x3F	; 63
    3924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3928:	88 23       	and	r24, r24
    392a:	2c f4       	brge	.+10     	; 0x3936 <Accelerometor_ReadAxis+0x356>
		__ticks = 1;
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	98 ab       	std	Y+48, r25	; 0x30
    3932:	8f a7       	std	Y+47, r24	; 0x2f
    3934:	3f c0       	rjmp	.+126    	; 0x39b4 <Accelerometor_ReadAxis+0x3d4>
	else if (__tmp > 65535)
    3936:	69 a9       	ldd	r22, Y+49	; 0x31
    3938:	7a a9       	ldd	r23, Y+50	; 0x32
    393a:	8b a9       	ldd	r24, Y+51	; 0x33
    393c:	9c a9       	ldd	r25, Y+52	; 0x34
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	3f ef       	ldi	r19, 0xFF	; 255
    3942:	4f e7       	ldi	r20, 0x7F	; 127
    3944:	57 e4       	ldi	r21, 0x47	; 71
    3946:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    394a:	18 16       	cp	r1, r24
    394c:	4c f5       	brge	.+82     	; 0x39a0 <Accelerometor_ReadAxis+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    394e:	6d a9       	ldd	r22, Y+53	; 0x35
    3950:	7e a9       	ldd	r23, Y+54	; 0x36
    3952:	8f a9       	ldd	r24, Y+55	; 0x37
    3954:	98 ad       	ldd	r25, Y+56	; 0x38
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e2       	ldi	r20, 0x20	; 32
    395c:	51 e4       	ldi	r21, 0x41	; 65
    395e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	bc 01       	movw	r22, r24
    3968:	cd 01       	movw	r24, r26
    396a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	98 ab       	std	Y+48, r25	; 0x30
    3974:	8f a7       	std	Y+47, r24	; 0x2f
    3976:	0f c0       	rjmp	.+30     	; 0x3996 <Accelerometor_ReadAxis+0x3b6>
    3978:	8c e2       	ldi	r24, 0x2C	; 44
    397a:	91 e0       	ldi	r25, 0x01	; 1
    397c:	9e a7       	std	Y+46, r25	; 0x2e
    397e:	8d a7       	std	Y+45, r24	; 0x2d
    3980:	8d a5       	ldd	r24, Y+45	; 0x2d
    3982:	9e a5       	ldd	r25, Y+46	; 0x2e
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	f1 f7       	brne	.-4      	; 0x3984 <Accelerometor_ReadAxis+0x3a4>
    3988:	9e a7       	std	Y+46, r25	; 0x2e
    398a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398c:	8f a5       	ldd	r24, Y+47	; 0x2f
    398e:	98 a9       	ldd	r25, Y+48	; 0x30
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	98 ab       	std	Y+48, r25	; 0x30
    3994:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3996:	8f a5       	ldd	r24, Y+47	; 0x2f
    3998:	98 a9       	ldd	r25, Y+48	; 0x30
    399a:	00 97       	sbiw	r24, 0x00	; 0
    399c:	69 f7       	brne	.-38     	; 0x3978 <Accelerometor_ReadAxis+0x398>
    399e:	14 c0       	rjmp	.+40     	; 0x39c8 <Accelerometor_ReadAxis+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a0:	69 a9       	ldd	r22, Y+49	; 0x31
    39a2:	7a a9       	ldd	r23, Y+50	; 0x32
    39a4:	8b a9       	ldd	r24, Y+51	; 0x33
    39a6:	9c a9       	ldd	r25, Y+52	; 0x34
    39a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	98 ab       	std	Y+48, r25	; 0x30
    39b2:	8f a7       	std	Y+47, r24	; 0x2f
    39b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    39b6:	98 a9       	ldd	r25, Y+48	; 0x30
    39b8:	9c a7       	std	Y+44, r25	; 0x2c
    39ba:	8b a7       	std	Y+43, r24	; 0x2b
    39bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    39be:	9c a5       	ldd	r25, Y+44	; 0x2c
    39c0:	01 97       	sbiw	r24, 0x01	; 1
    39c2:	f1 f7       	brne	.-4      	; 0x39c0 <Accelerometor_ReadAxis+0x3e0>
    39c4:	9c a7       	std	Y+44, r25	; 0x2c
    39c6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Y_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY1))<<8;
    39c8:	fe 01       	movw	r30, r28
    39ca:	e5 5a       	subi	r30, 0xA5	; 165
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	80 81       	ld	r24, Z
    39d0:	65 e3       	ldi	r22, 0x35	; 53
    39d2:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <I2C_ByteRead>
    39d6:	88 2f       	mov	r24, r24
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	98 2f       	mov	r25, r24
    39dc:	88 27       	eor	r24, r24
    39de:	9c 01       	movw	r18, r24
    39e0:	de 01       	movw	r26, r28
    39e2:	a9 5a       	subi	r26, 0xA9	; 169
    39e4:	bf 4f       	sbci	r27, 0xFF	; 255
    39e6:	fe 01       	movw	r30, r28
    39e8:	e9 5a       	subi	r30, 0xA9	; 169
    39ea:	ff 4f       	sbci	r31, 0xFF	; 255
    39ec:	80 81       	ld	r24, Z
    39ee:	91 81       	ldd	r25, Z+1	; 0x01
    39f0:	82 2b       	or	r24, r18
    39f2:	93 2b       	or	r25, r19
    39f4:	8d 93       	st	X+, r24
    39f6:	9c 93       	st	X, r25
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	a0 e8       	ldi	r26, 0x80	; 128
    39fe:	bf e3       	ldi	r27, 0x3F	; 63
    3a00:	8f a3       	std	Y+39, r24	; 0x27
    3a02:	98 a7       	std	Y+40, r25	; 0x28
    3a04:	a9 a7       	std	Y+41, r26	; 0x29
    3a06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a08:	6f a1       	ldd	r22, Y+39	; 0x27
    3a0a:	78 a5       	ldd	r23, Y+40	; 0x28
    3a0c:	89 a5       	ldd	r24, Y+41	; 0x29
    3a0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e8       	ldi	r19, 0x80	; 128
    3a14:	4b e3       	ldi	r20, 0x3B	; 59
    3a16:	55 e4       	ldi	r21, 0x45	; 69
    3a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	8b a3       	std	Y+35, r24	; 0x23
    3a22:	9c a3       	std	Y+36, r25	; 0x24
    3a24:	ad a3       	std	Y+37, r26	; 0x25
    3a26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a28:	6b a1       	ldd	r22, Y+35	; 0x23
    3a2a:	7c a1       	ldd	r23, Y+36	; 0x24
    3a2c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a2e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	40 e8       	ldi	r20, 0x80	; 128
    3a36:	5f e3       	ldi	r21, 0x3F	; 63
    3a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a3c:	88 23       	and	r24, r24
    3a3e:	2c f4       	brge	.+10     	; 0x3a4a <Accelerometor_ReadAxis+0x46a>
		__ticks = 1;
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	9a a3       	std	Y+34, r25	; 0x22
    3a46:	89 a3       	std	Y+33, r24	; 0x21
    3a48:	3f c0       	rjmp	.+126    	; 0x3ac8 <Accelerometor_ReadAxis+0x4e8>
	else if (__tmp > 65535)
    3a4a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a4c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a4e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a50:	9e a1       	ldd	r25, Y+38	; 0x26
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	3f ef       	ldi	r19, 0xFF	; 255
    3a56:	4f e7       	ldi	r20, 0x7F	; 127
    3a58:	57 e4       	ldi	r21, 0x47	; 71
    3a5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a5e:	18 16       	cp	r1, r24
    3a60:	4c f5       	brge	.+82     	; 0x3ab4 <Accelerometor_ReadAxis+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a62:	6f a1       	ldd	r22, Y+39	; 0x27
    3a64:	78 a5       	ldd	r23, Y+40	; 0x28
    3a66:	89 a5       	ldd	r24, Y+41	; 0x29
    3a68:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	40 e2       	ldi	r20, 0x20	; 32
    3a70:	51 e4       	ldi	r21, 0x41	; 65
    3a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22
    3a7a:	bc 01       	movw	r22, r24
    3a7c:	cd 01       	movw	r24, r26
    3a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	9a a3       	std	Y+34, r25	; 0x22
    3a88:	89 a3       	std	Y+33, r24	; 0x21
    3a8a:	0f c0       	rjmp	.+30     	; 0x3aaa <Accelerometor_ReadAxis+0x4ca>
    3a8c:	8c e2       	ldi	r24, 0x2C	; 44
    3a8e:	91 e0       	ldi	r25, 0x01	; 1
    3a90:	98 a3       	std	Y+32, r25	; 0x20
    3a92:	8f 8f       	std	Y+31, r24	; 0x1f
    3a94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a96:	98 a1       	ldd	r25, Y+32	; 0x20
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <Accelerometor_ReadAxis+0x4b8>
    3a9c:	98 a3       	std	Y+32, r25	; 0x20
    3a9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa0:	89 a1       	ldd	r24, Y+33	; 0x21
    3aa2:	9a a1       	ldd	r25, Y+34	; 0x22
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	9a a3       	std	Y+34, r25	; 0x22
    3aa8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aaa:	89 a1       	ldd	r24, Y+33	; 0x21
    3aac:	9a a1       	ldd	r25, Y+34	; 0x22
    3aae:	00 97       	sbiw	r24, 0x00	; 0
    3ab0:	69 f7       	brne	.-38     	; 0x3a8c <Accelerometor_ReadAxis+0x4ac>
    3ab2:	14 c0       	rjmp	.+40     	; 0x3adc <Accelerometor_ReadAxis+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ab6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ab8:	8d a1       	ldd	r24, Y+37	; 0x25
    3aba:	9e a1       	ldd	r25, Y+38	; 0x26
    3abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	9a a3       	std	Y+34, r25	; 0x22
    3ac6:	89 a3       	std	Y+33, r24	; 0x21
    3ac8:	89 a1       	ldd	r24, Y+33	; 0x21
    3aca:	9a a1       	ldd	r25, Y+34	; 0x22
    3acc:	9e 8f       	std	Y+30, r25	; 0x1e
    3ace:	8d 8f       	std	Y+29, r24	; 0x1d
    3ad0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ad2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	f1 f7       	brne	.-4      	; 0x3ad4 <Accelerometor_ReadAxis+0x4f4>
    3ad8:	9e 8f       	std	Y+30, r25	; 0x1e
    3ada:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Z_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ0);
    3adc:	fe 01       	movw	r30, r28
    3ade:	e5 5a       	subi	r30, 0xA5	; 165
    3ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae2:	80 81       	ld	r24, Z
    3ae4:	66 e3       	ldi	r22, 0x36	; 54
    3ae6:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <I2C_ByteRead>
    3aea:	fe 01       	movw	r30, r28
    3aec:	eb 5a       	subi	r30, 0xAB	; 171
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	88 2f       	mov	r24, r24
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	91 83       	std	Z+1, r25	; 0x01
    3af6:	80 83       	st	Z, r24
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	a0 e8       	ldi	r26, 0x80	; 128
    3afe:	bf e3       	ldi	r27, 0x3F	; 63
    3b00:	89 8f       	std	Y+25, r24	; 0x19
    3b02:	9a 8f       	std	Y+26, r25	; 0x1a
    3b04:	ab 8f       	std	Y+27, r26	; 0x1b
    3b06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b08:	69 8d       	ldd	r22, Y+25	; 0x19
    3b0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e8       	ldi	r19, 0x80	; 128
    3b14:	4b e3       	ldi	r20, 0x3B	; 59
    3b16:	55 e4       	ldi	r21, 0x45	; 69
    3b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	8d 8b       	std	Y+21, r24	; 0x15
    3b22:	9e 8b       	std	Y+22, r25	; 0x16
    3b24:	af 8b       	std	Y+23, r26	; 0x17
    3b26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b28:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	40 e8       	ldi	r20, 0x80	; 128
    3b36:	5f e3       	ldi	r21, 0x3F	; 63
    3b38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b3c:	88 23       	and	r24, r24
    3b3e:	2c f4       	brge	.+10     	; 0x3b4a <Accelerometor_ReadAxis+0x56a>
		__ticks = 1;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	9c 8b       	std	Y+20, r25	; 0x14
    3b46:	8b 8b       	std	Y+19, r24	; 0x13
    3b48:	3f c0       	rjmp	.+126    	; 0x3bc8 <Accelerometor_ReadAxis+0x5e8>
	else if (__tmp > 65535)
    3b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b50:	98 8d       	ldd	r25, Y+24	; 0x18
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	3f ef       	ldi	r19, 0xFF	; 255
    3b56:	4f e7       	ldi	r20, 0x7F	; 127
    3b58:	57 e4       	ldi	r21, 0x47	; 71
    3b5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b5e:	18 16       	cp	r1, r24
    3b60:	4c f5       	brge	.+82     	; 0x3bb4 <Accelerometor_ReadAxis+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b62:	69 8d       	ldd	r22, Y+25	; 0x19
    3b64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 e2       	ldi	r20, 0x20	; 32
    3b70:	51 e4       	ldi	r21, 0x41	; 65
    3b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	bc 01       	movw	r22, r24
    3b7c:	cd 01       	movw	r24, r26
    3b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	9c 8b       	std	Y+20, r25	; 0x14
    3b88:	8b 8b       	std	Y+19, r24	; 0x13
    3b8a:	0f c0       	rjmp	.+30     	; 0x3baa <Accelerometor_ReadAxis+0x5ca>
    3b8c:	8c e2       	ldi	r24, 0x2C	; 44
    3b8e:	91 e0       	ldi	r25, 0x01	; 1
    3b90:	9a 8b       	std	Y+18, r25	; 0x12
    3b92:	89 8b       	std	Y+17, r24	; 0x11
    3b94:	89 89       	ldd	r24, Y+17	; 0x11
    3b96:	9a 89       	ldd	r25, Y+18	; 0x12
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	f1 f7       	brne	.-4      	; 0x3b98 <Accelerometor_ReadAxis+0x5b8>
    3b9c:	9a 8b       	std	Y+18, r25	; 0x12
    3b9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	9c 8b       	std	Y+20, r25	; 0x14
    3ba8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3baa:	8b 89       	ldd	r24, Y+19	; 0x13
    3bac:	9c 89       	ldd	r25, Y+20	; 0x14
    3bae:	00 97       	sbiw	r24, 0x00	; 0
    3bb0:	69 f7       	brne	.-38     	; 0x3b8c <Accelerometor_ReadAxis+0x5ac>
    3bb2:	14 c0       	rjmp	.+40     	; 0x3bdc <Accelerometor_ReadAxis+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    3bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    3bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bba:	98 8d       	ldd	r25, Y+24	; 0x18
    3bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	9c 8b       	std	Y+20, r25	; 0x14
    3bc6:	8b 8b       	std	Y+19, r24	; 0x13
    3bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    3bca:	9c 89       	ldd	r25, Y+20	; 0x14
    3bcc:	98 8b       	std	Y+16, r25	; 0x10
    3bce:	8f 87       	std	Y+15, r24	; 0x0f
    3bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd2:	98 89       	ldd	r25, Y+16	; 0x10
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	f1 f7       	brne	.-4      	; 0x3bd4 <Accelerometor_ReadAxis+0x5f4>
    3bd8:	98 8b       	std	Y+16, r25	; 0x10
    3bda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Z_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ1))<<8;
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e5 5a       	subi	r30, 0xA5	; 165
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	80 81       	ld	r24, Z
    3be4:	67 e3       	ldi	r22, 0x37	; 55
    3be6:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <I2C_ByteRead>
    3bea:	88 2f       	mov	r24, r24
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	98 2f       	mov	r25, r24
    3bf0:	88 27       	eor	r24, r24
    3bf2:	9c 01       	movw	r18, r24
    3bf4:	de 01       	movw	r26, r28
    3bf6:	ab 5a       	subi	r26, 0xAB	; 171
    3bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	eb 5a       	subi	r30, 0xAB	; 171
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	80 81       	ld	r24, Z
    3c02:	91 81       	ldd	r25, Z+1	; 0x01
    3c04:	82 2b       	or	r24, r18
    3c06:	93 2b       	or	r25, r19
    3c08:	8d 93       	st	X+, r24
    3c0a:	9c 93       	st	X, r25
    3c0c:	80 e0       	ldi	r24, 0x00	; 0
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	a0 e8       	ldi	r26, 0x80	; 128
    3c12:	bf e3       	ldi	r27, 0x3F	; 63
    3c14:	8b 87       	std	Y+11, r24	; 0x0b
    3c16:	9c 87       	std	Y+12, r25	; 0x0c
    3c18:	ad 87       	std	Y+13, r26	; 0x0d
    3c1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	30 e8       	ldi	r19, 0x80	; 128
    3c28:	4b e3       	ldi	r20, 0x3B	; 59
    3c2a:	55 e4       	ldi	r21, 0x45	; 69
    3c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c30:	dc 01       	movw	r26, r24
    3c32:	cb 01       	movw	r24, r22
    3c34:	8f 83       	std	Y+7, r24	; 0x07
    3c36:	98 87       	std	Y+8, r25	; 0x08
    3c38:	a9 87       	std	Y+9, r26	; 0x09
    3c3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c3e:	78 85       	ldd	r23, Y+8	; 0x08
    3c40:	89 85       	ldd	r24, Y+9	; 0x09
    3c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	40 e8       	ldi	r20, 0x80	; 128
    3c4a:	5f e3       	ldi	r21, 0x3F	; 63
    3c4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c50:	88 23       	and	r24, r24
    3c52:	2c f4       	brge	.+10     	; 0x3c5e <Accelerometor_ReadAxis+0x67e>
		__ticks = 1;
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	9e 83       	std	Y+6, r25	; 0x06
    3c5a:	8d 83       	std	Y+5, r24	; 0x05
    3c5c:	3f c0       	rjmp	.+126    	; 0x3cdc <Accelerometor_ReadAxis+0x6fc>
	else if (__tmp > 65535)
    3c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c60:	78 85       	ldd	r23, Y+8	; 0x08
    3c62:	89 85       	ldd	r24, Y+9	; 0x09
    3c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	3f ef       	ldi	r19, 0xFF	; 255
    3c6a:	4f e7       	ldi	r20, 0x7F	; 127
    3c6c:	57 e4       	ldi	r21, 0x47	; 71
    3c6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c72:	18 16       	cp	r1, r24
    3c74:	4c f5       	brge	.+82     	; 0x3cc8 <Accelerometor_ReadAxis+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	40 e2       	ldi	r20, 0x20	; 32
    3c84:	51 e4       	ldi	r21, 0x41	; 65
    3c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	bc 01       	movw	r22, r24
    3c90:	cd 01       	movw	r24, r26
    3c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	9e 83       	std	Y+6, r25	; 0x06
    3c9c:	8d 83       	std	Y+5, r24	; 0x05
    3c9e:	0f c0       	rjmp	.+30     	; 0x3cbe <Accelerometor_ReadAxis+0x6de>
    3ca0:	8c e2       	ldi	r24, 0x2C	; 44
    3ca2:	91 e0       	ldi	r25, 0x01	; 1
    3ca4:	9c 83       	std	Y+4, r25	; 0x04
    3ca6:	8b 83       	std	Y+3, r24	; 0x03
    3ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    3caa:	9c 81       	ldd	r25, Y+4	; 0x04
    3cac:	01 97       	sbiw	r24, 0x01	; 1
    3cae:	f1 f7       	brne	.-4      	; 0x3cac <Accelerometor_ReadAxis+0x6cc>
    3cb0:	9c 83       	std	Y+4, r25	; 0x04
    3cb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	9e 83       	std	Y+6, r25	; 0x06
    3cbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc2:	00 97       	sbiw	r24, 0x00	; 0
    3cc4:	69 f7       	brne	.-38     	; 0x3ca0 <Accelerometor_ReadAxis+0x6c0>
    3cc6:	14 c0       	rjmp	.+40     	; 0x3cf0 <Accelerometor_ReadAxis+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cca:	78 85       	ldd	r23, Y+8	; 0x08
    3ccc:	89 85       	ldd	r24, Y+9	; 0x09
    3cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	9e 83       	std	Y+6, r25	; 0x06
    3cda:	8d 83       	std	Y+5, r24	; 0x05
    3cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cde:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce0:	9a 83       	std	Y+2, r25	; 0x02
    3ce2:	89 83       	std	Y+1, r24	; 0x01
    3ce4:	89 81       	ldd	r24, Y+1	; 0x01
    3ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce8:	01 97       	sbiw	r24, 0x01	; 1
    3cea:	f1 f7       	brne	.-4      	; 0x3ce8 <Accelerometor_ReadAxis+0x708>
    3cec:	9a 83       	std	Y+2, r25	; 0x02
    3cee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	Ptr_Acc -> X_Axis= (X_Axis_Read);
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	e7 5a       	subi	r30, 0xA7	; 167
    3cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf6:	80 81       	ld	r24, Z
    3cf8:	91 81       	ldd	r25, Z+1	; 0x01
    3cfa:	cc 01       	movw	r24, r24
    3cfc:	a0 e0       	ldi	r26, 0x00	; 0
    3cfe:	b0 e0       	ldi	r27, 0x00	; 0
    3d00:	bc 01       	movw	r22, r24
    3d02:	cd 01       	movw	r24, r26
    3d04:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3d08:	dc 01       	movw	r26, r24
    3d0a:	cb 01       	movw	r24, r22
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	e4 5a       	subi	r30, 0xA4	; 164
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	01 90       	ld	r0, Z+
    3d14:	f0 81       	ld	r31, Z
    3d16:	e0 2d       	mov	r30, r0
    3d18:	84 83       	std	Z+4, r24	; 0x04
    3d1a:	95 83       	std	Z+5, r25	; 0x05
    3d1c:	a6 83       	std	Z+6, r26	; 0x06
    3d1e:	b7 83       	std	Z+7, r27	; 0x07
	Ptr_Acc -> Y_Axis= (Y_Axis_Read);
    3d20:	fe 01       	movw	r30, r28
    3d22:	e9 5a       	subi	r30, 0xA9	; 169
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	80 81       	ld	r24, Z
    3d28:	91 81       	ldd	r25, Z+1	; 0x01
    3d2a:	cc 01       	movw	r24, r24
    3d2c:	a0 e0       	ldi	r26, 0x00	; 0
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	bc 01       	movw	r22, r24
    3d32:	cd 01       	movw	r24, r26
    3d34:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	fe 01       	movw	r30, r28
    3d3e:	e4 5a       	subi	r30, 0xA4	; 164
    3d40:	ff 4f       	sbci	r31, 0xFF	; 255
    3d42:	01 90       	ld	r0, Z+
    3d44:	f0 81       	ld	r31, Z
    3d46:	e0 2d       	mov	r30, r0
    3d48:	80 87       	std	Z+8, r24	; 0x08
    3d4a:	91 87       	std	Z+9, r25	; 0x09
    3d4c:	a2 87       	std	Z+10, r26	; 0x0a
    3d4e:	b3 87       	std	Z+11, r27	; 0x0b
	Ptr_Acc -> Z_Axis= (Z_Axis_Read);
    3d50:	fe 01       	movw	r30, r28
    3d52:	eb 5a       	subi	r30, 0xAB	; 171
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	80 81       	ld	r24, Z
    3d58:	91 81       	ldd	r25, Z+1	; 0x01
    3d5a:	cc 01       	movw	r24, r24
    3d5c:	a0 e0       	ldi	r26, 0x00	; 0
    3d5e:	b0 e0       	ldi	r27, 0x00	; 0
    3d60:	bc 01       	movw	r22, r24
    3d62:	cd 01       	movw	r24, r26
    3d64:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	e4 5a       	subi	r30, 0xA4	; 164
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	01 90       	ld	r0, Z+
    3d74:	f0 81       	ld	r31, Z
    3d76:	e0 2d       	mov	r30, r0
    3d78:	84 87       	std	Z+12, r24	; 0x0c
    3d7a:	95 87       	std	Z+13, r25	; 0x0d
    3d7c:	a6 87       	std	Z+14, r26	; 0x0e
    3d7e:	b7 87       	std	Z+15, r27	; 0x0f
}
    3d80:	c3 5a       	subi	r28, 0xA3	; 163
    3d82:	df 4f       	sbci	r29, 0xFF	; 255
    3d84:	0f b6       	in	r0, 0x3f	; 63
    3d86:	f8 94       	cli
    3d88:	de bf       	out	0x3e, r29	; 62
    3d8a:	0f be       	out	0x3f, r0	; 63
    3d8c:	cd bf       	out	0x3d, r28	; 61
    3d8e:	cf 91       	pop	r28
    3d90:	df 91       	pop	r29
    3d92:	1f 91       	pop	r17
    3d94:	0f 91       	pop	r16
    3d96:	08 95       	ret

00003d98 <UART_init>:

#include "uart.h"
#define  BAUD_RATE (9600.0)

	void UART_init(void)
	{
    3d98:	df 93       	push	r29
    3d9a:	cf 93       	push	r28
    3d9c:	00 d0       	rcall	.+0      	; 0x3d9e <UART_init+0x6>
    3d9e:	cd b7       	in	r28, 0x3d	; 61
    3da0:	de b7       	in	r29, 0x3e	; 62
		
		uint16 UBRR_Value= ((F_CPU /(8.0 *BAUD_RATE ) ) - 1) +0.5; 
    3da2:	8b e9       	ldi	r24, 0x9B	; 155
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	9a 83       	std	Y+2, r25	; 0x02
    3da8:	89 83       	std	Y+1, r24	; 0x01
		/* Set U2x " Double Speed Mode " */
		SET_BIT(UCSRA,U2X);
    3daa:	ab e2       	ldi	r26, 0x2B	; 43
    3dac:	b0 e0       	ldi	r27, 0x00	; 0
    3dae:	eb e2       	ldi	r30, 0x2B	; 43
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	80 81       	ld	r24, Z
    3db4:	82 60       	ori	r24, 0x02	; 2
    3db6:	8c 93       	st	X, r24
		
		/* Enable Rx , Tx */
		UCSRB |= (1<<TXEN) | (1<<RXEN);
    3db8:	aa e2       	ldi	r26, 0x2A	; 42
    3dba:	b0 e0       	ldi	r27, 0x00	; 0
    3dbc:	ea e2       	ldi	r30, 0x2A	; 42
    3dbe:	f0 e0       	ldi	r31, 0x00	; 0
    3dc0:	80 81       	ld	r24, Z
    3dc2:	88 61       	ori	r24, 0x18	; 24
    3dc4:	8c 93       	st	X, r24
		
		UCSRC |= (1<<URSEL) |(1<<UCSZ0) | (1<<UCSZ1);
    3dc6:	a0 e4       	ldi	r26, 0x40	; 64
    3dc8:	b0 e0       	ldi	r27, 0x00	; 0
    3dca:	e0 e4       	ldi	r30, 0x40	; 64
    3dcc:	f0 e0       	ldi	r31, 0x00	; 0
    3dce:	80 81       	ld	r24, Z
    3dd0:	86 68       	ori	r24, 0x86	; 134
    3dd2:	8c 93       	st	X, r24
		
		UBRRL = UBRR_Value & 0x00FF;
    3dd4:	e9 e2       	ldi	r30, 0x29	; 41
    3dd6:	f0 e0       	ldi	r31, 0x00	; 0
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	80 83       	st	Z, r24
		UBRRH = UBRR_Value >>8;
    3ddc:	e0 e4       	ldi	r30, 0x40	; 64
    3dde:	f0 e0       	ldi	r31, 0x00	; 0
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	9a 81       	ldd	r25, Y+2	; 0x02
    3de4:	89 2f       	mov	r24, r25
    3de6:	99 27       	eor	r25, r25
    3de8:	80 83       	st	Z, r24
	}
    3dea:	0f 90       	pop	r0
    3dec:	0f 90       	pop	r0
    3dee:	cf 91       	pop	r28
    3df0:	df 91       	pop	r29
    3df2:	08 95       	ret

00003df4 <UART_SendByte>:
	
	void UART_SendByte(uint8 Data)
	{
    3df4:	df 93       	push	r29
    3df6:	cf 93       	push	r28
    3df8:	0f 92       	push	r0
    3dfa:	cd b7       	in	r28, 0x3d	; 61
    3dfc:	de b7       	in	r29, 0x3e	; 62
    3dfe:	89 83       	std	Y+1, r24	; 0x01
		/* if Send Buffer is not empty wait until it being  empty */
		while (BIT_IS_CLEAR(UCSRA,UDRE))
    3e00:	eb e2       	ldi	r30, 0x2B	; 43
    3e02:	f0 e0       	ldi	r31, 0x00	; 0
    3e04:	80 81       	ld	r24, Z
    3e06:	88 2f       	mov	r24, r24
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	80 72       	andi	r24, 0x20	; 32
    3e0c:	90 70       	andi	r25, 0x00	; 0
    3e0e:	00 97       	sbiw	r24, 0x00	; 0
    3e10:	b9 f3       	breq	.-18     	; 0x3e00 <UART_SendByte+0xc>
		{
			
		}	
		UDR = Data;
    3e12:	ec e2       	ldi	r30, 0x2C	; 44
    3e14:	f0 e0       	ldi	r31, 0x00	; 0
    3e16:	89 81       	ldd	r24, Y+1	; 0x01
    3e18:	80 83       	st	Z, r24
		
	}
    3e1a:	0f 90       	pop	r0
    3e1c:	cf 91       	pop	r28
    3e1e:	df 91       	pop	r29
    3e20:	08 95       	ret

00003e22 <UART_SendArray>:
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
    3e22:	df 93       	push	r29
    3e24:	cf 93       	push	r28
    3e26:	00 d0       	rcall	.+0      	; 0x3e28 <UART_SendArray+0x6>
    3e28:	00 d0       	rcall	.+0      	; 0x3e2a <UART_SendArray+0x8>
    3e2a:	cd b7       	in	r28, 0x3d	; 61
    3e2c:	de b7       	in	r29, 0x3e	; 62
    3e2e:	9b 83       	std	Y+3, r25	; 0x03
    3e30:	8a 83       	std	Y+2, r24	; 0x02
    3e32:	6c 83       	std	Y+4, r22	; 0x04
		uint8 i = 0;
    3e34:	19 82       	std	Y+1, r1	; 0x01
		
		for(i=0;i<size;i++)
    3e36:	19 82       	std	Y+1, r1	; 0x01
    3e38:	0e c0       	rjmp	.+28     	; 0x3e56 <UART_SendArray+0x34>
		{
			UART_SendByte(Data[i]);
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	28 2f       	mov	r18, r24
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	8a 81       	ldd	r24, Y+2	; 0x02
    3e42:	9b 81       	ldd	r25, Y+3	; 0x03
    3e44:	fc 01       	movw	r30, r24
    3e46:	e2 0f       	add	r30, r18
    3e48:	f3 1f       	adc	r31, r19
    3e4a:	80 81       	ld	r24, Z
    3e4c:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <UART_SendByte>
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
		uint8 i = 0;
		
		for(i=0;i<size;i++)
    3e50:	89 81       	ldd	r24, Y+1	; 0x01
    3e52:	8f 5f       	subi	r24, 0xFF	; 255
    3e54:	89 83       	std	Y+1, r24	; 0x01
    3e56:	99 81       	ldd	r25, Y+1	; 0x01
    3e58:	8c 81       	ldd	r24, Y+4	; 0x04
    3e5a:	98 17       	cp	r25, r24
    3e5c:	70 f3       	brcs	.-36     	; 0x3e3a <UART_SendArray+0x18>
		{
			UART_SendByte(Data[i]);
		}
	}
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	cf 91       	pop	r28
    3e68:	df 91       	pop	r29
    3e6a:	08 95       	ret

00003e6c <UART_recieveByte>:



uint8 UART_recieveByte(void)
{
    3e6c:	df 93       	push	r29
    3e6e:	cf 93       	push	r28
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3e74:	eb e2       	ldi	r30, 0x2B	; 43
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	80 81       	ld	r24, Z
    3e7a:	88 23       	and	r24, r24
    3e7c:	dc f7       	brge	.-10     	; 0x3e74 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    3e7e:	ec e2       	ldi	r30, 0x2C	; 44
    3e80:	f0 e0       	ldi	r31, 0x00	; 0
    3e82:	80 81       	ld	r24, Z
}
    3e84:	cf 91       	pop	r28
    3e86:	df 91       	pop	r29
    3e88:	08 95       	ret

00003e8a <__prologue_saves__>:
    3e8a:	2f 92       	push	r2
    3e8c:	3f 92       	push	r3
    3e8e:	4f 92       	push	r4
    3e90:	5f 92       	push	r5
    3e92:	6f 92       	push	r6
    3e94:	7f 92       	push	r7
    3e96:	8f 92       	push	r8
    3e98:	9f 92       	push	r9
    3e9a:	af 92       	push	r10
    3e9c:	bf 92       	push	r11
    3e9e:	cf 92       	push	r12
    3ea0:	df 92       	push	r13
    3ea2:	ef 92       	push	r14
    3ea4:	ff 92       	push	r15
    3ea6:	0f 93       	push	r16
    3ea8:	1f 93       	push	r17
    3eaa:	cf 93       	push	r28
    3eac:	df 93       	push	r29
    3eae:	cd b7       	in	r28, 0x3d	; 61
    3eb0:	de b7       	in	r29, 0x3e	; 62
    3eb2:	ca 1b       	sub	r28, r26
    3eb4:	db 0b       	sbc	r29, r27
    3eb6:	0f b6       	in	r0, 0x3f	; 63
    3eb8:	f8 94       	cli
    3eba:	de bf       	out	0x3e, r29	; 62
    3ebc:	0f be       	out	0x3f, r0	; 63
    3ebe:	cd bf       	out	0x3d, r28	; 61
    3ec0:	09 94       	ijmp

00003ec2 <__epilogue_restores__>:
    3ec2:	2a 88       	ldd	r2, Y+18	; 0x12
    3ec4:	39 88       	ldd	r3, Y+17	; 0x11
    3ec6:	48 88       	ldd	r4, Y+16	; 0x10
    3ec8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3eca:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ecc:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ece:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ed0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ed2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ed4:	b9 84       	ldd	r11, Y+9	; 0x09
    3ed6:	c8 84       	ldd	r12, Y+8	; 0x08
    3ed8:	df 80       	ldd	r13, Y+7	; 0x07
    3eda:	ee 80       	ldd	r14, Y+6	; 0x06
    3edc:	fd 80       	ldd	r15, Y+5	; 0x05
    3ede:	0c 81       	ldd	r16, Y+4	; 0x04
    3ee0:	1b 81       	ldd	r17, Y+3	; 0x03
    3ee2:	aa 81       	ldd	r26, Y+2	; 0x02
    3ee4:	b9 81       	ldd	r27, Y+1	; 0x01
    3ee6:	ce 0f       	add	r28, r30
    3ee8:	d1 1d       	adc	r29, r1
    3eea:	0f b6       	in	r0, 0x3f	; 63
    3eec:	f8 94       	cli
    3eee:	de bf       	out	0x3e, r29	; 62
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	cd bf       	out	0x3d, r28	; 61
    3ef4:	ed 01       	movw	r28, r26
    3ef6:	08 95       	ret

00003ef8 <itoa>:
    3ef8:	fb 01       	movw	r30, r22
    3efa:	9f 01       	movw	r18, r30
    3efc:	e8 94       	clt
    3efe:	42 30       	cpi	r20, 0x02	; 2
    3f00:	c4 f0       	brlt	.+48     	; 0x3f32 <itoa+0x3a>
    3f02:	45 32       	cpi	r20, 0x25	; 37
    3f04:	b4 f4       	brge	.+44     	; 0x3f32 <itoa+0x3a>
    3f06:	4a 30       	cpi	r20, 0x0A	; 10
    3f08:	29 f4       	brne	.+10     	; 0x3f14 <itoa+0x1c>
    3f0a:	97 fb       	bst	r25, 7
    3f0c:	1e f4       	brtc	.+6      	; 0x3f14 <itoa+0x1c>
    3f0e:	90 95       	com	r25
    3f10:	81 95       	neg	r24
    3f12:	9f 4f       	sbci	r25, 0xFF	; 255
    3f14:	64 2f       	mov	r22, r20
    3f16:	77 27       	eor	r23, r23
    3f18:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__udivmodhi4>
    3f1c:	80 5d       	subi	r24, 0xD0	; 208
    3f1e:	8a 33       	cpi	r24, 0x3A	; 58
    3f20:	0c f0       	brlt	.+2      	; 0x3f24 <itoa+0x2c>
    3f22:	89 5d       	subi	r24, 0xD9	; 217
    3f24:	81 93       	st	Z+, r24
    3f26:	cb 01       	movw	r24, r22
    3f28:	00 97       	sbiw	r24, 0x00	; 0
    3f2a:	a1 f7       	brne	.-24     	; 0x3f14 <itoa+0x1c>
    3f2c:	16 f4       	brtc	.+4      	; 0x3f32 <itoa+0x3a>
    3f2e:	5d e2       	ldi	r21, 0x2D	; 45
    3f30:	51 93       	st	Z+, r21
    3f32:	10 82       	st	Z, r1
    3f34:	c9 01       	movw	r24, r18
    3f36:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <strrev>

00003f3a <strrev>:
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	fc 01       	movw	r30, r24
    3f3e:	67 2f       	mov	r22, r23
    3f40:	71 91       	ld	r23, Z+
    3f42:	77 23       	and	r23, r23
    3f44:	e1 f7       	brne	.-8      	; 0x3f3e <strrev+0x4>
    3f46:	32 97       	sbiw	r30, 0x02	; 2
    3f48:	04 c0       	rjmp	.+8      	; 0x3f52 <strrev+0x18>
    3f4a:	7c 91       	ld	r23, X
    3f4c:	6d 93       	st	X+, r22
    3f4e:	70 83       	st	Z, r23
    3f50:	62 91       	ld	r22, -Z
    3f52:	ae 17       	cp	r26, r30
    3f54:	bf 07       	cpc	r27, r31
    3f56:	c8 f3       	brcs	.-14     	; 0x3f4a <strrev+0x10>
    3f58:	08 95       	ret

00003f5a <__udivmodhi4>:
    3f5a:	aa 1b       	sub	r26, r26
    3f5c:	bb 1b       	sub	r27, r27
    3f5e:	51 e1       	ldi	r21, 0x11	; 17
    3f60:	07 c0       	rjmp	.+14     	; 0x3f70 <__udivmodhi4_ep>

00003f62 <__udivmodhi4_loop>:
    3f62:	aa 1f       	adc	r26, r26
    3f64:	bb 1f       	adc	r27, r27
    3f66:	a6 17       	cp	r26, r22
    3f68:	b7 07       	cpc	r27, r23
    3f6a:	10 f0       	brcs	.+4      	; 0x3f70 <__udivmodhi4_ep>
    3f6c:	a6 1b       	sub	r26, r22
    3f6e:	b7 0b       	sbc	r27, r23

00003f70 <__udivmodhi4_ep>:
    3f70:	88 1f       	adc	r24, r24
    3f72:	99 1f       	adc	r25, r25
    3f74:	5a 95       	dec	r21
    3f76:	a9 f7       	brne	.-22     	; 0x3f62 <__udivmodhi4_loop>
    3f78:	80 95       	com	r24
    3f7a:	90 95       	com	r25
    3f7c:	bc 01       	movw	r22, r24
    3f7e:	cd 01       	movw	r24, r26
    3f80:	08 95       	ret

00003f82 <_exit>:
    3f82:	f8 94       	cli

00003f84 <__stop_program>:
    3f84:	ff cf       	rjmp	.-2      	; 0x3f84 <__stop_program>
