
Grad_Project_Atmega32_OldAccsCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003052  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c4  00800060  00003052  000030e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800224  00800224  000032aa  2**0
                  ALLOC
  3 .stab         00002bc8  00000000  00000000  000032ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000177c  00000000  00000000  00005e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000075f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007982  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b113  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c2ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c7a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d110  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 32       	cpi	r26, 0x24	; 36
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e2       	ldi	r26, 0x24	; 36
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 33       	cpi	r26, 0x39	; 57
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 11 	call	0x221c	; 0x221c <main>
      8a:	0c 94 27 18 	jmp	0x304e	; 0x304e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 58       	subi	r30, 0x8C	; 140
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
#include<avr/io.h>
#include"std_types.h"
#include "ADC.h"

void ADC_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e36:	a6 e2       	ldi	r26, 0x26	; 38
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e6 e2       	ldi	r30, 0x26	; 38
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	87 68       	ori	r24, 0x87	; 135
     e42:	8c 93       	st	X, r24
//	ADMUX|=(1<<REFS0)|(1<<REFS1)|(1<<ADLAR);
	ADMUX|=(1<<REFS0)|(1<<ADLAR);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 66       	ori	r24, 0x60	; 96
     e50:	8c 93       	st	X, r24
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <ADC_GetResult>:

int ADC_GetResult(u8 channel)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <ADC_GetResult+0x6>
     e5e:	0f 92       	push	r0
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	8b 83       	std	Y+3, r24	; 0x03
	int value;
	ADMUX &= 0b01111000;
     e66:	a7 e2       	ldi	r26, 0x27	; 39
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e7 e2       	ldi	r30, 0x27	; 39
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 77       	andi	r24, 0x78	; 120
     e72:	8c 93       	st	X, r24
	ADMUX |= (channel & (0b00000111) );
     e74:	a7 e2       	ldi	r26, 0x27	; 39
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e7 e2       	ldi	r30, 0x27	; 39
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	98 2f       	mov	r25, r24
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	87 70       	andi	r24, 0x07	; 7
     e84:	89 2b       	or	r24, r25
     e86:	8c 93       	st	X, r24
	ADCSRA|= (1<<ADSC);
     e88:	a6 e2       	ldi	r26, 0x26	; 38
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e6 e2       	ldi	r30, 0x26	; 38
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	8c 93       	st	X, r24
	while((ADCSRA & (1<<ADSC))!=0);
     e96:	e6 e2       	ldi	r30, 0x26	; 38
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	80 74       	andi	r24, 0x40	; 64
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	b9 f7       	brne	.-18     	; 0xe96 <ADC_GetResult+0x3e>
	value=ADCH;
     ea8:	e5 e2       	ldi	r30, 0x25	; 37
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|= 0x10;
     eb6:	a6 e2       	ldi	r26, 0x26	; 38
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e6 e2       	ldi	r30, 0x26	; 38
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 61       	ori	r24, 0x10	; 16
     ec2:	8c 93       	st	X, r24
	return value;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <sendData>:

uint8 defaultBuffer[]={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	2f 97       	sbiw	r28, 0x0f	; 15
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
     ee8:	1f 86       	std	Y+15, r1	; 0x0f
     eea:	1a c0       	rjmp	.+52     	; 0xf20 <sendData+0x4c>
	{
		UART_SendByte(dataBuffer[counter]);
     eec:	8f 85       	ldd	r24, Y+15	; 0x0f
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	fc 01       	movw	r30, r24
     ef4:	e4 58       	subi	r30, 0x84	; 132
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	80 81       	ld	r24, Z
     efa:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_SendByte>
		dataBuffer[counter] = defaultBuffer[counter];
     efe:	8f 85       	ldd	r24, Y+15	; 0x0f
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	8f 85       	ldd	r24, Y+15	; 0x0f
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	fc 01       	movw	r30, r24
     f0c:	ec 58       	subi	r30, 0x8C	; 140
     f0e:	fe 4f       	sbci	r31, 0xFE	; 254
     f10:	80 81       	ld	r24, Z
     f12:	f9 01       	movw	r30, r18
     f14:	e4 58       	subi	r30, 0x84	; 132
     f16:	fe 4f       	sbci	r31, 0xFE	; 254
     f18:	80 83       	st	Z, r24
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
     f1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	8f 87       	std	Y+15, r24	; 0x0f
     f20:	8f 85       	ldd	r24, Y+15	; 0x0f
     f22:	88 30       	cpi	r24, 0x08	; 8
     f24:	18 f3       	brcs	.-58     	; 0xeec <sendData+0x18>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a8 ec       	ldi	r26, 0xC8	; 200
     f2c:	b2 e4       	ldi	r27, 0x42	; 66
     f2e:	8b 87       	std	Y+11, r24	; 0x0b
     f30:	9c 87       	std	Y+12, r25	; 0x0c
     f32:	ad 87       	std	Y+13, r26	; 0x0d
     f34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f36:	6b 85       	ldd	r22, Y+11	; 0x0b
     f38:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e8       	ldi	r19, 0x80	; 128
     f42:	4b e3       	ldi	r20, 0x3B	; 59
     f44:	55 e4       	ldi	r21, 0x45	; 69
     f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	8f 83       	std	Y+7, r24	; 0x07
     f50:	98 87       	std	Y+8, r25	; 0x08
     f52:	a9 87       	std	Y+9, r26	; 0x09
     f54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f56:	6f 81       	ldd	r22, Y+7	; 0x07
     f58:	78 85       	ldd	r23, Y+8	; 0x08
     f5a:	89 85       	ldd	r24, Y+9	; 0x09
     f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	5f e3       	ldi	r21, 0x3F	; 63
     f66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f6a:	88 23       	and	r24, r24
     f6c:	2c f4       	brge	.+10     	; 0xf78 <sendData+0xa4>
		__ticks = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	3f c0       	rjmp	.+126    	; 0xff6 <sendData+0x122>
	else if (__tmp > 65535)
     f78:	6f 81       	ldd	r22, Y+7	; 0x07
     f7a:	78 85       	ldd	r23, Y+8	; 0x08
     f7c:	89 85       	ldd	r24, Y+9	; 0x09
     f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	4f e7       	ldi	r20, 0x7F	; 127
     f86:	57 e4       	ldi	r21, 0x47	; 71
     f88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f8c:	18 16       	cp	r1, r24
     f8e:	4c f5       	brge	.+82     	; 0xfe2 <sendData+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f90:	6b 85       	ldd	r22, Y+11	; 0x0b
     f92:	7c 85       	ldd	r23, Y+12	; 0x0c
     f94:	8d 85       	ldd	r24, Y+13	; 0x0d
     f96:	9e 85       	ldd	r25, Y+14	; 0x0e
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e2       	ldi	r20, 0x20	; 32
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <sendData+0x104>
     fba:	8c e2       	ldi	r24, 0x2C	; 44
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	9c 83       	std	Y+4, r25	; 0x04
     fc0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <sendData+0xf2>
     fca:	9c 83       	std	Y+4, r25	; 0x04
     fcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	9e 83       	std	Y+6, r25	; 0x06
     fd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	69 f7       	brne	.-38     	; 0xfba <sendData+0xe6>
     fe0:	14 c0       	rjmp	.+40     	; 0x100a <sendData+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <sendData+0x12e>
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_SendByte(dataBuffer[counter]);
		dataBuffer[counter] = defaultBuffer[counter];
	}
	_delay_ms(100);
}
    100a:	2f 96       	adiw	r28, 0x0f	; 15
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <DFPlayer_init>:

void DFPlayer_init(void)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	/* set Digital to Analog converter (DAC) online */
	dataBuffer[3] = DAC_ONLINE ; /*command to set DAC online */
    1024:	8a e1       	ldi	r24, 0x1A	; 26
    1026:	80 93 7f 01 	sts	0x017F, r24
	sendData(); /* send this command through uart to DFPlayer module*/
    102a:	0e 94 6a 07 	call	0xed4	; 0xed4 <sendData>
}
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <DFPlayer_CMD_play>:
void DFPlayer_CMD_play(uint16 songNumber)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <DFPlayer_CMD_play+0x6>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	9a 83       	std	Y+2, r25	; 0x02
    1040:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SELECTSONG ; /* command to play song */
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	80 93 7f 01 	sts	0x017F, r24
	if(songNumber < 256)
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	8f 3f       	cpi	r24, 0xFF	; 255
    104e:	91 05       	cpc	r25, r1
    1050:	09 f0       	breq	.+2      	; 0x1054 <DFPlayer_CMD_play+0x20>
    1052:	20 f4       	brcc	.+8      	; 0x105c <DFPlayer_CMD_play+0x28>
	{
		dataBuffer[6] = songNumber ;
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	80 93 82 01 	sts	0x0182, r24
    105a:	0b c0       	rjmp	.+22     	; 0x1072 <DFPlayer_CMD_play+0x3e>
	}
	else
	{
		dataBuffer[6] = (uint8)songNumber;
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	80 93 82 01 	sts	0x0182, r24
		dataBuffer[5] = (uint8)songNumber >> 8 ;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	89 2f       	mov	r24, r25
    106a:	99 0f       	add	r25, r25
    106c:	99 0b       	sbc	r25, r25
    106e:	80 93 81 01 	sts	0x0181, r24
	}
	sendData();
    1072:	0e 94 6a 07 	call	0xed4	; 0xed4 <sendData>
}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <DFPlayer_CMD_setVolume>:


void DFPlayer_CMD_setVolume(uint8 volume)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	89 83       	std	Y+1, r24	; 0x01
	if(volume > 30)
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	8f 31       	cpi	r24, 0x1F	; 31
    1090:	10 f0       	brcs	.+4      	; 0x1096 <DFPlayer_CMD_setVolume+0x16>
	{
		volume = 30;
    1092:	8e e1       	ldi	r24, 0x1E	; 30
    1094:	89 83       	std	Y+1, r24	; 0x01
	}
	dataBuffer[3] = SPE_VOL ;
    1096:	86 e0       	ldi	r24, 0x06	; 6
    1098:	80 93 7f 01 	sts	0x017F, r24
	dataBuffer[6] = volume;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	80 93 82 01 	sts	0x0182, r24
	sendData();
    10a2:	0e 94 6a 07 	call	0xed4	; 0xed4 <sendData>
}
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DFPlayer_CMD_playContinues>:
void DFPlayer_CMD_playContinues(uint8 songNumber)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	0f 92       	push	r0
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SPPLAYBACKMODE ; /* command to play song continue sly */
    10ba:	88 e0       	ldi	r24, 0x08	; 8
    10bc:	80 93 7f 01 	sts	0x017F, r24
	if(songNumber < 256)
	{
		dataBuffer[6] = songNumber ;
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	80 93 82 01 	sts	0x0182, r24
	else
	{
		dataBuffer[6] = (uint8)songNumber;
		dataBuffer[5] = (uint8)songNumber >> 8 ;
	}
	sendData();
    10c6:	0e 94 6a 07 	call	0xed4	; 0xed4 <sendData>
}
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <DFPlayer_CMD_pause>:

void DFPlayer_CMD_pause(void)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PAUSE ;
    10da:	8e e0       	ldi	r24, 0x0E	; 14
    10dc:	80 93 7f 01 	sts	0x017F, r24
	sendData();
    10e0:	0e 94 6a 07 	call	0xed4	; 0xed4 <sendData>
}
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <DFPlayer_CMD_stop>:

void DFPlayer_CMD_stop(void)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = STOP;
    10f2:	86 e1       	ldi	r24, 0x16	; 22
    10f4:	80 93 7f 01 	sts	0x017F, r24
	sendData();
    10f8:	0e 94 6a 07 	call	0xed4	; 0xed4 <sendData>
}
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <DFPlayer_CMD_continue>:
void DFPlayer_CMD_continue(void)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PLAYBACK;
    110a:	8d e0       	ldi	r24, 0x0D	; 13
    110c:	80 93 7f 01 	sts	0x017F, r24
	sendData();
    1110:	0e 94 6a 07 	call	0xed4	; 0xed4 <sendData>
}
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <DFPlayer_CMD_Reset>:
void DFPlayer_CMD_Reset(void)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = RESET;
    1122:	8c e0       	ldi	r24, 0x0C	; 12
    1124:	80 93 7f 01 	sts	0x017F, r24
	sendData();
    1128:	0e 94 6a 07 	call	0xed4	; 0xed4 <sendData>
}
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <play_sound>:

void play_sound(uint16 Sound)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <play_sound+0x6>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
	DFPlayer_CMD_pause();
    1140:	0e 94 69 08 	call	0x10d2	; 0x10d2 <DFPlayer_CMD_pause>
	DFPlayer_CMD_setVolume(30);
    1144:	8e e1       	ldi	r24, 0x1E	; 30
    1146:	0e 94 40 08 	call	0x1080	; 0x1080 <DFPlayer_CMD_setVolume>
	DFPlayer_CMD_play(Sound);
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	9a 81       	ldd	r25, Y+2	; 0x02
    114e:	0e 94 1a 08 	call	0x1034	; 0x1034 <DFPlayer_CMD_play>
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <TWI_Init>:
 */

#include "i2c.h"

void TWI_Init(I2C_Prescaler Prescale , I2C_interruptState int_state , uint32 F_SCL , uint8 Address)
{
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	29 97       	sbiw	r28, 0x09	; 9
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	6a 83       	std	Y+2, r22	; 0x02
    1178:	2b 83       	std	Y+3, r18	; 0x03
    117a:	3c 83       	std	Y+4, r19	; 0x04
    117c:	4d 83       	std	Y+5, r20	; 0x05
    117e:	5e 83       	std	Y+6, r21	; 0x06
    1180:	0f 83       	std	Y+7, r16	; 0x07
	TWAR = Address<<1;
    1182:	e2 e2       	ldi	r30, 0x22	; 34
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8f 81       	ldd	r24, Y+7	; 0x07
    1188:	88 0f       	add	r24, r24
    118a:	80 83       	st	Z, r24
	 /*  Calculating Bit Rate: */
	switch (Prescale)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	39 87       	std	Y+9, r19	; 0x09
    1194:	28 87       	std	Y+8, r18	; 0x08
    1196:	88 85       	ldd	r24, Y+8	; 0x08
    1198:	99 85       	ldd	r25, Y+9	; 0x09
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <TWI_Init+0x46>
    11a0:	45 c0       	rjmp	.+138    	; 0x122c <TWI_Init+0xd0>
    11a2:	e8 85       	ldd	r30, Y+8	; 0x08
    11a4:	f9 85       	ldd	r31, Y+9	; 0x09
    11a6:	e2 30       	cpi	r30, 0x02	; 2
    11a8:	f1 05       	cpc	r31, r1
    11aa:	34 f4       	brge	.+12     	; 0x11b8 <TWI_Init+0x5c>
    11ac:	28 85       	ldd	r18, Y+8	; 0x08
    11ae:	39 85       	ldd	r19, Y+9	; 0x09
    11b0:	21 15       	cp	r18, r1
    11b2:	31 05       	cpc	r19, r1
    11b4:	71 f0       	breq	.+28     	; 0x11d2 <TWI_Init+0x76>
    11b6:	e8 c0       	rjmp	.+464    	; 0x1388 <TWI_Init+0x22c>
    11b8:	88 85       	ldd	r24, Y+8	; 0x08
    11ba:	99 85       	ldd	r25, Y+9	; 0x09
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	91 05       	cpc	r25, r1
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <TWI_Init+0x68>
    11c2:	65 c0       	rjmp	.+202    	; 0x128e <TWI_Init+0x132>
    11c4:	e8 85       	ldd	r30, Y+8	; 0x08
    11c6:	f9 85       	ldd	r31, Y+9	; 0x09
    11c8:	e3 30       	cpi	r30, 0x03	; 3
    11ca:	f1 05       	cpc	r31, r1
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <TWI_Init+0x74>
    11ce:	9a c0       	rjmp	.+308    	; 0x1304 <TWI_Init+0x1a8>
    11d0:	db c0       	rjmp	.+438    	; 0x1388 <TWI_Init+0x22c>
	{
		case I2C_PRESCALE1:
								TWBR = (uint8) (((float)F_CPU/(2.0*F_SCL)) -8);
    11d2:	00 e2       	ldi	r16, 0x20	; 32
    11d4:	10 e0       	ldi	r17, 0x00	; 0
    11d6:	6b 81       	ldd	r22, Y+3	; 0x03
    11d8:	7c 81       	ldd	r23, Y+4	; 0x04
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    11e2:	9b 01       	movw	r18, r22
    11e4:	ac 01       	movw	r20, r24
    11e6:	ca 01       	movw	r24, r20
    11e8:	b9 01       	movw	r22, r18
    11ea:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	9c 01       	movw	r18, r24
    11f4:	ad 01       	movw	r20, r26
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	7b e1       	ldi	r23, 0x1B	; 27
    11fa:	87 e3       	ldi	r24, 0x37	; 55
    11fc:	9b e4       	ldi	r25, 0x4B	; 75
    11fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e0       	ldi	r20, 0x00	; 0
    1210:	51 e4       	ldi	r21, 0x41	; 65
    1212:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	f8 01       	movw	r30, r16
    1228:	80 83       	st	Z, r24
    122a:	ae c0       	rjmp	.+348    	; 0x1388 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE4:
								TWBR = (uint8) (((float)F_CPU/(8.0*F_SCL)) -2);
    122c:	00 e2       	ldi	r16, 0x20	; 32
    122e:	10 e0       	ldi	r17, 0x00	; 0
    1230:	6b 81       	ldd	r22, Y+3	; 0x03
    1232:	7c 81       	ldd	r23, Y+4	; 0x04
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	51 e4       	ldi	r21, 0x41	; 65
    124c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9c 01       	movw	r18, r24
    1256:	ad 01       	movw	r20, r26
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	7b e1       	ldi	r23, 0x1B	; 27
    125c:	87 e3       	ldi	r24, 0x37	; 55
    125e:	9b e4       	ldi	r25, 0x4B	; 75
    1260:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	50 e4       	ldi	r21, 0x40	; 64
    1274:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	bc 01       	movw	r22, r24
    127e:	cd 01       	movw	r24, r26
    1280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	f8 01       	movw	r30, r16
    128a:	80 83       	st	Z, r24
    128c:	7d c0       	rjmp	.+250    	; 0x1388 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE16:
								TWBR = (uint8) (((float)F_CPU/(32*F_SCL)) -0.5);
    128e:	00 e2       	ldi	r16, 0x20	; 32
    1290:	10 e0       	ldi	r17, 0x00	; 0
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	ad 81       	ldd	r26, Y+5	; 0x05
    1298:	be 81       	ldd	r27, Y+6	; 0x06
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	aa 1f       	adc	r26, r26
    12a0:	bb 1f       	adc	r27, r27
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	aa 1f       	adc	r26, r26
    12a8:	bb 1f       	adc	r27, r27
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	aa 1f       	adc	r26, r26
    12b0:	bb 1f       	adc	r27, r27
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	aa 1f       	adc	r26, r26
    12b8:	bb 1f       	adc	r27, r27
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	aa 1f       	adc	r26, r26
    12c0:	bb 1f       	adc	r27, r27
    12c2:	bc 01       	movw	r22, r24
    12c4:	cd 01       	movw	r24, r26
    12c6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    12ca:	9b 01       	movw	r18, r22
    12cc:	ac 01       	movw	r20, r24
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	7b e1       	ldi	r23, 0x1B	; 27
    12d2:	87 e3       	ldi	r24, 0x37	; 55
    12d4:	9b e4       	ldi	r25, 0x4B	; 75
    12d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	5f e3       	ldi	r21, 0x3F	; 63
    12ea:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	f8 01       	movw	r30, r16
    1300:	80 83       	st	Z, r24
    1302:	42 c0       	rjmp	.+132    	; 0x1388 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE64:
								TWBR = (uint8) (((float)F_CPU/(128*F_SCL)) -0.125);
    1304:	00 e2       	ldi	r16, 0x20	; 32
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	ad 81       	ldd	r26, Y+5	; 0x05
    130e:	be 81       	ldd	r27, Y+6	; 0x06
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	aa 1f       	adc	r26, r26
    1316:	bb 1f       	adc	r27, r27
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	aa 1f       	adc	r26, r26
    131e:	bb 1f       	adc	r27, r27
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	aa 1f       	adc	r26, r26
    1326:	bb 1f       	adc	r27, r27
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	aa 1f       	adc	r26, r26
    132e:	bb 1f       	adc	r27, r27
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	aa 1f       	adc	r26, r26
    1336:	bb 1f       	adc	r27, r27
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	aa 1f       	adc	r26, r26
    133e:	bb 1f       	adc	r27, r27
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	aa 1f       	adc	r26, r26
    1346:	bb 1f       	adc	r27, r27
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1350:	9b 01       	movw	r18, r22
    1352:	ac 01       	movw	r20, r24
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	7b e1       	ldi	r23, 0x1B	; 27
    1358:	87 e3       	ldi	r24, 0x37	; 55
    135a:	9b e4       	ldi	r25, 0x4B	; 75
    135c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	bc 01       	movw	r22, r24
    1366:	cd 01       	movw	r24, r26
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	5e e3       	ldi	r21, 0x3E	; 62
    1370:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	f8 01       	movw	r30, r16
    1386:	80 83       	st	Z, r24
		default:
					break;
	}
   
	
	TWSR |= (Prescale & 0x03);
    1388:	a1 e2       	ldi	r26, 0x21	; 33
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e1 e2       	ldi	r30, 0x21	; 33
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	98 2f       	mov	r25, r24
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	83 70       	andi	r24, 0x03	; 3
    1398:	89 2b       	or	r24, r25
    139a:	8c 93       	st	X, r24
	TWCR |= (1<<TWEN) | (int_state & 0x01) ;
    139c:	a6 e5       	ldi	r26, 0x56	; 86
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e6 e5       	ldi	r30, 0x56	; 86
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	98 2f       	mov	r25, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	81 70       	andi	r24, 0x01	; 1
    13ac:	84 60       	ori	r24, 0x04	; 4
    13ae:	89 2b       	or	r24, r25
    13b0:	8c 93       	st	X, r24
}
    13b2:	29 96       	adiw	r28, 0x09	; 9
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	08 95       	ret

000013c8 <TWI_Start>:

void TWI_Start(void)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
    13d0:	e6 e5       	ldi	r30, 0x56	; 86
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	84 ea       	ldi	r24, 0xA4	; 164
    13d6:	80 83       	st	Z, r24
 
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    13d8:	e6 e5       	ldi	r30, 0x56	; 86
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	88 23       	and	r24, r24
    13e0:	dc f7       	brge	.-10     	; 0x13d8 <TWI_Start+0x10>
}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <TWI_Stop>:

void TWI_Stop(void)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
    13f0:	e6 e5       	ldi	r30, 0x56	; 86
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	84 e9       	ldi	r24, 0x94	; 148
    13f6:	80 83       	st	Z, r24
 
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <TWI_Write>:

void TWI_Write(uint8 data)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	0f 92       	push	r0
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    140a:	e3 e2       	ldi	r30, 0x23	; 35
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
   TWCR = (1<<TWEN) | (1<<TWINT);
    1412:	e6 e5       	ldi	r30, 0x56	; 86
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	84 e8       	ldi	r24, 0x84	; 132
    1418:	80 83       	st	Z, r24
   
   /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    141a:	e6 e5       	ldi	r30, 0x56	; 86
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	88 23       	and	r24, r24
    1422:	dc f7       	brge	.-10     	; 0x141a <TWI_Write+0x1c>
}
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 

    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);    
    1434:	e6 e5       	ldi	r30, 0x56	; 86
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	84 ec       	ldi	r24, 0xC4	; 196
    143a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    143c:	e6 e5       	ldi	r30, 0x56	; 86
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	88 23       	and	r24, r24
    1444:	dc f7       	brge	.-10     	; 0x143c <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    1446:	e3 e2       	ldi	r30, 0x23	; 35
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
}
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62



		TWCR =(1<<TWEN) | (1<<TWINT);
    145a:	e6 e5       	ldi	r30, 0x56	; 86
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	84 e8       	ldi	r24, 0x84	; 132
    1460:	80 83       	st	Z, r24
/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
while(BIT_IS_CLEAR(TWCR,TWINT));
    1462:	e6 e5       	ldi	r30, 0x56	; 86
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	88 23       	and	r24, r24
    146a:	dc f7       	brge	.-10     	; 0x1462 <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    146c:	e3 e2       	ldi	r30, 0x23	; 35
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    1480:	e1 e2       	ldi	r30, 0x21	; 33
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	88 7f       	andi	r24, 0xF8	; 248
}
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <I2C_ByteWrite>:




void I2C_ByteWrite(uint8 SL_Address,uint8 Reg_Address ,uint8 Data )
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <I2C_ByteWrite+0x6>
    1494:	0f 92       	push	r0
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	6a 83       	std	Y+2, r22	; 0x02
    149e:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();
    14a0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    14a4:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TWI_Get_Status>
    14a8:	88 30       	cpi	r24, 0x08	; 8
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <I2C_ByteWrite+0x24>
	{
		TWI_Stop();
    14ac:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TWI_Stop>
    14b0:	21 c0       	rjmp	.+66     	; 0x14f4 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write((SL_Address<<1));
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	88 0f       	add	r24, r24
    14b6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <TWI_Write>
if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    14ba:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TWI_Get_Status>
    14be:	88 31       	cpi	r24, 0x18	; 24
    14c0:	19 f0       	breq	.+6      	; 0x14c8 <I2C_ByteWrite+0x3a>
	{

		TWI_Stop();
    14c2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TWI_Stop>
    14c6:	16 c0       	rjmp	.+44     	; 0x14f4 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write(Reg_Address);
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	0e 94 ff 09 	call	0x13fe	; 0x13fe <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    14ce:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TWI_Get_Status>
    14d2:	88 32       	cpi	r24, 0x28	; 40
    14d4:	19 f0       	breq	.+6      	; 0x14dc <I2C_ByteWrite+0x4e>
	{
		TWI_Stop();
    14d6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TWI_Stop>
    14da:	0c c0       	rjmp	.+24     	; 0x14f4 <I2C_ByteWrite+0x66>
		return ;
	}
	
TWI_Write(Data);
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	0e 94 ff 09 	call	0x13fe	; 0x13fe <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    14e2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TWI_Get_Status>
    14e6:	88 32       	cpi	r24, 0x28	; 40
    14e8:	19 f0       	breq	.+6      	; 0x14f0 <I2C_ByteWrite+0x62>
	{

		TWI_Stop();
    14ea:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TWI_Stop>
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
    14f0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TWI_Stop>
	return ;

}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <I2C_ByteRead>:

 

 
uint8 I2C_ByteRead(uint8 SL_Address , uint8 Reg_Address)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <I2C_ByteRead+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <I2C_ByteRead+0x8>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	8a 83       	std	Y+2, r24	; 0x02
    150e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Data=0;
    1510:	19 82       	std	Y+1, r1	; 0x01
	
	
	TWI_Start();
    1512:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    1516:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TWI_Get_Status>
    151a:	88 30       	cpi	r24, 0x08	; 8
    151c:	29 f0       	breq	.+10     	; 0x1528 <I2C_ByteRead+0x28>
	{
		TWI_Stop();
    151e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TWI_Stop>
		return 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	8c 83       	std	Y+4, r24	; 0x04
    1526:	3c c0       	rjmp	.+120    	; 0x15a0 <I2C_ByteRead+0xa0>
	}
	
	
	TWI_Write((SL_Address<<1));
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	88 0f       	add	r24, r24
    152c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    1530:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TWI_Get_Status>
    1534:	88 31       	cpi	r24, 0x18	; 24
    1536:	29 f0       	breq	.+10     	; 0x1542 <I2C_ByteRead+0x42>
	{

		TWI_Stop();
    1538:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TWI_Stop>
		return 2;
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	8c 83       	std	Y+4, r24	; 0x04
    1540:	2f c0       	rjmp	.+94     	; 0x15a0 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write(Reg_Address);
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	0e 94 ff 09 	call	0x13fe	; 0x13fe <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1548:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TWI_Get_Status>
    154c:	88 32       	cpi	r24, 0x28	; 40
    154e:	29 f0       	breq	.+10     	; 0x155a <I2C_ByteRead+0x5a>
	{
		TWI_Stop();
    1550:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TWI_Stop>
		return 3;
    1554:	83 e0       	ldi	r24, 0x03	; 3
    1556:	8c 83       	std	Y+4, r24	; 0x04
    1558:	23 c0       	rjmp	.+70     	; 0x15a0 <I2C_ByteRead+0xa0>
	}
	
	TWI_Start();
    155a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    155e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TWI_Get_Status>
    1562:	80 31       	cpi	r24, 0x10	; 16
    1564:	29 f0       	breq	.+10     	; 0x1570 <I2C_ByteRead+0x70>
	{
		TWI_Stop();
    1566:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TWI_Stop>
		return 4;
    156a:	84 e0       	ldi	r24, 0x04	; 4
    156c:	8c 83       	std	Y+4, r24	; 0x04
    156e:	18 c0       	rjmp	.+48     	; 0x15a0 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write((SL_Address<<1) | READ);
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	81 60       	ori	r24, 0x01	; 1
    157c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    1580:	0e 94 3c 0a 	call	0x1478	; 0x1478 <TWI_Get_Status>
    1584:	80 34       	cpi	r24, 0x40	; 64
    1586:	29 f0       	breq	.+10     	; 0x1592 <I2C_ByteRead+0x92>
	{

		TWI_Stop();
    1588:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TWI_Stop>
		return 5;
    158c:	85 e0       	ldi	r24, 0x05	; 5
    158e:	8c 83       	std	Y+4, r24	; 0x04
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <I2C_ByteRead+0xa0>
	}
	Data=TWI_Read_With_NACK();
    1592:	0e 94 29 0a 	call	0x1452	; 0x1452 <TWI_Read_With_NACK>
    1596:	89 83       	std	Y+1, r24	; 0x01
	TWI_Stop();
    1598:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <TWI_Stop>
	
	return Data;		
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	8c 83       	std	Y+4, r24	; 0x04
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <LCD_Init>:
#include <util/delay.h>
#include "BIT_MATH.h"
#include"lcd.h"

void LCD_Init(void)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	e8 97       	sbiw	r28, 0x38	; 56
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 e2       	ldi	r26, 0x20	; 32
    15ca:	b2 e4       	ldi	r27, 0x42	; 66
    15cc:	8d ab       	std	Y+53, r24	; 0x35
    15ce:	9e ab       	std	Y+54, r25	; 0x36
    15d0:	af ab       	std	Y+55, r26	; 0x37
    15d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d4:	6d a9       	ldd	r22, Y+53	; 0x35
    15d6:	7e a9       	ldd	r23, Y+54	; 0x36
    15d8:	8f a9       	ldd	r24, Y+55	; 0x37
    15da:	98 ad       	ldd	r25, Y+56	; 0x38
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e8       	ldi	r19, 0x80	; 128
    15e0:	4b e3       	ldi	r20, 0x3B	; 59
    15e2:	55 e4       	ldi	r21, 0x45	; 69
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	89 ab       	std	Y+49, r24	; 0x31
    15ee:	9a ab       	std	Y+50, r25	; 0x32
    15f0:	ab ab       	std	Y+51, r26	; 0x33
    15f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15f4:	69 a9       	ldd	r22, Y+49	; 0x31
    15f6:	7a a9       	ldd	r23, Y+50	; 0x32
    15f8:	8b a9       	ldd	r24, Y+51	; 0x33
    15fa:	9c a9       	ldd	r25, Y+52	; 0x34
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	2c f4       	brge	.+10     	; 0x1616 <LCD_Init+0x66>
		__ticks = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	98 ab       	std	Y+48, r25	; 0x30
    1612:	8f a7       	std	Y+47, r24	; 0x2f
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    1616:	69 a9       	ldd	r22, Y+49	; 0x31
    1618:	7a a9       	ldd	r23, Y+50	; 0x32
    161a:	8b a9       	ldd	r24, Y+51	; 0x33
    161c:	9c a9       	ldd	r25, Y+52	; 0x34
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	4c f5       	brge	.+82     	; 0x1680 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162e:	6d a9       	ldd	r22, Y+53	; 0x35
    1630:	7e a9       	ldd	r23, Y+54	; 0x36
    1632:	8f a9       	ldd	r24, Y+55	; 0x37
    1634:	98 ad       	ldd	r25, Y+56	; 0x38
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	98 ab       	std	Y+48, r25	; 0x30
    1654:	8f a7       	std	Y+47, r24	; 0x2f
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <LCD_Init+0xc6>
    1658:	8c e2       	ldi	r24, 0x2C	; 44
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	9e a7       	std	Y+46, r25	; 0x2e
    165e:	8d a7       	std	Y+45, r24	; 0x2d
    1660:	8d a5       	ldd	r24, Y+45	; 0x2d
    1662:	9e a5       	ldd	r25, Y+46	; 0x2e
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <LCD_Init+0xb4>
    1668:	9e a7       	std	Y+46, r25	; 0x2e
    166a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166c:	8f a5       	ldd	r24, Y+47	; 0x2f
    166e:	98 a9       	ldd	r25, Y+48	; 0x30
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	98 ab       	std	Y+48, r25	; 0x30
    1674:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	8f a5       	ldd	r24, Y+47	; 0x2f
    1678:	98 a9       	ldd	r25, Y+48	; 0x30
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	69 f7       	brne	.-38     	; 0x1658 <LCD_Init+0xa8>
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1680:	69 a9       	ldd	r22, Y+49	; 0x31
    1682:	7a a9       	ldd	r23, Y+50	; 0x32
    1684:	8b a9       	ldd	r24, Y+51	; 0x33
    1686:	9c a9       	ldd	r25, Y+52	; 0x34
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	98 ab       	std	Y+48, r25	; 0x30
    1692:	8f a7       	std	Y+47, r24	; 0x2f
    1694:	8f a5       	ldd	r24, Y+47	; 0x2f
    1696:	98 a9       	ldd	r25, Y+48	; 0x30
    1698:	9c a7       	std	Y+44, r25	; 0x2c
    169a:	8b a7       	std	Y+43, r24	; 0x2b
    169c:	8b a5       	ldd	r24, Y+43	; 0x2b
    169e:	9c a5       	ldd	r25, Y+44	; 0x2c
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCD_Init+0xf0>
    16a4:	9c a7       	std	Y+44, r25	; 0x2c
    16a6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_SendCommand (0b00111100);
    16a8:	8c e3       	ldi	r24, 0x3C	; 60
    16aa:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_SendCommand>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a0 e4       	ldi	r26, 0x40	; 64
    16b4:	b0 e4       	ldi	r27, 0x40	; 64
    16b6:	8f a3       	std	Y+39, r24	; 0x27
    16b8:	98 a7       	std	Y+40, r25	; 0x28
    16ba:	a9 a7       	std	Y+41, r26	; 0x29
    16bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16be:	6f a1       	ldd	r22, Y+39	; 0x27
    16c0:	78 a5       	ldd	r23, Y+40	; 0x28
    16c2:	89 a5       	ldd	r24, Y+41	; 0x29
    16c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e8       	ldi	r19, 0x80	; 128
    16ca:	4b e3       	ldi	r20, 0x3B	; 59
    16cc:	55 e4       	ldi	r21, 0x45	; 69
    16ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	8b a3       	std	Y+35, r24	; 0x23
    16d8:	9c a3       	std	Y+36, r25	; 0x24
    16da:	ad a3       	std	Y+37, r26	; 0x25
    16dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16de:	6b a1       	ldd	r22, Y+35	; 0x23
    16e0:	7c a1       	ldd	r23, Y+36	; 0x24
    16e2:	8d a1       	ldd	r24, Y+37	; 0x25
    16e4:	9e a1       	ldd	r25, Y+38	; 0x26
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e8       	ldi	r20, 0x80	; 128
    16ec:	5f e3       	ldi	r21, 0x3F	; 63
    16ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16f2:	88 23       	and	r24, r24
    16f4:	2c f4       	brge	.+10     	; 0x1700 <LCD_Init+0x150>
		__ticks = 1;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9a a3       	std	Y+34, r25	; 0x22
    16fc:	89 a3       	std	Y+33, r24	; 0x21
    16fe:	3f c0       	rjmp	.+126    	; 0x177e <LCD_Init+0x1ce>
	else if (__tmp > 65535)
    1700:	6b a1       	ldd	r22, Y+35	; 0x23
    1702:	7c a1       	ldd	r23, Y+36	; 0x24
    1704:	8d a1       	ldd	r24, Y+37	; 0x25
    1706:	9e a1       	ldd	r25, Y+38	; 0x26
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	3f ef       	ldi	r19, 0xFF	; 255
    170c:	4f e7       	ldi	r20, 0x7F	; 127
    170e:	57 e4       	ldi	r21, 0x47	; 71
    1710:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1714:	18 16       	cp	r1, r24
    1716:	4c f5       	brge	.+82     	; 0x176a <LCD_Init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1718:	6f a1       	ldd	r22, Y+39	; 0x27
    171a:	78 a5       	ldd	r23, Y+40	; 0x28
    171c:	89 a5       	ldd	r24, Y+41	; 0x29
    171e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e2       	ldi	r20, 0x20	; 32
    1726:	51 e4       	ldi	r21, 0x41	; 65
    1728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	bc 01       	movw	r22, r24
    1732:	cd 01       	movw	r24, r26
    1734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	9a a3       	std	Y+34, r25	; 0x22
    173e:	89 a3       	std	Y+33, r24	; 0x21
    1740:	0f c0       	rjmp	.+30     	; 0x1760 <LCD_Init+0x1b0>
    1742:	8c e2       	ldi	r24, 0x2C	; 44
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	98 a3       	std	Y+32, r25	; 0x20
    1748:	8f 8f       	std	Y+31, r24	; 0x1f
    174a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    174c:	98 a1       	ldd	r25, Y+32	; 0x20
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <LCD_Init+0x19e>
    1752:	98 a3       	std	Y+32, r25	; 0x20
    1754:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1756:	89 a1       	ldd	r24, Y+33	; 0x21
    1758:	9a a1       	ldd	r25, Y+34	; 0x22
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	9a a3       	std	Y+34, r25	; 0x22
    175e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1760:	89 a1       	ldd	r24, Y+33	; 0x21
    1762:	9a a1       	ldd	r25, Y+34	; 0x22
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	69 f7       	brne	.-38     	; 0x1742 <LCD_Init+0x192>
    1768:	14 c0       	rjmp	.+40     	; 0x1792 <LCD_Init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176a:	6b a1       	ldd	r22, Y+35	; 0x23
    176c:	7c a1       	ldd	r23, Y+36	; 0x24
    176e:	8d a1       	ldd	r24, Y+37	; 0x25
    1770:	9e a1       	ldd	r25, Y+38	; 0x26
    1772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	9a a3       	std	Y+34, r25	; 0x22
    177c:	89 a3       	std	Y+33, r24	; 0x21
    177e:	89 a1       	ldd	r24, Y+33	; 0x21
    1780:	9a a1       	ldd	r25, Y+34	; 0x22
    1782:	9e 8f       	std	Y+30, r25	; 0x1e
    1784:	8d 8f       	std	Y+29, r24	; 0x1d
    1786:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1788:	9e 8d       	ldd	r25, Y+30	; 0x1e
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <LCD_Init+0x1da>
    178e:	9e 8f       	std	Y+30, r25	; 0x1e
    1790:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);
	LCD_SendCommand(0b00001100);
    1792:	8c e0       	ldi	r24, 0x0C	; 12
    1794:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_SendCommand>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e4       	ldi	r26, 0x40	; 64
    179e:	b0 e4       	ldi	r27, 0x40	; 64
    17a0:	89 8f       	std	Y+25, r24	; 0x19
    17a2:	9a 8f       	std	Y+26, r25	; 0x1a
    17a4:	ab 8f       	std	Y+27, r26	; 0x1b
    17a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	69 8d       	ldd	r22, Y+25	; 0x19
    17aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e8       	ldi	r19, 0x80	; 128
    17b4:	4b e3       	ldi	r20, 0x3B	; 59
    17b6:	55 e4       	ldi	r21, 0x45	; 69
    17b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	8d 8b       	std	Y+21, r24	; 0x15
    17c2:	9e 8b       	std	Y+22, r25	; 0x16
    17c4:	af 8b       	std	Y+23, r26	; 0x17
    17c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17c8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ca:	7e 89       	ldd	r23, Y+22	; 0x16
    17cc:	8f 89       	ldd	r24, Y+23	; 0x17
    17ce:	98 8d       	ldd	r25, Y+24	; 0x18
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e8       	ldi	r20, 0x80	; 128
    17d6:	5f e3       	ldi	r21, 0x3F	; 63
    17d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17dc:	88 23       	and	r24, r24
    17de:	2c f4       	brge	.+10     	; 0x17ea <LCD_Init+0x23a>
		__ticks = 1;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9c 8b       	std	Y+20, r25	; 0x14
    17e6:	8b 8b       	std	Y+19, r24	; 0x13
    17e8:	3f c0       	rjmp	.+126    	; 0x1868 <LCD_Init+0x2b8>
	else if (__tmp > 65535)
    17ea:	6d 89       	ldd	r22, Y+21	; 0x15
    17ec:	7e 89       	ldd	r23, Y+22	; 0x16
    17ee:	8f 89       	ldd	r24, Y+23	; 0x17
    17f0:	98 8d       	ldd	r25, Y+24	; 0x18
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	3f ef       	ldi	r19, 0xFF	; 255
    17f6:	4f e7       	ldi	r20, 0x7F	; 127
    17f8:	57 e4       	ldi	r21, 0x47	; 71
    17fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17fe:	18 16       	cp	r1, r24
    1800:	4c f5       	brge	.+82     	; 0x1854 <LCD_Init+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1802:	69 8d       	ldd	r22, Y+25	; 0x19
    1804:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1806:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1808:	9c 8d       	ldd	r25, Y+28	; 0x1c
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e2       	ldi	r20, 0x20	; 32
    1810:	51 e4       	ldi	r21, 0x41	; 65
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	9c 8b       	std	Y+20, r25	; 0x14
    1828:	8b 8b       	std	Y+19, r24	; 0x13
    182a:	0f c0       	rjmp	.+30     	; 0x184a <LCD_Init+0x29a>
    182c:	8c e2       	ldi	r24, 0x2C	; 44
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	9a 8b       	std	Y+18, r25	; 0x12
    1832:	89 8b       	std	Y+17, r24	; 0x11
    1834:	89 89       	ldd	r24, Y+17	; 0x11
    1836:	9a 89       	ldd	r25, Y+18	; 0x12
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <LCD_Init+0x288>
    183c:	9a 8b       	std	Y+18, r25	; 0x12
    183e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1840:	8b 89       	ldd	r24, Y+19	; 0x13
    1842:	9c 89       	ldd	r25, Y+20	; 0x14
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	9c 8b       	std	Y+20, r25	; 0x14
    1848:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	8b 89       	ldd	r24, Y+19	; 0x13
    184c:	9c 89       	ldd	r25, Y+20	; 0x14
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	69 f7       	brne	.-38     	; 0x182c <LCD_Init+0x27c>
    1852:	14 c0       	rjmp	.+40     	; 0x187c <LCD_Init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1854:	6d 89       	ldd	r22, Y+21	; 0x15
    1856:	7e 89       	ldd	r23, Y+22	; 0x16
    1858:	8f 89       	ldd	r24, Y+23	; 0x17
    185a:	98 8d       	ldd	r25, Y+24	; 0x18
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9c 8b       	std	Y+20, r25	; 0x14
    1866:	8b 8b       	std	Y+19, r24	; 0x13
    1868:	8b 89       	ldd	r24, Y+19	; 0x13
    186a:	9c 89       	ldd	r25, Y+20	; 0x14
    186c:	98 8b       	std	Y+16, r25	; 0x10
    186e:	8f 87       	std	Y+15, r24	; 0x0f
    1870:	8f 85       	ldd	r24, Y+15	; 0x0f
    1872:	98 89       	ldd	r25, Y+16	; 0x10
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_Init+0x2c4>
    1878:	98 8b       	std	Y+16, r25	; 0x10
    187a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	LCD_SendCommand (0b00000001);
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_SendCommand>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a0 e4       	ldi	r26, 0x40	; 64
    1888:	b0 e4       	ldi	r27, 0x40	; 64
    188a:	8b 87       	std	Y+11, r24	; 0x0b
    188c:	9c 87       	std	Y+12, r25	; 0x0c
    188e:	ad 87       	std	Y+13, r26	; 0x0d
    1890:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6b 85       	ldd	r22, Y+11	; 0x0b
    1894:	7c 85       	ldd	r23, Y+12	; 0x0c
    1896:	8d 85       	ldd	r24, Y+13	; 0x0d
    1898:	9e 85       	ldd	r25, Y+14	; 0x0e
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e8       	ldi	r19, 0x80	; 128
    189e:	4b e3       	ldi	r20, 0x3B	; 59
    18a0:	55 e4       	ldi	r21, 0x45	; 69
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	8f 83       	std	Y+7, r24	; 0x07
    18ac:	98 87       	std	Y+8, r25	; 0x08
    18ae:	a9 87       	std	Y+9, r26	; 0x09
    18b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <LCD_Init+0x324>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <LCD_Init+0x3a2>
	else if (__tmp > 65535)
    18d4:	6f 81       	ldd	r22, Y+7	; 0x07
    18d6:	78 85       	ldd	r23, Y+8	; 0x08
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	9a 85       	ldd	r25, Y+10	; 0x0a
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <LCD_Init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	8d 83       	std	Y+5, r24	; 0x05
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <LCD_Init+0x384>
    1916:	8c e2       	ldi	r24, 0x2C	; 44
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	9c 83       	std	Y+4, r25	; 0x04
    191c:	8b 83       	std	Y+3, r24	; 0x03
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	9c 81       	ldd	r25, Y+4	; 0x04
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_Init+0x372>
    1926:	9c 83       	std	Y+4, r25	; 0x04
    1928:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	9e 81       	ldd	r25, Y+6	; 0x06
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <LCD_Init+0x366>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <LCD_Init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	6f 81       	ldd	r22, Y+7	; 0x07
    1940:	78 85       	ldd	r23, Y+8	; 0x08
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9e 83       	std	Y+6, r25	; 0x06
    1950:	8d 83       	std	Y+5, r24	; 0x05
    1952:	8d 81       	ldd	r24, Y+5	; 0x05
    1954:	9e 81       	ldd	r25, Y+6	; 0x06
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <LCD_Init+0x3ae>
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    1966:	e8 96       	adiw	r28, 0x38	; 56
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <LCD_SendCommand>:

 void LCD_SendCommand(u8 command)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	2f 97       	sbiw	r28, 0x0f	; 15
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    198e:	a5 e3       	ldi	r26, 0x35	; 53
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e5 e3       	ldi	r30, 0x35	; 53
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8f 7d       	andi	r24, 0xDF	; 223
    199a:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    199c:	a5 e3       	ldi	r26, 0x35	; 53
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e5 e3       	ldi	r30, 0x35	; 53
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	8f 7b       	andi	r24, 0xBF	; 191
    19a8:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RS_Pin);
    19aa:	a5 e3       	ldi	r26, 0x35	; 53
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e5 e3       	ldi	r30, 0x35	; 53
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	8f 77       	andi	r24, 0x7F	; 127
    19b6:	8c 93       	st	X, r24

	LCD_DataPORT= command;
    19b8:	e8 e3       	ldi	r30, 0x38	; 56
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19be:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    19c0:	a5 e3       	ldi	r26, 0x35	; 53
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e5 e3       	ldi	r30, 0x35	; 53
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	80 62       	ori	r24, 0x20	; 32
    19cc:	8c 93       	st	X, r24
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e4       	ldi	r27, 0x40	; 64
    19d6:	8b 87       	std	Y+11, r24	; 0x0b
    19d8:	9c 87       	std	Y+12, r25	; 0x0c
    19da:	ad 87       	std	Y+13, r26	; 0x0d
    19dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e8       	ldi	r19, 0x80	; 128
    19ea:	4b e3       	ldi	r20, 0x3B	; 59
    19ec:	55 e4       	ldi	r21, 0x45	; 69
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8f 83       	std	Y+7, r24	; 0x07
    19f8:	98 87       	std	Y+8, r25	; 0x08
    19fa:	a9 87       	std	Y+9, r26	; 0x09
    19fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <LCD_SendCommand+0xa8>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <LCD_SendCommand+0x126>
	else if (__tmp > 65535)
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <LCD_SendCommand+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <LCD_SendCommand+0x108>
    1a62:	8c e2       	ldi	r24, 0x2C	; 44
    1a64:	91 e0       	ldi	r25, 0x01	; 1
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_SendCommand+0xf6>
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <LCD_SendCommand+0xea>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <LCD_SendCommand+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_SendCommand+0x132>
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1ab2:	a5 e3       	ldi	r26, 0x35	; 53
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e5 e3       	ldi	r30, 0x35	; 53
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	8f 7d       	andi	r24, 0xDF	; 223
    1abe:	8c 93       	st	X, r24
}
    1ac0:	2f 96       	adiw	r28, 0x0f	; 15
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <LCD_WriteData>:

 void LCD_WriteData(u8 data)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	2f 97       	sbiw	r28, 0x0f	; 15
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1ae8:	a5 e3       	ldi	r26, 0x35	; 53
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e5 e3       	ldi	r30, 0x35	; 53
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	8f 7d       	andi	r24, 0xDF	; 223
    1af4:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    1af6:	a5 e3       	ldi	r26, 0x35	; 53
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e5 e3       	ldi	r30, 0x35	; 53
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	8f 7b       	andi	r24, 0xBF	; 191
    1b02:	8c 93       	st	X, r24
	SETBIT (LCD_ControlPORT, RS_Pin);
    1b04:	a5 e3       	ldi	r26, 0x35	; 53
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e5 e3       	ldi	r30, 0x35	; 53
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	80 68       	ori	r24, 0x80	; 128
    1b10:	8c 93       	st	X, r24

	LCD_DataPORT= data;
    1b12:	e8 e3       	ldi	r30, 0x38	; 56
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b18:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    1b1a:	a5 e3       	ldi	r26, 0x35	; 53
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e5 e3       	ldi	r30, 0x35	; 53
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	80 62       	ori	r24, 0x20	; 32
    1b26:	8c 93       	st	X, r24
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 e0       	ldi	r26, 0x00	; 0
    1b2e:	b0 e4       	ldi	r27, 0x40	; 64
    1b30:	8b 87       	std	Y+11, r24	; 0x0b
    1b32:	9c 87       	std	Y+12, r25	; 0x0c
    1b34:	ad 87       	std	Y+13, r26	; 0x0d
    1b36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e8       	ldi	r19, 0x80	; 128
    1b44:	4b e3       	ldi	r20, 0x3B	; 59
    1b46:	55 e4       	ldi	r21, 0x45	; 69
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	8f 83       	std	Y+7, r24	; 0x07
    1b52:	98 87       	std	Y+8, r25	; 0x08
    1b54:	a9 87       	std	Y+9, r26	; 0x09
    1b56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b6c:	88 23       	and	r24, r24
    1b6e:	2c f4       	brge	.+10     	; 0x1b7a <LCD_WriteData+0xa8>
		__ticks = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    1b78:	3f c0       	rjmp	.+126    	; 0x1bf8 <LCD_WriteData+0x126>
	else if (__tmp > 65535)
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	4c f5       	brge	.+82     	; 0x1be4 <LCD_WriteData+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	51 e4       	ldi	r21, 0x41	; 65
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <LCD_WriteData+0x108>
    1bbc:	8c e2       	ldi	r24, 0x2C	; 44
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LCD_WriteData+0xf6>
    1bcc:	9c 83       	std	Y+4, r25	; 0x04
    1bce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	69 f7       	brne	.-38     	; 0x1bbc <LCD_WriteData+0xea>
    1be2:	14 c0       	rjmp	.+40     	; 0x1c0c <LCD_WriteData+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be4:	6f 81       	ldd	r22, Y+7	; 0x07
    1be6:	78 85       	ldd	r23, Y+8	; 0x08
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_WriteData+0x132>
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1c0c:	a5 e3       	ldi	r26, 0x35	; 53
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e5 e3       	ldi	r30, 0x35	; 53
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	8f 7d       	andi	r24, 0xDF	; 223
    1c18:	8c 93       	st	X, r24
}
    1c1a:	2f 96       	adiw	r28, 0x0f	; 15
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <LCD_WriteString>:

void LCD_WriteString(u8* pu8StringCpy)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	61 97       	sbiw	r28, 0x11	; 17
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	99 8b       	std	Y+17, r25	; 0x11
    1c42:	88 8b       	std	Y+16, r24	; 0x10

  /* Local loop index */
  u8 u8Index = 0;
    1c44:	1f 86       	std	Y+15, r1	; 0x0f
    1c46:	80 c0       	rjmp	.+256    	; 0x1d48 <LCD_WriteString+0x11c>

  while (pu8StringCpy [u8Index] != 0)
  {
    /* Write Character on LCD */
    LCD_WriteData (pu8StringCpy [u8Index]);
    1c48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	88 89       	ldd	r24, Y+16	; 0x10
    1c50:	99 89       	ldd	r25, Y+17	; 0x11
    1c52:	fc 01       	movw	r30, r24
    1c54:	e2 0f       	add	r30, r18
    1c56:	f3 1f       	adc	r31, r19
    1c58:	80 81       	ld	r24, Z
    1c5a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <LCD_WriteData>

    /* Increment local loop index */
    u8Index++;
    1c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c60:	8f 5f       	subi	r24, 0xFF	; 255
    1c62:	8f 87       	std	Y+15, r24	; 0x0f
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 e0       	ldi	r26, 0x00	; 0
    1c6a:	b0 e4       	ldi	r27, 0x40	; 64
    1c6c:	8b 87       	std	Y+11, r24	; 0x0b
    1c6e:	9c 87       	std	Y+12, r25	; 0x0c
    1c70:	ad 87       	std	Y+13, r26	; 0x0d
    1c72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e8       	ldi	r19, 0x80	; 128
    1c80:	4b e3       	ldi	r20, 0x3B	; 59
    1c82:	55 e4       	ldi	r21, 0x45	; 69
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	8f 83       	std	Y+7, r24	; 0x07
    1c8e:	98 87       	std	Y+8, r25	; 0x08
    1c90:	a9 87       	std	Y+9, r26	; 0x09
    1c92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c94:	6f 81       	ldd	r22, Y+7	; 0x07
    1c96:	78 85       	ldd	r23, Y+8	; 0x08
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <LCD_WriteString+0x8a>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9e 83       	std	Y+6, r25	; 0x06
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <LCD_WriteString+0x108>
	else if (__tmp > 65535)
    1cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb8:	78 85       	ldd	r23, Y+8	; 0x08
    1cba:	89 85       	ldd	r24, Y+9	; 0x09
    1cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	4c f5       	brge	.+82     	; 0x1d20 <LCD_WriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <LCD_WriteString+0xea>
    1cf8:	8c e2       	ldi	r24, 0x2C	; 44
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	9c 83       	std	Y+4, r25	; 0x04
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_WriteString+0xd8>
    1d08:	9c 83       	std	Y+4, r25	; 0x04
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	69 f7       	brne	.-38     	; 0x1cf8 <LCD_WriteString+0xcc>
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <LCD_WriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	6f 81       	ldd	r22, Y+7	; 0x07
    1d22:	78 85       	ldd	r23, Y+8	; 0x08
    1d24:	89 85       	ldd	r24, Y+9	; 0x09
    1d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	9a 83       	std	Y+2, r25	; 0x02
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_WriteString+0x114>
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
{

  /* Local loop index */
  u8 u8Index = 0;

  while (pu8StringCpy [u8Index] != 0)
    1d48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	88 89       	ldd	r24, Y+16	; 0x10
    1d50:	99 89       	ldd	r25, Y+17	; 0x11
    1d52:	fc 01       	movw	r30, r24
    1d54:	e2 0f       	add	r30, r18
    1d56:	f3 1f       	adc	r31, r19
    1d58:	80 81       	ld	r24, Z
    1d5a:	88 23       	and	r24, r24
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <LCD_WriteString+0x134>
    1d5e:	74 cf       	rjmp	.-280    	; 0x1c48 <LCD_WriteString+0x1c>

    /* Delay to let the LCD show the character */
    _delay_ms(2);
  }

}
    1d60:	61 96       	adiw	r28, 0x11	; 17
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <LCD_Goto_xy>:

void LCD_Goto_xy(u8 x, u8 y)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	64 97       	sbiw	r28, 0x14	; 20
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
    1d88:	6c 8b       	std	Y+20, r22	; 0x14
	u8 firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
    1d8a:	80 e8       	ldi	r24, 0x80	; 128
    1d8c:	8f 87       	std	Y+15, r24	; 0x0f
    1d8e:	80 ec       	ldi	r24, 0xC0	; 192
    1d90:	88 8b       	std	Y+16, r24	; 0x10
    1d92:	84 e9       	ldi	r24, 0x94	; 148
    1d94:	89 8b       	std	Y+17, r24	; 0x11
    1d96:	84 ed       	ldi	r24, 0xD4	; 212
    1d98:	8a 8b       	std	Y+18, r24	; 0x12
	LCD_SendCommand (firstcharAdr[y-1] + x - 1);
    1d9a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9c 01       	movw	r18, r24
    1da2:	21 50       	subi	r18, 0x01	; 1
    1da4:	30 40       	sbci	r19, 0x00	; 0
    1da6:	ce 01       	movw	r24, r28
    1da8:	0f 96       	adiw	r24, 0x0f	; 15
    1daa:	fc 01       	movw	r30, r24
    1dac:	e2 0f       	add	r30, r18
    1dae:	f3 1f       	adc	r31, r19
    1db0:	90 81       	ld	r25, Z
    1db2:	8b 89       	ldd	r24, Y+19	; 0x13
    1db4:	89 0f       	add	r24, r25
    1db6:	81 50       	subi	r24, 0x01	; 1
    1db8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_SendCommand>
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a0 e8       	ldi	r26, 0x80	; 128
    1dc2:	bf e3       	ldi	r27, 0x3F	; 63
    1dc4:	8b 87       	std	Y+11, r24	; 0x0b
    1dc6:	9c 87       	std	Y+12, r25	; 0x0c
    1dc8:	ad 87       	std	Y+13, r26	; 0x0d
    1dca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e8       	ldi	r19, 0x80	; 128
    1dd8:	4b e3       	ldi	r20, 0x3B	; 59
    1dda:	55 e4       	ldi	r21, 0x45	; 69
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	8f 83       	std	Y+7, r24	; 0x07
    1de6:	98 87       	std	Y+8, r25	; 0x08
    1de8:	a9 87       	std	Y+9, r26	; 0x09
    1dea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <LCD_Goto_xy+0x9c>
		__ticks = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	3f c0       	rjmp	.+126    	; 0x1e8c <LCD_Goto_xy+0x11a>
	else if (__tmp > 65535)
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	4c f5       	brge	.+82     	; 0x1e78 <LCD_Goto_xy+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e2       	ldi	r20, 0x20	; 32
    1e34:	51 e4       	ldi	r21, 0x41	; 65
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <LCD_Goto_xy+0xfc>
    1e50:	8c e2       	ldi	r24, 0x2C	; 44
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_Goto_xy+0xea>
    1e60:	9c 83       	std	Y+4, r25	; 0x04
    1e62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	9e 81       	ldd	r25, Y+6	; 0x06
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	69 f7       	brne	.-38     	; 0x1e50 <LCD_Goto_xy+0xde>
    1e76:	14 c0       	rjmp	.+40     	; 0x1ea0 <LCD_Goto_xy+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	9a 81       	ldd	r25, Y+2	; 0x02
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <LCD_Goto_xy+0x126>
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1ea0:	64 96       	adiw	r28, 0x14	; 20
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <LCD_MoveCursorLeft>:

void LCD_MoveCursorLeft (void)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	2e 97       	sbiw	r28, 0x0e	; 14
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_LEFT);
    1ec6:	80 e1       	ldi	r24, 0x10	; 16
    1ec8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_SendCommand>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a0 e8       	ldi	r26, 0x80	; 128
    1ed2:	bf e3       	ldi	r27, 0x3F	; 63
    1ed4:	8b 87       	std	Y+11, r24	; 0x0b
    1ed6:	9c 87       	std	Y+12, r25	; 0x0c
    1ed8:	ad 87       	std	Y+13, r26	; 0x0d
    1eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e8       	ldi	r19, 0x80	; 128
    1ee8:	4b e3       	ldi	r20, 0x3B	; 59
    1eea:	55 e4       	ldi	r21, 0x45	; 69
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8f 83       	std	Y+7, r24	; 0x07
    1ef6:	98 87       	std	Y+8, r25	; 0x08
    1ef8:	a9 87       	std	Y+9, r26	; 0x09
    1efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1efc:	6f 81       	ldd	r22, Y+7	; 0x07
    1efe:	78 85       	ldd	r23, Y+8	; 0x08
    1f00:	89 85       	ldd	r24, Y+9	; 0x09
    1f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <LCD_MoveCursorLeft+0x6c>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	3f c0       	rjmp	.+126    	; 0x1f9c <LCD_MoveCursorLeft+0xea>
	else if (__tmp > 65535)
    1f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f20:	78 85       	ldd	r23, Y+8	; 0x08
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	57 e4       	ldi	r21, 0x47	; 71
    1f2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	4c f5       	brge	.+82     	; 0x1f88 <LCD_MoveCursorLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <LCD_MoveCursorLeft+0xcc>
    1f60:	8c e2       	ldi	r24, 0x2C	; 44
    1f62:	91 e0       	ldi	r25, 0x01	; 1
    1f64:	9c 83       	std	Y+4, r25	; 0x04
    1f66:	8b 83       	std	Y+3, r24	; 0x03
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <LCD_MoveCursorLeft+0xba>
    1f70:	9c 83       	std	Y+4, r25	; 0x04
    1f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	69 f7       	brne	.-38     	; 0x1f60 <LCD_MoveCursorLeft+0xae>
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <LCD_MoveCursorLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f88:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8a:	78 85       	ldd	r23, Y+8	; 0x08
    1f8c:	89 85       	ldd	r24, Y+9	; 0x09
    1f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_MoveCursorLeft+0xf6>
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1fb0:	2e 96       	adiw	r28, 0x0e	; 14
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <LCD_MoveCursorRight>:

//*******************************************************************************
void LCD_MoveCursorRight (void)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	2e 97       	sbiw	r28, 0x0e	; 14
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_RIGHT);
    1fd6:	84 e1       	ldi	r24, 0x14	; 20
    1fd8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_SendCommand>
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	a0 e8       	ldi	r26, 0x80	; 128
    1fe2:	bf e3       	ldi	r27, 0x3F	; 63
    1fe4:	8b 87       	std	Y+11, r24	; 0x0b
    1fe6:	9c 87       	std	Y+12, r25	; 0x0c
    1fe8:	ad 87       	std	Y+13, r26	; 0x0d
    1fea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e8       	ldi	r19, 0x80	; 128
    1ff8:	4b e3       	ldi	r20, 0x3B	; 59
    1ffa:	55 e4       	ldi	r21, 0x45	; 69
    1ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	8f 83       	std	Y+7, r24	; 0x07
    2006:	98 87       	std	Y+8, r25	; 0x08
    2008:	a9 87       	std	Y+9, r26	; 0x09
    200a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200c:	6f 81       	ldd	r22, Y+7	; 0x07
    200e:	78 85       	ldd	r23, Y+8	; 0x08
    2010:	89 85       	ldd	r24, Y+9	; 0x09
    2012:	9a 85       	ldd	r25, Y+10	; 0x0a
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e8       	ldi	r20, 0x80	; 128
    201a:	5f e3       	ldi	r21, 0x3F	; 63
    201c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2020:	88 23       	and	r24, r24
    2022:	2c f4       	brge	.+10     	; 0x202e <LCD_MoveCursorRight+0x6c>
		__ticks = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	3f c0       	rjmp	.+126    	; 0x20ac <LCD_MoveCursorRight+0xea>
	else if (__tmp > 65535)
    202e:	6f 81       	ldd	r22, Y+7	; 0x07
    2030:	78 85       	ldd	r23, Y+8	; 0x08
    2032:	89 85       	ldd	r24, Y+9	; 0x09
    2034:	9a 85       	ldd	r25, Y+10	; 0x0a
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	3f ef       	ldi	r19, 0xFF	; 255
    203a:	4f e7       	ldi	r20, 0x7F	; 127
    203c:	57 e4       	ldi	r21, 0x47	; 71
    203e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2042:	18 16       	cp	r1, r24
    2044:	4c f5       	brge	.+82     	; 0x2098 <LCD_MoveCursorRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2046:	6b 85       	ldd	r22, Y+11	; 0x0b
    2048:	7c 85       	ldd	r23, Y+12	; 0x0c
    204a:	8d 85       	ldd	r24, Y+13	; 0x0d
    204c:	9e 85       	ldd	r25, Y+14	; 0x0e
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e2       	ldi	r20, 0x20	; 32
    2054:	51 e4       	ldi	r21, 0x41	; 65
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
    206e:	0f c0       	rjmp	.+30     	; 0x208e <LCD_MoveCursorRight+0xcc>
    2070:	8c e2       	ldi	r24, 0x2C	; 44
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	9c 83       	std	Y+4, r25	; 0x04
    2076:	8b 83       	std	Y+3, r24	; 0x03
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_MoveCursorRight+0xba>
    2080:	9c 83       	std	Y+4, r25	; 0x04
    2082:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	69 f7       	brne	.-38     	; 0x2070 <LCD_MoveCursorRight+0xae>
    2096:	14 c0       	rjmp	.+40     	; 0x20c0 <LCD_MoveCursorRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2098:	6f 81       	ldd	r22, Y+7	; 0x07
    209a:	78 85       	ldd	r23, Y+8	; 0x08
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	9a 83       	std	Y+2, r25	; 0x02
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_MoveCursorRight+0xf6>
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    20c0:	2e 96       	adiw	r28, 0x0e	; 14
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <LCD_WriteString_xy>:

void LCD_WriteString_xy(u8 x, u8 y, u8* pu8StringCpy)
{
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <LCD_WriteString_xy+0x6>
    20d8:	00 d0       	rcall	.+0      	; 0x20da <LCD_WriteString_xy+0x8>
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	6a 83       	std	Y+2, r22	; 0x02
    20e2:	5c 83       	std	Y+4, r21	; 0x04
    20e4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_Goto_xy(x,y);
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	6a 81       	ldd	r22, Y+2	; 0x02
    20ea:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <LCD_Goto_xy>
	LCD_WriteString(pu8StringCpy);
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <LCD_WriteString>
}
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <LCD_WriteInteger_xy>:

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    2104:	ef 92       	push	r14
    2106:	ff 92       	push	r15
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	29 97       	sbiw	r28, 0x09	; 9
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	8b 83       	std	Y+3, r24	; 0x03
    2122:	6c 83       	std	Y+4, r22	; 0x04
    2124:	5e 83       	std	Y+6, r21	; 0x06
    2126:	4d 83       	std	Y+5, r20	; 0x05
    2128:	2f 83       	std	Y+7, r18	; 0x07
	u8 StringToDisplay[NumberOfDigits];
	itoa (IntegerToDisplay, StringToDisplay, 10);
	LCD_WriteString_xy (x, y, StringToDisplay);
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)

}
    212a:	0d b7       	in	r16, 0x3d	; 61
    212c:	1e b7       	in	r17, 0x3e	; 62
	LCD_Goto_xy(x,y);
	LCD_WriteString(pu8StringCpy);
}

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    212e:	8d b7       	in	r24, 0x3d	; 61
    2130:	9e b7       	in	r25, 0x3e	; 62
    2132:	7c 01       	movw	r14, r24
	u8 StringToDisplay[NumberOfDigits];
    2134:	8f 81       	ldd	r24, Y+7	; 0x07
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	2d b7       	in	r18, 0x3d	; 61
    213c:	3e b7       	in	r19, 0x3e	; 62
    213e:	28 1b       	sub	r18, r24
    2140:	39 0b       	sbc	r19, r25
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	3e bf       	out	0x3e, r19	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	2d bf       	out	0x3d, r18	; 61
    214c:	8d b7       	in	r24, 0x3d	; 61
    214e:	9e b7       	in	r25, 0x3e	; 62
    2150:	01 96       	adiw	r24, 0x01	; 1
    2152:	99 87       	std	Y+9, r25	; 0x09
    2154:	88 87       	std	Y+8, r24	; 0x08
    2156:	88 85       	ldd	r24, Y+8	; 0x08
    2158:	99 85       	ldd	r25, Y+9	; 0x09
    215a:	00 96       	adiw	r24, 0x00	; 0
    215c:	99 87       	std	Y+9, r25	; 0x09
    215e:	88 87       	std	Y+8, r24	; 0x08
    2160:	28 85       	ldd	r18, Y+8	; 0x08
    2162:	39 85       	ldd	r19, Y+9	; 0x09
    2164:	3a 83       	std	Y+2, r19	; 0x02
    2166:	29 83       	std	Y+1, r18	; 0x01
	itoa (IntegerToDisplay, StringToDisplay, 10);
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	29 81       	ldd	r18, Y+1	; 0x01
    216e:	3a 81       	ldd	r19, Y+2	; 0x02
    2170:	b9 01       	movw	r22, r18
    2172:	4a e0       	ldi	r20, 0x0A	; 10
    2174:	50 e0       	ldi	r21, 0x00	; 0
    2176:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <itoa>
	LCD_WriteString_xy (x, y, StringToDisplay);
    217a:	29 81       	ldd	r18, Y+1	; 0x01
    217c:	3a 81       	ldd	r19, Y+2	; 0x02
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	6c 81       	ldd	r22, Y+4	; 0x04
    2182:	a9 01       	movw	r20, r18
    2184:	0e 94 69 10 	call	0x20d2	; 0x20d2 <LCD_WriteString_xy>
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)
    2188:	80 e6       	ldi	r24, 0x60	; 96
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <LCD_WriteString>
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	fe be       	out	0x3e, r15	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	ed be       	out	0x3d, r14	; 61

}
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	1e bf       	out	0x3e, r17	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	0d bf       	out	0x3d, r16	; 61
    21a4:	29 96       	adiw	r28, 0x09	; 9
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	08 95       	ret

000021be <LCD_Clear>:
/*******************************************************************************************/

void LCD_Clear(void)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
	 LCD_SendCommand(0);
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_SendCommand>
}
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <LCD_DisplayInt>:


void LCD_DisplayInt(s32 data)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	65 97       	sbiw	r28, 0x15	; 21
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	6a 8b       	std	Y+18, r22	; 0x12
    21e8:	7b 8b       	std	Y+19, r23	; 0x13
    21ea:	8c 8b       	std	Y+20, r24	; 0x14
    21ec:	9d 8b       	std	Y+21, r25	; 0x15
	/* String to hold the ascii result */
	char Result[17];
	 /* 10 for decimal */
	itoa(data,Result,10);
    21ee:	8a 89       	ldd	r24, Y+18	; 0x12
    21f0:	9b 89       	ldd	r25, Y+19	; 0x13
    21f2:	9e 01       	movw	r18, r28
    21f4:	2f 5f       	subi	r18, 0xFF	; 255
    21f6:	3f 4f       	sbci	r19, 0xFF	; 255
    21f8:	b9 01       	movw	r22, r18
    21fa:	4a e0       	ldi	r20, 0x0A	; 10
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <itoa>
	/* Display The Result */
	LCD_WriteString(Result);
    2202:	ce 01       	movw	r24, r28
    2204:	01 96       	adiw	r24, 0x01	; 1
    2206:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <LCD_WriteString>
}
    220a:	65 96       	adiw	r28, 0x15	; 21
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <main>:
void Accelerometor_ReadAxis(ADXL345_Address EFF_Address , Letters_and_Words * Ptr_Acc);
/*-------------------------------------------------------------*/


int main (void)
{
    221c:	0f 93       	push	r16
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	2e 97       	sbiw	r28, 0x0e	; 14
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
		Letter_B,
		Letter_C,
		Letter_D,
	};
//	DDRA=0x00;  "reserved for ADCs"
	DDRC=0xff;
    2232:	e4 e3       	ldi	r30, 0x34	; 52
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	8f ef       	ldi	r24, 0xFF	; 255
    2238:	80 83       	st	Z, r24

	LCD_Init();
    223a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_Init>
	UART_init();
    223e:	0e 94 32 17 	call	0x2e64	; 0x2e64 <UART_init>
	TWI_Init(I2C_PRESCALE1,I2C_intDisable,F_ADXL,0x01);
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	20 e8       	ldi	r18, 0x80	; 128
    2248:	3a e1       	ldi	r19, 0x1A	; 26
    224a:	46 e0       	ldi	r20, 0x06	; 6
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	01 e0       	ldi	r16, 0x01	; 1
    2250:	0e 94 ae 08 	call	0x115c	; 0x115c <TWI_Init>
	Accelerometor_init(ADXL345_MessureMode,ADXL345_ALTERNATIVE_ADDRESS);
    2254:	88 e0       	ldi	r24, 0x08	; 8
    2256:	63 e5       	ldi	r22, 0x53	; 83
    2258:	0e 94 31 13 	call	0x2662	; 0x2662 <Accelerometor_init>
	DFPlayer_init();
    225c:	0e 94 0e 08 	call	0x101c	; 0x101c <DFPlayer_init>
	ADC_init();
    2260:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>

	while(1)
	{
		Update_Flexs(&Sensors_Readings);
    2264:	84 e2       	ldi	r24, 0x24	; 36
    2266:	92 e0       	ldi	r25, 0x02	; 2
    2268:	0e 94 66 12 	call	0x24cc	; 0x24cc <Update_Flexs>
		Accelerometor_ReadAxis(ADXL345_ALTERNATIVE_ADDRESS,&Sensors_Readings);
    226c:	24 e2       	ldi	r18, 0x24	; 36
    226e:	32 e0       	ldi	r19, 0x02	; 2
    2270:	83 e5       	ldi	r24, 0x53	; 83
    2272:	b9 01       	movw	r22, r18
    2274:	0e 94 56 13 	call	0x26ac	; 0x26ac <Accelerometor_ReadAxis>

LABEL_ACC:	LCD_Clear();
    2278:	0e 94 df 10 	call	0x21be	; 0x21be <LCD_Clear>
			LCD_WriteString_xy(1 , 1 , "X=");
    227c:	22 e6       	ldi	r18, 0x62	; 98
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	a9 01       	movw	r20, r18
    2286:	0e 94 69 10 	call	0x20d2	; 0x20d2 <LCD_WriteString_xy>
			LCD_DisplayInt((uint16) (Sensors_Readings.X_Axis));
    228a:	80 91 28 02 	lds	r24, 0x0228
    228e:	90 91 29 02 	lds	r25, 0x0229
    2292:	a0 91 2a 02 	lds	r26, 0x022A
    2296:	b0 91 2b 02 	lds	r27, 0x022B
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	cc 01       	movw	r24, r24
    22a8:	a0 e0       	ldi	r26, 0x00	; 0
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_DisplayInt>
			LCD_WriteString_xy(8 , 1 , " Y=");
    22b4:	25 e6       	ldi	r18, 0x65	; 101
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	88 e0       	ldi	r24, 0x08	; 8
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	a9 01       	movw	r20, r18
    22be:	0e 94 69 10 	call	0x20d2	; 0x20d2 <LCD_WriteString_xy>
			LCD_DisplayInt((uint16) (Sensors_Readings.Y_Axis));
    22c2:	80 91 2c 02 	lds	r24, 0x022C
    22c6:	90 91 2d 02 	lds	r25, 0x022D
    22ca:	a0 91 2e 02 	lds	r26, 0x022E
    22ce:	b0 91 2f 02 	lds	r27, 0x022F
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	cc 01       	movw	r24, r24
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_DisplayInt>
			LCD_WriteString_xy(1 , 2 , "Z=");
    22ec:	29 e6       	ldi	r18, 0x69	; 105
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	62 e0       	ldi	r22, 0x02	; 2
    22f4:	a9 01       	movw	r20, r18
    22f6:	0e 94 69 10 	call	0x20d2	; 0x20d2 <LCD_WriteString_xy>
			LCD_DisplayInt((uint16) (Sensors_Readings.Z_Axis));
    22fa:	80 91 30 02 	lds	r24, 0x0230
    22fe:	90 91 31 02 	lds	r25, 0x0231
    2302:	a0 91 32 02 	lds	r26, 0x0232
    2306:	b0 91 33 02 	lds	r27, 0x0233
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	cc 01       	movw	r24, r24
    2318:	a0 e0       	ldi	r26, 0x00	; 0
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	bc 01       	movw	r22, r24
    231e:	cd 01       	movw	r24, r26
    2320:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_DisplayInt>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	aa ef       	ldi	r26, 0xFA	; 250
    232a:	b3 e4       	ldi	r27, 0x43	; 67
    232c:	8b 87       	std	Y+11, r24	; 0x0b
    232e:	9c 87       	std	Y+12, r25	; 0x0c
    2330:	ad 87       	std	Y+13, r26	; 0x0d
    2332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	6b 85       	ldd	r22, Y+11	; 0x0b
    2336:	7c 85       	ldd	r23, Y+12	; 0x0c
    2338:	8d 85       	ldd	r24, Y+13	; 0x0d
    233a:	9e 85       	ldd	r25, Y+14	; 0x0e
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e8       	ldi	r19, 0x80	; 128
    2340:	4b e3       	ldi	r20, 0x3B	; 59
    2342:	55 e4       	ldi	r21, 0x45	; 69
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8f 83       	std	Y+7, r24	; 0x07
    234e:	98 87       	std	Y+8, r25	; 0x08
    2350:	a9 87       	std	Y+9, r26	; 0x09
    2352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2354:	6f 81       	ldd	r22, Y+7	; 0x07
    2356:	78 85       	ldd	r23, Y+8	; 0x08
    2358:	89 85       	ldd	r24, Y+9	; 0x09
    235a:	9a 85       	ldd	r25, Y+10	; 0x0a
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <main+0x15a>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <main+0x1d8>
	else if (__tmp > 65535)
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	4c f5       	brge	.+82     	; 0x23e0 <main+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2390:	7c 85       	ldd	r23, Y+12	; 0x0c
    2392:	8d 85       	ldd	r24, Y+13	; 0x0d
    2394:	9e 85       	ldd	r25, Y+14	; 0x0e
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <main+0x1ba>
    23b8:	8c e2       	ldi	r24, 0x2C	; 44
    23ba:	91 e0       	ldi	r25, 0x01	; 1
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	9c 81       	ldd	r25, Y+4	; 0x04
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <main+0x1a8>
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	8d 81       	ldd	r24, Y+5	; 0x05
    23ce:	9e 81       	ldd	r25, Y+6	; 0x06
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	69 f7       	brne	.-38     	; 0x23b8 <main+0x19c>
    23de:	4c cf       	rjmp	.-360    	; 0x2278 <main+0x5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	6f 81       	ldd	r22, Y+7	; 0x07
    23e2:	78 85       	ldd	r23, Y+8	; 0x08
    23e4:	89 85       	ldd	r24, Y+9	; 0x09
    23e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	8d 81       	ldd	r24, Y+5	; 0x05
    23f6:	9e 81       	ldd	r25, Y+6	; 0x06
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <main+0x1e4>
    2404:	9a 83       	std	Y+2, r25	; 0x02
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	37 cf       	rjmp	.-402    	; 0x2278 <main+0x5c>

0000240a <Adjust_Flex_Range>:
	return 0;
}
/*---------------------------------------------------------------*/

void Adjust_Flex_Range( u8 Flex_adcChannel_Number, u16 adcDigial_Value)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <Adjust_Flex_Range+0x6>
    2410:	0f 92       	push	r0
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	7b 83       	std	Y+3, r23	; 0x03
    241a:	6a 83       	std	Y+2, r22	; 0x02
	if ( (adcDigial_Value > 0) && (adcDigial_Value <= 15) )
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	9b 81       	ldd	r25, Y+3	; 0x03
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	71 f0       	breq	.+28     	; 0x2440 <Adjust_Flex_Range+0x36>
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	9b 81       	ldd	r25, Y+3	; 0x03
    2428:	80 31       	cpi	r24, 0x10	; 16
    242a:	91 05       	cpc	r25, r1
    242c:	48 f4       	brcc	.+18     	; 0x2440 <Adjust_Flex_Range+0x36>
		Flex[Flex_adcChannel_Number]=1;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	88 2f       	mov	r24, r24
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	fc 01       	movw	r30, r24
    2436:	ec 5c       	subi	r30, 0xCC	; 204
    2438:	fd 4f       	sbci	r31, 0xFD	; 253
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	80 83       	st	Z, r24
    243e:	40 c0       	rjmp	.+128    	; 0x24c0 <Adjust_Flex_Range+0xb6>
	else if ( (adcDigial_Value > 15) && (adcDigial_Value <= 30) )
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	9b 81       	ldd	r25, Y+3	; 0x03
    2444:	80 31       	cpi	r24, 0x10	; 16
    2446:	91 05       	cpc	r25, r1
    2448:	70 f0       	brcs	.+28     	; 0x2466 <Adjust_Flex_Range+0x5c>
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	9b 81       	ldd	r25, Y+3	; 0x03
    244e:	8f 31       	cpi	r24, 0x1F	; 31
    2450:	91 05       	cpc	r25, r1
    2452:	48 f4       	brcc	.+18     	; 0x2466 <Adjust_Flex_Range+0x5c>
		Flex[Flex_adcChannel_Number]=2;
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	88 2f       	mov	r24, r24
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	fc 01       	movw	r30, r24
    245c:	ec 5c       	subi	r30, 0xCC	; 204
    245e:	fd 4f       	sbci	r31, 0xFD	; 253
    2460:	82 e0       	ldi	r24, 0x02	; 2
    2462:	80 83       	st	Z, r24
    2464:	2d c0       	rjmp	.+90     	; 0x24c0 <Adjust_Flex_Range+0xb6>
	else if ( (adcDigial_Value > 30) && (adcDigial_Value <= 45) )
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	9b 81       	ldd	r25, Y+3	; 0x03
    246a:	8f 31       	cpi	r24, 0x1F	; 31
    246c:	91 05       	cpc	r25, r1
    246e:	70 f0       	brcs	.+28     	; 0x248c <Adjust_Flex_Range+0x82>
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	9b 81       	ldd	r25, Y+3	; 0x03
    2474:	8e 32       	cpi	r24, 0x2E	; 46
    2476:	91 05       	cpc	r25, r1
    2478:	48 f4       	brcc	.+18     	; 0x248c <Adjust_Flex_Range+0x82>
		Flex[Flex_adcChannel_Number]=3;
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	fc 01       	movw	r30, r24
    2482:	ec 5c       	subi	r30, 0xCC	; 204
    2484:	fd 4f       	sbci	r31, 0xFD	; 253
    2486:	83 e0       	ldi	r24, 0x03	; 3
    2488:	80 83       	st	Z, r24
    248a:	1a c0       	rjmp	.+52     	; 0x24c0 <Adjust_Flex_Range+0xb6>
	else if ( (adcDigial_Value > 45) && (adcDigial_Value <= 60) )
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	9b 81       	ldd	r25, Y+3	; 0x03
    2490:	8e 32       	cpi	r24, 0x2E	; 46
    2492:	91 05       	cpc	r25, r1
    2494:	70 f0       	brcs	.+28     	; 0x24b2 <Adjust_Flex_Range+0xa8>
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	9b 81       	ldd	r25, Y+3	; 0x03
    249a:	8d 33       	cpi	r24, 0x3D	; 61
    249c:	91 05       	cpc	r25, r1
    249e:	48 f4       	brcc	.+18     	; 0x24b2 <Adjust_Flex_Range+0xa8>
		Flex[Flex_adcChannel_Number]=4;
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	88 2f       	mov	r24, r24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	fc 01       	movw	r30, r24
    24a8:	ec 5c       	subi	r30, 0xCC	; 204
    24aa:	fd 4f       	sbci	r31, 0xFD	; 253
    24ac:	84 e0       	ldi	r24, 0x04	; 4
    24ae:	80 83       	st	Z, r24
    24b0:	07 c0       	rjmp	.+14     	; 0x24c0 <Adjust_Flex_Range+0xb6>
	else
		Flex[Flex_adcChannel_Number]=0;
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	88 2f       	mov	r24, r24
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	fc 01       	movw	r30, r24
    24ba:	ec 5c       	subi	r30, 0xCC	; 204
    24bc:	fd 4f       	sbci	r31, 0xFD	; 253
    24be:	10 82       	st	Z, r1
}
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <Update_Flexs>:
/*---------------------------------------------------------------*/

void Update_Flexs (Letters_and_Words * PTR_Flex)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <Update_Flexs+0x6>
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	89 83       	std	Y+1, r24	; 0x01
	Flex[0]= ADC_GetResult(0);
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    24e0:	80 93 34 02 	sts	0x0234, r24
	Adjust_Flex_Range(0, Flex[0]);
    24e4:	80 91 34 02 	lds	r24, 0x0234
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	b9 01       	movw	r22, r18
    24f0:	0e 94 05 12 	call	0x240a	; 0x240a <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[0]= Flex[0];
    24f4:	80 91 34 02 	lds	r24, 0x0234
    24f8:	e9 81       	ldd	r30, Y+1	; 0x01
    24fa:	fa 81       	ldd	r31, Y+2	; 0x02
    24fc:	80 83       	st	Z, r24

	Flex[1]= ADC_GetResult(1);
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    2504:	80 93 35 02 	sts	0x0235, r24
	Adjust_Flex_Range(1, Flex[1]);
    2508:	80 91 35 02 	lds	r24, 0x0235
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	b9 01       	movw	r22, r18
    2514:	0e 94 05 12 	call	0x240a	; 0x240a <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[1]= Flex[1];
    2518:	80 91 35 02 	lds	r24, 0x0235
    251c:	e9 81       	ldd	r30, Y+1	; 0x01
    251e:	fa 81       	ldd	r31, Y+2	; 0x02
    2520:	81 83       	std	Z+1, r24	; 0x01

	Flex[2]= ADC_GetResult(2);
    2522:	82 e0       	ldi	r24, 0x02	; 2
    2524:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    2528:	80 93 36 02 	sts	0x0236, r24
	Adjust_Flex_Range(2, Flex[2]);
    252c:	80 91 36 02 	lds	r24, 0x0236
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	b9 01       	movw	r22, r18
    2538:	0e 94 05 12 	call	0x240a	; 0x240a <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[2]= Flex[2];
    253c:	80 91 36 02 	lds	r24, 0x0236
    2540:	e9 81       	ldd	r30, Y+1	; 0x01
    2542:	fa 81       	ldd	r31, Y+2	; 0x02
    2544:	82 83       	std	Z+2, r24	; 0x02

	Flex[3]= ADC_GetResult(3);
    2546:	83 e0       	ldi	r24, 0x03	; 3
    2548:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    254c:	80 93 37 02 	sts	0x0237, r24
	Adjust_Flex_Range(3, Flex[3]);
    2550:	80 91 37 02 	lds	r24, 0x0237
    2554:	28 2f       	mov	r18, r24
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	83 e0       	ldi	r24, 0x03	; 3
    255a:	b9 01       	movw	r22, r18
    255c:	0e 94 05 12 	call	0x240a	; 0x240a <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[3]= Flex[3];
    2560:	80 91 37 02 	lds	r24, 0x0237
    2564:	e9 81       	ldd	r30, Y+1	; 0x01
    2566:	fa 81       	ldd	r31, Y+2	; 0x02
    2568:	83 83       	std	Z+3, r24	; 0x03
}
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <Compare_Data>:
/*---------------------------------------------------------------*/

u8  Compare_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data)
{
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	27 97       	sbiw	r28, 0x07	; 7
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	9c 83       	std	Y+4, r25	; 0x04
    258a:	8b 83       	std	Y+3, r24	; 0x03
    258c:	7e 83       	std	Y+6, r23	; 0x06
    258e:	6d 83       	std	Y+5, r22	; 0x05
	u8 _2nd_Counter;
	u8 _1st_Counter;
	Word_index=0;
    2590:	10 92 38 02 	sts	0x0238, r1

	for (_1st_Counter=0; _1st_Counter<10; _1st_Counter++)
    2594:	19 82       	std	Y+1, r1	; 0x01
    2596:	56 c0       	rjmp	.+172    	; 0x2644 <Compare_Data+0xd0>
	{
		for (_2nd_Counter=0; _2nd_Counter<NumberOfFlexs; _2nd_Counter++)
    2598:	1a 82       	std	Y+2, r1	; 0x02
    259a:	4d c0       	rjmp	.+154    	; 0x2636 <Compare_Data+0xc2>
			{
				if ( Ptr_Sensor_Readings ->Arr_Flex[_2nd_Counter] != Ptr_Stored_Data[_1st_Counter].Arr_Flex[_2nd_Counter])
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	fc 01       	movw	r30, r24
    25a8:	e2 0f       	add	r30, r18
    25aa:	f3 1f       	adc	r31, r19
    25ac:	40 81       	ld	r20, Z
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	88 2f       	mov	r24, r24
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	9c 01       	movw	r18, r24
    25b6:	22 95       	swap	r18
    25b8:	32 95       	swap	r19
    25ba:	30 7f       	andi	r19, 0xF0	; 240
    25bc:	32 27       	eor	r19, r18
    25be:	20 7f       	andi	r18, 0xF0	; 240
    25c0:	32 27       	eor	r19, r18
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	28 0f       	add	r18, r24
    25c8:	39 1f       	adc	r19, r25
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	88 2f       	mov	r24, r24
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	f9 01       	movw	r30, r18
    25d2:	e8 0f       	add	r30, r24
    25d4:	f9 1f       	adc	r31, r25
    25d6:	80 81       	ld	r24, Z
    25d8:	48 17       	cp	r20, r24
    25da:	89 f5       	brne	.+98     	; 0x263e <Compare_Data+0xca>
				{
	//				return 0;
					break;
				}
					if (_2nd_Counter == NumberOfFlexs-1)
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	83 30       	cpi	r24, 0x03	; 3
    25e0:	39 f5       	brne	.+78     	; 0x2630 <Compare_Data+0xbc>
					{
						if ( Ptr_Sensor_Readings ->Arr_Flex[_2nd_Counter] == Ptr_Stored_Data[_1st_Counter].Arr_Flex[_2nd_Counter])
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	fc 01       	movw	r30, r24
    25ee:	e2 0f       	add	r30, r18
    25f0:	f3 1f       	adc	r31, r19
    25f2:	40 81       	ld	r20, Z
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	88 2f       	mov	r24, r24
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	9c 01       	movw	r18, r24
    25fc:	22 95       	swap	r18
    25fe:	32 95       	swap	r19
    2600:	30 7f       	andi	r19, 0xF0	; 240
    2602:	32 27       	eor	r19, r18
    2604:	20 7f       	andi	r18, 0xF0	; 240
    2606:	32 27       	eor	r19, r18
    2608:	8d 81       	ldd	r24, Y+5	; 0x05
    260a:	9e 81       	ldd	r25, Y+6	; 0x06
    260c:	28 0f       	add	r18, r24
    260e:	39 1f       	adc	r19, r25
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	88 2f       	mov	r24, r24
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	f9 01       	movw	r30, r18
    2618:	e8 0f       	add	r30, r24
    261a:	f9 1f       	adc	r31, r25
    261c:	80 81       	ld	r24, Z
    261e:	48 17       	cp	r20, r24
    2620:	39 f4       	brne	.+14     	; 0x2630 <Compare_Data+0xbc>
									 && ( (Ptr_Sensor_Readings->Z_Axis - Ptr_Stored_Data[_1st_Counter]->Z_Axis ) >= - Z_Angle_Accuracy )
									 && ( (Ptr_Sensor_Readings->Z_Axis - Ptr_Stored_Data[_1st_Counter]->Z_Axis ) <=   Z_Angle_Accuracy )
								   )
									{
*/
										Word_index= _1st_Counter + 1;
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	8f 5f       	subi	r24, 0xFF	; 255
    2626:	80 93 38 02 	sts	0x0238, r24
										return 1;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	8f 83       	std	Y+7, r24	; 0x07
    262e:	0f c0       	rjmp	.+30     	; 0x264e <Compare_Data+0xda>
	u8 _1st_Counter;
	Word_index=0;

	for (_1st_Counter=0; _1st_Counter<10; _1st_Counter++)
	{
		for (_2nd_Counter=0; _2nd_Counter<NumberOfFlexs; _2nd_Counter++)
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	8a 83       	std	Y+2, r24	; 0x02
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	84 30       	cpi	r24, 0x04	; 4
    263a:	08 f4       	brcc	.+2      	; 0x263e <Compare_Data+0xca>
    263c:	af cf       	rjmp	.-162    	; 0x259c <Compare_Data+0x28>
{
	u8 _2nd_Counter;
	u8 _1st_Counter;
	Word_index=0;

	for (_1st_Counter=0; _1st_Counter<10; _1st_Counter++)
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	8f 5f       	subi	r24, 0xFF	; 255
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	8a 30       	cpi	r24, 0x0A	; 10
    2648:	08 f4       	brcc	.+2      	; 0x264c <Compare_Data+0xd8>
    264a:	a6 cf       	rjmp	.-180    	; 0x2598 <Compare_Data+0x24>
/*
		if ( Matching_flag == TRUE)
		break;
*/
	}
	return 0;
    264c:	1f 82       	std	Y+7, r1	; 0x07
    264e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2650:	27 96       	adiw	r28, 0x07	; 7
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <Accelerometor_init>:
/*-----------------------------------------------------------------------------*/

void Accelerometor_init(ADX345_PowerModes Mode , ADXL345_Address EFF_Address)
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	00 d0       	rcall	.+0      	; 0x2668 <Accelerometor_init+0x6>
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	6a 83       	std	Y+2, r22	; 0x02
	I2C_ByteWrite(EFF_Address,POWER_CTRL,Mode);
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	6d e2       	ldi	r22, 0x2D	; 45
    2674:	49 81       	ldd	r20, Y+1	; 0x01
    2676:	0e 94 47 0a 	call	0x148e	; 0x148e <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0x0B);
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	61 e3       	ldi	r22, 0x31	; 49
    267e:	4b e0       	ldi	r20, 0x0B	; 11
    2680:	0e 94 47 0a 	call	0x148e	; 0x148e <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSX,-1);
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	6e e1       	ldi	r22, 0x1E	; 30
    2688:	4f ef       	ldi	r20, 0xFF	; 255
    268a:	0e 94 47 0a 	call	0x148e	; 0x148e <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSY,0);
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	6f e1       	ldi	r22, 0x1F	; 31
    2692:	40 e0       	ldi	r20, 0x00	; 0
    2694:	0e 94 47 0a 	call	0x148e	; 0x148e <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSZ,-1);
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	60 e2       	ldi	r22, 0x20	; 32
    269c:	4f ef       	ldi	r20, 0xFF	; 255
    269e:	0e 94 47 0a 	call	0x148e	; 0x148e <I2C_ByteWrite>
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0);
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,8);
}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <Accelerometor_ReadAxis>:
/*-----------------------------------------------------------------------------*/

void Accelerometor_ReadAxis(ADXL345_Address EFF_Address , Letters_and_Words * Ptr_Acc)
{
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	cd 55       	subi	r28, 0x5D	; 93
    26ba:	d0 40       	sbci	r29, 0x00	; 0
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	fe 01       	movw	r30, r28
    26c8:	e5 5a       	subi	r30, 0xA5	; 165
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 83       	st	Z, r24
    26ce:	fe 01       	movw	r30, r28
    26d0:	e4 5a       	subi	r30, 0xA4	; 164
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	71 83       	std	Z+1, r23	; 0x01
    26d6:	60 83       	st	Z, r22
	uint16 X_Axis_Read;
	uint16 Y_Axis_Read;
	uint16 Z_Axis_Read;


	X_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX0);
    26d8:	fe 01       	movw	r30, r28
    26da:	e5 5a       	subi	r30, 0xA5	; 165
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	62 e3       	ldi	r22, 0x32	; 50
    26e2:	0e 94 80 0a 	call	0x1500	; 0x1500 <I2C_ByteRead>
    26e6:	fe 01       	movw	r30, r28
    26e8:	e7 5a       	subi	r30, 0xA7	; 167
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	80 83       	st	Z, r24
    26f4:	fe 01       	movw	r30, r28
    26f6:	ef 5a       	subi	r30, 0xAF	; 175
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	a0 e8       	ldi	r26, 0x80	; 128
    2700:	bf e3       	ldi	r27, 0x3F	; 63
    2702:	80 83       	st	Z, r24
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	a2 83       	std	Z+2, r26	; 0x02
    2708:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270a:	8e 01       	movw	r16, r28
    270c:	03 5b       	subi	r16, 0xB3	; 179
    270e:	1f 4f       	sbci	r17, 0xFF	; 255
    2710:	fe 01       	movw	r30, r28
    2712:	ef 5a       	subi	r30, 0xAF	; 175
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	60 81       	ld	r22, Z
    2718:	71 81       	ldd	r23, Z+1	; 0x01
    271a:	82 81       	ldd	r24, Z+2	; 0x02
    271c:	93 81       	ldd	r25, Z+3	; 0x03
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e8       	ldi	r19, 0x80	; 128
    2722:	4b e3       	ldi	r20, 0x3B	; 59
    2724:	55 e4       	ldi	r21, 0x45	; 69
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	f8 01       	movw	r30, r16
    2730:	80 83       	st	Z, r24
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	a2 83       	std	Z+2, r26	; 0x02
    2736:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2738:	fe 01       	movw	r30, r28
    273a:	e3 5b       	subi	r30, 0xB3	; 179
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	60 81       	ld	r22, Z
    2740:	71 81       	ldd	r23, Z+1	; 0x01
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e8       	ldi	r20, 0x80	; 128
    274c:	5f e3       	ldi	r21, 0x3F	; 63
    274e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2752:	88 23       	and	r24, r24
    2754:	44 f4       	brge	.+16     	; 0x2766 <Accelerometor_ReadAxis+0xba>
		__ticks = 1;
    2756:	fe 01       	movw	r30, r28
    2758:	e5 5b       	subi	r30, 0xB5	; 181
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	91 83       	std	Z+1, r25	; 0x01
    2762:	80 83       	st	Z, r24
    2764:	64 c0       	rjmp	.+200    	; 0x282e <Accelerometor_ReadAxis+0x182>
	else if (__tmp > 65535)
    2766:	fe 01       	movw	r30, r28
    2768:	e3 5b       	subi	r30, 0xB3	; 179
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	60 81       	ld	r22, Z
    276e:	71 81       	ldd	r23, Z+1	; 0x01
    2770:	82 81       	ldd	r24, Z+2	; 0x02
    2772:	93 81       	ldd	r25, Z+3	; 0x03
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	57 e4       	ldi	r21, 0x47	; 71
    277c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2780:	18 16       	cp	r1, r24
    2782:	0c f0       	brlt	.+2      	; 0x2786 <Accelerometor_ReadAxis+0xda>
    2784:	43 c0       	rjmp	.+134    	; 0x280c <Accelerometor_ReadAxis+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2786:	fe 01       	movw	r30, r28
    2788:	ef 5a       	subi	r30, 0xAF	; 175
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e2       	ldi	r20, 0x20	; 32
    279a:	51 e4       	ldi	r21, 0x41	; 65
    279c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	8e 01       	movw	r16, r28
    27a6:	05 5b       	subi	r16, 0xB5	; 181
    27a8:	1f 4f       	sbci	r17, 0xFF	; 255
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	f8 01       	movw	r30, r16
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
    27bc:	1f c0       	rjmp	.+62     	; 0x27fc <Accelerometor_ReadAxis+0x150>
    27be:	fe 01       	movw	r30, r28
    27c0:	e7 5b       	subi	r30, 0xB7	; 183
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	8c e2       	ldi	r24, 0x2C	; 44
    27c6:	91 e0       	ldi	r25, 0x01	; 1
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	80 83       	st	Z, r24
    27cc:	fe 01       	movw	r30, r28
    27ce:	e7 5b       	subi	r30, 0xB7	; 183
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 81       	ld	r24, Z
    27d4:	91 81       	ldd	r25, Z+1	; 0x01
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <Accelerometor_ReadAxis+0x12a>
    27da:	fe 01       	movw	r30, r28
    27dc:	e7 5b       	subi	r30, 0xB7	; 183
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	91 83       	std	Z+1, r25	; 0x01
    27e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e4:	de 01       	movw	r26, r28
    27e6:	a5 5b       	subi	r26, 0xB5	; 181
    27e8:	bf 4f       	sbci	r27, 0xFF	; 255
    27ea:	fe 01       	movw	r30, r28
    27ec:	e5 5b       	subi	r30, 0xB5	; 181
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	91 81       	ldd	r25, Z+1	; 0x01
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	11 96       	adiw	r26, 0x01	; 1
    27f8:	9c 93       	st	X, r25
    27fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fc:	fe 01       	movw	r30, r28
    27fe:	e5 5b       	subi	r30, 0xB5	; 181
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	d1 f6       	brne	.-76     	; 0x27be <Accelerometor_ReadAxis+0x112>
    280a:	27 c0       	rjmp	.+78     	; 0x285a <Accelerometor_ReadAxis+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280c:	8e 01       	movw	r16, r28
    280e:	05 5b       	subi	r16, 0xB5	; 181
    2810:	1f 4f       	sbci	r17, 0xFF	; 255
    2812:	fe 01       	movw	r30, r28
    2814:	e3 5b       	subi	r30, 0xB3	; 179
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	f8 01       	movw	r30, r16
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	80 83       	st	Z, r24
    282e:	de 01       	movw	r26, r28
    2830:	a9 5b       	subi	r26, 0xB9	; 185
    2832:	bf 4f       	sbci	r27, 0xFF	; 255
    2834:	fe 01       	movw	r30, r28
    2836:	e5 5b       	subi	r30, 0xB5	; 181
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	8d 93       	st	X+, r24
    2840:	9c 93       	st	X, r25
    2842:	fe 01       	movw	r30, r28
    2844:	e9 5b       	subi	r30, 0xB9	; 185
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <Accelerometor_ReadAxis+0x1a0>
    2850:	fe 01       	movw	r30, r28
    2852:	e9 5b       	subi	r30, 0xB9	; 185
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	91 83       	std	Z+1, r25	; 0x01
    2858:	80 83       	st	Z, r24
	_delay_ms(1);
	X_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX1))<<8;
    285a:	fe 01       	movw	r30, r28
    285c:	e5 5a       	subi	r30, 0xA5	; 165
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 81       	ld	r24, Z
    2862:	63 e3       	ldi	r22, 0x33	; 51
    2864:	0e 94 80 0a 	call	0x1500	; 0x1500 <I2C_ByteRead>
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	98 2f       	mov	r25, r24
    286e:	88 27       	eor	r24, r24
    2870:	9c 01       	movw	r18, r24
    2872:	de 01       	movw	r26, r28
    2874:	a7 5a       	subi	r26, 0xA7	; 167
    2876:	bf 4f       	sbci	r27, 0xFF	; 255
    2878:	fe 01       	movw	r30, r28
    287a:	e7 5a       	subi	r30, 0xA7	; 167
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 81       	ld	r24, Z
    2880:	91 81       	ldd	r25, Z+1	; 0x01
    2882:	82 2b       	or	r24, r18
    2884:	93 2b       	or	r25, r19
    2886:	8d 93       	st	X+, r24
    2888:	9c 93       	st	X, r25
    288a:	fe 01       	movw	r30, r28
    288c:	ed 5b       	subi	r30, 0xBD	; 189
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	a0 e8       	ldi	r26, 0x80	; 128
    2896:	bf e3       	ldi	r27, 0x3F	; 63
    2898:	80 83       	st	Z, r24
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	a2 83       	std	Z+2, r26	; 0x02
    289e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a0:	8e 01       	movw	r16, r28
    28a2:	01 5c       	subi	r16, 0xC1	; 193
    28a4:	1f 4f       	sbci	r17, 0xFF	; 255
    28a6:	fe 01       	movw	r30, r28
    28a8:	ed 5b       	subi	r30, 0xBD	; 189
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e8       	ldi	r19, 0x80	; 128
    28b8:	4b e3       	ldi	r20, 0x3B	; 59
    28ba:	55 e4       	ldi	r21, 0x45	; 69
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	f8 01       	movw	r30, r16
    28c6:	80 83       	st	Z, r24
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	a2 83       	std	Z+2, r26	; 0x02
    28cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ce:	fe 01       	movw	r30, r28
    28d0:	ff 96       	adiw	r30, 0x3f	; 63
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e8       	ldi	r20, 0x80	; 128
    28e0:	5f e3       	ldi	r21, 0x3F	; 63
    28e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e6:	88 23       	and	r24, r24
    28e8:	2c f4       	brge	.+10     	; 0x28f4 <Accelerometor_ReadAxis+0x248>
		__ticks = 1;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	9e af       	std	Y+62, r25	; 0x3e
    28f0:	8d af       	std	Y+61, r24	; 0x3d
    28f2:	46 c0       	rjmp	.+140    	; 0x2980 <Accelerometor_ReadAxis+0x2d4>
	else if (__tmp > 65535)
    28f4:	fe 01       	movw	r30, r28
    28f6:	ff 96       	adiw	r30, 0x3f	; 63
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	3f ef       	ldi	r19, 0xFF	; 255
    2904:	4f e7       	ldi	r20, 0x7F	; 127
    2906:	57 e4       	ldi	r21, 0x47	; 71
    2908:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    290c:	18 16       	cp	r1, r24
    290e:	64 f5       	brge	.+88     	; 0x2968 <Accelerometor_ReadAxis+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2910:	fe 01       	movw	r30, r28
    2912:	ed 5b       	subi	r30, 0xBD	; 189
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	60 81       	ld	r22, Z
    2918:	71 81       	ldd	r23, Z+1	; 0x01
    291a:	82 81       	ldd	r24, Z+2	; 0x02
    291c:	93 81       	ldd	r25, Z+3	; 0x03
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e2       	ldi	r20, 0x20	; 32
    2924:	51 e4       	ldi	r21, 0x41	; 65
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9e af       	std	Y+62, r25	; 0x3e
    293c:	8d af       	std	Y+61, r24	; 0x3d
    293e:	0f c0       	rjmp	.+30     	; 0x295e <Accelerometor_ReadAxis+0x2b2>
    2940:	8c e2       	ldi	r24, 0x2C	; 44
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	9c af       	std	Y+60, r25	; 0x3c
    2946:	8b af       	std	Y+59, r24	; 0x3b
    2948:	8b ad       	ldd	r24, Y+59	; 0x3b
    294a:	9c ad       	ldd	r25, Y+60	; 0x3c
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <Accelerometor_ReadAxis+0x2a0>
    2950:	9c af       	std	Y+60, r25	; 0x3c
    2952:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2954:	8d ad       	ldd	r24, Y+61	; 0x3d
    2956:	9e ad       	ldd	r25, Y+62	; 0x3e
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	9e af       	std	Y+62, r25	; 0x3e
    295c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2960:	9e ad       	ldd	r25, Y+62	; 0x3e
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	69 f7       	brne	.-38     	; 0x2940 <Accelerometor_ReadAxis+0x294>
    2966:	16 c0       	rjmp	.+44     	; 0x2994 <Accelerometor_ReadAxis+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2968:	fe 01       	movw	r30, r28
    296a:	ff 96       	adiw	r30, 0x3f	; 63
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9e af       	std	Y+62, r25	; 0x3e
    297e:	8d af       	std	Y+61, r24	; 0x3d
    2980:	8d ad       	ldd	r24, Y+61	; 0x3d
    2982:	9e ad       	ldd	r25, Y+62	; 0x3e
    2984:	9a af       	std	Y+58, r25	; 0x3a
    2986:	89 af       	std	Y+57, r24	; 0x39
    2988:	89 ad       	ldd	r24, Y+57	; 0x39
    298a:	9a ad       	ldd	r25, Y+58	; 0x3a
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <Accelerometor_ReadAxis+0x2e0>
    2990:	9a af       	std	Y+58, r25	; 0x3a
    2992:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	Y_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY0);
    2994:	fe 01       	movw	r30, r28
    2996:	e5 5a       	subi	r30, 0xA5	; 165
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	80 81       	ld	r24, Z
    299c:	64 e3       	ldi	r22, 0x34	; 52
    299e:	0e 94 80 0a 	call	0x1500	; 0x1500 <I2C_ByteRead>
    29a2:	fe 01       	movw	r30, r28
    29a4:	e9 5a       	subi	r30, 0xA9	; 169
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	88 2f       	mov	r24, r24
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	a0 e8       	ldi	r26, 0x80	; 128
    29b6:	bf e3       	ldi	r27, 0x3F	; 63
    29b8:	8d ab       	std	Y+53, r24	; 0x35
    29ba:	9e ab       	std	Y+54, r25	; 0x36
    29bc:	af ab       	std	Y+55, r26	; 0x37
    29be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c0:	6d a9       	ldd	r22, Y+53	; 0x35
    29c2:	7e a9       	ldd	r23, Y+54	; 0x36
    29c4:	8f a9       	ldd	r24, Y+55	; 0x37
    29c6:	98 ad       	ldd	r25, Y+56	; 0x38
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e8       	ldi	r19, 0x80	; 128
    29cc:	4b e3       	ldi	r20, 0x3B	; 59
    29ce:	55 e4       	ldi	r21, 0x45	; 69
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	89 ab       	std	Y+49, r24	; 0x31
    29da:	9a ab       	std	Y+50, r25	; 0x32
    29dc:	ab ab       	std	Y+51, r26	; 0x33
    29de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29e0:	69 a9       	ldd	r22, Y+49	; 0x31
    29e2:	7a a9       	ldd	r23, Y+50	; 0x32
    29e4:	8b a9       	ldd	r24, Y+51	; 0x33
    29e6:	9c a9       	ldd	r25, Y+52	; 0x34
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e8       	ldi	r20, 0x80	; 128
    29ee:	5f e3       	ldi	r21, 0x3F	; 63
    29f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f4:	88 23       	and	r24, r24
    29f6:	2c f4       	brge	.+10     	; 0x2a02 <Accelerometor_ReadAxis+0x356>
		__ticks = 1;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	98 ab       	std	Y+48, r25	; 0x30
    29fe:	8f a7       	std	Y+47, r24	; 0x2f
    2a00:	3f c0       	rjmp	.+126    	; 0x2a80 <Accelerometor_ReadAxis+0x3d4>
	else if (__tmp > 65535)
    2a02:	69 a9       	ldd	r22, Y+49	; 0x31
    2a04:	7a a9       	ldd	r23, Y+50	; 0x32
    2a06:	8b a9       	ldd	r24, Y+51	; 0x33
    2a08:	9c a9       	ldd	r25, Y+52	; 0x34
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	3f ef       	ldi	r19, 0xFF	; 255
    2a0e:	4f e7       	ldi	r20, 0x7F	; 127
    2a10:	57 e4       	ldi	r21, 0x47	; 71
    2a12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a16:	18 16       	cp	r1, r24
    2a18:	4c f5       	brge	.+82     	; 0x2a6c <Accelerometor_ReadAxis+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a1c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a1e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a20:	98 ad       	ldd	r25, Y+56	; 0x38
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e2       	ldi	r20, 0x20	; 32
    2a28:	51 e4       	ldi	r21, 0x41	; 65
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	bc 01       	movw	r22, r24
    2a34:	cd 01       	movw	r24, r26
    2a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	98 ab       	std	Y+48, r25	; 0x30
    2a40:	8f a7       	std	Y+47, r24	; 0x2f
    2a42:	0f c0       	rjmp	.+30     	; 0x2a62 <Accelerometor_ReadAxis+0x3b6>
    2a44:	8c e2       	ldi	r24, 0x2C	; 44
    2a46:	91 e0       	ldi	r25, 0x01	; 1
    2a48:	9e a7       	std	Y+46, r25	; 0x2e
    2a4a:	8d a7       	std	Y+45, r24	; 0x2d
    2a4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <Accelerometor_ReadAxis+0x3a4>
    2a54:	9e a7       	std	Y+46, r25	; 0x2e
    2a56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	98 ab       	std	Y+48, r25	; 0x30
    2a60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a64:	98 a9       	ldd	r25, Y+48	; 0x30
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	69 f7       	brne	.-38     	; 0x2a44 <Accelerometor_ReadAxis+0x398>
    2a6a:	14 c0       	rjmp	.+40     	; 0x2a94 <Accelerometor_ReadAxis+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a6e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a70:	8b a9       	ldd	r24, Y+51	; 0x33
    2a72:	9c a9       	ldd	r25, Y+52	; 0x34
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	98 ab       	std	Y+48, r25	; 0x30
    2a7e:	8f a7       	std	Y+47, r24	; 0x2f
    2a80:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a82:	98 a9       	ldd	r25, Y+48	; 0x30
    2a84:	9c a7       	std	Y+44, r25	; 0x2c
    2a86:	8b a7       	std	Y+43, r24	; 0x2b
    2a88:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <Accelerometor_ReadAxis+0x3e0>
    2a90:	9c a7       	std	Y+44, r25	; 0x2c
    2a92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Y_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY1))<<8;
    2a94:	fe 01       	movw	r30, r28
    2a96:	e5 5a       	subi	r30, 0xA5	; 165
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	80 81       	ld	r24, Z
    2a9c:	65 e3       	ldi	r22, 0x35	; 53
    2a9e:	0e 94 80 0a 	call	0x1500	; 0x1500 <I2C_ByteRead>
    2aa2:	88 2f       	mov	r24, r24
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	98 2f       	mov	r25, r24
    2aa8:	88 27       	eor	r24, r24
    2aaa:	9c 01       	movw	r18, r24
    2aac:	de 01       	movw	r26, r28
    2aae:	a9 5a       	subi	r26, 0xA9	; 169
    2ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e9 5a       	subi	r30, 0xA9	; 169
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	82 2b       	or	r24, r18
    2abe:	93 2b       	or	r25, r19
    2ac0:	8d 93       	st	X+, r24
    2ac2:	9c 93       	st	X, r25
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e8       	ldi	r26, 0x80	; 128
    2aca:	bf e3       	ldi	r27, 0x3F	; 63
    2acc:	8f a3       	std	Y+39, r24	; 0x27
    2ace:	98 a7       	std	Y+40, r25	; 0x28
    2ad0:	a9 a7       	std	Y+41, r26	; 0x29
    2ad2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ad6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ad8:	89 a5       	ldd	r24, Y+41	; 0x29
    2ada:	9a a5       	ldd	r25, Y+42	; 0x2a
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e8       	ldi	r19, 0x80	; 128
    2ae0:	4b e3       	ldi	r20, 0x3B	; 59
    2ae2:	55 e4       	ldi	r21, 0x45	; 69
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	8b a3       	std	Y+35, r24	; 0x23
    2aee:	9c a3       	std	Y+36, r25	; 0x24
    2af0:	ad a3       	std	Y+37, r26	; 0x25
    2af2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2af4:	6b a1       	ldd	r22, Y+35	; 0x23
    2af6:	7c a1       	ldd	r23, Y+36	; 0x24
    2af8:	8d a1       	ldd	r24, Y+37	; 0x25
    2afa:	9e a1       	ldd	r25, Y+38	; 0x26
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <Accelerometor_ReadAxis+0x46a>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9a a3       	std	Y+34, r25	; 0x22
    2b12:	89 a3       	std	Y+33, r24	; 0x21
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <Accelerometor_ReadAxis+0x4e8>
	else if (__tmp > 65535)
    2b16:	6b a1       	ldd	r22, Y+35	; 0x23
    2b18:	7c a1       	ldd	r23, Y+36	; 0x24
    2b1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	4c f5       	brge	.+82     	; 0x2b80 <Accelerometor_ReadAxis+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b30:	78 a5       	ldd	r23, Y+40	; 0x28
    2b32:	89 a5       	ldd	r24, Y+41	; 0x29
    2b34:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9a a3       	std	Y+34, r25	; 0x22
    2b54:	89 a3       	std	Y+33, r24	; 0x21
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <Accelerometor_ReadAxis+0x4ca>
    2b58:	8c e2       	ldi	r24, 0x2C	; 44
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	98 a3       	std	Y+32, r25	; 0x20
    2b5e:	8f 8f       	std	Y+31, r24	; 0x1f
    2b60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b62:	98 a1       	ldd	r25, Y+32	; 0x20
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <Accelerometor_ReadAxis+0x4b8>
    2b68:	98 a3       	std	Y+32, r25	; 0x20
    2b6a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b6e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	9a a3       	std	Y+34, r25	; 0x22
    2b74:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b76:	89 a1       	ldd	r24, Y+33	; 0x21
    2b78:	9a a1       	ldd	r25, Y+34	; 0x22
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	69 f7       	brne	.-38     	; 0x2b58 <Accelerometor_ReadAxis+0x4ac>
    2b7e:	14 c0       	rjmp	.+40     	; 0x2ba8 <Accelerometor_ReadAxis+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b80:	6b a1       	ldd	r22, Y+35	; 0x23
    2b82:	7c a1       	ldd	r23, Y+36	; 0x24
    2b84:	8d a1       	ldd	r24, Y+37	; 0x25
    2b86:	9e a1       	ldd	r25, Y+38	; 0x26
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9a a3       	std	Y+34, r25	; 0x22
    2b92:	89 a3       	std	Y+33, r24	; 0x21
    2b94:	89 a1       	ldd	r24, Y+33	; 0x21
    2b96:	9a a1       	ldd	r25, Y+34	; 0x22
    2b98:	9e 8f       	std	Y+30, r25	; 0x1e
    2b9a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <Accelerometor_ReadAxis+0x4f4>
    2ba4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ba6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Z_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ0);
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e5 5a       	subi	r30, 0xA5	; 165
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	66 e3       	ldi	r22, 0x36	; 54
    2bb2:	0e 94 80 0a 	call	0x1500	; 0x1500 <I2C_ByteRead>
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	eb 5a       	subi	r30, 0xAB	; 171
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	91 83       	std	Z+1, r25	; 0x01
    2bc2:	80 83       	st	Z, r24
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	a0 e8       	ldi	r26, 0x80	; 128
    2bca:	bf e3       	ldi	r27, 0x3F	; 63
    2bcc:	89 8f       	std	Y+25, r24	; 0x19
    2bce:	9a 8f       	std	Y+26, r25	; 0x1a
    2bd0:	ab 8f       	std	Y+27, r26	; 0x1b
    2bd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e8       	ldi	r19, 0x80	; 128
    2be0:	4b e3       	ldi	r20, 0x3B	; 59
    2be2:	55 e4       	ldi	r21, 0x45	; 69
    2be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	8d 8b       	std	Y+21, r24	; 0x15
    2bee:	9e 8b       	std	Y+22, r25	; 0x16
    2bf0:	af 8b       	std	Y+23, r26	; 0x17
    2bf2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bf4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e8       	ldi	r20, 0x80	; 128
    2c02:	5f e3       	ldi	r21, 0x3F	; 63
    2c04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c08:	88 23       	and	r24, r24
    2c0a:	2c f4       	brge	.+10     	; 0x2c16 <Accelerometor_ReadAxis+0x56a>
		__ticks = 1;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	9c 8b       	std	Y+20, r25	; 0x14
    2c12:	8b 8b       	std	Y+19, r24	; 0x13
    2c14:	3f c0       	rjmp	.+126    	; 0x2c94 <Accelerometor_ReadAxis+0x5e8>
	else if (__tmp > 65535)
    2c16:	6d 89       	ldd	r22, Y+21	; 0x15
    2c18:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	3f ef       	ldi	r19, 0xFF	; 255
    2c22:	4f e7       	ldi	r20, 0x7F	; 127
    2c24:	57 e4       	ldi	r21, 0x47	; 71
    2c26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c2a:	18 16       	cp	r1, r24
    2c2c:	4c f5       	brge	.+82     	; 0x2c80 <Accelerometor_ReadAxis+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e2       	ldi	r20, 0x20	; 32
    2c3c:	51 e4       	ldi	r21, 0x41	; 65
    2c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	bc 01       	movw	r22, r24
    2c48:	cd 01       	movw	r24, r26
    2c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	9c 8b       	std	Y+20, r25	; 0x14
    2c54:	8b 8b       	std	Y+19, r24	; 0x13
    2c56:	0f c0       	rjmp	.+30     	; 0x2c76 <Accelerometor_ReadAxis+0x5ca>
    2c58:	8c e2       	ldi	r24, 0x2C	; 44
    2c5a:	91 e0       	ldi	r25, 0x01	; 1
    2c5c:	9a 8b       	std	Y+18, r25	; 0x12
    2c5e:	89 8b       	std	Y+17, r24	; 0x11
    2c60:	89 89       	ldd	r24, Y+17	; 0x11
    2c62:	9a 89       	ldd	r25, Y+18	; 0x12
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <Accelerometor_ReadAxis+0x5b8>
    2c68:	9a 8b       	std	Y+18, r25	; 0x12
    2c6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	9c 8b       	std	Y+20, r25	; 0x14
    2c74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c76:	8b 89       	ldd	r24, Y+19	; 0x13
    2c78:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	69 f7       	brne	.-38     	; 0x2c58 <Accelerometor_ReadAxis+0x5ac>
    2c7e:	14 c0       	rjmp	.+40     	; 0x2ca8 <Accelerometor_ReadAxis+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c80:	6d 89       	ldd	r22, Y+21	; 0x15
    2c82:	7e 89       	ldd	r23, Y+22	; 0x16
    2c84:	8f 89       	ldd	r24, Y+23	; 0x17
    2c86:	98 8d       	ldd	r25, Y+24	; 0x18
    2c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	9c 8b       	std	Y+20, r25	; 0x14
    2c92:	8b 8b       	std	Y+19, r24	; 0x13
    2c94:	8b 89       	ldd	r24, Y+19	; 0x13
    2c96:	9c 89       	ldd	r25, Y+20	; 0x14
    2c98:	98 8b       	std	Y+16, r25	; 0x10
    2c9a:	8f 87       	std	Y+15, r24	; 0x0f
    2c9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c9e:	98 89       	ldd	r25, Y+16	; 0x10
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	f1 f7       	brne	.-4      	; 0x2ca0 <Accelerometor_ReadAxis+0x5f4>
    2ca4:	98 8b       	std	Y+16, r25	; 0x10
    2ca6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Z_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ1))<<8;
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e5 5a       	subi	r30, 0xA5	; 165
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	67 e3       	ldi	r22, 0x37	; 55
    2cb2:	0e 94 80 0a 	call	0x1500	; 0x1500 <I2C_ByteRead>
    2cb6:	88 2f       	mov	r24, r24
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	98 2f       	mov	r25, r24
    2cbc:	88 27       	eor	r24, r24
    2cbe:	9c 01       	movw	r18, r24
    2cc0:	de 01       	movw	r26, r28
    2cc2:	ab 5a       	subi	r26, 0xAB	; 171
    2cc4:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	eb 5a       	subi	r30, 0xAB	; 171
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 81       	ld	r24, Z
    2cce:	91 81       	ldd	r25, Z+1	; 0x01
    2cd0:	82 2b       	or	r24, r18
    2cd2:	93 2b       	or	r25, r19
    2cd4:	8d 93       	st	X+, r24
    2cd6:	9c 93       	st	X, r25
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	a0 e8       	ldi	r26, 0x80	; 128
    2cde:	bf e3       	ldi	r27, 0x3F	; 63
    2ce0:	8b 87       	std	Y+11, r24	; 0x0b
    2ce2:	9c 87       	std	Y+12, r25	; 0x0c
    2ce4:	ad 87       	std	Y+13, r26	; 0x0d
    2ce6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e8       	ldi	r19, 0x80	; 128
    2cf4:	4b e3       	ldi	r20, 0x3B	; 59
    2cf6:	55 e4       	ldi	r21, 0x45	; 69
    2cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	8f 83       	std	Y+7, r24	; 0x07
    2d02:	98 87       	std	Y+8, r25	; 0x08
    2d04:	a9 87       	std	Y+9, r26	; 0x09
    2d06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e8       	ldi	r20, 0x80	; 128
    2d16:	5f e3       	ldi	r21, 0x3F	; 63
    2d18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d1c:	88 23       	and	r24, r24
    2d1e:	2c f4       	brge	.+10     	; 0x2d2a <Accelerometor_ReadAxis+0x67e>
		__ticks = 1;
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	9e 83       	std	Y+6, r25	; 0x06
    2d26:	8d 83       	std	Y+5, r24	; 0x05
    2d28:	3f c0       	rjmp	.+126    	; 0x2da8 <Accelerometor_ReadAxis+0x6fc>
	else if (__tmp > 65535)
    2d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2c:	78 85       	ldd	r23, Y+8	; 0x08
    2d2e:	89 85       	ldd	r24, Y+9	; 0x09
    2d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	3f ef       	ldi	r19, 0xFF	; 255
    2d36:	4f e7       	ldi	r20, 0x7F	; 127
    2d38:	57 e4       	ldi	r21, 0x47	; 71
    2d3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d3e:	18 16       	cp	r1, r24
    2d40:	4c f5       	brge	.+82     	; 0x2d94 <Accelerometor_ReadAxis+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	40 e2       	ldi	r20, 0x20	; 32
    2d50:	51 e4       	ldi	r21, 0x41	; 65
    2d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	bc 01       	movw	r22, r24
    2d5c:	cd 01       	movw	r24, r26
    2d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	9e 83       	std	Y+6, r25	; 0x06
    2d68:	8d 83       	std	Y+5, r24	; 0x05
    2d6a:	0f c0       	rjmp	.+30     	; 0x2d8a <Accelerometor_ReadAxis+0x6de>
    2d6c:	8c e2       	ldi	r24, 0x2C	; 44
    2d6e:	91 e0       	ldi	r25, 0x01	; 1
    2d70:	9c 83       	std	Y+4, r25	; 0x04
    2d72:	8b 83       	std	Y+3, r24	; 0x03
    2d74:	8b 81       	ldd	r24, Y+3	; 0x03
    2d76:	9c 81       	ldd	r25, Y+4	; 0x04
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <Accelerometor_ReadAxis+0x6cc>
    2d7c:	9c 83       	std	Y+4, r25	; 0x04
    2d7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d80:	8d 81       	ldd	r24, Y+5	; 0x05
    2d82:	9e 81       	ldd	r25, Y+6	; 0x06
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	9e 83       	std	Y+6, r25	; 0x06
    2d88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	69 f7       	brne	.-38     	; 0x2d6c <Accelerometor_ReadAxis+0x6c0>
    2d92:	14 c0       	rjmp	.+40     	; 0x2dbc <Accelerometor_ReadAxis+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d94:	6f 81       	ldd	r22, Y+7	; 0x07
    2d96:	78 85       	ldd	r23, Y+8	; 0x08
    2d98:	89 85       	ldd	r24, Y+9	; 0x09
    2d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	9e 83       	std	Y+6, r25	; 0x06
    2da6:	8d 83       	std	Y+5, r24	; 0x05
    2da8:	8d 81       	ldd	r24, Y+5	; 0x05
    2daa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dac:	9a 83       	std	Y+2, r25	; 0x02
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	9a 81       	ldd	r25, Y+2	; 0x02
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	f1 f7       	brne	.-4      	; 0x2db4 <Accelerometor_ReadAxis+0x708>
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	Ptr_Acc -> X_Axis= (X_Axis_Read);
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e7 5a       	subi	r30, 0xA7	; 167
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	80 81       	ld	r24, Z
    2dc4:	91 81       	ldd	r25, Z+1	; 0x01
    2dc6:	cc 01       	movw	r24, r24
    2dc8:	a0 e0       	ldi	r26, 0x00	; 0
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	fe 01       	movw	r30, r28
    2dda:	e4 5a       	subi	r30, 0xA4	; 164
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	01 90       	ld	r0, Z+
    2de0:	f0 81       	ld	r31, Z
    2de2:	e0 2d       	mov	r30, r0
    2de4:	84 83       	std	Z+4, r24	; 0x04
    2de6:	95 83       	std	Z+5, r25	; 0x05
    2de8:	a6 83       	std	Z+6, r26	; 0x06
    2dea:	b7 83       	std	Z+7, r27	; 0x07
	Ptr_Acc -> Y_Axis= (Y_Axis_Read);
    2dec:	fe 01       	movw	r30, r28
    2dee:	e9 5a       	subi	r30, 0xA9	; 169
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	80 81       	ld	r24, Z
    2df4:	91 81       	ldd	r25, Z+1	; 0x01
    2df6:	cc 01       	movw	r24, r24
    2df8:	a0 e0       	ldi	r26, 0x00	; 0
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e4 5a       	subi	r30, 0xA4	; 164
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	01 90       	ld	r0, Z+
    2e10:	f0 81       	ld	r31, Z
    2e12:	e0 2d       	mov	r30, r0
    2e14:	80 87       	std	Z+8, r24	; 0x08
    2e16:	91 87       	std	Z+9, r25	; 0x09
    2e18:	a2 87       	std	Z+10, r26	; 0x0a
    2e1a:	b3 87       	std	Z+11, r27	; 0x0b
	Ptr_Acc -> Z_Axis= (Z_Axis_Read);
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	eb 5a       	subi	r30, 0xAB	; 171
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	cc 01       	movw	r24, r24
    2e28:	a0 e0       	ldi	r26, 0x00	; 0
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	bc 01       	movw	r22, r24
    2e2e:	cd 01       	movw	r24, r26
    2e30:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e4 5a       	subi	r30, 0xA4	; 164
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	01 90       	ld	r0, Z+
    2e40:	f0 81       	ld	r31, Z
    2e42:	e0 2d       	mov	r30, r0
    2e44:	84 87       	std	Z+12, r24	; 0x0c
    2e46:	95 87       	std	Z+13, r25	; 0x0d
    2e48:	a6 87       	std	Z+14, r26	; 0x0e
    2e4a:	b7 87       	std	Z+15, r27	; 0x0f
}
    2e4c:	c3 5a       	subi	r28, 0xA3	; 163
    2e4e:	df 4f       	sbci	r29, 0xFF	; 255
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	1f 91       	pop	r17
    2e60:	0f 91       	pop	r16
    2e62:	08 95       	ret

00002e64 <UART_init>:

#include "uart.h"
#define  BAUD_RATE (9600.0)

	void UART_init(void)
	{
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <UART_init+0x6>
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
		
		uint16 UBRR_Value= ((F_CPU /(8.0 *BAUD_RATE ) ) - 1) +0.5; 
    2e6e:	8b e9       	ldi	r24, 0x9B	; 155
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01
		/* Set U2x " Double Speed Mode " */
		SET_BIT(UCSRA,U2X);
    2e76:	ab e2       	ldi	r26, 0x2B	; 43
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	eb e2       	ldi	r30, 0x2B	; 43
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	82 60       	ori	r24, 0x02	; 2
    2e82:	8c 93       	st	X, r24
		
		/* Enable Rx , Tx */
		UCSRB |= (1<<TXEN) | (1<<RXEN);
    2e84:	aa e2       	ldi	r26, 0x2A	; 42
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	ea e2       	ldi	r30, 0x2A	; 42
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	88 61       	ori	r24, 0x18	; 24
    2e90:	8c 93       	st	X, r24
		
		UCSRC |= (1<<URSEL) |(1<<UCSZ0) | (1<<UCSZ1);
    2e92:	a0 e4       	ldi	r26, 0x40	; 64
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	e0 e4       	ldi	r30, 0x40	; 64
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	86 68       	ori	r24, 0x86	; 134
    2e9e:	8c 93       	st	X, r24
		
		UBRRL = UBRR_Value & 0x00FF;
    2ea0:	e9 e2       	ldi	r30, 0x29	; 41
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	80 83       	st	Z, r24
		UBRRH = UBRR_Value >>8;
    2ea8:	e0 e4       	ldi	r30, 0x40	; 64
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb0:	89 2f       	mov	r24, r25
    2eb2:	99 27       	eor	r25, r25
    2eb4:	80 83       	st	Z, r24
	}
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <UART_SendByte>:
	
	void UART_SendByte(uint8 Data)
	{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	0f 92       	push	r0
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	89 83       	std	Y+1, r24	; 0x01
		/* if Send Buffer is not empty wait until it being  empty */
		while (BIT_IS_CLEAR(UCSRA,UDRE))
    2ecc:	eb e2       	ldi	r30, 0x2B	; 43
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	88 2f       	mov	r24, r24
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	80 72       	andi	r24, 0x20	; 32
    2ed8:	90 70       	andi	r25, 0x00	; 0
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	b9 f3       	breq	.-18     	; 0x2ecc <UART_SendByte+0xc>
		{
			
		}	
		UDR = Data;
    2ede:	ec e2       	ldi	r30, 0x2C	; 44
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	80 83       	st	Z, r24
		
	}
    2ee6:	0f 90       	pop	r0
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	08 95       	ret

00002eee <UART_SendArray>:
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
    2eee:	df 93       	push	r29
    2ef0:	cf 93       	push	r28
    2ef2:	00 d0       	rcall	.+0      	; 0x2ef4 <UART_SendArray+0x6>
    2ef4:	00 d0       	rcall	.+0      	; 0x2ef6 <UART_SendArray+0x8>
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	9b 83       	std	Y+3, r25	; 0x03
    2efc:	8a 83       	std	Y+2, r24	; 0x02
    2efe:	6c 83       	std	Y+4, r22	; 0x04
		uint8 i = 0;
    2f00:	19 82       	std	Y+1, r1	; 0x01
		
		for(i=0;i<size;i++)
    2f02:	19 82       	std	Y+1, r1	; 0x01
    2f04:	0e c0       	rjmp	.+28     	; 0x2f22 <UART_SendArray+0x34>
		{
			UART_SendByte(Data[i]);
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	28 2f       	mov	r18, r24
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f10:	fc 01       	movw	r30, r24
    2f12:	e2 0f       	add	r30, r18
    2f14:	f3 1f       	adc	r31, r19
    2f16:	80 81       	ld	r24, Z
    2f18:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_SendByte>
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
		uint8 i = 0;
		
		for(i=0;i<size;i++)
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	8f 5f       	subi	r24, 0xFF	; 255
    2f20:	89 83       	std	Y+1, r24	; 0x01
    2f22:	99 81       	ldd	r25, Y+1	; 0x01
    2f24:	8c 81       	ldd	r24, Y+4	; 0x04
    2f26:	98 17       	cp	r25, r24
    2f28:	70 f3       	brcs	.-36     	; 0x2f06 <UART_SendArray+0x18>
		{
			UART_SendByte(Data[i]);
		}
	}
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <UART_recieveByte>:



uint8 UART_recieveByte(void)
{
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2f40:	eb e2       	ldi	r30, 0x2B	; 43
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	88 23       	and	r24, r24
    2f48:	dc f7       	brge	.-10     	; 0x2f40 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2f4a:	ec e2       	ldi	r30, 0x2C	; 44
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
}
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <__prologue_saves__>:
    2f56:	2f 92       	push	r2
    2f58:	3f 92       	push	r3
    2f5a:	4f 92       	push	r4
    2f5c:	5f 92       	push	r5
    2f5e:	6f 92       	push	r6
    2f60:	7f 92       	push	r7
    2f62:	8f 92       	push	r8
    2f64:	9f 92       	push	r9
    2f66:	af 92       	push	r10
    2f68:	bf 92       	push	r11
    2f6a:	cf 92       	push	r12
    2f6c:	df 92       	push	r13
    2f6e:	ef 92       	push	r14
    2f70:	ff 92       	push	r15
    2f72:	0f 93       	push	r16
    2f74:	1f 93       	push	r17
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	ca 1b       	sub	r28, r26
    2f80:	db 0b       	sbc	r29, r27
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	09 94       	ijmp

00002f8e <__epilogue_restores__>:
    2f8e:	2a 88       	ldd	r2, Y+18	; 0x12
    2f90:	39 88       	ldd	r3, Y+17	; 0x11
    2f92:	48 88       	ldd	r4, Y+16	; 0x10
    2f94:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f96:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f98:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fa0:	b9 84       	ldd	r11, Y+9	; 0x09
    2fa2:	c8 84       	ldd	r12, Y+8	; 0x08
    2fa4:	df 80       	ldd	r13, Y+7	; 0x07
    2fa6:	ee 80       	ldd	r14, Y+6	; 0x06
    2fa8:	fd 80       	ldd	r15, Y+5	; 0x05
    2faa:	0c 81       	ldd	r16, Y+4	; 0x04
    2fac:	1b 81       	ldd	r17, Y+3	; 0x03
    2fae:	aa 81       	ldd	r26, Y+2	; 0x02
    2fb0:	b9 81       	ldd	r27, Y+1	; 0x01
    2fb2:	ce 0f       	add	r28, r30
    2fb4:	d1 1d       	adc	r29, r1
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	ed 01       	movw	r28, r26
    2fc2:	08 95       	ret

00002fc4 <itoa>:
    2fc4:	fb 01       	movw	r30, r22
    2fc6:	9f 01       	movw	r18, r30
    2fc8:	e8 94       	clt
    2fca:	42 30       	cpi	r20, 0x02	; 2
    2fcc:	c4 f0       	brlt	.+48     	; 0x2ffe <itoa+0x3a>
    2fce:	45 32       	cpi	r20, 0x25	; 37
    2fd0:	b4 f4       	brge	.+44     	; 0x2ffe <itoa+0x3a>
    2fd2:	4a 30       	cpi	r20, 0x0A	; 10
    2fd4:	29 f4       	brne	.+10     	; 0x2fe0 <itoa+0x1c>
    2fd6:	97 fb       	bst	r25, 7
    2fd8:	1e f4       	brtc	.+6      	; 0x2fe0 <itoa+0x1c>
    2fda:	90 95       	com	r25
    2fdc:	81 95       	neg	r24
    2fde:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe0:	64 2f       	mov	r22, r20
    2fe2:	77 27       	eor	r23, r23
    2fe4:	0e 94 13 18 	call	0x3026	; 0x3026 <__udivmodhi4>
    2fe8:	80 5d       	subi	r24, 0xD0	; 208
    2fea:	8a 33       	cpi	r24, 0x3A	; 58
    2fec:	0c f0       	brlt	.+2      	; 0x2ff0 <itoa+0x2c>
    2fee:	89 5d       	subi	r24, 0xD9	; 217
    2ff0:	81 93       	st	Z+, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	a1 f7       	brne	.-24     	; 0x2fe0 <itoa+0x1c>
    2ff8:	16 f4       	brtc	.+4      	; 0x2ffe <itoa+0x3a>
    2ffa:	5d e2       	ldi	r21, 0x2D	; 45
    2ffc:	51 93       	st	Z+, r21
    2ffe:	10 82       	st	Z, r1
    3000:	c9 01       	movw	r24, r18
    3002:	0c 94 03 18 	jmp	0x3006	; 0x3006 <strrev>

00003006 <strrev>:
    3006:	dc 01       	movw	r26, r24
    3008:	fc 01       	movw	r30, r24
    300a:	67 2f       	mov	r22, r23
    300c:	71 91       	ld	r23, Z+
    300e:	77 23       	and	r23, r23
    3010:	e1 f7       	brne	.-8      	; 0x300a <strrev+0x4>
    3012:	32 97       	sbiw	r30, 0x02	; 2
    3014:	04 c0       	rjmp	.+8      	; 0x301e <strrev+0x18>
    3016:	7c 91       	ld	r23, X
    3018:	6d 93       	st	X+, r22
    301a:	70 83       	st	Z, r23
    301c:	62 91       	ld	r22, -Z
    301e:	ae 17       	cp	r26, r30
    3020:	bf 07       	cpc	r27, r31
    3022:	c8 f3       	brcs	.-14     	; 0x3016 <strrev+0x10>
    3024:	08 95       	ret

00003026 <__udivmodhi4>:
    3026:	aa 1b       	sub	r26, r26
    3028:	bb 1b       	sub	r27, r27
    302a:	51 e1       	ldi	r21, 0x11	; 17
    302c:	07 c0       	rjmp	.+14     	; 0x303c <__udivmodhi4_ep>

0000302e <__udivmodhi4_loop>:
    302e:	aa 1f       	adc	r26, r26
    3030:	bb 1f       	adc	r27, r27
    3032:	a6 17       	cp	r26, r22
    3034:	b7 07       	cpc	r27, r23
    3036:	10 f0       	brcs	.+4      	; 0x303c <__udivmodhi4_ep>
    3038:	a6 1b       	sub	r26, r22
    303a:	b7 0b       	sbc	r27, r23

0000303c <__udivmodhi4_ep>:
    303c:	88 1f       	adc	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	5a 95       	dec	r21
    3042:	a9 f7       	brne	.-22     	; 0x302e <__udivmodhi4_loop>
    3044:	80 95       	com	r24
    3046:	90 95       	com	r25
    3048:	bc 01       	movw	r22, r24
    304a:	cd 01       	movw	r24, r26
    304c:	08 95       	ret

0000304e <_exit>:
    304e:	f8 94       	cli

00003050 <__stop_program>:
    3050:	ff cf       	rjmp	.-2      	; 0x3050 <__stop_program>
