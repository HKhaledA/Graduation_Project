
ACC_HAMDY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003518  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001aa  00800060  00003518  000035ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080020a  0080020a  00003756  2**0
                  ALLOC
  3 .stab         0000261c  00000000  00000000  00003758  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000137b  00000000  00000000  00005d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000070ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000072af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  000074c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00009ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000afa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000c2b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000c490  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000c797  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d1b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 31       	cpi	r26, 0x1E	; 30
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <main>
      8a:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 eb       	ldi	r26, 0xB2	; 178
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 eb       	ldi	r24, 0xB2	; 178
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 eb       	ldi	r22, 0xB2	; 178
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e0 19 	jmp	0x33c0	; 0x33c0 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e6 54       	subi	r30, 0x46	; 70
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TWI_Init>:

#include "i2c.h"
#include "LCD.h"

void TWI_Init(I2C_Prescaler Prescale , I2C_interruptState int_state , uint32 F_SCL , uint8 Address)
{
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	29 97       	sbiw	r28, 0x09	; 9
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	6a 83       	std	Y+2, r22	; 0x02
     f06:	2b 83       	std	Y+3, r18	; 0x03
     f08:	3c 83       	std	Y+4, r19	; 0x04
     f0a:	4d 83       	std	Y+5, r20	; 0x05
     f0c:	5e 83       	std	Y+6, r21	; 0x06
     f0e:	0f 83       	std	Y+7, r16	; 0x07
	TWAR = Address<<1;
     f10:	e2 e2       	ldi	r30, 0x22	; 34
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	8f 81       	ldd	r24, Y+7	; 0x07
     f16:	88 0f       	add	r24, r24
     f18:	80 83       	st	Z, r24
	 /*  Calculating Bit Rate: */
	switch (Prescale)
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	39 87       	std	Y+9, r19	; 0x09
     f22:	28 87       	std	Y+8, r18	; 0x08
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	99 85       	ldd	r25, Y+9	; 0x09
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	91 05       	cpc	r25, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <TWI_Init+0x46>
     f2e:	45 c0       	rjmp	.+138    	; 0xfba <TWI_Init+0xd0>
     f30:	e8 85       	ldd	r30, Y+8	; 0x08
     f32:	f9 85       	ldd	r31, Y+9	; 0x09
     f34:	e2 30       	cpi	r30, 0x02	; 2
     f36:	f1 05       	cpc	r31, r1
     f38:	34 f4       	brge	.+12     	; 0xf46 <TWI_Init+0x5c>
     f3a:	28 85       	ldd	r18, Y+8	; 0x08
     f3c:	39 85       	ldd	r19, Y+9	; 0x09
     f3e:	21 15       	cp	r18, r1
     f40:	31 05       	cpc	r19, r1
     f42:	71 f0       	breq	.+28     	; 0xf60 <TWI_Init+0x76>
     f44:	e8 c0       	rjmp	.+464    	; 0x1116 <TWI_Init+0x22c>
     f46:	88 85       	ldd	r24, Y+8	; 0x08
     f48:	99 85       	ldd	r25, Y+9	; 0x09
     f4a:	82 30       	cpi	r24, 0x02	; 2
     f4c:	91 05       	cpc	r25, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <TWI_Init+0x68>
     f50:	65 c0       	rjmp	.+202    	; 0x101c <TWI_Init+0x132>
     f52:	e8 85       	ldd	r30, Y+8	; 0x08
     f54:	f9 85       	ldd	r31, Y+9	; 0x09
     f56:	e3 30       	cpi	r30, 0x03	; 3
     f58:	f1 05       	cpc	r31, r1
     f5a:	09 f4       	brne	.+2      	; 0xf5e <TWI_Init+0x74>
     f5c:	9a c0       	rjmp	.+308    	; 0x1092 <TWI_Init+0x1a8>
     f5e:	db c0       	rjmp	.+438    	; 0x1116 <TWI_Init+0x22c>
	{
		case I2C_PRESCALE1:
								TWBR = (uint8) (((float)F_CPU/(2.0*F_SCL)) -8);
     f60:	00 e2       	ldi	r16, 0x20	; 32
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	6b 81       	ldd	r22, Y+3	; 0x03
     f66:	7c 81       	ldd	r23, Y+4	; 0x04
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
     f70:	9b 01       	movw	r18, r22
     f72:	ac 01       	movw	r20, r24
     f74:	ca 01       	movw	r24, r20
     f76:	b9 01       	movw	r22, r18
     f78:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	9c 01       	movw	r18, r24
     f82:	ad 01       	movw	r20, r26
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	7b e1       	ldi	r23, 0x1B	; 27
     f88:	87 e3       	ldi	r24, 0x37	; 55
     f8a:	9b e4       	ldi	r25, 0x4B	; 75
     f8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	f8 01       	movw	r30, r16
     fb6:	80 83       	st	Z, r24
     fb8:	ae c0       	rjmp	.+348    	; 0x1116 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE4:
								TWBR = (uint8) (((float)F_CPU/(8.0*F_SCL)) -2);
     fba:	00 e2       	ldi	r16, 0x20	; 32
     fbc:	10 e0       	ldi	r17, 0x00	; 0
     fbe:	6b 81       	ldd	r22, Y+3	; 0x03
     fc0:	7c 81       	ldd	r23, Y+4	; 0x04
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	51 e4       	ldi	r21, 0x41	; 65
     fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9c 01       	movw	r18, r24
     fe4:	ad 01       	movw	r20, r26
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	7b e1       	ldi	r23, 0x1B	; 27
     fea:	87 e3       	ldi	r24, 0x37	; 55
     fec:	9b e4       	ldi	r25, 0x4B	; 75
     fee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	bc 01       	movw	r22, r24
     ff8:	cd 01       	movw	r24, r26
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	50 e4       	ldi	r21, 0x40	; 64
    1002:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	f8 01       	movw	r30, r16
    1018:	80 83       	st	Z, r24
    101a:	7d c0       	rjmp	.+250    	; 0x1116 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE16:
								TWBR = (uint8) (((float)F_CPU/(32*F_SCL)) -0.5);
    101c:	00 e2       	ldi	r16, 0x20	; 32
    101e:	10 e0       	ldi	r17, 0x00	; 0
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	ad 81       	ldd	r26, Y+5	; 0x05
    1026:	be 81       	ldd	r27, Y+6	; 0x06
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	aa 1f       	adc	r26, r26
    102e:	bb 1f       	adc	r27, r27
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	aa 1f       	adc	r26, r26
    1036:	bb 1f       	adc	r27, r27
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	aa 1f       	adc	r26, r26
    103e:	bb 1f       	adc	r27, r27
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	aa 1f       	adc	r26, r26
    1046:	bb 1f       	adc	r27, r27
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	aa 1f       	adc	r26, r26
    104e:	bb 1f       	adc	r27, r27
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1058:	9b 01       	movw	r18, r22
    105a:	ac 01       	movw	r20, r24
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	7b e1       	ldi	r23, 0x1B	; 27
    1060:	87 e3       	ldi	r24, 0x37	; 55
    1062:	9b e4       	ldi	r25, 0x4B	; 75
    1064:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	5f e3       	ldi	r21, 0x3F	; 63
    1078:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	f8 01       	movw	r30, r16
    108e:	80 83       	st	Z, r24
    1090:	42 c0       	rjmp	.+132    	; 0x1116 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE64:
								TWBR = (uint8) (((float)F_CPU/(128*F_SCL)) -0.125);
    1092:	00 e2       	ldi	r16, 0x20	; 32
    1094:	10 e0       	ldi	r17, 0x00	; 0
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	ad 81       	ldd	r26, Y+5	; 0x05
    109c:	be 81       	ldd	r27, Y+6	; 0x06
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	aa 1f       	adc	r26, r26
    10a4:	bb 1f       	adc	r27, r27
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	aa 1f       	adc	r26, r26
    10ac:	bb 1f       	adc	r27, r27
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	aa 1f       	adc	r26, r26
    10b4:	bb 1f       	adc	r27, r27
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	aa 1f       	adc	r26, r26
    10bc:	bb 1f       	adc	r27, r27
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	aa 1f       	adc	r26, r26
    10c4:	bb 1f       	adc	r27, r27
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	aa 1f       	adc	r26, r26
    10cc:	bb 1f       	adc	r27, r27
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	aa 1f       	adc	r26, r26
    10d4:	bb 1f       	adc	r27, r27
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    10de:	9b 01       	movw	r18, r22
    10e0:	ac 01       	movw	r20, r24
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	7b e1       	ldi	r23, 0x1B	; 27
    10e6:	87 e3       	ldi	r24, 0x37	; 55
    10e8:	9b e4       	ldi	r25, 0x4B	; 75
    10ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	bc 01       	movw	r22, r24
    10f4:	cd 01       	movw	r24, r26
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	5e e3       	ldi	r21, 0x3E	; 62
    10fe:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	f8 01       	movw	r30, r16
    1114:	80 83       	st	Z, r24
		default:
					break;
	}
   
	
	TWSR |= (Prescale & 0x03);
    1116:	a1 e2       	ldi	r26, 0x21	; 33
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e1 e2       	ldi	r30, 0x21	; 33
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	98 2f       	mov	r25, r24
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	83 70       	andi	r24, 0x03	; 3
    1126:	89 2b       	or	r24, r25
    1128:	8c 93       	st	X, r24
	TWCR |= (1<<TWEN) | (int_state & 0x01) ;
    112a:	a6 e5       	ldi	r26, 0x56	; 86
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e6 e5       	ldi	r30, 0x56	; 86
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	98 2f       	mov	r25, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	81 70       	andi	r24, 0x01	; 1
    113a:	84 60       	ori	r24, 0x04	; 4
    113c:	89 2b       	or	r24, r25
    113e:	8c 93       	st	X, r24
}
    1140:	29 96       	adiw	r28, 0x09	; 9
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	08 95       	ret

00001156 <TWI_Start>:

void TWI_Start(void)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
    115e:	e6 e5       	ldi	r30, 0x56	; 86
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	84 ea       	ldi	r24, 0xA4	; 164
    1164:	80 83       	st	Z, r24
 
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    1166:	e6 e5       	ldi	r30, 0x56	; 86
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	88 23       	and	r24, r24
    116e:	dc f7       	brge	.-10     	; 0x1166 <TWI_Start+0x10>
}
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <TWI_Stop>:

void TWI_Stop(void)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
    117e:	e6 e5       	ldi	r30, 0x56	; 86
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	84 e9       	ldi	r24, 0x94	; 148
    1184:	80 83       	st	Z, r24
 
}
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <TWI_Write>:

void TWI_Write(uint8 data)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	0f 92       	push	r0
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1198:	e3 e2       	ldi	r30, 0x23	; 35
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
   TWCR = (1<<TWEN) | (1<<TWINT);
    11a0:	e6 e5       	ldi	r30, 0x56	; 86
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	84 e8       	ldi	r24, 0x84	; 132
    11a6:	80 83       	st	Z, r24
   
   /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    11a8:	e6 e5       	ldi	r30, 0x56	; 86
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	88 23       	and	r24, r24
    11b0:	dc f7       	brge	.-10     	; 0x11a8 <TWI_Write+0x1c>
}
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 

    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);    
    11c2:	e6 e5       	ldi	r30, 0x56	; 86
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	84 ec       	ldi	r24, 0xC4	; 196
    11c8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    11ca:	e6 e5       	ldi	r30, 0x56	; 86
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	88 23       	and	r24, r24
    11d2:	dc f7       	brge	.-10     	; 0x11ca <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    11d4:	e3 e2       	ldi	r30, 0x23	; 35
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
}
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62



		TWCR =(1<<TWEN) | (1<<TWINT);
    11e8:	e6 e5       	ldi	r30, 0x56	; 86
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	84 e8       	ldi	r24, 0x84	; 132
    11ee:	80 83       	st	Z, r24
/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
while(BIT_IS_CLEAR(TWCR,TWINT));
    11f0:	e6 e5       	ldi	r30, 0x56	; 86
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	88 23       	and	r24, r24
    11f8:	dc f7       	brge	.-10     	; 0x11f0 <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    11fa:	e3 e2       	ldi	r30, 0x23	; 35
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
}
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    120e:	e1 e2       	ldi	r30, 0x21	; 33
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	88 7f       	andi	r24, 0xF8	; 248
}
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <i2C_writeReg>:




void i2C_writeReg(uint8 SL_Address,uint8 Reg_Address ,uint8 Data )
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <i2C_writeReg+0x6>
    1222:	0f 92       	push	r0
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	6a 83       	std	Y+2, r22	; 0x02
    122c:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();
    122e:	0e 94 ab 08 	call	0x1156	; 0x1156 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    1232:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    1236:	88 30       	cpi	r24, 0x08	; 8
    1238:	19 f0       	breq	.+6      	; 0x1240 <i2C_writeReg+0x24>
	{
		TWI_Stop();
    123a:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
    123e:	21 c0       	rjmp	.+66     	; 0x1282 <i2C_writeReg+0x66>
		return ;
	}
	
	TWI_Write((SL_Address<<1));
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	88 0f       	add	r24, r24
    1244:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_Write>
if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    1248:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    124c:	88 31       	cpi	r24, 0x18	; 24
    124e:	19 f0       	breq	.+6      	; 0x1256 <i2C_writeReg+0x3a>
	{

		TWI_Stop();
    1250:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
    1254:	16 c0       	rjmp	.+44     	; 0x1282 <i2C_writeReg+0x66>
		return ;
	}
	
	TWI_Write(Reg_Address);
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    125c:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    1260:	88 32       	cpi	r24, 0x28	; 40
    1262:	19 f0       	breq	.+6      	; 0x126a <i2C_writeReg+0x4e>
	{
		TWI_Stop();
    1264:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
    1268:	0c c0       	rjmp	.+24     	; 0x1282 <i2C_writeReg+0x66>
		return ;
	}
	
TWI_Write(Data);
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1270:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    1274:	88 32       	cpi	r24, 0x28	; 40
    1276:	19 f0       	breq	.+6      	; 0x127e <i2C_writeReg+0x62>
	{

		TWI_Stop();
    1278:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <i2C_writeReg+0x66>
		return ;
	}
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
    127e:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
	return ;

}
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <I2C_ByteRead>:

 

 
uint8 I2C_ByteRead(uint8 SL_Address , uint8 Reg_Address)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <I2C_ByteRead+0x6>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <I2C_ByteRead+0x8>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	8a 83       	std	Y+2, r24	; 0x02
    129c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Data=0;
    129e:	19 82       	std	Y+1, r1	; 0x01
	
	
	TWI_Start();
    12a0:	0e 94 ab 08 	call	0x1156	; 0x1156 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    12a4:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    12a8:	88 30       	cpi	r24, 0x08	; 8
    12aa:	29 f0       	breq	.+10     	; 0x12b6 <I2C_ByteRead+0x28>
	{
		TWI_Stop();
    12ac:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
		return 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	8c 83       	std	Y+4, r24	; 0x04
    12b4:	3c c0       	rjmp	.+120    	; 0x132e <I2C_ByteRead+0xa0>
	}
	
	
	TWI_Write((SL_Address<<1));
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	88 0f       	add	r24, r24
    12ba:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    12be:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    12c2:	88 31       	cpi	r24, 0x18	; 24
    12c4:	29 f0       	breq	.+10     	; 0x12d0 <I2C_ByteRead+0x42>
	{

		TWI_Stop();
    12c6:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
		return 2;
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	8c 83       	std	Y+4, r24	; 0x04
    12ce:	2f c0       	rjmp	.+94     	; 0x132e <I2C_ByteRead+0xa0>
	}
	
	TWI_Write(Reg_Address);
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    12d6:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    12da:	88 32       	cpi	r24, 0x28	; 40
    12dc:	29 f0       	breq	.+10     	; 0x12e8 <I2C_ByteRead+0x5a>
	{
		TWI_Stop();
    12de:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
		return 3;
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	8c 83       	std	Y+4, r24	; 0x04
    12e6:	23 c0       	rjmp	.+70     	; 0x132e <I2C_ByteRead+0xa0>
	}
	
	TWI_Start();
    12e8:	0e 94 ab 08 	call	0x1156	; 0x1156 <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    12ec:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    12f0:	80 31       	cpi	r24, 0x10	; 16
    12f2:	29 f0       	breq	.+10     	; 0x12fe <I2C_ByteRead+0x70>
	{
		TWI_Stop();
    12f4:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
		return 4;
    12f8:	84 e0       	ldi	r24, 0x04	; 4
    12fa:	8c 83       	std	Y+4, r24	; 0x04
    12fc:	18 c0       	rjmp	.+48     	; 0x132e <I2C_ByteRead+0xa0>
	}
	
	TWI_Write((SL_Address<<1) | READ);
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	81 60       	ori	r24, 0x01	; 1
    130a:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    130e:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    1312:	80 34       	cpi	r24, 0x40	; 64
    1314:	29 f0       	breq	.+10     	; 0x1320 <I2C_ByteRead+0x92>
	{

		TWI_Stop();
    1316:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
		return 5;
    131a:	85 e0       	ldi	r24, 0x05	; 5
    131c:	8c 83       	std	Y+4, r24	; 0x04
    131e:	07 c0       	rjmp	.+14     	; 0x132e <I2C_ByteRead+0xa0>
	}
	Data=TWI_Read_With_NACK();
    1320:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <TWI_Read_With_NACK>
    1324:	89 83       	std	Y+1, r24	; 0x01
	TWI_Stop();
    1326:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
	
	return Data;		
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	8c 83       	std	Y+4, r24	; 0x04
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <LCD_Init>:
#include <util/delay.h>
#include "BIT_MATH.h"
#include"lcd.h"

void LCD_Init(void)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	e8 97       	sbiw	r28, 0x38	; 56
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	a0 e2       	ldi	r26, 0x20	; 32
    1358:	b2 e4       	ldi	r27, 0x42	; 66
    135a:	8d ab       	std	Y+53, r24	; 0x35
    135c:	9e ab       	std	Y+54, r25	; 0x36
    135e:	af ab       	std	Y+55, r26	; 0x37
    1360:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1362:	6d a9       	ldd	r22, Y+53	; 0x35
    1364:	7e a9       	ldd	r23, Y+54	; 0x36
    1366:	8f a9       	ldd	r24, Y+55	; 0x37
    1368:	98 ad       	ldd	r25, Y+56	; 0x38
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e8       	ldi	r19, 0x80	; 128
    136e:	4b e3       	ldi	r20, 0x3B	; 59
    1370:	55 e4       	ldi	r21, 0x45	; 69
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	89 ab       	std	Y+49, r24	; 0x31
    137c:	9a ab       	std	Y+50, r25	; 0x32
    137e:	ab ab       	std	Y+51, r26	; 0x33
    1380:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1382:	69 a9       	ldd	r22, Y+49	; 0x31
    1384:	7a a9       	ldd	r23, Y+50	; 0x32
    1386:	8b a9       	ldd	r24, Y+51	; 0x33
    1388:	9c a9       	ldd	r25, Y+52	; 0x34
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e8       	ldi	r20, 0x80	; 128
    1390:	5f e3       	ldi	r21, 0x3F	; 63
    1392:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1396:	88 23       	and	r24, r24
    1398:	2c f4       	brge	.+10     	; 0x13a4 <LCD_Init+0x66>
		__ticks = 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	98 ab       	std	Y+48, r25	; 0x30
    13a0:	8f a7       	std	Y+47, r24	; 0x2f
    13a2:	3f c0       	rjmp	.+126    	; 0x1422 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    13a4:	69 a9       	ldd	r22, Y+49	; 0x31
    13a6:	7a a9       	ldd	r23, Y+50	; 0x32
    13a8:	8b a9       	ldd	r24, Y+51	; 0x33
    13aa:	9c a9       	ldd	r25, Y+52	; 0x34
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	3f ef       	ldi	r19, 0xFF	; 255
    13b0:	4f e7       	ldi	r20, 0x7F	; 127
    13b2:	57 e4       	ldi	r21, 0x47	; 71
    13b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13b8:	18 16       	cp	r1, r24
    13ba:	4c f5       	brge	.+82     	; 0x140e <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13bc:	6d a9       	ldd	r22, Y+53	; 0x35
    13be:	7e a9       	ldd	r23, Y+54	; 0x36
    13c0:	8f a9       	ldd	r24, Y+55	; 0x37
    13c2:	98 ad       	ldd	r25, Y+56	; 0x38
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e2       	ldi	r20, 0x20	; 32
    13ca:	51 e4       	ldi	r21, 0x41	; 65
    13cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	98 ab       	std	Y+48, r25	; 0x30
    13e2:	8f a7       	std	Y+47, r24	; 0x2f
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <LCD_Init+0xc6>
    13e6:	8c e2       	ldi	r24, 0x2C	; 44
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	9e a7       	std	Y+46, r25	; 0x2e
    13ec:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    13f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <LCD_Init+0xb4>
    13f6:	9e a7       	std	Y+46, r25	; 0x2e
    13f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    13fc:	98 a9       	ldd	r25, Y+48	; 0x30
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	98 ab       	std	Y+48, r25	; 0x30
    1402:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1404:	8f a5       	ldd	r24, Y+47	; 0x2f
    1406:	98 a9       	ldd	r25, Y+48	; 0x30
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	69 f7       	brne	.-38     	; 0x13e6 <LCD_Init+0xa8>
    140c:	14 c0       	rjmp	.+40     	; 0x1436 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140e:	69 a9       	ldd	r22, Y+49	; 0x31
    1410:	7a a9       	ldd	r23, Y+50	; 0x32
    1412:	8b a9       	ldd	r24, Y+51	; 0x33
    1414:	9c a9       	ldd	r25, Y+52	; 0x34
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	98 ab       	std	Y+48, r25	; 0x30
    1420:	8f a7       	std	Y+47, r24	; 0x2f
    1422:	8f a5       	ldd	r24, Y+47	; 0x2f
    1424:	98 a9       	ldd	r25, Y+48	; 0x30
    1426:	9c a7       	std	Y+44, r25	; 0x2c
    1428:	8b a7       	std	Y+43, r24	; 0x2b
    142a:	8b a5       	ldd	r24, Y+43	; 0x2b
    142c:	9c a5       	ldd	r25, Y+44	; 0x2c
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <LCD_Init+0xf0>
    1432:	9c a7       	std	Y+44, r25	; 0x2c
    1434:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_SendCommand (0b00111100);
    1436:	8c e3       	ldi	r24, 0x3C	; 60
    1438:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_SendCommand>
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a0 e4       	ldi	r26, 0x40	; 64
    1442:	b0 e4       	ldi	r27, 0x40	; 64
    1444:	8f a3       	std	Y+39, r24	; 0x27
    1446:	98 a7       	std	Y+40, r25	; 0x28
    1448:	a9 a7       	std	Y+41, r26	; 0x29
    144a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144c:	6f a1       	ldd	r22, Y+39	; 0x27
    144e:	78 a5       	ldd	r23, Y+40	; 0x28
    1450:	89 a5       	ldd	r24, Y+41	; 0x29
    1452:	9a a5       	ldd	r25, Y+42	; 0x2a
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e8       	ldi	r19, 0x80	; 128
    1458:	4b e3       	ldi	r20, 0x3B	; 59
    145a:	55 e4       	ldi	r21, 0x45	; 69
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	8b a3       	std	Y+35, r24	; 0x23
    1466:	9c a3       	std	Y+36, r25	; 0x24
    1468:	ad a3       	std	Y+37, r26	; 0x25
    146a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    146c:	6b a1       	ldd	r22, Y+35	; 0x23
    146e:	7c a1       	ldd	r23, Y+36	; 0x24
    1470:	8d a1       	ldd	r24, Y+37	; 0x25
    1472:	9e a1       	ldd	r25, Y+38	; 0x26
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e8       	ldi	r20, 0x80	; 128
    147a:	5f e3       	ldi	r21, 0x3F	; 63
    147c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1480:	88 23       	and	r24, r24
    1482:	2c f4       	brge	.+10     	; 0x148e <LCD_Init+0x150>
		__ticks = 1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9a a3       	std	Y+34, r25	; 0x22
    148a:	89 a3       	std	Y+33, r24	; 0x21
    148c:	3f c0       	rjmp	.+126    	; 0x150c <LCD_Init+0x1ce>
	else if (__tmp > 65535)
    148e:	6b a1       	ldd	r22, Y+35	; 0x23
    1490:	7c a1       	ldd	r23, Y+36	; 0x24
    1492:	8d a1       	ldd	r24, Y+37	; 0x25
    1494:	9e a1       	ldd	r25, Y+38	; 0x26
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	3f ef       	ldi	r19, 0xFF	; 255
    149a:	4f e7       	ldi	r20, 0x7F	; 127
    149c:	57 e4       	ldi	r21, 0x47	; 71
    149e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	4c f5       	brge	.+82     	; 0x14f8 <LCD_Init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a6:	6f a1       	ldd	r22, Y+39	; 0x27
    14a8:	78 a5       	ldd	r23, Y+40	; 0x28
    14aa:	89 a5       	ldd	r24, Y+41	; 0x29
    14ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e2       	ldi	r20, 0x20	; 32
    14b4:	51 e4       	ldi	r21, 0x41	; 65
    14b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	bc 01       	movw	r22, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	9a a3       	std	Y+34, r25	; 0x22
    14cc:	89 a3       	std	Y+33, r24	; 0x21
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <LCD_Init+0x1b0>
    14d0:	8c e2       	ldi	r24, 0x2C	; 44
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	98 a3       	std	Y+32, r25	; 0x20
    14d6:	8f 8f       	std	Y+31, r24	; 0x1f
    14d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14da:	98 a1       	ldd	r25, Y+32	; 0x20
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <LCD_Init+0x19e>
    14e0:	98 a3       	std	Y+32, r25	; 0x20
    14e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e4:	89 a1       	ldd	r24, Y+33	; 0x21
    14e6:	9a a1       	ldd	r25, Y+34	; 0x22
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	9a a3       	std	Y+34, r25	; 0x22
    14ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ee:	89 a1       	ldd	r24, Y+33	; 0x21
    14f0:	9a a1       	ldd	r25, Y+34	; 0x22
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	69 f7       	brne	.-38     	; 0x14d0 <LCD_Init+0x192>
    14f6:	14 c0       	rjmp	.+40     	; 0x1520 <LCD_Init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f8:	6b a1       	ldd	r22, Y+35	; 0x23
    14fa:	7c a1       	ldd	r23, Y+36	; 0x24
    14fc:	8d a1       	ldd	r24, Y+37	; 0x25
    14fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	9a a3       	std	Y+34, r25	; 0x22
    150a:	89 a3       	std	Y+33, r24	; 0x21
    150c:	89 a1       	ldd	r24, Y+33	; 0x21
    150e:	9a a1       	ldd	r25, Y+34	; 0x22
    1510:	9e 8f       	std	Y+30, r25	; 0x1e
    1512:	8d 8f       	std	Y+29, r24	; 0x1d
    1514:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1516:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <LCD_Init+0x1da>
    151c:	9e 8f       	std	Y+30, r25	; 0x1e
    151e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);
	LCD_SendCommand(0b00001100);
    1520:	8c e0       	ldi	r24, 0x0C	; 12
    1522:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_SendCommand>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e4       	ldi	r26, 0x40	; 64
    152c:	b0 e4       	ldi	r27, 0x40	; 64
    152e:	89 8f       	std	Y+25, r24	; 0x19
    1530:	9a 8f       	std	Y+26, r25	; 0x1a
    1532:	ab 8f       	std	Y+27, r26	; 0x1b
    1534:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1536:	69 8d       	ldd	r22, Y+25	; 0x19
    1538:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e8       	ldi	r19, 0x80	; 128
    1542:	4b e3       	ldi	r20, 0x3B	; 59
    1544:	55 e4       	ldi	r21, 0x45	; 69
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	8d 8b       	std	Y+21, r24	; 0x15
    1550:	9e 8b       	std	Y+22, r25	; 0x16
    1552:	af 8b       	std	Y+23, r26	; 0x17
    1554:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1556:	6d 89       	ldd	r22, Y+21	; 0x15
    1558:	7e 89       	ldd	r23, Y+22	; 0x16
    155a:	8f 89       	ldd	r24, Y+23	; 0x17
    155c:	98 8d       	ldd	r25, Y+24	; 0x18
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e8       	ldi	r20, 0x80	; 128
    1564:	5f e3       	ldi	r21, 0x3F	; 63
    1566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    156a:	88 23       	and	r24, r24
    156c:	2c f4       	brge	.+10     	; 0x1578 <LCD_Init+0x23a>
		__ticks = 1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9c 8b       	std	Y+20, r25	; 0x14
    1574:	8b 8b       	std	Y+19, r24	; 0x13
    1576:	3f c0       	rjmp	.+126    	; 0x15f6 <LCD_Init+0x2b8>
	else if (__tmp > 65535)
    1578:	6d 89       	ldd	r22, Y+21	; 0x15
    157a:	7e 89       	ldd	r23, Y+22	; 0x16
    157c:	8f 89       	ldd	r24, Y+23	; 0x17
    157e:	98 8d       	ldd	r25, Y+24	; 0x18
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	3f ef       	ldi	r19, 0xFF	; 255
    1584:	4f e7       	ldi	r20, 0x7F	; 127
    1586:	57 e4       	ldi	r21, 0x47	; 71
    1588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    158c:	18 16       	cp	r1, r24
    158e:	4c f5       	brge	.+82     	; 0x15e2 <LCD_Init+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1590:	69 8d       	ldd	r22, Y+25	; 0x19
    1592:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1594:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1596:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9c 8b       	std	Y+20, r25	; 0x14
    15b6:	8b 8b       	std	Y+19, r24	; 0x13
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <LCD_Init+0x29a>
    15ba:	8c e2       	ldi	r24, 0x2C	; 44
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	9a 8b       	std	Y+18, r25	; 0x12
    15c0:	89 8b       	std	Y+17, r24	; 0x11
    15c2:	89 89       	ldd	r24, Y+17	; 0x11
    15c4:	9a 89       	ldd	r25, Y+18	; 0x12
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCD_Init+0x288>
    15ca:	9a 8b       	std	Y+18, r25	; 0x12
    15cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ce:	8b 89       	ldd	r24, Y+19	; 0x13
    15d0:	9c 89       	ldd	r25, Y+20	; 0x14
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	9c 8b       	std	Y+20, r25	; 0x14
    15d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	8b 89       	ldd	r24, Y+19	; 0x13
    15da:	9c 89       	ldd	r25, Y+20	; 0x14
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	69 f7       	brne	.-38     	; 0x15ba <LCD_Init+0x27c>
    15e0:	14 c0       	rjmp	.+40     	; 0x160a <LCD_Init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e2:	6d 89       	ldd	r22, Y+21	; 0x15
    15e4:	7e 89       	ldd	r23, Y+22	; 0x16
    15e6:	8f 89       	ldd	r24, Y+23	; 0x17
    15e8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9c 8b       	std	Y+20, r25	; 0x14
    15f4:	8b 8b       	std	Y+19, r24	; 0x13
    15f6:	8b 89       	ldd	r24, Y+19	; 0x13
    15f8:	9c 89       	ldd	r25, Y+20	; 0x14
    15fa:	98 8b       	std	Y+16, r25	; 0x10
    15fc:	8f 87       	std	Y+15, r24	; 0x0f
    15fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1600:	98 89       	ldd	r25, Y+16	; 0x10
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <LCD_Init+0x2c4>
    1606:	98 8b       	std	Y+16, r25	; 0x10
    1608:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	LCD_SendCommand (0b00000001);
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_SendCommand>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a0 e4       	ldi	r26, 0x40	; 64
    1616:	b0 e4       	ldi	r27, 0x40	; 64
    1618:	8b 87       	std	Y+11, r24	; 0x0b
    161a:	9c 87       	std	Y+12, r25	; 0x0c
    161c:	ad 87       	std	Y+13, r26	; 0x0d
    161e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1620:	6b 85       	ldd	r22, Y+11	; 0x0b
    1622:	7c 85       	ldd	r23, Y+12	; 0x0c
    1624:	8d 85       	ldd	r24, Y+13	; 0x0d
    1626:	9e 85       	ldd	r25, Y+14	; 0x0e
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e8       	ldi	r19, 0x80	; 128
    162c:	4b e3       	ldi	r20, 0x3B	; 59
    162e:	55 e4       	ldi	r21, 0x45	; 69
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	8f 83       	std	Y+7, r24	; 0x07
    163a:	98 87       	std	Y+8, r25	; 0x08
    163c:	a9 87       	std	Y+9, r26	; 0x09
    163e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1640:	6f 81       	ldd	r22, Y+7	; 0x07
    1642:	78 85       	ldd	r23, Y+8	; 0x08
    1644:	89 85       	ldd	r24, Y+9	; 0x09
    1646:	9a 85       	ldd	r25, Y+10	; 0x0a
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	2c f4       	brge	.+10     	; 0x1662 <LCD_Init+0x324>
		__ticks = 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	8d 83       	std	Y+5, r24	; 0x05
    1660:	3f c0       	rjmp	.+126    	; 0x16e0 <LCD_Init+0x3a2>
	else if (__tmp > 65535)
    1662:	6f 81       	ldd	r22, Y+7	; 0x07
    1664:	78 85       	ldd	r23, Y+8	; 0x08
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	9a 85       	ldd	r25, Y+10	; 0x0a
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	3f ef       	ldi	r19, 0xFF	; 255
    166e:	4f e7       	ldi	r20, 0x7F	; 127
    1670:	57 e4       	ldi	r21, 0x47	; 71
    1672:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1676:	18 16       	cp	r1, r24
    1678:	4c f5       	brge	.+82     	; 0x16cc <LCD_Init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167a:	6b 85       	ldd	r22, Y+11	; 0x0b
    167c:	7c 85       	ldd	r23, Y+12	; 0x0c
    167e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1680:	9e 85       	ldd	r25, Y+14	; 0x0e
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e2       	ldi	r20, 0x20	; 32
    1688:	51 e4       	ldi	r21, 0x41	; 65
    168a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9e 83       	std	Y+6, r25	; 0x06
    16a0:	8d 83       	std	Y+5, r24	; 0x05
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <LCD_Init+0x384>
    16a4:	8c e2       	ldi	r24, 0x2C	; 44
    16a6:	91 e0       	ldi	r25, 0x01	; 1
    16a8:	9c 83       	std	Y+4, r25	; 0x04
    16aa:	8b 83       	std	Y+3, r24	; 0x03
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCD_Init+0x372>
    16b4:	9c 83       	std	Y+4, r25	; 0x04
    16b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	69 f7       	brne	.-38     	; 0x16a4 <LCD_Init+0x366>
    16ca:	14 c0       	rjmp	.+40     	; 0x16f4 <LCD_Init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16cc:	6f 81       	ldd	r22, Y+7	; 0x07
    16ce:	78 85       	ldd	r23, Y+8	; 0x08
    16d0:	89 85       	ldd	r24, Y+9	; 0x09
    16d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	9e 81       	ldd	r25, Y+6	; 0x06
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCD_Init+0x3ae>
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    16f4:	e8 96       	adiw	r28, 0x38	; 56
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <LCD_SendCommand>:

 void LCD_SendCommand(u8 command)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	2f 97       	sbiw	r28, 0x0f	; 15
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    171c:	a8 e3       	ldi	r26, 0x38	; 56
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e8 e3       	ldi	r30, 0x38	; 56
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	8e 7f       	andi	r24, 0xFE	; 254
    1728:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    172a:	a8 e3       	ldi	r26, 0x38	; 56
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e8 e3       	ldi	r30, 0x38	; 56
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8d 7f       	andi	r24, 0xFD	; 253
    1736:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RS_Pin);
    1738:	a8 e3       	ldi	r26, 0x38	; 56
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e8 e3       	ldi	r30, 0x38	; 56
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	8b 7f       	andi	r24, 0xFB	; 251
    1744:	8c 93       	st	X, r24

	LCD_DataPORT= command;
    1746:	e2 e3       	ldi	r30, 0x32	; 50
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	8f 85       	ldd	r24, Y+15	; 0x0f
    174c:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    174e:	a8 e3       	ldi	r26, 0x38	; 56
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e8 e3       	ldi	r30, 0x38	; 56
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	81 60       	ori	r24, 0x01	; 1
    175a:	8c 93       	st	X, r24
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a0 e0       	ldi	r26, 0x00	; 0
    1762:	b0 e4       	ldi	r27, 0x40	; 64
    1764:	8b 87       	std	Y+11, r24	; 0x0b
    1766:	9c 87       	std	Y+12, r25	; 0x0c
    1768:	ad 87       	std	Y+13, r26	; 0x0d
    176a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176c:	6b 85       	ldd	r22, Y+11	; 0x0b
    176e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1770:	8d 85       	ldd	r24, Y+13	; 0x0d
    1772:	9e 85       	ldd	r25, Y+14	; 0x0e
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e8       	ldi	r19, 0x80	; 128
    1778:	4b e3       	ldi	r20, 0x3B	; 59
    177a:	55 e4       	ldi	r21, 0x45	; 69
    177c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	8f 83       	std	Y+7, r24	; 0x07
    1786:	98 87       	std	Y+8, r25	; 0x08
    1788:	a9 87       	std	Y+9, r26	; 0x09
    178a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e8       	ldi	r20, 0x80	; 128
    179a:	5f e3       	ldi	r21, 0x3F	; 63
    179c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17a0:	88 23       	and	r24, r24
    17a2:	2c f4       	brge	.+10     	; 0x17ae <LCD_SendCommand+0xa8>
		__ticks = 1;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
    17ac:	3f c0       	rjmp	.+126    	; 0x182c <LCD_SendCommand+0x126>
	else if (__tmp > 65535)
    17ae:	6f 81       	ldd	r22, Y+7	; 0x07
    17b0:	78 85       	ldd	r23, Y+8	; 0x08
    17b2:	89 85       	ldd	r24, Y+9	; 0x09
    17b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	3f ef       	ldi	r19, 0xFF	; 255
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	57 e4       	ldi	r21, 0x47	; 71
    17be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	4c f5       	brge	.+82     	; 0x1818 <LCD_SendCommand+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    17cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e2       	ldi	r20, 0x20	; 32
    17d4:	51 e4       	ldi	r21, 0x41	; 65
    17d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	9e 83       	std	Y+6, r25	; 0x06
    17ec:	8d 83       	std	Y+5, r24	; 0x05
    17ee:	0f c0       	rjmp	.+30     	; 0x180e <LCD_SendCommand+0x108>
    17f0:	8c e2       	ldi	r24, 0x2C	; 44
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	9c 83       	std	Y+4, r25	; 0x04
    17f6:	8b 83       	std	Y+3, r24	; 0x03
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <LCD_SendCommand+0xf6>
    1800:	9c 83       	std	Y+4, r25	; 0x04
    1802:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	69 f7       	brne	.-38     	; 0x17f0 <LCD_SendCommand+0xea>
    1816:	14 c0       	rjmp	.+40     	; 0x1840 <LCD_SendCommand+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1818:	6f 81       	ldd	r22, Y+7	; 0x07
    181a:	78 85       	ldd	r23, Y+8	; 0x08
    181c:	89 85       	ldd	r24, Y+9	; 0x09
    181e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	9a 81       	ldd	r25, Y+2	; 0x02
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <LCD_SendCommand+0x132>
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1840:	a8 e3       	ldi	r26, 0x38	; 56
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e8 e3       	ldi	r30, 0x38	; 56
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8e 7f       	andi	r24, 0xFE	; 254
    184c:	8c 93       	st	X, r24
}
    184e:	2f 96       	adiw	r28, 0x0f	; 15
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <LCD_Clear>:
 void LCD_Clear(void)
 {
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
	 LCD_SendCommand(0);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_SendCommand>
 }
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <LCD_WriteData>:

 void LCD_WriteData(u8 data)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	2f 97       	sbiw	r28, 0x0f	; 15
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    188a:	a8 e3       	ldi	r26, 0x38	; 56
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e8 e3       	ldi	r30, 0x38	; 56
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8e 7f       	andi	r24, 0xFE	; 254
    1896:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    1898:	a8 e3       	ldi	r26, 0x38	; 56
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e8 e3       	ldi	r30, 0x38	; 56
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8d 7f       	andi	r24, 0xFD	; 253
    18a4:	8c 93       	st	X, r24
	SETBIT (LCD_ControlPORT, RS_Pin);
    18a6:	a8 e3       	ldi	r26, 0x38	; 56
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e8 e3       	ldi	r30, 0x38	; 56
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	84 60       	ori	r24, 0x04	; 4
    18b2:	8c 93       	st	X, r24

	LCD_DataPORT= data;
    18b4:	e2 e3       	ldi	r30, 0x32	; 50
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ba:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    18bc:	a8 e3       	ldi	r26, 0x38	; 56
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e8 e3       	ldi	r30, 0x38	; 56
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	8c 93       	st	X, r24
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 e0       	ldi	r26, 0x00	; 0
    18d0:	b0 e4       	ldi	r27, 0x40	; 64
    18d2:	8b 87       	std	Y+11, r24	; 0x0b
    18d4:	9c 87       	std	Y+12, r25	; 0x0c
    18d6:	ad 87       	std	Y+13, r26	; 0x0d
    18d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18da:	6b 85       	ldd	r22, Y+11	; 0x0b
    18dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18de:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e8       	ldi	r19, 0x80	; 128
    18e6:	4b e3       	ldi	r20, 0x3B	; 59
    18e8:	55 e4       	ldi	r21, 0x45	; 69
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8f 83       	std	Y+7, r24	; 0x07
    18f4:	98 87       	std	Y+8, r25	; 0x08
    18f6:	a9 87       	std	Y+9, r26	; 0x09
    18f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18fa:	6f 81       	ldd	r22, Y+7	; 0x07
    18fc:	78 85       	ldd	r23, Y+8	; 0x08
    18fe:	89 85       	ldd	r24, Y+9	; 0x09
    1900:	9a 85       	ldd	r25, Y+10	; 0x0a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    190e:	88 23       	and	r24, r24
    1910:	2c f4       	brge	.+10     	; 0x191c <LCD_WriteData+0xa8>
		__ticks = 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9e 83       	std	Y+6, r25	; 0x06
    1918:	8d 83       	std	Y+5, r24	; 0x05
    191a:	3f c0       	rjmp	.+126    	; 0x199a <LCD_WriteData+0x126>
	else if (__tmp > 65535)
    191c:	6f 81       	ldd	r22, Y+7	; 0x07
    191e:	78 85       	ldd	r23, Y+8	; 0x08
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	9a 85       	ldd	r25, Y+10	; 0x0a
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1930:	18 16       	cp	r1, r24
    1932:	4c f5       	brge	.+82     	; 0x1986 <LCD_WriteData+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1934:	6b 85       	ldd	r22, Y+11	; 0x0b
    1936:	7c 85       	ldd	r23, Y+12	; 0x0c
    1938:	8d 85       	ldd	r24, Y+13	; 0x0d
    193a:	9e 85       	ldd	r25, Y+14	; 0x0e
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e2       	ldi	r20, 0x20	; 32
    1942:	51 e4       	ldi	r21, 0x41	; 65
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9e 83       	std	Y+6, r25	; 0x06
    195a:	8d 83       	std	Y+5, r24	; 0x05
    195c:	0f c0       	rjmp	.+30     	; 0x197c <LCD_WriteData+0x108>
    195e:	8c e2       	ldi	r24, 0x2C	; 44
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	9c 83       	std	Y+4, r25	; 0x04
    1964:	8b 83       	std	Y+3, r24	; 0x03
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_WriteData+0xf6>
    196e:	9c 83       	std	Y+4, r25	; 0x04
    1970:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	9e 83       	std	Y+6, r25	; 0x06
    197a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
    197e:	9e 81       	ldd	r25, Y+6	; 0x06
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	69 f7       	brne	.-38     	; 0x195e <LCD_WriteData+0xea>
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <LCD_WriteData+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1986:	6f 81       	ldd	r22, Y+7	; 0x07
    1988:	78 85       	ldd	r23, Y+8	; 0x08
    198a:	89 85       	ldd	r24, Y+9	; 0x09
    198c:	9a 85       	ldd	r25, Y+10	; 0x0a
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	9e 81       	ldd	r25, Y+6	; 0x06
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <LCD_WriteData+0x132>
    19aa:	9a 83       	std	Y+2, r25	; 0x02
    19ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    19ae:	a8 e3       	ldi	r26, 0x38	; 56
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e8 e3       	ldi	r30, 0x38	; 56
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8e 7f       	andi	r24, 0xFE	; 254
    19ba:	8c 93       	st	X, r24
}
    19bc:	2f 96       	adiw	r28, 0x0f	; 15
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <LCD_DisplayString>:

void LCD_DisplayString(u8* pu8StringCpy)
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	61 97       	sbiw	r28, 0x11	; 17
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	99 8b       	std	Y+17, r25	; 0x11
    19e4:	88 8b       	std	Y+16, r24	; 0x10

  /* Local loop index */
  u8 u8Index = 0;
    19e6:	1f 86       	std	Y+15, r1	; 0x0f
    19e8:	80 c0       	rjmp	.+256    	; 0x1aea <LCD_DisplayString+0x11c>

  while (pu8StringCpy [u8Index] != 0)
  {
    /* Write Character on LCD */
    LCD_WriteData (pu8StringCpy [u8Index]);
    19ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	88 89       	ldd	r24, Y+16	; 0x10
    19f2:	99 89       	ldd	r25, Y+17	; 0x11
    19f4:	fc 01       	movw	r30, r24
    19f6:	e2 0f       	add	r30, r18
    19f8:	f3 1f       	adc	r31, r19
    19fa:	80 81       	ld	r24, Z
    19fc:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_WriteData>

    /* Increment local loop index */
    u8Index++;
    1a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	8f 87       	std	Y+15, r24	; 0x0f
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	a0 e0       	ldi	r26, 0x00	; 0
    1a0c:	b0 e4       	ldi	r27, 0x40	; 64
    1a0e:	8b 87       	std	Y+11, r24	; 0x0b
    1a10:	9c 87       	std	Y+12, r25	; 0x0c
    1a12:	ad 87       	std	Y+13, r26	; 0x0d
    1a14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e8       	ldi	r19, 0x80	; 128
    1a22:	4b e3       	ldi	r20, 0x3B	; 59
    1a24:	55 e4       	ldi	r21, 0x45	; 69
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	8f 83       	std	Y+7, r24	; 0x07
    1a30:	98 87       	std	Y+8, r25	; 0x08
    1a32:	a9 87       	std	Y+9, r26	; 0x09
    1a34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a36:	6f 81       	ldd	r22, Y+7	; 0x07
    1a38:	78 85       	ldd	r23, Y+8	; 0x08
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e8       	ldi	r20, 0x80	; 128
    1a44:	5f e3       	ldi	r21, 0x3F	; 63
    1a46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a4a:	88 23       	and	r24, r24
    1a4c:	2c f4       	brge	.+10     	; 0x1a58 <LCD_DisplayString+0x8a>
		__ticks = 1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9e 83       	std	Y+6, r25	; 0x06
    1a54:	8d 83       	std	Y+5, r24	; 0x05
    1a56:	3f c0       	rjmp	.+126    	; 0x1ad6 <LCD_DisplayString+0x108>
	else if (__tmp > 65535)
    1a58:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5a:	78 85       	ldd	r23, Y+8	; 0x08
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	3f ef       	ldi	r19, 0xFF	; 255
    1a64:	4f e7       	ldi	r20, 0x7F	; 127
    1a66:	57 e4       	ldi	r21, 0x47	; 71
    1a68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a6c:	18 16       	cp	r1, r24
    1a6e:	4c f5       	brge	.+82     	; 0x1ac2 <LCD_DisplayString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e2       	ldi	r20, 0x20	; 32
    1a7e:	51 e4       	ldi	r21, 0x41	; 65
    1a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	bc 01       	movw	r22, r24
    1a8a:	cd 01       	movw	r24, r26
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	0f c0       	rjmp	.+30     	; 0x1ab8 <LCD_DisplayString+0xea>
    1a9a:	8c e2       	ldi	r24, 0x2C	; 44
    1a9c:	91 e0       	ldi	r25, 0x01	; 1
    1a9e:	9c 83       	std	Y+4, r25	; 0x04
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <LCD_DisplayString+0xd8>
    1aaa:	9c 83       	std	Y+4, r25	; 0x04
    1aac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	69 f7       	brne	.-38     	; 0x1a9a <LCD_DisplayString+0xcc>
    1ac0:	14 c0       	rjmp	.+40     	; 0x1aea <LCD_DisplayString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac4:	78 85       	ldd	r23, Y+8	; 0x08
    1ac6:	89 85       	ldd	r24, Y+9	; 0x09
    1ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9e 83       	std	Y+6, r25	; 0x06
    1ad4:	8d 83       	std	Y+5, r24	; 0x05
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <LCD_DisplayString+0x114>
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	89 83       	std	Y+1, r24	; 0x01
{

  /* Local loop index */
  u8 u8Index = 0;

  while (pu8StringCpy [u8Index] != 0)
    1aea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	88 89       	ldd	r24, Y+16	; 0x10
    1af2:	99 89       	ldd	r25, Y+17	; 0x11
    1af4:	fc 01       	movw	r30, r24
    1af6:	e2 0f       	add	r30, r18
    1af8:	f3 1f       	adc	r31, r19
    1afa:	80 81       	ld	r24, Z
    1afc:	88 23       	and	r24, r24
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <LCD_DisplayString+0x134>
    1b00:	74 cf       	rjmp	.-280    	; 0x19ea <LCD_DisplayString+0x1c>

    /* Delay to let the LCD show the character */
    _delay_ms(2);
  }

}
    1b02:	61 96       	adiw	r28, 0x11	; 17
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <LCD_Goto_xy>:

void LCD_Goto_xy(u8 x, u8 y)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	64 97       	sbiw	r28, 0x14	; 20
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	8b 8b       	std	Y+19, r24	; 0x13
    1b2a:	6c 8b       	std	Y+20, r22	; 0x14
	u8 firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
    1b2c:	80 e8       	ldi	r24, 0x80	; 128
    1b2e:	8f 87       	std	Y+15, r24	; 0x0f
    1b30:	80 ec       	ldi	r24, 0xC0	; 192
    1b32:	88 8b       	std	Y+16, r24	; 0x10
    1b34:	84 e9       	ldi	r24, 0x94	; 148
    1b36:	89 8b       	std	Y+17, r24	; 0x11
    1b38:	84 ed       	ldi	r24, 0xD4	; 212
    1b3a:	8a 8b       	std	Y+18, r24	; 0x12
	LCD_SendCommand (firstcharAdr[y-1] + x - 1);
    1b3c:	8c 89       	ldd	r24, Y+20	; 0x14
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9c 01       	movw	r18, r24
    1b44:	21 50       	subi	r18, 0x01	; 1
    1b46:	30 40       	sbci	r19, 0x00	; 0
    1b48:	ce 01       	movw	r24, r28
    1b4a:	0f 96       	adiw	r24, 0x0f	; 15
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	e2 0f       	add	r30, r18
    1b50:	f3 1f       	adc	r31, r19
    1b52:	90 81       	ld	r25, Z
    1b54:	8b 89       	ldd	r24, Y+19	; 0x13
    1b56:	89 0f       	add	r24, r25
    1b58:	81 50       	subi	r24, 0x01	; 1
    1b5a:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_SendCommand>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a0 e8       	ldi	r26, 0x80	; 128
    1b64:	bf e3       	ldi	r27, 0x3F	; 63
    1b66:	8b 87       	std	Y+11, r24	; 0x0b
    1b68:	9c 87       	std	Y+12, r25	; 0x0c
    1b6a:	ad 87       	std	Y+13, r26	; 0x0d
    1b6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e8       	ldi	r19, 0x80	; 128
    1b7a:	4b e3       	ldi	r20, 0x3B	; 59
    1b7c:	55 e4       	ldi	r21, 0x45	; 69
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	8f 83       	std	Y+7, r24	; 0x07
    1b88:	98 87       	std	Y+8, r25	; 0x08
    1b8a:	a9 87       	std	Y+9, r26	; 0x09
    1b8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b90:	78 85       	ldd	r23, Y+8	; 0x08
    1b92:	89 85       	ldd	r24, Y+9	; 0x09
    1b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e8       	ldi	r20, 0x80	; 128
    1b9c:	5f e3       	ldi	r21, 0x3F	; 63
    1b9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ba2:	88 23       	and	r24, r24
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <LCD_Goto_xy+0x9c>
		__ticks = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	3f c0       	rjmp	.+126    	; 0x1c2e <LCD_Goto_xy+0x11a>
	else if (__tmp > 65535)
    1bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb2:	78 85       	ldd	r23, Y+8	; 0x08
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	3f ef       	ldi	r19, 0xFF	; 255
    1bbc:	4f e7       	ldi	r20, 0x7F	; 127
    1bbe:	57 e4       	ldi	r21, 0x47	; 71
    1bc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bc4:	18 16       	cp	r1, r24
    1bc6:	4c f5       	brge	.+82     	; 0x1c1a <LCD_Goto_xy+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e2       	ldi	r20, 0x20	; 32
    1bd6:	51 e4       	ldi	r21, 0x41	; 65
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	bc 01       	movw	r22, r24
    1be2:	cd 01       	movw	r24, r26
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	0f c0       	rjmp	.+30     	; 0x1c10 <LCD_Goto_xy+0xfc>
    1bf2:	8c e2       	ldi	r24, 0x2C	; 44
    1bf4:	91 e0       	ldi	r25, 0x01	; 1
    1bf6:	9c 83       	std	Y+4, r25	; 0x04
    1bf8:	8b 83       	std	Y+3, r24	; 0x03
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_Goto_xy+0xea>
    1c02:	9c 83       	std	Y+4, r25	; 0x04
    1c04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	9e 81       	ldd	r25, Y+6	; 0x06
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	69 f7       	brne	.-38     	; 0x1bf2 <LCD_Goto_xy+0xde>
    1c18:	14 c0       	rjmp	.+40     	; 0x1c42 <LCD_Goto_xy+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1c:	78 85       	ldd	r23, Y+8	; 0x08
    1c1e:	89 85       	ldd	r24, Y+9	; 0x09
    1c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <LCD_Goto_xy+0x126>
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1c42:	64 96       	adiw	r28, 0x14	; 20
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <LCD_MoveCursorLeft>:

void LCD_MoveCursorLeft (void)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_LEFT);
    1c68:	80 e1       	ldi	r24, 0x10	; 16
    1c6a:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_SendCommand>
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e8       	ldi	r26, 0x80	; 128
    1c74:	bf e3       	ldi	r27, 0x3F	; 63
    1c76:	8b 87       	std	Y+11, r24	; 0x0b
    1c78:	9c 87       	std	Y+12, r25	; 0x0c
    1c7a:	ad 87       	std	Y+13, r26	; 0x0d
    1c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e8       	ldi	r19, 0x80	; 128
    1c8a:	4b e3       	ldi	r20, 0x3B	; 59
    1c8c:	55 e4       	ldi	r21, 0x45	; 69
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8f 83       	std	Y+7, r24	; 0x07
    1c98:	98 87       	std	Y+8, r25	; 0x08
    1c9a:	a9 87       	std	Y+9, r26	; 0x09
    1c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <LCD_MoveCursorLeft+0x6c>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	3f c0       	rjmp	.+126    	; 0x1d3e <LCD_MoveCursorLeft+0xea>
	else if (__tmp > 65535)
    1cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc2:	78 85       	ldd	r23, Y+8	; 0x08
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3f ef       	ldi	r19, 0xFF	; 255
    1ccc:	4f e7       	ldi	r20, 0x7F	; 127
    1cce:	57 e4       	ldi	r21, 0x47	; 71
    1cd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cd4:	18 16       	cp	r1, r24
    1cd6:	4c f5       	brge	.+82     	; 0x1d2a <LCD_MoveCursorLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <LCD_MoveCursorLeft+0xcc>
    1d02:	8c e2       	ldi	r24, 0x2C	; 44
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	8b 83       	std	Y+3, r24	; 0x03
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <LCD_MoveCursorLeft+0xba>
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	69 f7       	brne	.-38     	; 0x1d02 <LCD_MoveCursorLeft+0xae>
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <LCD_MoveCursorLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_MoveCursorLeft+0xf6>
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1d52:	2e 96       	adiw	r28, 0x0e	; 14
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <LCD_MoveCursorRight>:

//*******************************************************************************
void LCD_MoveCursorRight (void)
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	2e 97       	sbiw	r28, 0x0e	; 14
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_RIGHT);
    1d78:	84 e1       	ldi	r24, 0x14	; 20
    1d7a:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_SendCommand>
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	a0 e8       	ldi	r26, 0x80	; 128
    1d84:	bf e3       	ldi	r27, 0x3F	; 63
    1d86:	8b 87       	std	Y+11, r24	; 0x0b
    1d88:	9c 87       	std	Y+12, r25	; 0x0c
    1d8a:	ad 87       	std	Y+13, r26	; 0x0d
    1d8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e8       	ldi	r19, 0x80	; 128
    1d9a:	4b e3       	ldi	r20, 0x3B	; 59
    1d9c:	55 e4       	ldi	r21, 0x45	; 69
    1d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	8f 83       	std	Y+7, r24	; 0x07
    1da8:	98 87       	std	Y+8, r25	; 0x08
    1daa:	a9 87       	std	Y+9, r26	; 0x09
    1dac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e8       	ldi	r20, 0x80	; 128
    1dbc:	5f e3       	ldi	r21, 0x3F	; 63
    1dbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc2:	88 23       	and	r24, r24
    1dc4:	2c f4       	brge	.+10     	; 0x1dd0 <LCD_MoveCursorRight+0x6c>
		__ticks = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	3f c0       	rjmp	.+126    	; 0x1e4e <LCD_MoveCursorRight+0xea>
	else if (__tmp > 65535)
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	4f e7       	ldi	r20, 0x7F	; 127
    1dde:	57 e4       	ldi	r21, 0x47	; 71
    1de0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	4c f5       	brge	.+82     	; 0x1e3a <LCD_MoveCursorRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e2       	ldi	r20, 0x20	; 32
    1df6:	51 e4       	ldi	r21, 0x41	; 65
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	8d 83       	std	Y+5, r24	; 0x05
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <LCD_MoveCursorRight+0xcc>
    1e12:	8c e2       	ldi	r24, 0x2C	; 44
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	9c 83       	std	Y+4, r25	; 0x04
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_MoveCursorRight+0xba>
    1e22:	9c 83       	std	Y+4, r25	; 0x04
    1e24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e26:	8d 81       	ldd	r24, Y+5	; 0x05
    1e28:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	69 f7       	brne	.-38     	; 0x1e12 <LCD_MoveCursorRight+0xae>
    1e38:	14 c0       	rjmp	.+40     	; 0x1e62 <LCD_MoveCursorRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3c:	78 85       	ldd	r23, Y+8	; 0x08
    1e3e:	89 85       	ldd	r24, Y+9	; 0x09
    1e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_MoveCursorRight+0xf6>
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1e62:	2e 96       	adiw	r28, 0x0e	; 14
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <main>:
void update_Accelerometor(Letters_and_Words * Ptr_Sensor_Readings , temp_data * Temp);
uint8 update_Accelerometor_f(uint8 reg1_add , uint8 reg2_add , uint8 ADDRESS_Write , uint8 ADDRESS_Read , temp_data * Temp);


int main (void)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    1e82:	de bf       	out	0x3e, r29	; 62
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
	DDRC=0xff;
    1e88:	e4 e3       	ldi	r30, 0x34	; 52
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	8f ef       	ldi	r24, 0xFF	; 255
    1e8e:	80 83       	st	Z, r24

	LCD_Init();
    1e90:	0e 94 9f 09 	call	0x133e	; 0x133e <LCD_Init>
	//	TWI_Init();
	Accelerometor_init();
    1e94:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <Accelerometor_init>

	while(1)
	{
		update_Accelerometor(&Sensors_Readings, &Temp) ;
    1e98:	8a e0       	ldi	r24, 0x0A	; 10
    1e9a:	92 e0       	ldi	r25, 0x02	; 2
    1e9c:	22 e1       	ldi	r18, 0x12	; 18
    1e9e:	32 e0       	ldi	r19, 0x02	; 2
    1ea0:	b9 01       	movw	r22, r18
    1ea2:	0e 94 7e 10 	call	0x20fc	; 0x20fc <update_Accelerometor>
			LCD_Clear();
    1ea6:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
			LCD_DisplayString( Sensors_Readings.pitchdeg_AC );
    1eaa:	80 91 10 02 	lds	r24, 0x0210
    1eae:	90 91 11 02 	lds	r25, 0x0211
    1eb2:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
			LCD_Goto_xy(1,2);
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	62 e0       	ldi	r22, 0x02	; 2
    1eba:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_Goto_xy>
			LCD_DisplayString( Sensors_Readings.rolldeg_AC);
    1ebe:	80 91 0e 02 	lds	r24, 0x020E
    1ec2:	90 91 0f 02 	lds	r25, 0x020F
    1ec6:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	aa ef       	ldi	r26, 0xFA	; 250
    1ed0:	b3 e4       	ldi	r27, 0x43	; 67
    1ed2:	8b 87       	std	Y+11, r24	; 0x0b
    1ed4:	9c 87       	std	Y+12, r25	; 0x0c
    1ed6:	ad 87       	std	Y+13, r26	; 0x0d
    1ed8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1edc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ede:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e8       	ldi	r19, 0x80	; 128
    1ee6:	4b e3       	ldi	r20, 0x3B	; 59
    1ee8:	55 e4       	ldi	r21, 0x45	; 69
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	8f 83       	std	Y+7, r24	; 0x07
    1ef4:	98 87       	std	Y+8, r25	; 0x08
    1ef6:	a9 87       	std	Y+9, r26	; 0x09
    1ef8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1efa:	6f 81       	ldd	r22, Y+7	; 0x07
    1efc:	78 85       	ldd	r23, Y+8	; 0x08
    1efe:	89 85       	ldd	r24, Y+9	; 0x09
    1f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e8       	ldi	r20, 0x80	; 128
    1f08:	5f e3       	ldi	r21, 0x3F	; 63
    1f0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f0e:	88 23       	and	r24, r24
    1f10:	2c f4       	brge	.+10     	; 0x1f1c <main+0xa8>
		__ticks = 1;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
    1f1a:	3f c0       	rjmp	.+126    	; 0x1f9a <main+0x126>
	else if (__tmp > 65535)
    1f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1e:	78 85       	ldd	r23, Y+8	; 0x08
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	3f ef       	ldi	r19, 0xFF	; 255
    1f28:	4f e7       	ldi	r20, 0x7F	; 127
    1f2a:	57 e4       	ldi	r21, 0x47	; 71
    1f2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f30:	18 16       	cp	r1, r24
    1f32:	4c f5       	brge	.+82     	; 0x1f86 <main+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e2       	ldi	r20, 0x20	; 32
    1f42:	51 e4       	ldi	r21, 0x41	; 65
    1f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	9e 83       	std	Y+6, r25	; 0x06
    1f5a:	8d 83       	std	Y+5, r24	; 0x05
    1f5c:	0f c0       	rjmp	.+30     	; 0x1f7c <main+0x108>
    1f5e:	8c e2       	ldi	r24, 0x2C	; 44
    1f60:	91 e0       	ldi	r25, 0x01	; 1
    1f62:	9c 83       	std	Y+4, r25	; 0x04
    1f64:	8b 83       	std	Y+3, r24	; 0x03
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <main+0xf6>
    1f6e:	9c 83       	std	Y+4, r25	; 0x04
    1f70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f72:	8d 81       	ldd	r24, Y+5	; 0x05
    1f74:	9e 81       	ldd	r25, Y+6	; 0x06
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	69 f7       	brne	.-38     	; 0x1f5e <main+0xea>
    1f84:	89 cf       	rjmp	.-238    	; 0x1e98 <main+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f86:	6f 81       	ldd	r22, Y+7	; 0x07
    1f88:	78 85       	ldd	r23, Y+8	; 0x08
    1f8a:	89 85       	ldd	r24, Y+9	; 0x09
    1f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
    1f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9e:	9a 83       	std	Y+2, r25	; 0x02
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <main+0x132>
    1faa:	9a 83       	std	Y+2, r25	; 0x02
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	74 cf       	rjmp	.-280    	; 0x1e98 <main+0x24>

00001fb0 <Accelerometor_init>:
}



void Accelerometor_init(void)
{
    1fb0:	0f 93       	push	r16
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	2e 97       	sbiw	r28, 0x0e	; 14
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
    1fc6:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
	TWI_Init(I2C_PRESCALE1,I2C_intDisable,F_ADXL,0x01);
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	60 e0       	ldi	r22, 0x00	; 0
    1fce:	20 e8       	ldi	r18, 0x80	; 128
    1fd0:	3a e1       	ldi	r19, 0x1A	; 26
    1fd2:	46 e0       	ldi	r20, 0x06	; 6
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	01 e0       	ldi	r16, 0x01	; 1
    1fd8:	0e 94 75 07 	call	0xeea	; 0xeea <TWI_Init>
	i2C_writeReg(POWER_CTRL,0x08,ACCS_ADDRESS_Write); // Enabling Accelerometer
    1fdc:	8d e2       	ldi	r24, 0x2D	; 45
    1fde:	68 e0       	ldi	r22, 0x08	; 8
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	0e 94 0e 09 	call	0x121c	; 0x121c <i2C_writeReg>
	#elif ( Accs_Range == 16)
	i2C_writeReg(ACCS_DATA_FORMAT,0x0B,ACCS_ADDRESS_Write); // Specify
	Data Formate to Range
	#endif

	i2C_writeReg(ACCS_OFSX , -1 , ACCS_ADDRESS_Write);
    1fe6:	8e e1       	ldi	r24, 0x1E	; 30
    1fe8:	6f ef       	ldi	r22, 0xFF	; 255
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	0e 94 0e 09 	call	0x121c	; 0x121c <i2C_writeReg>
	i2C_writeReg(ACCS_OFSX , 0  , ACCS_ADDRESS_Write);
    1ff0:	8e e1       	ldi	r24, 0x1E	; 30
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	41 e0       	ldi	r20, 0x01	; 1
    1ff6:	0e 94 0e 09 	call	0x121c	; 0x121c <i2C_writeReg>
	i2C_writeReg(ACCS_OFSX , 8  , ACCS_ADDRESS_Write);
    1ffa:	8e e1       	ldi	r24, 0x1E	; 30
    1ffc:	68 e0       	ldi	r22, 0x08	; 8
    1ffe:	41 e0       	ldi	r20, 0x01	; 1
    2000:	0e 94 0e 09 	call	0x121c	; 0x121c <i2C_writeReg>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a0 ea       	ldi	r26, 0xA0	; 160
    200a:	b1 e4       	ldi	r27, 0x41	; 65
    200c:	8b 87       	std	Y+11, r24	; 0x0b
    200e:	9c 87       	std	Y+12, r25	; 0x0c
    2010:	ad 87       	std	Y+13, r26	; 0x0d
    2012:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2014:	6b 85       	ldd	r22, Y+11	; 0x0b
    2016:	7c 85       	ldd	r23, Y+12	; 0x0c
    2018:	8d 85       	ldd	r24, Y+13	; 0x0d
    201a:	9e 85       	ldd	r25, Y+14	; 0x0e
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e8       	ldi	r19, 0x80	; 128
    2020:	4b e3       	ldi	r20, 0x3B	; 59
    2022:	55 e4       	ldi	r21, 0x45	; 69
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8f 83       	std	Y+7, r24	; 0x07
    202e:	98 87       	std	Y+8, r25	; 0x08
    2030:	a9 87       	std	Y+9, r26	; 0x09
    2032:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2048:	88 23       	and	r24, r24
    204a:	2c f4       	brge	.+10     	; 0x2056 <Accelerometor_init+0xa6>
		__ticks = 1;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	3f c0       	rjmp	.+126    	; 0x20d4 <Accelerometor_init+0x124>
	else if (__tmp > 65535)
    2056:	6f 81       	ldd	r22, Y+7	; 0x07
    2058:	78 85       	ldd	r23, Y+8	; 0x08
    205a:	89 85       	ldd	r24, Y+9	; 0x09
    205c:	9a 85       	ldd	r25, Y+10	; 0x0a
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	4f e7       	ldi	r20, 0x7F	; 127
    2064:	57 e4       	ldi	r21, 0x47	; 71
    2066:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    206a:	18 16       	cp	r1, r24
    206c:	4c f5       	brge	.+82     	; 0x20c0 <Accelerometor_init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2070:	7c 85       	ldd	r23, Y+12	; 0x0c
    2072:	8d 85       	ldd	r24, Y+13	; 0x0d
    2074:	9e 85       	ldd	r25, Y+14	; 0x0e
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
    2096:	0f c0       	rjmp	.+30     	; 0x20b6 <Accelerometor_init+0x106>
    2098:	8c e2       	ldi	r24, 0x2C	; 44
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	9c 83       	std	Y+4, r25	; 0x04
    209e:	8b 83       	std	Y+3, r24	; 0x03
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <Accelerometor_init+0xf4>
    20a8:	9c 83       	std	Y+4, r25	; 0x04
    20aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	9e 83       	std	Y+6, r25	; 0x06
    20b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	8d 81       	ldd	r24, Y+5	; 0x05
    20b8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	69 f7       	brne	.-38     	; 0x2098 <Accelerometor_init+0xe8>
    20be:	14 c0       	rjmp	.+40     	; 0x20e8 <Accelerometor_init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c0:	6f 81       	ldd	r22, Y+7	; 0x07
    20c2:	78 85       	ldd	r23, Y+8	; 0x08
    20c4:	89 85       	ldd	r24, Y+9	; 0x09
    20c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	9e 81       	ldd	r25, Y+6	; 0x06
    20d8:	9a 83       	std	Y+2, r25	; 0x02
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <Accelerometor_init+0x130>
    20e4:	9a 83       	std	Y+2, r25	; 0x02
    20e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    20e8:	2e 96       	adiw	r28, 0x0e	; 14
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	0f 91       	pop	r16
    20fa:	08 95       	ret

000020fc <update_Accelerometor>:

#define Accs_Range	5
#define Alpha	5

void update_Accelerometor(Letters_and_Words * Ptr_Sensor_Readings , temp_data * Temp)
{
    20fc:	ef 92       	push	r14
    20fe:	ff 92       	push	r15
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	6c 97       	sbiw	r28, 0x1c	; 28
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	9a 8f       	std	Y+26, r25	; 0x1a
    211a:	89 8f       	std	Y+25, r24	; 0x19
    211c:	7c 8f       	std	Y+28, r23	; 0x1c
    211e:	6b 8f       	std	Y+27, r22	; 0x1b
	float X;
	float Y;
	float Z;

	update_Accelerometor_f( ACCS_DATAX0 , ACCS_DATAX1 , ACCS_ADDRESS_Write , ACCS_ADDRESS_Read , Temp);
    2120:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2122:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2124:	82 e3       	ldi	r24, 0x32	; 50
    2126:	63 e3       	ldi	r22, 0x33	; 51
    2128:	41 e0       	ldi	r20, 0x01	; 1
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	8f 01       	movw	r16, r30
    212e:	0e 94 8c 11 	call	0x2318	; 0x2318 <update_Accelerometor_f>

	Temp-> fXg= ( (Temp->fXg) - 7 );
    2132:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2134:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	a2 81       	ldd	r26, Z+2	; 0x02
    213c:	b3 81       	ldd	r27, Z+3	; 0x03
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 ee       	ldi	r20, 0xE0	; 224
    2148:	50 e4       	ldi	r21, 0x40	; 64
    214a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2154:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2156:	80 83       	st	Z, r24
    2158:	91 83       	std	Z+1, r25	; 0x01
    215a:	a2 83       	std	Z+2, r26	; 0x02
    215c:	b3 83       	std	Z+3, r27	; 0x03
	Temp-> fYg= ( (Temp->fYg) - 6);
    215e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2160:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2162:	84 81       	ldd	r24, Z+4	; 0x04
    2164:	95 81       	ldd	r25, Z+5	; 0x05
    2166:	a6 81       	ldd	r26, Z+6	; 0x06
    2168:	b7 81       	ldd	r27, Z+7	; 0x07
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 ec       	ldi	r20, 0xC0	; 192
    2174:	50 e4       	ldi	r21, 0x40	; 64
    2176:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2180:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2182:	84 83       	std	Z+4, r24	; 0x04
    2184:	95 83       	std	Z+5, r25	; 0x05
    2186:	a6 83       	std	Z+6, r26	; 0x06
    2188:	b7 83       	std	Z+7, r27	; 0x07
	Temp-> fZg= ( (Temp->fZg) + 10);
    218a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    218c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    218e:	80 85       	ldd	r24, Z+8	; 0x08
    2190:	91 85       	ldd	r25, Z+9	; 0x09
    2192:	a2 85       	ldd	r26, Z+10	; 0x0a
    2194:	b3 85       	ldd	r27, Z+11	; 0x0b
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	eb 8d       	ldd	r30, Y+27	; 0x1b
    21ac:	fc 8d       	ldd	r31, Y+28	; 0x1c
    21ae:	80 87       	std	Z+8, r24	; 0x08
    21b0:	91 87       	std	Z+9, r25	; 0x09
    21b2:	a2 87       	std	Z+10, r26	; 0x0a
    21b4:	b3 87       	std	Z+11, r27	; 0x0b

	X = Accs_Range* (Temp->fXg/1023.0); // used for angle calculations
    21b6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    21b8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    21ba:	80 81       	ld	r24, Z
    21bc:	91 81       	ldd	r25, Z+1	; 0x01
    21be:	a2 81       	ldd	r26, Z+2	; 0x02
    21c0:	b3 81       	ldd	r27, Z+3	; 0x03
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 ec       	ldi	r19, 0xC0	; 192
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	54 e4       	ldi	r21, 0x44	; 68
    21ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 ea       	ldi	r20, 0xA0	; 160
    21e0:	50 e4       	ldi	r21, 0x40	; 64
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	8d 8b       	std	Y+21, r24	; 0x15
    21ec:	9e 8b       	std	Y+22, r25	; 0x16
    21ee:	af 8b       	std	Y+23, r26	; 0x17
    21f0:	b8 8f       	std	Y+24, r27	; 0x18
	Y = Accs_Range* (Temp->fYg/1023.0); // used for angle calculations
    21f2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    21f4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    21f6:	84 81       	ldd	r24, Z+4	; 0x04
    21f8:	95 81       	ldd	r25, Z+5	; 0x05
    21fa:	a6 81       	ldd	r26, Z+6	; 0x06
    21fc:	b7 81       	ldd	r27, Z+7	; 0x07
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 ec       	ldi	r19, 0xC0	; 192
    2206:	4f e7       	ldi	r20, 0x7F	; 127
    2208:	54 e4       	ldi	r21, 0x44	; 68
    220a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 ea       	ldi	r20, 0xA0	; 160
    221c:	50 e4       	ldi	r21, 0x40	; 64
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	89 8b       	std	Y+17, r24	; 0x11
    2228:	9a 8b       	std	Y+18, r25	; 0x12
    222a:	ab 8b       	std	Y+19, r26	; 0x13
    222c:	bc 8b       	std	Y+20, r27	; 0x14
	Z = Accs_Range* (Temp->fZg/1023.0); // used for angle calculations
    222e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2230:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2232:	80 85       	ldd	r24, Z+8	; 0x08
    2234:	91 85       	ldd	r25, Z+9	; 0x09
    2236:	a2 85       	ldd	r26, Z+10	; 0x0a
    2238:	b3 85       	ldd	r27, Z+11	; 0x0b
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 ec       	ldi	r19, 0xC0	; 192
    2242:	4f e7       	ldi	r20, 0x7F	; 127
    2244:	54 e4       	ldi	r21, 0x44	; 68
    2246:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 ea       	ldi	r20, 0xA0	; 160
    2258:	50 e4       	ldi	r21, 0x40	; 64
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8d 87       	std	Y+13, r24	; 0x0d
    2264:	9e 87       	std	Y+14, r25	; 0x0e
    2266:	af 87       	std	Y+15, r26	; 0x0f
    2268:	b8 8b       	std	Y+16, r27	; 0x10
	X= Temp-> fXg;
	Y= Temp-> fYg;
	Z= Temp-> fZg;
	#endif

	float _1st= X*X+Z*Z;
    226a:	6d 89       	ldd	r22, Y+21	; 0x15
    226c:	7e 89       	ldd	r23, Y+22	; 0x16
    226e:	8f 89       	ldd	r24, Y+23	; 0x17
    2270:	98 8d       	ldd	r25, Y+24	; 0x18
    2272:	2d 89       	ldd	r18, Y+21	; 0x15
    2274:	3e 89       	ldd	r19, Y+22	; 0x16
    2276:	4f 89       	ldd	r20, Y+23	; 0x17
    2278:	58 8d       	ldd	r21, Y+24	; 0x18
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	7c 01       	movw	r14, r24
    2284:	8d 01       	movw	r16, r26
    2286:	6d 85       	ldd	r22, Y+13	; 0x0d
    2288:	7e 85       	ldd	r23, Y+14	; 0x0e
    228a:	8f 85       	ldd	r24, Y+15	; 0x0f
    228c:	98 89       	ldd	r25, Y+16	; 0x10
    228e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2290:	3e 85       	ldd	r19, Y+14	; 0x0e
    2292:	4f 85       	ldd	r20, Y+15	; 0x0f
    2294:	58 89       	ldd	r21, Y+16	; 0x10
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	9c 01       	movw	r18, r24
    22a0:	ad 01       	movw	r20, r26
    22a2:	c8 01       	movw	r24, r16
    22a4:	b7 01       	movw	r22, r14
    22a6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	89 87       	std	Y+9, r24	; 0x09
    22b0:	9a 87       	std	Y+10, r25	; 0x0a
    22b2:	ab 87       	std	Y+11, r26	; 0x0b
    22b4:	bc 87       	std	Y+12, r27	; 0x0c
	float _sqrt= sqrt (_1st);
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ba:	ab 85       	ldd	r26, Y+11	; 0x0b
    22bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    22be:	bc 01       	movw	r22, r24
    22c0:	cd 01       	movw	r24, r26
    22c2:	0e 94 12 1a 	call	0x3424	; 0x3424 <sqrt>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	8d 83       	std	Y+5, r24	; 0x05
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	af 83       	std	Y+7, r26	; 0x07
    22d0:	b8 87       	std	Y+8, r27	; 0x08
	float _2nd= Y/_sqrt;
    22d2:	69 89       	ldd	r22, Y+17	; 0x11
    22d4:	7a 89       	ldd	r23, Y+18	; 0x12
    22d6:	8b 89       	ldd	r24, Y+19	; 0x13
    22d8:	9c 89       	ldd	r25, Y+20	; 0x14
    22da:	2d 81       	ldd	r18, Y+5	; 0x05
    22dc:	3e 81       	ldd	r19, Y+6	; 0x06
    22de:	4f 81       	ldd	r20, Y+7	; 0x07
    22e0:	58 85       	ldd	r21, Y+8	; 0x08
    22e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	ab 83       	std	Y+3, r26	; 0x03
    22f0:	bc 83       	std	Y+4, r27	; 0x04
	//float _3rd= atan (_2nd);



	Ptr_Sensor_Readings-> rolldeg_AC  = 180 *(3.14);  // calculated angle in degrees
    22f2:	e9 8d       	ldd	r30, Y+25	; 0x19
    22f4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    22f6:	85 e3       	ldi	r24, 0x35	; 53
    22f8:	92 e0       	ldi	r25, 0x02	; 2
    22fa:	95 83       	std	Z+5, r25	; 0x05
    22fc:	84 83       	std	Z+4, r24	; 0x04
//	Ptr_Sensor_Readings-> pitchdeg_AC = 180 * ( atan ( X/ (sqrt (Y*Y+Z*Z) ) ) ) /(3.14); // calculated angle in degrees
}
    22fe:	6c 96       	adiw	r28, 0x1c	; 28
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	1f 91       	pop	r17
    2310:	0f 91       	pop	r16
    2312:	ff 90       	pop	r15
    2314:	ef 90       	pop	r14
    2316:	08 95       	ret

00002318 <update_Accelerometor_f>:
/*--------------------------------------------------------------------------------*/

uint8 update_Accelerometor_f(uint8 reg1_add , uint8 reg2_add , uint8 ADDRESS_Write , uint8 ADDRESS_Read , temp_data * Temp)
{
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	c7 5a       	subi	r28, 0xA7	; 167
    2326:	d0 40       	sbci	r29, 0x00	; 0
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	fe 01       	movw	r30, r28
    2334:	ef 55       	subi	r30, 0x5F	; 95
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 83       	st	Z, r24
    233a:	fe 01       	movw	r30, r28
    233c:	ee 55       	subi	r30, 0x5E	; 94
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	60 83       	st	Z, r22
    2342:	fe 01       	movw	r30, r28
    2344:	ed 55       	subi	r30, 0x5D	; 93
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	40 83       	st	Z, r20
    234a:	fe 01       	movw	r30, r28
    234c:	ec 55       	subi	r30, 0x5C	; 92
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	20 83       	st	Z, r18
    2352:	fe 01       	movw	r30, r28
    2354:	eb 55       	subi	r30, 0x5B	; 91
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	11 83       	std	Z+1, r17	; 0x01
    235a:	00 83       	st	Z, r16
	uint8 X_low_val=0;
    235c:	fe 01       	movw	r30, r28
    235e:	e0 56       	subi	r30, 0x60	; 96
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	10 82       	st	Z, r1
	uint8 x_High_val=0;
    2364:	fe 01       	movw	r30, r28
    2366:	e1 56       	subi	r30, 0x61	; 97
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	10 82       	st	Z, r1
	uint8 y_low_val=0;
    236c:	fe 01       	movw	r30, r28
    236e:	e2 56       	subi	r30, 0x62	; 98
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	10 82       	st	Z, r1
	uint8 y_High_val=0;
    2374:	fe 01       	movw	r30, r28
    2376:	e3 56       	subi	r30, 0x63	; 99
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	10 82       	st	Z, r1
	uint8 z_low_val=0;
    237c:	fe 01       	movw	r30, r28
    237e:	e4 56       	subi	r30, 0x64	; 100
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	10 82       	st	Z, r1
	uint8 z_High_val=0;
    2384:	fe 01       	movw	r30, r28
    2386:	e5 56       	subi	r30, 0x65	; 101
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	10 82       	st	Z, r1

	TWI_Start();
    238c:	0e 94 ab 08 	call	0x1156	; 0x1156 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    2390:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    2394:	88 30       	cpi	r24, 0x08	; 8
    2396:	09 f4       	brne	.+2      	; 0x239a <update_Accelerometor_f+0x82>
    2398:	c1 c0       	rjmp	.+386    	; 0x251c <update_Accelerometor_f+0x204>
	{
		LCD_Clear();
    239a:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
		LCD_DisplayString("Start_problem");
    239e:	80 e6       	ldi	r24, 0x60	; 96
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
    23a6:	fe 01       	movw	r30, r28
    23a8:	e9 56       	subi	r30, 0x69	; 105
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	aa ef       	ldi	r26, 0xFA	; 250
    23b2:	b4 e4       	ldi	r27, 0x44	; 68
    23b4:	80 83       	st	Z, r24
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	a2 83       	std	Z+2, r26	; 0x02
    23ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23bc:	8e 01       	movw	r16, r28
    23be:	0d 56       	subi	r16, 0x6D	; 109
    23c0:	1f 4f       	sbci	r17, 0xFF	; 255
    23c2:	fe 01       	movw	r30, r28
    23c4:	e9 56       	subi	r30, 0x69	; 105
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e8       	ldi	r19, 0x80	; 128
    23d4:	4b e3       	ldi	r20, 0x3B	; 59
    23d6:	55 e4       	ldi	r21, 0x45	; 69
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	f8 01       	movw	r30, r16
    23e2:	80 83       	st	Z, r24
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	a2 83       	std	Z+2, r26	; 0x02
    23e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ea:	fe 01       	movw	r30, r28
    23ec:	ed 56       	subi	r30, 0x6D	; 109
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2404:	88 23       	and	r24, r24
    2406:	44 f4       	brge	.+16     	; 0x2418 <update_Accelerometor_f+0x100>
		__ticks = 1;
    2408:	fe 01       	movw	r30, r28
    240a:	ef 56       	subi	r30, 0x6F	; 111
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
    2416:	64 c0       	rjmp	.+200    	; 0x24e0 <update_Accelerometor_f+0x1c8>
	else if (__tmp > 65535)
    2418:	fe 01       	movw	r30, r28
    241a:	ed 56       	subi	r30, 0x6D	; 109
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	60 81       	ld	r22, Z
    2420:	71 81       	ldd	r23, Z+1	; 0x01
    2422:	82 81       	ldd	r24, Z+2	; 0x02
    2424:	93 81       	ldd	r25, Z+3	; 0x03
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	3f ef       	ldi	r19, 0xFF	; 255
    242a:	4f e7       	ldi	r20, 0x7F	; 127
    242c:	57 e4       	ldi	r21, 0x47	; 71
    242e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2432:	18 16       	cp	r1, r24
    2434:	0c f0       	brlt	.+2      	; 0x2438 <update_Accelerometor_f+0x120>
    2436:	43 c0       	rjmp	.+134    	; 0x24be <update_Accelerometor_f+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2438:	fe 01       	movw	r30, r28
    243a:	e9 56       	subi	r30, 0x69	; 105
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	60 81       	ld	r22, Z
    2440:	71 81       	ldd	r23, Z+1	; 0x01
    2442:	82 81       	ldd	r24, Z+2	; 0x02
    2444:	93 81       	ldd	r25, Z+3	; 0x03
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e2       	ldi	r20, 0x20	; 32
    244c:	51 e4       	ldi	r21, 0x41	; 65
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	8e 01       	movw	r16, r28
    2458:	0f 56       	subi	r16, 0x6F	; 111
    245a:	1f 4f       	sbci	r17, 0xFF	; 255
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	f8 01       	movw	r30, r16
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	80 83       	st	Z, r24
    246e:	1f c0       	rjmp	.+62     	; 0x24ae <update_Accelerometor_f+0x196>
    2470:	fe 01       	movw	r30, r28
    2472:	e1 57       	subi	r30, 0x71	; 113
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	8c e2       	ldi	r24, 0x2C	; 44
    2478:	91 e0       	ldi	r25, 0x01	; 1
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
    247e:	fe 01       	movw	r30, r28
    2480:	e1 57       	subi	r30, 0x71	; 113
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <update_Accelerometor_f+0x170>
    248c:	fe 01       	movw	r30, r28
    248e:	e1 57       	subi	r30, 0x71	; 113
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2496:	de 01       	movw	r26, r28
    2498:	af 56       	subi	r26, 0x6F	; 111
    249a:	bf 4f       	sbci	r27, 0xFF	; 255
    249c:	fe 01       	movw	r30, r28
    249e:	ef 56       	subi	r30, 0x6F	; 111
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	11 96       	adiw	r26, 0x01	; 1
    24aa:	9c 93       	st	X, r25
    24ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	fe 01       	movw	r30, r28
    24b0:	ef 56       	subi	r30, 0x6F	; 111
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 81       	ld	r24, Z
    24b6:	91 81       	ldd	r25, Z+1	; 0x01
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	d1 f6       	brne	.-76     	; 0x2470 <update_Accelerometor_f+0x158>
    24bc:	27 c0       	rjmp	.+78     	; 0x250c <update_Accelerometor_f+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24be:	8e 01       	movw	r16, r28
    24c0:	0f 56       	subi	r16, 0x6F	; 111
    24c2:	1f 4f       	sbci	r17, 0xFF	; 255
    24c4:	fe 01       	movw	r30, r28
    24c6:	ed 56       	subi	r30, 0x6D	; 109
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	f8 01       	movw	r30, r16
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
    24e0:	de 01       	movw	r26, r28
    24e2:	a3 57       	subi	r26, 0x73	; 115
    24e4:	bf 4f       	sbci	r27, 0xFF	; 255
    24e6:	fe 01       	movw	r30, r28
    24e8:	ef 56       	subi	r30, 0x6F	; 111
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	80 81       	ld	r24, Z
    24ee:	91 81       	ldd	r25, Z+1	; 0x01
    24f0:	8d 93       	st	X+, r24
    24f2:	9c 93       	st	X, r25
    24f4:	fe 01       	movw	r30, r28
    24f6:	e3 57       	subi	r30, 0x73	; 115
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <update_Accelerometor_f+0x1e6>
    2502:	fe 01       	movw	r30, r28
    2504:	e3 57       	subi	r30, 0x73	; 115
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	80 83       	st	Z, r24
		_delay_ms(2000);
		TWI_Stop();
    250c:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
		return 0;
    2510:	c9 55       	subi	r28, 0x59	; 89
    2512:	df 4f       	sbci	r29, 0xFF	; 255
    2514:	18 82       	st	Y, r1
    2516:	c7 5a       	subi	r28, 0xA7	; 167
    2518:	d0 40       	sbci	r29, 0x00	; 0
    251a:	38 c7       	rjmp	.+3696   	; 0x338c <update_Accelerometor_f+0x1074>
	}

	TWI_Write(ADDRESS_Write & 0xfe);
    251c:	fe 01       	movw	r30, r28
    251e:	ed 55       	subi	r30, 0x5D	; 93
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	80 81       	ld	r24, Z
    2524:	8e 7f       	andi	r24, 0xFE	; 254
    2526:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    252a:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    252e:	88 31       	cpi	r24, 0x18	; 24
    2530:	09 f4       	brne	.+2      	; 0x2534 <update_Accelerometor_f+0x21c>
    2532:	c1 c0       	rjmp	.+386    	; 0x26b6 <update_Accelerometor_f+0x39e>
	{
		LCD_Clear();
    2534:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
		LCD_DisplayString("Gyro_Add_pro");
    2538:	8e e6       	ldi	r24, 0x6E	; 110
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
    2540:	fe 01       	movw	r30, r28
    2542:	e7 57       	subi	r30, 0x77	; 119
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	aa ef       	ldi	r26, 0xFA	; 250
    254c:	b4 e4       	ldi	r27, 0x44	; 68
    254e:	80 83       	st	Z, r24
    2550:	91 83       	std	Z+1, r25	; 0x01
    2552:	a2 83       	std	Z+2, r26	; 0x02
    2554:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2556:	8e 01       	movw	r16, r28
    2558:	0b 57       	subi	r16, 0x7B	; 123
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	fe 01       	movw	r30, r28
    255e:	e7 57       	subi	r30, 0x77	; 119
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	60 81       	ld	r22, Z
    2564:	71 81       	ldd	r23, Z+1	; 0x01
    2566:	82 81       	ldd	r24, Z+2	; 0x02
    2568:	93 81       	ldd	r25, Z+3	; 0x03
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e8       	ldi	r19, 0x80	; 128
    256e:	4b e3       	ldi	r20, 0x3B	; 59
    2570:	55 e4       	ldi	r21, 0x45	; 69
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	f8 01       	movw	r30, r16
    257c:	80 83       	st	Z, r24
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	a2 83       	std	Z+2, r26	; 0x02
    2582:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2584:	fe 01       	movw	r30, r28
    2586:	eb 57       	subi	r30, 0x7B	; 123
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e8       	ldi	r20, 0x80	; 128
    2598:	5f e3       	ldi	r21, 0x3F	; 63
    259a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    259e:	88 23       	and	r24, r24
    25a0:	44 f4       	brge	.+16     	; 0x25b2 <update_Accelerometor_f+0x29a>
		__ticks = 1;
    25a2:	fe 01       	movw	r30, r28
    25a4:	ed 57       	subi	r30, 0x7D	; 125
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	80 83       	st	Z, r24
    25b0:	64 c0       	rjmp	.+200    	; 0x267a <update_Accelerometor_f+0x362>
	else if (__tmp > 65535)
    25b2:	fe 01       	movw	r30, r28
    25b4:	eb 57       	subi	r30, 0x7B	; 123
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	3f ef       	ldi	r19, 0xFF	; 255
    25c4:	4f e7       	ldi	r20, 0x7F	; 127
    25c6:	57 e4       	ldi	r21, 0x47	; 71
    25c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25cc:	18 16       	cp	r1, r24
    25ce:	0c f0       	brlt	.+2      	; 0x25d2 <update_Accelerometor_f+0x2ba>
    25d0:	43 c0       	rjmp	.+134    	; 0x2658 <update_Accelerometor_f+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d2:	fe 01       	movw	r30, r28
    25d4:	e7 57       	subi	r30, 0x77	; 119
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e2       	ldi	r20, 0x20	; 32
    25e6:	51 e4       	ldi	r21, 0x41	; 65
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	8e 01       	movw	r16, r28
    25f2:	0d 57       	subi	r16, 0x7D	; 125
    25f4:	1f 4f       	sbci	r17, 0xFF	; 255
    25f6:	bc 01       	movw	r22, r24
    25f8:	cd 01       	movw	r24, r26
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	f8 01       	movw	r30, r16
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	80 83       	st	Z, r24
    2608:	1f c0       	rjmp	.+62     	; 0x2648 <update_Accelerometor_f+0x330>
    260a:	fe 01       	movw	r30, r28
    260c:	ef 57       	subi	r30, 0x7F	; 127
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	8c e2       	ldi	r24, 0x2C	; 44
    2612:	91 e0       	ldi	r25, 0x01	; 1
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	80 83       	st	Z, r24
    2618:	fe 01       	movw	r30, r28
    261a:	ef 57       	subi	r30, 0x7F	; 127
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	80 81       	ld	r24, Z
    2620:	91 81       	ldd	r25, Z+1	; 0x01
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <update_Accelerometor_f+0x30a>
    2626:	fe 01       	movw	r30, r28
    2628:	ef 57       	subi	r30, 0x7F	; 127
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2630:	de 01       	movw	r26, r28
    2632:	ad 57       	subi	r26, 0x7D	; 125
    2634:	bf 4f       	sbci	r27, 0xFF	; 255
    2636:	fe 01       	movw	r30, r28
    2638:	ed 57       	subi	r30, 0x7D	; 125
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 81       	ld	r24, Z
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	11 96       	adiw	r26, 0x01	; 1
    2644:	9c 93       	st	X, r25
    2646:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2648:	fe 01       	movw	r30, r28
    264a:	ed 57       	subi	r30, 0x7D	; 125
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	80 81       	ld	r24, Z
    2650:	91 81       	ldd	r25, Z+1	; 0x01
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	d1 f6       	brne	.-76     	; 0x260a <update_Accelerometor_f+0x2f2>
    2656:	27 c0       	rjmp	.+78     	; 0x26a6 <update_Accelerometor_f+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2658:	8e 01       	movw	r16, r28
    265a:	0d 57       	subi	r16, 0x7D	; 125
    265c:	1f 4f       	sbci	r17, 0xFF	; 255
    265e:	fe 01       	movw	r30, r28
    2660:	eb 57       	subi	r30, 0x7B	; 123
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	60 81       	ld	r22, Z
    2666:	71 81       	ldd	r23, Z+1	; 0x01
    2668:	82 81       	ldd	r24, Z+2	; 0x02
    266a:	93 81       	ldd	r25, Z+3	; 0x03
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	f8 01       	movw	r30, r16
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
    267a:	de 01       	movw	r26, r28
    267c:	a1 58       	subi	r26, 0x81	; 129
    267e:	bf 4f       	sbci	r27, 0xFF	; 255
    2680:	fe 01       	movw	r30, r28
    2682:	ed 57       	subi	r30, 0x7D	; 125
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	8d 93       	st	X+, r24
    268c:	9c 93       	st	X, r25
    268e:	fe 01       	movw	r30, r28
    2690:	e1 58       	subi	r30, 0x81	; 129
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <update_Accelerometor_f+0x380>
    269c:	fe 01       	movw	r30, r28
    269e:	e1 58       	subi	r30, 0x81	; 129
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	80 83       	st	Z, r24
		_delay_ms(2000);
		TWI_Stop();
    26a6:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
		return 0;
    26aa:	c9 55       	subi	r28, 0x59	; 89
    26ac:	df 4f       	sbci	r29, 0xFF	; 255
    26ae:	18 82       	st	Y, r1
    26b0:	c7 5a       	subi	r28, 0xA7	; 167
    26b2:	d0 40       	sbci	r29, 0x00	; 0
    26b4:	6b c6       	rjmp	.+3286   	; 0x338c <update_Accelerometor_f+0x1074>
	}

	TWI_Write(reg1_add);
    26b6:	fe 01       	movw	r30, r28
    26b8:	ef 55       	subi	r30, 0x5F	; 95
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    26c2:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    26c6:	88 32       	cpi	r24, 0x28	; 40
    26c8:	09 f4       	brne	.+2      	; 0x26cc <update_Accelerometor_f+0x3b4>
    26ca:	c1 c0       	rjmp	.+386    	; 0x284e <update_Accelerometor_f+0x536>
	{
		LCD_Clear();
    26cc:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
		LCD_DisplayString("Reg1_addr");
    26d0:	8b e7       	ldi	r24, 0x7B	; 123
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
    26d8:	fe 01       	movw	r30, r28
    26da:	e5 58       	subi	r30, 0x85	; 133
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	aa ef       	ldi	r26, 0xFA	; 250
    26e4:	b4 e4       	ldi	r27, 0x44	; 68
    26e6:	80 83       	st	Z, r24
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	a2 83       	std	Z+2, r26	; 0x02
    26ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ee:	8e 01       	movw	r16, r28
    26f0:	09 58       	subi	r16, 0x89	; 137
    26f2:	1f 4f       	sbci	r17, 0xFF	; 255
    26f4:	fe 01       	movw	r30, r28
    26f6:	e5 58       	subi	r30, 0x85	; 133
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	60 81       	ld	r22, Z
    26fc:	71 81       	ldd	r23, Z+1	; 0x01
    26fe:	82 81       	ldd	r24, Z+2	; 0x02
    2700:	93 81       	ldd	r25, Z+3	; 0x03
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e8       	ldi	r19, 0x80	; 128
    2706:	4b e3       	ldi	r20, 0x3B	; 59
    2708:	55 e4       	ldi	r21, 0x45	; 69
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	f8 01       	movw	r30, r16
    2714:	80 83       	st	Z, r24
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	a2 83       	std	Z+2, r26	; 0x02
    271a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    271c:	fe 01       	movw	r30, r28
    271e:	e9 58       	subi	r30, 0x89	; 137
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	60 81       	ld	r22, Z
    2724:	71 81       	ldd	r23, Z+1	; 0x01
    2726:	82 81       	ldd	r24, Z+2	; 0x02
    2728:	93 81       	ldd	r25, Z+3	; 0x03
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e8       	ldi	r20, 0x80	; 128
    2730:	5f e3       	ldi	r21, 0x3F	; 63
    2732:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2736:	88 23       	and	r24, r24
    2738:	44 f4       	brge	.+16     	; 0x274a <update_Accelerometor_f+0x432>
		__ticks = 1;
    273a:	fe 01       	movw	r30, r28
    273c:	eb 58       	subi	r30, 0x8B	; 139
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	80 83       	st	Z, r24
    2748:	64 c0       	rjmp	.+200    	; 0x2812 <update_Accelerometor_f+0x4fa>
	else if (__tmp > 65535)
    274a:	fe 01       	movw	r30, r28
    274c:	e9 58       	subi	r30, 0x89	; 137
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	3f ef       	ldi	r19, 0xFF	; 255
    275c:	4f e7       	ldi	r20, 0x7F	; 127
    275e:	57 e4       	ldi	r21, 0x47	; 71
    2760:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2764:	18 16       	cp	r1, r24
    2766:	0c f0       	brlt	.+2      	; 0x276a <update_Accelerometor_f+0x452>
    2768:	43 c0       	rjmp	.+134    	; 0x27f0 <update_Accelerometor_f+0x4d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276a:	fe 01       	movw	r30, r28
    276c:	e5 58       	subi	r30, 0x85	; 133
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	60 81       	ld	r22, Z
    2772:	71 81       	ldd	r23, Z+1	; 0x01
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e2       	ldi	r20, 0x20	; 32
    277e:	51 e4       	ldi	r21, 0x41	; 65
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	8e 01       	movw	r16, r28
    278a:	0b 58       	subi	r16, 0x8B	; 139
    278c:	1f 4f       	sbci	r17, 0xFF	; 255
    278e:	bc 01       	movw	r22, r24
    2790:	cd 01       	movw	r24, r26
    2792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	f8 01       	movw	r30, r16
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	80 83       	st	Z, r24
    27a0:	1f c0       	rjmp	.+62     	; 0x27e0 <update_Accelerometor_f+0x4c8>
    27a2:	fe 01       	movw	r30, r28
    27a4:	ed 58       	subi	r30, 0x8D	; 141
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	8c e2       	ldi	r24, 0x2C	; 44
    27aa:	91 e0       	ldi	r25, 0x01	; 1
    27ac:	91 83       	std	Z+1, r25	; 0x01
    27ae:	80 83       	st	Z, r24
    27b0:	fe 01       	movw	r30, r28
    27b2:	ed 58       	subi	r30, 0x8D	; 141
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	80 81       	ld	r24, Z
    27b8:	91 81       	ldd	r25, Z+1	; 0x01
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <update_Accelerometor_f+0x4a2>
    27be:	fe 01       	movw	r30, r28
    27c0:	ed 58       	subi	r30, 0x8D	; 141
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c8:	de 01       	movw	r26, r28
    27ca:	ab 58       	subi	r26, 0x8B	; 139
    27cc:	bf 4f       	sbci	r27, 0xFF	; 255
    27ce:	fe 01       	movw	r30, r28
    27d0:	eb 58       	subi	r30, 0x8B	; 139
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	91 81       	ldd	r25, Z+1	; 0x01
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	11 96       	adiw	r26, 0x01	; 1
    27dc:	9c 93       	st	X, r25
    27de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e0:	fe 01       	movw	r30, r28
    27e2:	eb 58       	subi	r30, 0x8B	; 139
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	d1 f6       	brne	.-76     	; 0x27a2 <update_Accelerometor_f+0x48a>
    27ee:	27 c0       	rjmp	.+78     	; 0x283e <update_Accelerometor_f+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f0:	8e 01       	movw	r16, r28
    27f2:	0b 58       	subi	r16, 0x8B	; 139
    27f4:	1f 4f       	sbci	r17, 0xFF	; 255
    27f6:	fe 01       	movw	r30, r28
    27f8:	e9 58       	subi	r30, 0x89	; 137
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	60 81       	ld	r22, Z
    27fe:	71 81       	ldd	r23, Z+1	; 0x01
    2800:	82 81       	ldd	r24, Z+2	; 0x02
    2802:	93 81       	ldd	r25, Z+3	; 0x03
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	f8 01       	movw	r30, r16
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	80 83       	st	Z, r24
    2812:	de 01       	movw	r26, r28
    2814:	af 58       	subi	r26, 0x8F	; 143
    2816:	bf 4f       	sbci	r27, 0xFF	; 255
    2818:	fe 01       	movw	r30, r28
    281a:	eb 58       	subi	r30, 0x8B	; 139
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 81       	ld	r24, Z
    2820:	91 81       	ldd	r25, Z+1	; 0x01
    2822:	8d 93       	st	X+, r24
    2824:	9c 93       	st	X, r25
    2826:	fe 01       	movw	r30, r28
    2828:	ef 58       	subi	r30, 0x8F	; 143
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <update_Accelerometor_f+0x518>
    2834:	fe 01       	movw	r30, r28
    2836:	ef 58       	subi	r30, 0x8F	; 143
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	91 83       	std	Z+1, r25	; 0x01
    283c:	80 83       	st	Z, r24
		_delay_ms(2000);
		TWI_Stop();
    283e:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
		return 0;
    2842:	c9 55       	subi	r28, 0x59	; 89
    2844:	df 4f       	sbci	r29, 0xFF	; 255
    2846:	18 82       	st	Y, r1
    2848:	c7 5a       	subi	r28, 0xA7	; 167
    284a:	d0 40       	sbci	r29, 0x00	; 0
    284c:	9f c5       	rjmp	.+2878   	; 0x338c <update_Accelerometor_f+0x1074>
	}

	TWI_Start();
    284e:	0e 94 ab 08 	call	0x1156	; 0x1156 <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    2852:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    2856:	80 31       	cpi	r24, 0x10	; 16
    2858:	09 f4       	brne	.+2      	; 0x285c <update_Accelerometor_f+0x544>
    285a:	c1 c0       	rjmp	.+386    	; 0x29de <update_Accelerometor_f+0x6c6>
	{
		LCD_Clear();
    285c:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
		LCD_DisplayString("Repeated_start");
    2860:	85 e8       	ldi	r24, 0x85	; 133
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
    2868:	fe 01       	movw	r30, r28
    286a:	e3 59       	subi	r30, 0x93	; 147
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	aa ef       	ldi	r26, 0xFA	; 250
    2874:	b4 e4       	ldi	r27, 0x44	; 68
    2876:	80 83       	st	Z, r24
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	a2 83       	std	Z+2, r26	; 0x02
    287c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287e:	8e 01       	movw	r16, r28
    2880:	07 59       	subi	r16, 0x97	; 151
    2882:	1f 4f       	sbci	r17, 0xFF	; 255
    2884:	fe 01       	movw	r30, r28
    2886:	e3 59       	subi	r30, 0x93	; 147
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	60 81       	ld	r22, Z
    288c:	71 81       	ldd	r23, Z+1	; 0x01
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	93 81       	ldd	r25, Z+3	; 0x03
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e8       	ldi	r19, 0x80	; 128
    2896:	4b e3       	ldi	r20, 0x3B	; 59
    2898:	55 e4       	ldi	r21, 0x45	; 69
    289a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	f8 01       	movw	r30, r16
    28a4:	80 83       	st	Z, r24
    28a6:	91 83       	std	Z+1, r25	; 0x01
    28a8:	a2 83       	std	Z+2, r26	; 0x02
    28aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ac:	fe 01       	movw	r30, r28
    28ae:	e7 59       	subi	r30, 0x97	; 151
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	60 81       	ld	r22, Z
    28b4:	71 81       	ldd	r23, Z+1	; 0x01
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e8       	ldi	r20, 0x80	; 128
    28c0:	5f e3       	ldi	r21, 0x3F	; 63
    28c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c6:	88 23       	and	r24, r24
    28c8:	44 f4       	brge	.+16     	; 0x28da <update_Accelerometor_f+0x5c2>
		__ticks = 1;
    28ca:	fe 01       	movw	r30, r28
    28cc:	e9 59       	subi	r30, 0x99	; 153
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	64 c0       	rjmp	.+200    	; 0x29a2 <update_Accelerometor_f+0x68a>
	else if (__tmp > 65535)
    28da:	fe 01       	movw	r30, r28
    28dc:	e7 59       	subi	r30, 0x97	; 151
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	82 81       	ldd	r24, Z+2	; 0x02
    28e6:	93 81       	ldd	r25, Z+3	; 0x03
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	57 e4       	ldi	r21, 0x47	; 71
    28f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28f4:	18 16       	cp	r1, r24
    28f6:	0c f0       	brlt	.+2      	; 0x28fa <update_Accelerometor_f+0x5e2>
    28f8:	43 c0       	rjmp	.+134    	; 0x2980 <update_Accelerometor_f+0x668>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fa:	fe 01       	movw	r30, r28
    28fc:	e3 59       	subi	r30, 0x93	; 147
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	51 e4       	ldi	r21, 0x41	; 65
    2910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	8e 01       	movw	r16, r28
    291a:	09 59       	subi	r16, 0x99	; 153
    291c:	1f 4f       	sbci	r17, 0xFF	; 255
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	f8 01       	movw	r30, r16
    292c:	91 83       	std	Z+1, r25	; 0x01
    292e:	80 83       	st	Z, r24
    2930:	1f c0       	rjmp	.+62     	; 0x2970 <update_Accelerometor_f+0x658>
    2932:	fe 01       	movw	r30, r28
    2934:	eb 59       	subi	r30, 0x9B	; 155
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	8c e2       	ldi	r24, 0x2C	; 44
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	80 83       	st	Z, r24
    2940:	fe 01       	movw	r30, r28
    2942:	eb 59       	subi	r30, 0x9B	; 155
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	80 81       	ld	r24, Z
    2948:	91 81       	ldd	r25, Z+1	; 0x01
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <update_Accelerometor_f+0x632>
    294e:	fe 01       	movw	r30, r28
    2950:	eb 59       	subi	r30, 0x9B	; 155
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2958:	de 01       	movw	r26, r28
    295a:	a9 59       	subi	r26, 0x99	; 153
    295c:	bf 4f       	sbci	r27, 0xFF	; 255
    295e:	fe 01       	movw	r30, r28
    2960:	e9 59       	subi	r30, 0x99	; 153
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	91 81       	ldd	r25, Z+1	; 0x01
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	11 96       	adiw	r26, 0x01	; 1
    296c:	9c 93       	st	X, r25
    296e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2970:	fe 01       	movw	r30, r28
    2972:	e9 59       	subi	r30, 0x99	; 153
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	80 81       	ld	r24, Z
    2978:	91 81       	ldd	r25, Z+1	; 0x01
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	d1 f6       	brne	.-76     	; 0x2932 <update_Accelerometor_f+0x61a>
    297e:	27 c0       	rjmp	.+78     	; 0x29ce <update_Accelerometor_f+0x6b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2980:	8e 01       	movw	r16, r28
    2982:	09 59       	subi	r16, 0x99	; 153
    2984:	1f 4f       	sbci	r17, 0xFF	; 255
    2986:	fe 01       	movw	r30, r28
    2988:	e7 59       	subi	r30, 0x97	; 151
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	f8 01       	movw	r30, r16
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	80 83       	st	Z, r24
    29a2:	de 01       	movw	r26, r28
    29a4:	ad 59       	subi	r26, 0x9D	; 157
    29a6:	bf 4f       	sbci	r27, 0xFF	; 255
    29a8:	fe 01       	movw	r30, r28
    29aa:	e9 59       	subi	r30, 0x99	; 153
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	91 81       	ldd	r25, Z+1	; 0x01
    29b2:	8d 93       	st	X+, r24
    29b4:	9c 93       	st	X, r25
    29b6:	fe 01       	movw	r30, r28
    29b8:	ed 59       	subi	r30, 0x9D	; 157
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 81       	ld	r24, Z
    29be:	91 81       	ldd	r25, Z+1	; 0x01
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <update_Accelerometor_f+0x6a8>
    29c4:	fe 01       	movw	r30, r28
    29c6:	ed 59       	subi	r30, 0x9D	; 157
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	91 83       	std	Z+1, r25	; 0x01
    29cc:	80 83       	st	Z, r24
		_delay_ms(2000);
		TWI_Stop();
    29ce:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
		return 0;
    29d2:	c9 55       	subi	r28, 0x59	; 89
    29d4:	df 4f       	sbci	r29, 0xFF	; 255
    29d6:	18 82       	st	Y, r1
    29d8:	c7 5a       	subi	r28, 0xA7	; 167
    29da:	d0 40       	sbci	r29, 0x00	; 0
    29dc:	d7 c4       	rjmp	.+2478   	; 0x338c <update_Accelerometor_f+0x1074>
	}

	TWI_Write(ADDRESS_Read );
    29de:	fe 01       	movw	r30, r28
    29e0:	ec 55       	subi	r30, 0x5C	; 92
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	80 81       	ld	r24, Z
    29e6:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    29ea:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    29ee:	80 34       	cpi	r24, 0x40	; 64
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <update_Accelerometor_f+0x6dc>
    29f2:	c1 c0       	rjmp	.+386    	; 0x2b76 <update_Accelerometor_f+0x85e>
	{
		LCD_Clear();
    29f4:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
		LCD_DisplayString("Gyro_rep ");
    29f8:	84 e9       	ldi	r24, 0x94	; 148
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
    2a00:	fe 01       	movw	r30, r28
    2a02:	e1 5a       	subi	r30, 0xA1	; 161
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	aa ef       	ldi	r26, 0xFA	; 250
    2a0c:	b4 e4       	ldi	r27, 0x44	; 68
    2a0e:	80 83       	st	Z, r24
    2a10:	91 83       	std	Z+1, r25	; 0x01
    2a12:	a2 83       	std	Z+2, r26	; 0x02
    2a14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a16:	8e 01       	movw	r16, r28
    2a18:	05 5a       	subi	r16, 0xA5	; 165
    2a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e1 5a       	subi	r30, 0xA1	; 161
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e8       	ldi	r19, 0x80	; 128
    2a2e:	4b e3       	ldi	r20, 0x3B	; 59
    2a30:	55 e4       	ldi	r21, 0x45	; 69
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	f8 01       	movw	r30, r16
    2a3c:	80 83       	st	Z, r24
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	a2 83       	std	Z+2, r26	; 0x02
    2a42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a44:	fe 01       	movw	r30, r28
    2a46:	e5 5a       	subi	r30, 0xA5	; 165
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	60 81       	ld	r22, Z
    2a4c:	71 81       	ldd	r23, Z+1	; 0x01
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	93 81       	ldd	r25, Z+3	; 0x03
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e8       	ldi	r20, 0x80	; 128
    2a58:	5f e3       	ldi	r21, 0x3F	; 63
    2a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a5e:	88 23       	and	r24, r24
    2a60:	44 f4       	brge	.+16     	; 0x2a72 <update_Accelerometor_f+0x75a>
		__ticks = 1;
    2a62:	fe 01       	movw	r30, r28
    2a64:	e7 5a       	subi	r30, 0xA7	; 167
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
    2a70:	64 c0       	rjmp	.+200    	; 0x2b3a <update_Accelerometor_f+0x822>
	else if (__tmp > 65535)
    2a72:	fe 01       	movw	r30, r28
    2a74:	e5 5a       	subi	r30, 0xA5	; 165
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	60 81       	ld	r22, Z
    2a7a:	71 81       	ldd	r23, Z+1	; 0x01
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	0c f0       	brlt	.+2      	; 0x2a92 <update_Accelerometor_f+0x77a>
    2a90:	43 c0       	rjmp	.+134    	; 0x2b18 <update_Accelerometor_f+0x800>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a92:	fe 01       	movw	r30, r28
    2a94:	e1 5a       	subi	r30, 0xA1	; 161
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e2       	ldi	r20, 0x20	; 32
    2aa6:	51 e4       	ldi	r21, 0x41	; 65
    2aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	8e 01       	movw	r16, r28
    2ab2:	07 5a       	subi	r16, 0xA7	; 167
    2ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	f8 01       	movw	r30, r16
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	80 83       	st	Z, r24
    2ac8:	1f c0       	rjmp	.+62     	; 0x2b08 <update_Accelerometor_f+0x7f0>
    2aca:	fe 01       	movw	r30, r28
    2acc:	e9 5a       	subi	r30, 0xA9	; 169
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	8c e2       	ldi	r24, 0x2C	; 44
    2ad2:	91 e0       	ldi	r25, 0x01	; 1
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	80 83       	st	Z, r24
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e9 5a       	subi	r30, 0xA9	; 169
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <update_Accelerometor_f+0x7ca>
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e9 5a       	subi	r30, 0xA9	; 169
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af0:	de 01       	movw	r26, r28
    2af2:	a7 5a       	subi	r26, 0xA7	; 167
    2af4:	bf 4f       	sbci	r27, 0xFF	; 255
    2af6:	fe 01       	movw	r30, r28
    2af8:	e7 5a       	subi	r30, 0xA7	; 167
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	80 81       	ld	r24, Z
    2afe:	91 81       	ldd	r25, Z+1	; 0x01
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	11 96       	adiw	r26, 0x01	; 1
    2b04:	9c 93       	st	X, r25
    2b06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e7 5a       	subi	r30, 0xA7	; 167
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	91 81       	ldd	r25, Z+1	; 0x01
    2b12:	00 97       	sbiw	r24, 0x00	; 0
    2b14:	d1 f6       	brne	.-76     	; 0x2aca <update_Accelerometor_f+0x7b2>
    2b16:	27 c0       	rjmp	.+78     	; 0x2b66 <update_Accelerometor_f+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b18:	8e 01       	movw	r16, r28
    2b1a:	07 5a       	subi	r16, 0xA7	; 167
    2b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e5 5a       	subi	r30, 0xA5	; 165
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	f8 01       	movw	r30, r16
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	80 83       	st	Z, r24
    2b3a:	de 01       	movw	r26, r28
    2b3c:	ab 5a       	subi	r26, 0xAB	; 171
    2b3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b40:	fe 01       	movw	r30, r28
    2b42:	e7 5a       	subi	r30, 0xA7	; 167
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 81       	ld	r24, Z
    2b48:	91 81       	ldd	r25, Z+1	; 0x01
    2b4a:	8d 93       	st	X+, r24
    2b4c:	9c 93       	st	X, r25
    2b4e:	fe 01       	movw	r30, r28
    2b50:	eb 5a       	subi	r30, 0xAB	; 171
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	91 81       	ldd	r25, Z+1	; 0x01
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	f1 f7       	brne	.-4      	; 0x2b58 <update_Accelerometor_f+0x840>
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	eb 5a       	subi	r30, 0xAB	; 171
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	91 83       	std	Z+1, r25	; 0x01
    2b64:	80 83       	st	Z, r24
		_delay_ms(2000);
		TWI_Stop();
    2b66:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
		return 0;
    2b6a:	c9 55       	subi	r28, 0x59	; 89
    2b6c:	df 4f       	sbci	r29, 0xFF	; 255
    2b6e:	18 82       	st	Y, r1
    2b70:	c7 5a       	subi	r28, 0xA7	; 167
    2b72:	d0 40       	sbci	r29, 0x00	; 0
    2b74:	0b c4       	rjmp	.+2070   	; 0x338c <update_Accelerometor_f+0x1074>
	}

	X_low_val = TWI_Read_With_ACK();
    2b76:	0e 94 dd 08 	call	0x11ba	; 0x11ba <TWI_Read_With_ACK>
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e0 56       	subi	r30, 0x60	; 96
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_ACK)
    2b82:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    2b86:	80 35       	cpi	r24, 0x50	; 80
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <update_Accelerometor_f+0x874>
    2b8a:	c2 c0       	rjmp	.+388    	; 0x2d10 <update_Accelerometor_f+0x9f8>
	{
		LCD_Clear();
    2b8c:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
		LCD_DisplayString("Reg1_read");
    2b90:	8e e9       	ldi	r24, 0x9E	; 158
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
		TWI_Stop();
    2b98:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	ef 5a       	subi	r30, 0xAF	; 175
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	aa ef       	ldi	r26, 0xFA	; 250
    2ba8:	b4 e4       	ldi	r27, 0x44	; 68
    2baa:	80 83       	st	Z, r24
    2bac:	91 83       	std	Z+1, r25	; 0x01
    2bae:	a2 83       	std	Z+2, r26	; 0x02
    2bb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb2:	8e 01       	movw	r16, r28
    2bb4:	03 5b       	subi	r16, 0xB3	; 179
    2bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb8:	fe 01       	movw	r30, r28
    2bba:	ef 5a       	subi	r30, 0xAF	; 175
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	60 81       	ld	r22, Z
    2bc0:	71 81       	ldd	r23, Z+1	; 0x01
    2bc2:	82 81       	ldd	r24, Z+2	; 0x02
    2bc4:	93 81       	ldd	r25, Z+3	; 0x03
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e8       	ldi	r19, 0x80	; 128
    2bca:	4b e3       	ldi	r20, 0x3B	; 59
    2bcc:	55 e4       	ldi	r21, 0x45	; 69
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	f8 01       	movw	r30, r16
    2bd8:	80 83       	st	Z, r24
    2bda:	91 83       	std	Z+1, r25	; 0x01
    2bdc:	a2 83       	std	Z+2, r26	; 0x02
    2bde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2be0:	fe 01       	movw	r30, r28
    2be2:	e3 5b       	subi	r30, 0xB3	; 179
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	60 81       	ld	r22, Z
    2be8:	71 81       	ldd	r23, Z+1	; 0x01
    2bea:	82 81       	ldd	r24, Z+2	; 0x02
    2bec:	93 81       	ldd	r25, Z+3	; 0x03
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e8       	ldi	r20, 0x80	; 128
    2bf4:	5f e3       	ldi	r21, 0x3F	; 63
    2bf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bfa:	88 23       	and	r24, r24
    2bfc:	44 f4       	brge	.+16     	; 0x2c0e <update_Accelerometor_f+0x8f6>
		__ticks = 1;
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e5 5b       	subi	r30, 0xB5	; 181
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	80 83       	st	Z, r24
    2c0c:	64 c0       	rjmp	.+200    	; 0x2cd6 <update_Accelerometor_f+0x9be>
	else if (__tmp > 65535)
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e3 5b       	subi	r30, 0xB3	; 179
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	3f ef       	ldi	r19, 0xFF	; 255
    2c20:	4f e7       	ldi	r20, 0x7F	; 127
    2c22:	57 e4       	ldi	r21, 0x47	; 71
    2c24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c28:	18 16       	cp	r1, r24
    2c2a:	0c f0       	brlt	.+2      	; 0x2c2e <update_Accelerometor_f+0x916>
    2c2c:	43 c0       	rjmp	.+134    	; 0x2cb4 <update_Accelerometor_f+0x99c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2e:	fe 01       	movw	r30, r28
    2c30:	ef 5a       	subi	r30, 0xAF	; 175
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	60 81       	ld	r22, Z
    2c36:	71 81       	ldd	r23, Z+1	; 0x01
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e2       	ldi	r20, 0x20	; 32
    2c42:	51 e4       	ldi	r21, 0x41	; 65
    2c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	8e 01       	movw	r16, r28
    2c4e:	05 5b       	subi	r16, 0xB5	; 181
    2c50:	1f 4f       	sbci	r17, 0xFF	; 255
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	f8 01       	movw	r30, r16
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	80 83       	st	Z, r24
    2c64:	1f c0       	rjmp	.+62     	; 0x2ca4 <update_Accelerometor_f+0x98c>
    2c66:	fe 01       	movw	r30, r28
    2c68:	e7 5b       	subi	r30, 0xB7	; 183
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	8c e2       	ldi	r24, 0x2C	; 44
    2c6e:	91 e0       	ldi	r25, 0x01	; 1
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	80 83       	st	Z, r24
    2c74:	fe 01       	movw	r30, r28
    2c76:	e7 5b       	subi	r30, 0xB7	; 183
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	80 81       	ld	r24, Z
    2c7c:	91 81       	ldd	r25, Z+1	; 0x01
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <update_Accelerometor_f+0x966>
    2c82:	fe 01       	movw	r30, r28
    2c84:	e7 5b       	subi	r30, 0xB7	; 183
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8c:	de 01       	movw	r26, r28
    2c8e:	a5 5b       	subi	r26, 0xB5	; 181
    2c90:	bf 4f       	sbci	r27, 0xFF	; 255
    2c92:	fe 01       	movw	r30, r28
    2c94:	e5 5b       	subi	r30, 0xB5	; 181
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	80 81       	ld	r24, Z
    2c9a:	91 81       	ldd	r25, Z+1	; 0x01
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	11 96       	adiw	r26, 0x01	; 1
    2ca0:	9c 93       	st	X, r25
    2ca2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	e5 5b       	subi	r30, 0xB5	; 181
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	80 81       	ld	r24, Z
    2cac:	91 81       	ldd	r25, Z+1	; 0x01
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	d1 f6       	brne	.-76     	; 0x2c66 <update_Accelerometor_f+0x94e>
    2cb2:	28 c0       	rjmp	.+80     	; 0x2d04 <update_Accelerometor_f+0x9ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb4:	8e 01       	movw	r16, r28
    2cb6:	05 5b       	subi	r16, 0xB5	; 181
    2cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cba:	fe 01       	movw	r30, r28
    2cbc:	e3 5b       	subi	r30, 0xB3	; 179
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	60 81       	ld	r22, Z
    2cc2:	71 81       	ldd	r23, Z+1	; 0x01
    2cc4:	82 81       	ldd	r24, Z+2	; 0x02
    2cc6:	93 81       	ldd	r25, Z+3	; 0x03
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	80 83       	st	Z, r24
    2cd6:	de 01       	movw	r26, r28
    2cd8:	a9 5b       	subi	r26, 0xB9	; 185
    2cda:	bf 4f       	sbci	r27, 0xFF	; 255
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e5 5b       	subi	r30, 0xB5	; 181
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
    2ce6:	11 96       	adiw	r26, 0x01	; 1
    2ce8:	9c 93       	st	X, r25
    2cea:	8e 93       	st	-X, r24
    2cec:	fe 01       	movw	r30, r28
    2cee:	e9 5b       	subi	r30, 0xB9	; 185
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <update_Accelerometor_f+0x9de>
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e9 5b       	subi	r30, 0xB9	; 185
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	80 83       	st	Z, r24
		_delay_ms(2000);
		return 0;
    2d04:	c9 55       	subi	r28, 0x59	; 89
    2d06:	df 4f       	sbci	r29, 0xFF	; 255
    2d08:	18 82       	st	Y, r1
    2d0a:	c7 5a       	subi	r28, 0xA7	; 167
    2d0c:	d0 40       	sbci	r29, 0x00	; 0
    2d0e:	3e c3       	rjmp	.+1660   	; 0x338c <update_Accelerometor_f+0x1074>
	}

	x_High_val = TWI_Read_With_ACK();
    2d10:	0e 94 dd 08 	call	0x11ba	; 0x11ba <TWI_Read_With_ACK>
    2d14:	fe 01       	movw	r30, r28
    2d16:	e1 56       	subi	r30, 0x61	; 97
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_ACK)
    2d1c:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    2d20:	80 35       	cpi	r24, 0x50	; 80
    2d22:	09 f4       	brne	.+2      	; 0x2d26 <update_Accelerometor_f+0xa0e>
    2d24:	93 c0       	rjmp	.+294    	; 0x2e4c <update_Accelerometor_f+0xb34>
	{
		LCD_Clear();
    2d26:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
		LCD_DisplayString("Reg2_read");
    2d2a:	88 ea       	ldi	r24, 0xA8	; 168
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
		TWI_Stop();
    2d32:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
    2d36:	fe 01       	movw	r30, r28
    2d38:	ed 5b       	subi	r30, 0xBD	; 189
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	aa ef       	ldi	r26, 0xFA	; 250
    2d42:	b4 e4       	ldi	r27, 0x44	; 68
    2d44:	80 83       	st	Z, r24
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	a2 83       	std	Z+2, r26	; 0x02
    2d4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d4c:	8e 01       	movw	r16, r28
    2d4e:	01 5c       	subi	r16, 0xC1	; 193
    2d50:	1f 4f       	sbci	r17, 0xFF	; 255
    2d52:	fe 01       	movw	r30, r28
    2d54:	ed 5b       	subi	r30, 0xBD	; 189
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	60 81       	ld	r22, Z
    2d5a:	71 81       	ldd	r23, Z+1	; 0x01
    2d5c:	82 81       	ldd	r24, Z+2	; 0x02
    2d5e:	93 81       	ldd	r25, Z+3	; 0x03
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e8       	ldi	r19, 0x80	; 128
    2d64:	4b e3       	ldi	r20, 0x3B	; 59
    2d66:	55 e4       	ldi	r21, 0x45	; 69
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	f8 01       	movw	r30, r16
    2d72:	80 83       	st	Z, r24
    2d74:	91 83       	std	Z+1, r25	; 0x01
    2d76:	a2 83       	std	Z+2, r26	; 0x02
    2d78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	ff 96       	adiw	r30, 0x3f	; 63
    2d7e:	60 81       	ld	r22, Z
    2d80:	71 81       	ldd	r23, Z+1	; 0x01
    2d82:	82 81       	ldd	r24, Z+2	; 0x02
    2d84:	93 81       	ldd	r25, Z+3	; 0x03
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e8       	ldi	r20, 0x80	; 128
    2d8c:	5f e3       	ldi	r21, 0x3F	; 63
    2d8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d92:	88 23       	and	r24, r24
    2d94:	2c f4       	brge	.+10     	; 0x2da0 <update_Accelerometor_f+0xa88>
		__ticks = 1;
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	9e af       	std	Y+62, r25	; 0x3e
    2d9c:	8d af       	std	Y+61, r24	; 0x3d
    2d9e:	46 c0       	rjmp	.+140    	; 0x2e2c <update_Accelerometor_f+0xb14>
	else if (__tmp > 65535)
    2da0:	fe 01       	movw	r30, r28
    2da2:	ff 96       	adiw	r30, 0x3f	; 63
    2da4:	60 81       	ld	r22, Z
    2da6:	71 81       	ldd	r23, Z+1	; 0x01
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	3f ef       	ldi	r19, 0xFF	; 255
    2db0:	4f e7       	ldi	r20, 0x7F	; 127
    2db2:	57 e4       	ldi	r21, 0x47	; 71
    2db4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2db8:	18 16       	cp	r1, r24
    2dba:	64 f5       	brge	.+88     	; 0x2e14 <update_Accelerometor_f+0xafc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	ed 5b       	subi	r30, 0xBD	; 189
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	60 81       	ld	r22, Z
    2dc4:	71 81       	ldd	r23, Z+1	; 0x01
    2dc6:	82 81       	ldd	r24, Z+2	; 0x02
    2dc8:	93 81       	ldd	r25, Z+3	; 0x03
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e2       	ldi	r20, 0x20	; 32
    2dd0:	51 e4       	ldi	r21, 0x41	; 65
    2dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	bc 01       	movw	r22, r24
    2ddc:	cd 01       	movw	r24, r26
    2dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	9e af       	std	Y+62, r25	; 0x3e
    2de8:	8d af       	std	Y+61, r24	; 0x3d
    2dea:	0f c0       	rjmp	.+30     	; 0x2e0a <update_Accelerometor_f+0xaf2>
    2dec:	8c e2       	ldi	r24, 0x2C	; 44
    2dee:	91 e0       	ldi	r25, 0x01	; 1
    2df0:	9c af       	std	Y+60, r25	; 0x3c
    2df2:	8b af       	std	Y+59, r24	; 0x3b
    2df4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2df6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <update_Accelerometor_f+0xae0>
    2dfc:	9c af       	std	Y+60, r25	; 0x3c
    2dfe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e00:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e02:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	9e af       	std	Y+62, r25	; 0x3e
    2e08:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	69 f7       	brne	.-38     	; 0x2dec <update_Accelerometor_f+0xad4>
    2e12:	16 c0       	rjmp	.+44     	; 0x2e40 <update_Accelerometor_f+0xb28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e14:	fe 01       	movw	r30, r28
    2e16:	ff 96       	adiw	r30, 0x3f	; 63
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	9e af       	std	Y+62, r25	; 0x3e
    2e2a:	8d af       	std	Y+61, r24	; 0x3d
    2e2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e30:	9a af       	std	Y+58, r25	; 0x3a
    2e32:	89 af       	std	Y+57, r24	; 0x39
    2e34:	89 ad       	ldd	r24, Y+57	; 0x39
    2e36:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <update_Accelerometor_f+0xb20>
    2e3c:	9a af       	std	Y+58, r25	; 0x3a
    2e3e:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(2000);
		return 0;
    2e40:	c9 55       	subi	r28, 0x59	; 89
    2e42:	df 4f       	sbci	r29, 0xFF	; 255
    2e44:	18 82       	st	Y, r1
    2e46:	c7 5a       	subi	r28, 0xA7	; 167
    2e48:	d0 40       	sbci	r29, 0x00	; 0
    2e4a:	a0 c2       	rjmp	.+1344   	; 0x338c <update_Accelerometor_f+0x1074>
	}

	y_low_val = TWI_Read_With_ACK();
    2e4c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <TWI_Read_With_ACK>
    2e50:	fe 01       	movw	r30, r28
    2e52:	e2 56       	subi	r30, 0x62	; 98
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_ACK)
    2e58:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    2e5c:	80 35       	cpi	r24, 0x50	; 80
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <update_Accelerometor_f+0xb4a>
    2e60:	80 c0       	rjmp	.+256    	; 0x2f62 <update_Accelerometor_f+0xc4a>
	{
		LCD_Clear();
    2e62:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
		LCD_DisplayString("Reg2_read");
    2e66:	88 ea       	ldi	r24, 0xA8	; 168
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
		TWI_Stop();
    2e6e:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	aa ef       	ldi	r26, 0xFA	; 250
    2e78:	b4 e4       	ldi	r27, 0x44	; 68
    2e7a:	8d ab       	std	Y+53, r24	; 0x35
    2e7c:	9e ab       	std	Y+54, r25	; 0x36
    2e7e:	af ab       	std	Y+55, r26	; 0x37
    2e80:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e82:	6d a9       	ldd	r22, Y+53	; 0x35
    2e84:	7e a9       	ldd	r23, Y+54	; 0x36
    2e86:	8f a9       	ldd	r24, Y+55	; 0x37
    2e88:	98 ad       	ldd	r25, Y+56	; 0x38
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e8       	ldi	r19, 0x80	; 128
    2e8e:	4b e3       	ldi	r20, 0x3B	; 59
    2e90:	55 e4       	ldi	r21, 0x45	; 69
    2e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	89 ab       	std	Y+49, r24	; 0x31
    2e9c:	9a ab       	std	Y+50, r25	; 0x32
    2e9e:	ab ab       	std	Y+51, r26	; 0x33
    2ea0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ea2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ea4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ea6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ea8:	9c a9       	ldd	r25, Y+52	; 0x34
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e8       	ldi	r20, 0x80	; 128
    2eb0:	5f e3       	ldi	r21, 0x3F	; 63
    2eb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb6:	88 23       	and	r24, r24
    2eb8:	2c f4       	brge	.+10     	; 0x2ec4 <update_Accelerometor_f+0xbac>
		__ticks = 1;
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	98 ab       	std	Y+48, r25	; 0x30
    2ec0:	8f a7       	std	Y+47, r24	; 0x2f
    2ec2:	3f c0       	rjmp	.+126    	; 0x2f42 <update_Accelerometor_f+0xc2a>
	else if (__tmp > 65535)
    2ec4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ec6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ec8:	8b a9       	ldd	r24, Y+51	; 0x33
    2eca:	9c a9       	ldd	r25, Y+52	; 0x34
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	3f ef       	ldi	r19, 0xFF	; 255
    2ed0:	4f e7       	ldi	r20, 0x7F	; 127
    2ed2:	57 e4       	ldi	r21, 0x47	; 71
    2ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed8:	18 16       	cp	r1, r24
    2eda:	4c f5       	brge	.+82     	; 0x2f2e <update_Accelerometor_f+0xc16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2edc:	6d a9       	ldd	r22, Y+53	; 0x35
    2ede:	7e a9       	ldd	r23, Y+54	; 0x36
    2ee0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ee2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e2       	ldi	r20, 0x20	; 32
    2eea:	51 e4       	ldi	r21, 0x41	; 65
    2eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	bc 01       	movw	r22, r24
    2ef6:	cd 01       	movw	r24, r26
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	98 ab       	std	Y+48, r25	; 0x30
    2f02:	8f a7       	std	Y+47, r24	; 0x2f
    2f04:	0f c0       	rjmp	.+30     	; 0x2f24 <update_Accelerometor_f+0xc0c>
    2f06:	8c e2       	ldi	r24, 0x2C	; 44
    2f08:	91 e0       	ldi	r25, 0x01	; 1
    2f0a:	9e a7       	std	Y+46, r25	; 0x2e
    2f0c:	8d a7       	std	Y+45, r24	; 0x2d
    2f0e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f10:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <update_Accelerometor_f+0xbfa>
    2f16:	9e a7       	std	Y+46, r25	; 0x2e
    2f18:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	98 ab       	std	Y+48, r25	; 0x30
    2f22:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f26:	98 a9       	ldd	r25, Y+48	; 0x30
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	69 f7       	brne	.-38     	; 0x2f06 <update_Accelerometor_f+0xbee>
    2f2c:	14 c0       	rjmp	.+40     	; 0x2f56 <update_Accelerometor_f+0xc3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f30:	7a a9       	ldd	r23, Y+50	; 0x32
    2f32:	8b a9       	ldd	r24, Y+51	; 0x33
    2f34:	9c a9       	ldd	r25, Y+52	; 0x34
    2f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	98 ab       	std	Y+48, r25	; 0x30
    2f40:	8f a7       	std	Y+47, r24	; 0x2f
    2f42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f44:	98 a9       	ldd	r25, Y+48	; 0x30
    2f46:	9c a7       	std	Y+44, r25	; 0x2c
    2f48:	8b a7       	std	Y+43, r24	; 0x2b
    2f4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	f1 f7       	brne	.-4      	; 0x2f4e <update_Accelerometor_f+0xc36>
    2f52:	9c a7       	std	Y+44, r25	; 0x2c
    2f54:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000);
		return 0;
    2f56:	c9 55       	subi	r28, 0x59	; 89
    2f58:	df 4f       	sbci	r29, 0xFF	; 255
    2f5a:	18 82       	st	Y, r1
    2f5c:	c7 5a       	subi	r28, 0xA7	; 167
    2f5e:	d0 40       	sbci	r29, 0x00	; 0
    2f60:	15 c2       	rjmp	.+1066   	; 0x338c <update_Accelerometor_f+0x1074>
	}

	y_High_val = TWI_Read_With_ACK();
    2f62:	0e 94 dd 08 	call	0x11ba	; 0x11ba <TWI_Read_With_ACK>
    2f66:	fe 01       	movw	r30, r28
    2f68:	e3 56       	subi	r30, 0x63	; 99
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_ACK)
    2f6e:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    2f72:	80 35       	cpi	r24, 0x50	; 80
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <update_Accelerometor_f+0xc60>
    2f76:	80 c0       	rjmp	.+256    	; 0x3078 <update_Accelerometor_f+0xd60>
	{
		LCD_Clear();
    2f78:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
		LCD_DisplayString("Reg2_read");
    2f7c:	88 ea       	ldi	r24, 0xA8	; 168
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
		TWI_Stop();
    2f84:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	aa ef       	ldi	r26, 0xFA	; 250
    2f8e:	b4 e4       	ldi	r27, 0x44	; 68
    2f90:	8f a3       	std	Y+39, r24	; 0x27
    2f92:	98 a7       	std	Y+40, r25	; 0x28
    2f94:	a9 a7       	std	Y+41, r26	; 0x29
    2f96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f98:	6f a1       	ldd	r22, Y+39	; 0x27
    2f9a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f9c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e8       	ldi	r19, 0x80	; 128
    2fa4:	4b e3       	ldi	r20, 0x3B	; 59
    2fa6:	55 e4       	ldi	r21, 0x45	; 69
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	8b a3       	std	Y+35, r24	; 0x23
    2fb2:	9c a3       	std	Y+36, r25	; 0x24
    2fb4:	ad a3       	std	Y+37, r26	; 0x25
    2fb6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fb8:	6b a1       	ldd	r22, Y+35	; 0x23
    2fba:	7c a1       	ldd	r23, Y+36	; 0x24
    2fbc:	8d a1       	ldd	r24, Y+37	; 0x25
    2fbe:	9e a1       	ldd	r25, Y+38	; 0x26
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e8       	ldi	r20, 0x80	; 128
    2fc6:	5f e3       	ldi	r21, 0x3F	; 63
    2fc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fcc:	88 23       	and	r24, r24
    2fce:	2c f4       	brge	.+10     	; 0x2fda <update_Accelerometor_f+0xcc2>
		__ticks = 1;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	9a a3       	std	Y+34, r25	; 0x22
    2fd6:	89 a3       	std	Y+33, r24	; 0x21
    2fd8:	3f c0       	rjmp	.+126    	; 0x3058 <update_Accelerometor_f+0xd40>
	else if (__tmp > 65535)
    2fda:	6b a1       	ldd	r22, Y+35	; 0x23
    2fdc:	7c a1       	ldd	r23, Y+36	; 0x24
    2fde:	8d a1       	ldd	r24, Y+37	; 0x25
    2fe0:	9e a1       	ldd	r25, Y+38	; 0x26
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	4c f5       	brge	.+82     	; 0x3044 <update_Accelerometor_f+0xd2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ff4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ff6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ff8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e2       	ldi	r20, 0x20	; 32
    3000:	51 e4       	ldi	r21, 0x41	; 65
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	bc 01       	movw	r22, r24
    300c:	cd 01       	movw	r24, r26
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9a a3       	std	Y+34, r25	; 0x22
    3018:	89 a3       	std	Y+33, r24	; 0x21
    301a:	0f c0       	rjmp	.+30     	; 0x303a <update_Accelerometor_f+0xd22>
    301c:	8c e2       	ldi	r24, 0x2C	; 44
    301e:	91 e0       	ldi	r25, 0x01	; 1
    3020:	98 a3       	std	Y+32, r25	; 0x20
    3022:	8f 8f       	std	Y+31, r24	; 0x1f
    3024:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3026:	98 a1       	ldd	r25, Y+32	; 0x20
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <update_Accelerometor_f+0xd10>
    302c:	98 a3       	std	Y+32, r25	; 0x20
    302e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3030:	89 a1       	ldd	r24, Y+33	; 0x21
    3032:	9a a1       	ldd	r25, Y+34	; 0x22
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	9a a3       	std	Y+34, r25	; 0x22
    3038:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303a:	89 a1       	ldd	r24, Y+33	; 0x21
    303c:	9a a1       	ldd	r25, Y+34	; 0x22
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	69 f7       	brne	.-38     	; 0x301c <update_Accelerometor_f+0xd04>
    3042:	14 c0       	rjmp	.+40     	; 0x306c <update_Accelerometor_f+0xd54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3044:	6b a1       	ldd	r22, Y+35	; 0x23
    3046:	7c a1       	ldd	r23, Y+36	; 0x24
    3048:	8d a1       	ldd	r24, Y+37	; 0x25
    304a:	9e a1       	ldd	r25, Y+38	; 0x26
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9a a3       	std	Y+34, r25	; 0x22
    3056:	89 a3       	std	Y+33, r24	; 0x21
    3058:	89 a1       	ldd	r24, Y+33	; 0x21
    305a:	9a a1       	ldd	r25, Y+34	; 0x22
    305c:	9e 8f       	std	Y+30, r25	; 0x1e
    305e:	8d 8f       	std	Y+29, r24	; 0x1d
    3060:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3062:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <update_Accelerometor_f+0xd4c>
    3068:	9e 8f       	std	Y+30, r25	; 0x1e
    306a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);
		return 0;
    306c:	c9 55       	subi	r28, 0x59	; 89
    306e:	df 4f       	sbci	r29, 0xFF	; 255
    3070:	18 82       	st	Y, r1
    3072:	c7 5a       	subi	r28, 0xA7	; 167
    3074:	d0 40       	sbci	r29, 0x00	; 0
    3076:	8a c1       	rjmp	.+788    	; 0x338c <update_Accelerometor_f+0x1074>
	}

	z_low_val = TWI_Read_With_ACK();
    3078:	0e 94 dd 08 	call	0x11ba	; 0x11ba <TWI_Read_With_ACK>
    307c:	fe 01       	movw	r30, r28
    307e:	e4 56       	subi	r30, 0x64	; 100
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_ACK)
    3084:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    3088:	80 35       	cpi	r24, 0x50	; 80
    308a:	09 f4       	brne	.+2      	; 0x308e <update_Accelerometor_f+0xd76>
    308c:	80 c0       	rjmp	.+256    	; 0x318e <update_Accelerometor_f+0xe76>
	{
		LCD_Clear();
    308e:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
		LCD_DisplayString("Reg2_read");
    3092:	88 ea       	ldi	r24, 0xA8	; 168
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
		TWI_Stop();
    309a:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	aa ef       	ldi	r26, 0xFA	; 250
    30a4:	b4 e4       	ldi	r27, 0x44	; 68
    30a6:	89 8f       	std	Y+25, r24	; 0x19
    30a8:	9a 8f       	std	Y+26, r25	; 0x1a
    30aa:	ab 8f       	std	Y+27, r26	; 0x1b
    30ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ae:	69 8d       	ldd	r22, Y+25	; 0x19
    30b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e8       	ldi	r19, 0x80	; 128
    30ba:	4b e3       	ldi	r20, 0x3B	; 59
    30bc:	55 e4       	ldi	r21, 0x45	; 69
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	8d 8b       	std	Y+21, r24	; 0x15
    30c8:	9e 8b       	std	Y+22, r25	; 0x16
    30ca:	af 8b       	std	Y+23, r26	; 0x17
    30cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30ce:	6d 89       	ldd	r22, Y+21	; 0x15
    30d0:	7e 89       	ldd	r23, Y+22	; 0x16
    30d2:	8f 89       	ldd	r24, Y+23	; 0x17
    30d4:	98 8d       	ldd	r25, Y+24	; 0x18
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e8       	ldi	r20, 0x80	; 128
    30dc:	5f e3       	ldi	r21, 0x3F	; 63
    30de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e2:	88 23       	and	r24, r24
    30e4:	2c f4       	brge	.+10     	; 0x30f0 <update_Accelerometor_f+0xdd8>
		__ticks = 1;
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	9c 8b       	std	Y+20, r25	; 0x14
    30ec:	8b 8b       	std	Y+19, r24	; 0x13
    30ee:	3f c0       	rjmp	.+126    	; 0x316e <update_Accelerometor_f+0xe56>
	else if (__tmp > 65535)
    30f0:	6d 89       	ldd	r22, Y+21	; 0x15
    30f2:	7e 89       	ldd	r23, Y+22	; 0x16
    30f4:	8f 89       	ldd	r24, Y+23	; 0x17
    30f6:	98 8d       	ldd	r25, Y+24	; 0x18
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	3f ef       	ldi	r19, 0xFF	; 255
    30fc:	4f e7       	ldi	r20, 0x7F	; 127
    30fe:	57 e4       	ldi	r21, 0x47	; 71
    3100:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3104:	18 16       	cp	r1, r24
    3106:	4c f5       	brge	.+82     	; 0x315a <update_Accelerometor_f+0xe42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3108:	69 8d       	ldd	r22, Y+25	; 0x19
    310a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    310c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    310e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e2       	ldi	r20, 0x20	; 32
    3116:	51 e4       	ldi	r21, 0x41	; 65
    3118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	bc 01       	movw	r22, r24
    3122:	cd 01       	movw	r24, r26
    3124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	9c 8b       	std	Y+20, r25	; 0x14
    312e:	8b 8b       	std	Y+19, r24	; 0x13
    3130:	0f c0       	rjmp	.+30     	; 0x3150 <update_Accelerometor_f+0xe38>
    3132:	8c e2       	ldi	r24, 0x2C	; 44
    3134:	91 e0       	ldi	r25, 0x01	; 1
    3136:	9a 8b       	std	Y+18, r25	; 0x12
    3138:	89 8b       	std	Y+17, r24	; 0x11
    313a:	89 89       	ldd	r24, Y+17	; 0x11
    313c:	9a 89       	ldd	r25, Y+18	; 0x12
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	f1 f7       	brne	.-4      	; 0x313e <update_Accelerometor_f+0xe26>
    3142:	9a 8b       	std	Y+18, r25	; 0x12
    3144:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3146:	8b 89       	ldd	r24, Y+19	; 0x13
    3148:	9c 89       	ldd	r25, Y+20	; 0x14
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	9c 8b       	std	Y+20, r25	; 0x14
    314e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3150:	8b 89       	ldd	r24, Y+19	; 0x13
    3152:	9c 89       	ldd	r25, Y+20	; 0x14
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	69 f7       	brne	.-38     	; 0x3132 <update_Accelerometor_f+0xe1a>
    3158:	14 c0       	rjmp	.+40     	; 0x3182 <update_Accelerometor_f+0xe6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315a:	6d 89       	ldd	r22, Y+21	; 0x15
    315c:	7e 89       	ldd	r23, Y+22	; 0x16
    315e:	8f 89       	ldd	r24, Y+23	; 0x17
    3160:	98 8d       	ldd	r25, Y+24	; 0x18
    3162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	9c 8b       	std	Y+20, r25	; 0x14
    316c:	8b 8b       	std	Y+19, r24	; 0x13
    316e:	8b 89       	ldd	r24, Y+19	; 0x13
    3170:	9c 89       	ldd	r25, Y+20	; 0x14
    3172:	98 8b       	std	Y+16, r25	; 0x10
    3174:	8f 87       	std	Y+15, r24	; 0x0f
    3176:	8f 85       	ldd	r24, Y+15	; 0x0f
    3178:	98 89       	ldd	r25, Y+16	; 0x10
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <update_Accelerometor_f+0xe62>
    317e:	98 8b       	std	Y+16, r25	; 0x10
    3180:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		return 0;
    3182:	c9 55       	subi	r28, 0x59	; 89
    3184:	df 4f       	sbci	r29, 0xFF	; 255
    3186:	18 82       	st	Y, r1
    3188:	c7 5a       	subi	r28, 0xA7	; 167
    318a:	d0 40       	sbci	r29, 0x00	; 0
    318c:	ff c0       	rjmp	.+510    	; 0x338c <update_Accelerometor_f+0x1074>
	}

	z_High_val = TWI_Read_With_NACK();
    318e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <TWI_Read_With_NACK>
    3192:	fe 01       	movw	r30, r28
    3194:	e5 56       	subi	r30, 0x65	; 101
    3196:	ff 4f       	sbci	r31, 0xFF	; 255
    3198:	80 83       	st	Z, r24
	if (TWI_Get_Status() != TW_MR_DATA_NACK)
    319a:	0e 94 03 09 	call	0x1206	; 0x1206 <TWI_Get_Status>
    319e:	88 35       	cpi	r24, 0x58	; 88
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <update_Accelerometor_f+0xe8c>
    31a2:	80 c0       	rjmp	.+256    	; 0x32a4 <update_Accelerometor_f+0xf8c>
	{
		LCD_Clear();
    31a4:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_Clear>
		LCD_DisplayString("Reg2_read");
    31a8:	88 ea       	ldi	r24, 0xA8	; 168
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DisplayString>
		TWI_Stop();
    31b0:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	aa ef       	ldi	r26, 0xFA	; 250
    31ba:	b4 e4       	ldi	r27, 0x44	; 68
    31bc:	8b 87       	std	Y+11, r24	; 0x0b
    31be:	9c 87       	std	Y+12, r25	; 0x0c
    31c0:	ad 87       	std	Y+13, r26	; 0x0d
    31c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e8       	ldi	r19, 0x80	; 128
    31d0:	4b e3       	ldi	r20, 0x3B	; 59
    31d2:	55 e4       	ldi	r21, 0x45	; 69
    31d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	8f 83       	std	Y+7, r24	; 0x07
    31de:	98 87       	std	Y+8, r25	; 0x08
    31e0:	a9 87       	std	Y+9, r26	; 0x09
    31e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31e4:	6f 81       	ldd	r22, Y+7	; 0x07
    31e6:	78 85       	ldd	r23, Y+8	; 0x08
    31e8:	89 85       	ldd	r24, Y+9	; 0x09
    31ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	40 e8       	ldi	r20, 0x80	; 128
    31f2:	5f e3       	ldi	r21, 0x3F	; 63
    31f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31f8:	88 23       	and	r24, r24
    31fa:	2c f4       	brge	.+10     	; 0x3206 <update_Accelerometor_f+0xeee>
		__ticks = 1;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	9e 83       	std	Y+6, r25	; 0x06
    3202:	8d 83       	std	Y+5, r24	; 0x05
    3204:	3f c0       	rjmp	.+126    	; 0x3284 <update_Accelerometor_f+0xf6c>
	else if (__tmp > 65535)
    3206:	6f 81       	ldd	r22, Y+7	; 0x07
    3208:	78 85       	ldd	r23, Y+8	; 0x08
    320a:	89 85       	ldd	r24, Y+9	; 0x09
    320c:	9a 85       	ldd	r25, Y+10	; 0x0a
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	3f ef       	ldi	r19, 0xFF	; 255
    3212:	4f e7       	ldi	r20, 0x7F	; 127
    3214:	57 e4       	ldi	r21, 0x47	; 71
    3216:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    321a:	18 16       	cp	r1, r24
    321c:	4c f5       	brge	.+82     	; 0x3270 <update_Accelerometor_f+0xf58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3220:	7c 85       	ldd	r23, Y+12	; 0x0c
    3222:	8d 85       	ldd	r24, Y+13	; 0x0d
    3224:	9e 85       	ldd	r25, Y+14	; 0x0e
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e2       	ldi	r20, 0x20	; 32
    322c:	51 e4       	ldi	r21, 0x41	; 65
    322e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	bc 01       	movw	r22, r24
    3238:	cd 01       	movw	r24, r26
    323a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	9e 83       	std	Y+6, r25	; 0x06
    3244:	8d 83       	std	Y+5, r24	; 0x05
    3246:	0f c0       	rjmp	.+30     	; 0x3266 <update_Accelerometor_f+0xf4e>
    3248:	8c e2       	ldi	r24, 0x2C	; 44
    324a:	91 e0       	ldi	r25, 0x01	; 1
    324c:	9c 83       	std	Y+4, r25	; 0x04
    324e:	8b 83       	std	Y+3, r24	; 0x03
    3250:	8b 81       	ldd	r24, Y+3	; 0x03
    3252:	9c 81       	ldd	r25, Y+4	; 0x04
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	f1 f7       	brne	.-4      	; 0x3254 <update_Accelerometor_f+0xf3c>
    3258:	9c 83       	std	Y+4, r25	; 0x04
    325a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325c:	8d 81       	ldd	r24, Y+5	; 0x05
    325e:	9e 81       	ldd	r25, Y+6	; 0x06
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	9e 83       	std	Y+6, r25	; 0x06
    3264:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3266:	8d 81       	ldd	r24, Y+5	; 0x05
    3268:	9e 81       	ldd	r25, Y+6	; 0x06
    326a:	00 97       	sbiw	r24, 0x00	; 0
    326c:	69 f7       	brne	.-38     	; 0x3248 <update_Accelerometor_f+0xf30>
    326e:	14 c0       	rjmp	.+40     	; 0x3298 <update_Accelerometor_f+0xf80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3270:	6f 81       	ldd	r22, Y+7	; 0x07
    3272:	78 85       	ldd	r23, Y+8	; 0x08
    3274:	89 85       	ldd	r24, Y+9	; 0x09
    3276:	9a 85       	ldd	r25, Y+10	; 0x0a
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	9e 83       	std	Y+6, r25	; 0x06
    3282:	8d 83       	std	Y+5, r24	; 0x05
    3284:	8d 81       	ldd	r24, Y+5	; 0x05
    3286:	9e 81       	ldd	r25, Y+6	; 0x06
    3288:	9a 83       	std	Y+2, r25	; 0x02
    328a:	89 83       	std	Y+1, r24	; 0x01
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	9a 81       	ldd	r25, Y+2	; 0x02
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	f1 f7       	brne	.-4      	; 0x3290 <update_Accelerometor_f+0xf78>
    3294:	9a 83       	std	Y+2, r25	; 0x02
    3296:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		return 0;
    3298:	c9 55       	subi	r28, 0x59	; 89
    329a:	df 4f       	sbci	r29, 0xFF	; 255
    329c:	18 82       	st	Y, r1
    329e:	c7 5a       	subi	r28, 0xA7	; 167
    32a0:	d0 40       	sbci	r29, 0x00	; 0
    32a2:	74 c0       	rjmp	.+232    	; 0x338c <update_Accelerometor_f+0x1074>
	}

	TWI_Stop();
    32a4:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_Stop>

	Temp-> fXg=(( ((sint16) x_High_val )<<8)|X_low_val);
    32a8:	fe 01       	movw	r30, r28
    32aa:	e1 56       	subi	r30, 0x61	; 97
    32ac:	ff 4f       	sbci	r31, 0xFF	; 255
    32ae:	80 81       	ld	r24, Z
    32b0:	88 2f       	mov	r24, r24
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	38 2f       	mov	r19, r24
    32b6:	22 27       	eor	r18, r18
    32b8:	fe 01       	movw	r30, r28
    32ba:	e0 56       	subi	r30, 0x60	; 96
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	80 81       	ld	r24, Z
    32c0:	88 2f       	mov	r24, r24
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	82 2b       	or	r24, r18
    32c6:	93 2b       	or	r25, r19
    32c8:	aa 27       	eor	r26, r26
    32ca:	97 fd       	sbrc	r25, 7
    32cc:	a0 95       	com	r26
    32ce:	ba 2f       	mov	r27, r26
    32d0:	bc 01       	movw	r22, r24
    32d2:	cd 01       	movw	r24, r26
    32d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	fe 01       	movw	r30, r28
    32de:	eb 55       	subi	r30, 0x5B	; 91
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	01 90       	ld	r0, Z+
    32e4:	f0 81       	ld	r31, Z
    32e6:	e0 2d       	mov	r30, r0
    32e8:	80 83       	st	Z, r24
    32ea:	91 83       	std	Z+1, r25	; 0x01
    32ec:	a2 83       	std	Z+2, r26	; 0x02
    32ee:	b3 83       	std	Z+3, r27	; 0x03
	Temp-> fYg=(( ((sint16) y_High_val )<<8)|y_low_val);
    32f0:	fe 01       	movw	r30, r28
    32f2:	e3 56       	subi	r30, 0x63	; 99
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	80 81       	ld	r24, Z
    32f8:	88 2f       	mov	r24, r24
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	38 2f       	mov	r19, r24
    32fe:	22 27       	eor	r18, r18
    3300:	fe 01       	movw	r30, r28
    3302:	e2 56       	subi	r30, 0x62	; 98
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	80 81       	ld	r24, Z
    3308:	88 2f       	mov	r24, r24
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	82 2b       	or	r24, r18
    330e:	93 2b       	or	r25, r19
    3310:	aa 27       	eor	r26, r26
    3312:	97 fd       	sbrc	r25, 7
    3314:	a0 95       	com	r26
    3316:	ba 2f       	mov	r27, r26
    3318:	bc 01       	movw	r22, r24
    331a:	cd 01       	movw	r24, r26
    331c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	fe 01       	movw	r30, r28
    3326:	eb 55       	subi	r30, 0x5B	; 91
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	01 90       	ld	r0, Z+
    332c:	f0 81       	ld	r31, Z
    332e:	e0 2d       	mov	r30, r0
    3330:	84 83       	std	Z+4, r24	; 0x04
    3332:	95 83       	std	Z+5, r25	; 0x05
    3334:	a6 83       	std	Z+6, r26	; 0x06
    3336:	b7 83       	std	Z+7, r27	; 0x07
	Temp-> fZg=(( ((sint16) z_High_val )<<8)|z_low_val);
    3338:	fe 01       	movw	r30, r28
    333a:	e5 56       	subi	r30, 0x65	; 101
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	80 81       	ld	r24, Z
    3340:	88 2f       	mov	r24, r24
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	38 2f       	mov	r19, r24
    3346:	22 27       	eor	r18, r18
    3348:	fe 01       	movw	r30, r28
    334a:	e4 56       	subi	r30, 0x64	; 100
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 81       	ld	r24, Z
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	82 2b       	or	r24, r18
    3356:	93 2b       	or	r25, r19
    3358:	aa 27       	eor	r26, r26
    335a:	97 fd       	sbrc	r25, 7
    335c:	a0 95       	com	r26
    335e:	ba 2f       	mov	r27, r26
    3360:	bc 01       	movw	r22, r24
    3362:	cd 01       	movw	r24, r26
    3364:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	fe 01       	movw	r30, r28
    336e:	eb 55       	subi	r30, 0x5B	; 91
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	01 90       	ld	r0, Z+
    3374:	f0 81       	ld	r31, Z
    3376:	e0 2d       	mov	r30, r0
    3378:	80 87       	std	Z+8, r24	; 0x08
    337a:	91 87       	std	Z+9, r25	; 0x09
    337c:	a2 87       	std	Z+10, r26	; 0x0a
    337e:	b3 87       	std	Z+11, r27	; 0x0b

	return 1;
    3380:	f1 e0       	ldi	r31, 0x01	; 1
    3382:	c9 55       	subi	r28, 0x59	; 89
    3384:	df 4f       	sbci	r29, 0xFF	; 255
    3386:	f8 83       	st	Y, r31
    3388:	c7 5a       	subi	r28, 0xA7	; 167
    338a:	d0 40       	sbci	r29, 0x00	; 0
    338c:	c9 55       	subi	r28, 0x59	; 89
    338e:	df 4f       	sbci	r29, 0xFF	; 255
    3390:	88 81       	ld	r24, Y
    3392:	c7 5a       	subi	r28, 0xA7	; 167
    3394:	d0 40       	sbci	r29, 0x00	; 0
}
    3396:	c9 55       	subi	r28, 0x59	; 89
    3398:	df 4f       	sbci	r29, 0xFF	; 255
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	f8 94       	cli
    339e:	de bf       	out	0x3e, r29	; 62
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	cd bf       	out	0x3d, r28	; 61
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	08 95       	ret

000033ae <__prologue_saves__>:
    33ae:	2f 92       	push	r2
    33b0:	3f 92       	push	r3
    33b2:	4f 92       	push	r4
    33b4:	5f 92       	push	r5
    33b6:	6f 92       	push	r6
    33b8:	7f 92       	push	r7
    33ba:	8f 92       	push	r8
    33bc:	9f 92       	push	r9
    33be:	af 92       	push	r10
    33c0:	bf 92       	push	r11
    33c2:	cf 92       	push	r12
    33c4:	df 92       	push	r13
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	ca 1b       	sub	r28, r26
    33d8:	db 0b       	sbc	r29, r27
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	f8 94       	cli
    33de:	de bf       	out	0x3e, r29	; 62
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	cd bf       	out	0x3d, r28	; 61
    33e4:	09 94       	ijmp

000033e6 <__epilogue_restores__>:
    33e6:	2a 88       	ldd	r2, Y+18	; 0x12
    33e8:	39 88       	ldd	r3, Y+17	; 0x11
    33ea:	48 88       	ldd	r4, Y+16	; 0x10
    33ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    33ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    33f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    33f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    33f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    33f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    33f8:	b9 84       	ldd	r11, Y+9	; 0x09
    33fa:	c8 84       	ldd	r12, Y+8	; 0x08
    33fc:	df 80       	ldd	r13, Y+7	; 0x07
    33fe:	ee 80       	ldd	r14, Y+6	; 0x06
    3400:	fd 80       	ldd	r15, Y+5	; 0x05
    3402:	0c 81       	ldd	r16, Y+4	; 0x04
    3404:	1b 81       	ldd	r17, Y+3	; 0x03
    3406:	aa 81       	ldd	r26, Y+2	; 0x02
    3408:	b9 81       	ldd	r27, Y+1	; 0x01
    340a:	ce 0f       	add	r28, r30
    340c:	d1 1d       	adc	r29, r1
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	ed 01       	movw	r28, r26
    341a:	08 95       	ret
    341c:	11 f4       	brne	.+4      	; 0x3422 <__epilogue_restores__+0x3c>
    341e:	0e f4       	brtc	.+2      	; 0x3422 <__epilogue_restores__+0x3c>
    3420:	4d c0       	rjmp	.+154    	; 0x34bc <__fp_nan>
    3422:	3e c0       	rjmp	.+124    	; 0x34a0 <__fp_mpack>

00003424 <sqrt>:
    3424:	5d d0       	rcall	.+186    	; 0x34e0 <__fp_splitA>
    3426:	d0 f3       	brcs	.-12     	; 0x341c <__epilogue_restores__+0x36>
    3428:	99 23       	and	r25, r25
    342a:	d9 f3       	breq	.-10     	; 0x3422 <__epilogue_restores__+0x3c>
    342c:	ce f3       	brts	.-14     	; 0x3420 <__epilogue_restores__+0x3a>
    342e:	9f 57       	subi	r25, 0x7F	; 127
    3430:	55 0b       	sbc	r21, r21
    3432:	87 ff       	sbrs	r24, 7
    3434:	46 d0       	rcall	.+140    	; 0x34c2 <__fp_norm2>
    3436:	00 24       	eor	r0, r0
    3438:	a0 e6       	ldi	r26, 0x60	; 96
    343a:	40 ea       	ldi	r20, 0xA0	; 160
    343c:	90 01       	movw	r18, r0
    343e:	80 58       	subi	r24, 0x80	; 128
    3440:	56 95       	lsr	r21
    3442:	97 95       	ror	r25
    3444:	28 f4       	brcc	.+10     	; 0x3450 <sqrt+0x2c>
    3446:	80 5c       	subi	r24, 0xC0	; 192
    3448:	66 0f       	add	r22, r22
    344a:	77 1f       	adc	r23, r23
    344c:	88 1f       	adc	r24, r24
    344e:	20 f0       	brcs	.+8      	; 0x3458 <sqrt+0x34>
    3450:	26 17       	cp	r18, r22
    3452:	37 07       	cpc	r19, r23
    3454:	48 07       	cpc	r20, r24
    3456:	30 f4       	brcc	.+12     	; 0x3464 <sqrt+0x40>
    3458:	62 1b       	sub	r22, r18
    345a:	73 0b       	sbc	r23, r19
    345c:	84 0b       	sbc	r24, r20
    345e:	20 29       	or	r18, r0
    3460:	31 29       	or	r19, r1
    3462:	4a 2b       	or	r20, r26
    3464:	a6 95       	lsr	r26
    3466:	17 94       	ror	r1
    3468:	07 94       	ror	r0
    346a:	20 25       	eor	r18, r0
    346c:	31 25       	eor	r19, r1
    346e:	4a 27       	eor	r20, r26
    3470:	58 f7       	brcc	.-42     	; 0x3448 <sqrt+0x24>
    3472:	66 0f       	add	r22, r22
    3474:	77 1f       	adc	r23, r23
    3476:	88 1f       	adc	r24, r24
    3478:	20 f0       	brcs	.+8      	; 0x3482 <sqrt+0x5e>
    347a:	26 17       	cp	r18, r22
    347c:	37 07       	cpc	r19, r23
    347e:	48 07       	cpc	r20, r24
    3480:	30 f4       	brcc	.+12     	; 0x348e <sqrt+0x6a>
    3482:	62 0b       	sbc	r22, r18
    3484:	73 0b       	sbc	r23, r19
    3486:	84 0b       	sbc	r24, r20
    3488:	20 0d       	add	r18, r0
    348a:	31 1d       	adc	r19, r1
    348c:	41 1d       	adc	r20, r1
    348e:	a0 95       	com	r26
    3490:	81 f7       	brne	.-32     	; 0x3472 <sqrt+0x4e>
    3492:	b9 01       	movw	r22, r18
    3494:	84 2f       	mov	r24, r20
    3496:	91 58       	subi	r25, 0x81	; 129
    3498:	88 0f       	add	r24, r24
    349a:	96 95       	lsr	r25
    349c:	87 95       	ror	r24
    349e:	08 95       	ret

000034a0 <__fp_mpack>:
    34a0:	9f 3f       	cpi	r25, 0xFF	; 255
    34a2:	31 f0       	breq	.+12     	; 0x34b0 <__fp_mpack_finite+0xc>

000034a4 <__fp_mpack_finite>:
    34a4:	91 50       	subi	r25, 0x01	; 1
    34a6:	20 f4       	brcc	.+8      	; 0x34b0 <__fp_mpack_finite+0xc>
    34a8:	87 95       	ror	r24
    34aa:	77 95       	ror	r23
    34ac:	67 95       	ror	r22
    34ae:	b7 95       	ror	r27
    34b0:	88 0f       	add	r24, r24
    34b2:	91 1d       	adc	r25, r1
    34b4:	96 95       	lsr	r25
    34b6:	87 95       	ror	r24
    34b8:	97 f9       	bld	r25, 7
    34ba:	08 95       	ret

000034bc <__fp_nan>:
    34bc:	9f ef       	ldi	r25, 0xFF	; 255
    34be:	80 ec       	ldi	r24, 0xC0	; 192
    34c0:	08 95       	ret

000034c2 <__fp_norm2>:
    34c2:	91 50       	subi	r25, 0x01	; 1
    34c4:	50 40       	sbci	r21, 0x00	; 0
    34c6:	66 0f       	add	r22, r22
    34c8:	77 1f       	adc	r23, r23
    34ca:	88 1f       	adc	r24, r24
    34cc:	d2 f7       	brpl	.-12     	; 0x34c2 <__fp_norm2>
    34ce:	08 95       	ret

000034d0 <__fp_split3>:
    34d0:	57 fd       	sbrc	r21, 7
    34d2:	90 58       	subi	r25, 0x80	; 128
    34d4:	44 0f       	add	r20, r20
    34d6:	55 1f       	adc	r21, r21
    34d8:	59 f0       	breq	.+22     	; 0x34f0 <__fp_splitA+0x10>
    34da:	5f 3f       	cpi	r21, 0xFF	; 255
    34dc:	71 f0       	breq	.+28     	; 0x34fa <__fp_splitA+0x1a>
    34de:	47 95       	ror	r20

000034e0 <__fp_splitA>:
    34e0:	88 0f       	add	r24, r24
    34e2:	97 fb       	bst	r25, 7
    34e4:	99 1f       	adc	r25, r25
    34e6:	61 f0       	breq	.+24     	; 0x3500 <__fp_splitA+0x20>
    34e8:	9f 3f       	cpi	r25, 0xFF	; 255
    34ea:	79 f0       	breq	.+30     	; 0x350a <__fp_splitA+0x2a>
    34ec:	87 95       	ror	r24
    34ee:	08 95       	ret
    34f0:	12 16       	cp	r1, r18
    34f2:	13 06       	cpc	r1, r19
    34f4:	14 06       	cpc	r1, r20
    34f6:	55 1f       	adc	r21, r21
    34f8:	f2 cf       	rjmp	.-28     	; 0x34de <__fp_split3+0xe>
    34fa:	46 95       	lsr	r20
    34fc:	f1 df       	rcall	.-30     	; 0x34e0 <__fp_splitA>
    34fe:	08 c0       	rjmp	.+16     	; 0x3510 <__fp_splitA+0x30>
    3500:	16 16       	cp	r1, r22
    3502:	17 06       	cpc	r1, r23
    3504:	18 06       	cpc	r1, r24
    3506:	99 1f       	adc	r25, r25
    3508:	f1 cf       	rjmp	.-30     	; 0x34ec <__fp_splitA+0xc>
    350a:	86 95       	lsr	r24
    350c:	71 05       	cpc	r23, r1
    350e:	61 05       	cpc	r22, r1
    3510:	08 94       	sec
    3512:	08 95       	ret

00003514 <_exit>:
    3514:	f8 94       	cli

00003516 <__stop_program>:
    3516:	ff cf       	rjmp	.-2      	; 0x3516 <__stop_program>
