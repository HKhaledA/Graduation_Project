
Grad_Project_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00002568  000025fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000aa  008000aa  00002646  2**0
                  ALLOC
  3 .stab         00002388  00000000  00000000  00002648  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011bb  00000000  00000000  000049d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000896f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000971c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000987c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a2d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <main>
      8a:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 12 	jmp	0x246c	; 0x246c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 12 	jmp	0x246c	; 0x246c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 46 12 	jmp	0x248c	; 0x248c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_init>:
#include<avr/io.h>
#include"std_types.h"
#include "ADC.h"

void ADC_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     b4e:	a6 e2       	ldi	r26, 0x26	; 38
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e6 e2       	ldi	r30, 0x26	; 38
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	87 68       	ori	r24, 0x87	; 135
     b5a:	8c 93       	st	X, r24
//	ADMUX|=(1<<REFS0)|(1<<REFS1)|(1<<ADLAR);
	ADMUX|=(1<<REFS0)|(1<<ADLAR);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 66       	ori	r24, 0x60	; 96
     b68:	8c 93       	st	X, r24
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <ADC_GetResult>:

int ADC_GetResult(u8 channel)
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	00 d0       	rcall	.+0      	; 0xb76 <ADC_GetResult+0x6>
     b76:	0f 92       	push	r0
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	8b 83       	std	Y+3, r24	; 0x03
	int value;
	ADMUX &= 0b01111000;
     b7e:	a7 e2       	ldi	r26, 0x27	; 39
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e7 e2       	ldi	r30, 0x27	; 39
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	88 77       	andi	r24, 0x78	; 120
     b8a:	8c 93       	st	X, r24
	ADMUX |= (channel & (0b00000111) );
     b8c:	a7 e2       	ldi	r26, 0x27	; 39
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e7 e2       	ldi	r30, 0x27	; 39
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	98 2f       	mov	r25, r24
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	87 70       	andi	r24, 0x07	; 7
     b9c:	89 2b       	or	r24, r25
     b9e:	8c 93       	st	X, r24
	ADCSRA|= (1<<ADSC);
     ba0:	a6 e2       	ldi	r26, 0x26	; 38
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e6 e2       	ldi	r30, 0x26	; 38
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	80 64       	ori	r24, 0x40	; 64
     bac:	8c 93       	st	X, r24
	while((ADCSRA & (1<<ADSC))!=0);
     bae:	e6 e2       	ldi	r30, 0x26	; 38
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	88 2f       	mov	r24, r24
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	80 74       	andi	r24, 0x40	; 64
     bba:	90 70       	andi	r25, 0x00	; 0
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	b9 f7       	brne	.-18     	; 0xbae <ADC_GetResult+0x3e>
	value=ADCH;
     bc0:	e5 e2       	ldi	r30, 0x25	; 37
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|= 0x10;
     bce:	a6 e2       	ldi	r26, 0x26	; 38
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e6 e2       	ldi	r30, 0x26	; 38
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 61       	ori	r24, 0x10	; 16
     bda:	8c 93       	st	X, r24
	return value;
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	9a 81       	ldd	r25, Y+2	; 0x02
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <sendData>:

uint8 defaultBuffer[]={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	2f 97       	sbiw	r28, 0x0f	; 15
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
     c00:	1f 86       	std	Y+15, r1	; 0x0f
     c02:	1a c0       	rjmp	.+52     	; 0xc38 <sendData+0x4c>
	{
		UART_SendByte(dataBuffer[counter]);
     c04:	8f 85       	ldd	r24, Y+15	; 0x0f
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	fc 01       	movw	r30, r24
     c0c:	e6 58       	subi	r30, 0x86	; 134
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	80 81       	ld	r24, Z
     c12:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <UART_SendByte>
		dataBuffer[counter] = defaultBuffer[counter];
     c16:	8f 85       	ldd	r24, Y+15	; 0x0f
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	fc 01       	movw	r30, r24
     c24:	ee 58       	subi	r30, 0x8E	; 142
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	80 81       	ld	r24, Z
     c2a:	f9 01       	movw	r30, r18
     c2c:	e6 58       	subi	r30, 0x86	; 134
     c2e:	ff 4f       	sbci	r31, 0xFF	; 255
     c30:	80 83       	st	Z, r24
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
     c32:	8f 85       	ldd	r24, Y+15	; 0x0f
     c34:	8f 5f       	subi	r24, 0xFF	; 255
     c36:	8f 87       	std	Y+15, r24	; 0x0f
     c38:	8f 85       	ldd	r24, Y+15	; 0x0f
     c3a:	88 30       	cpi	r24, 0x08	; 8
     c3c:	18 f3       	brcs	.-58     	; 0xc04 <sendData+0x18>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	a8 ec       	ldi	r26, 0xC8	; 200
     c44:	b2 e4       	ldi	r27, 0x42	; 66
     c46:	8b 87       	std	Y+11, r24	; 0x0b
     c48:	9c 87       	std	Y+12, r25	; 0x0c
     c4a:	ad 87       	std	Y+13, r26	; 0x0d
     c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c50:	7c 85       	ldd	r23, Y+12	; 0x0c
     c52:	8d 85       	ldd	r24, Y+13	; 0x0d
     c54:	9e 85       	ldd	r25, Y+14	; 0x0e
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e8       	ldi	r19, 0x80	; 128
     c5a:	4b e3       	ldi	r20, 0x3B	; 59
     c5c:	55 e4       	ldi	r21, 0x45	; 69
     c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	8f 83       	std	Y+7, r24	; 0x07
     c68:	98 87       	std	Y+8, r25	; 0x08
     c6a:	a9 87       	std	Y+9, r26	; 0x09
     c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c6e:	6f 81       	ldd	r22, Y+7	; 0x07
     c70:	78 85       	ldd	r23, Y+8	; 0x08
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e8       	ldi	r20, 0x80	; 128
     c7c:	5f e3       	ldi	r21, 0x3F	; 63
     c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c82:	88 23       	and	r24, r24
     c84:	2c f4       	brge	.+10     	; 0xc90 <sendData+0xa4>
		__ticks = 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	3f c0       	rjmp	.+126    	; 0xd0e <sendData+0x122>
	else if (__tmp > 65535)
     c90:	6f 81       	ldd	r22, Y+7	; 0x07
     c92:	78 85       	ldd	r23, Y+8	; 0x08
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	3f ef       	ldi	r19, 0xFF	; 255
     c9c:	4f e7       	ldi	r20, 0x7F	; 127
     c9e:	57 e4       	ldi	r21, 0x47	; 71
     ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca4:	18 16       	cp	r1, r24
     ca6:	4c f5       	brge	.+82     	; 0xcfa <sendData+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
     caa:	7c 85       	ldd	r23, Y+12	; 0x0c
     cac:	8d 85       	ldd	r24, Y+13	; 0x0d
     cae:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e2       	ldi	r20, 0x20	; 32
     cb6:	51 e4       	ldi	r21, 0x41	; 65
     cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	9e 83       	std	Y+6, r25	; 0x06
     cce:	8d 83       	std	Y+5, r24	; 0x05
     cd0:	0f c0       	rjmp	.+30     	; 0xcf0 <sendData+0x104>
     cd2:	8c e2       	ldi	r24, 0x2C	; 44
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <sendData+0xf2>
     ce2:	9c 83       	std	Y+4, r25	; 0x04
     ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce6:	8d 81       	ldd	r24, Y+5	; 0x05
     ce8:	9e 81       	ldd	r25, Y+6	; 0x06
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	9e 83       	std	Y+6, r25	; 0x06
     cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	9e 81       	ldd	r25, Y+6	; 0x06
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	69 f7       	brne	.-38     	; 0xcd2 <sendData+0xe6>
     cf8:	14 c0       	rjmp	.+40     	; 0xd22 <sendData+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cfa:	6f 81       	ldd	r22, Y+7	; 0x07
     cfc:	78 85       	ldd	r23, Y+8	; 0x08
     cfe:	89 85       	ldd	r24, Y+9	; 0x09
     d00:	9a 85       	ldd	r25, Y+10	; 0x0a
     d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	9e 81       	ldd	r25, Y+6	; 0x06
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <sendData+0x12e>
     d1e:	9a 83       	std	Y+2, r25	; 0x02
     d20:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_SendByte(dataBuffer[counter]);
		dataBuffer[counter] = defaultBuffer[counter];
	}
	_delay_ms(100);
}
     d22:	2f 96       	adiw	r28, 0x0f	; 15
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <DFPlayer_init>:

void DFPlayer_init(void)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	/* set Digital to Analog converter (DAC) online */
	dataBuffer[3] = DAC_ONLINE ; /*command to set DAC online */
     d3c:	8a e1       	ldi	r24, 0x1A	; 26
     d3e:	80 93 7d 00 	sts	0x007D, r24
	sendData(); /* send this command through uart to DFPlayer module*/
     d42:	0e 94 f6 05 	call	0xbec	; 0xbec <sendData>
}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <DFPlayer_CMD_play>:
void DFPlayer_CMD_play(uint16 songNumber)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <DFPlayer_CMD_play+0x6>
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	9a 83       	std	Y+2, r25	; 0x02
     d58:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SELECTSONG ; /* command to play song */
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	80 93 7d 00 	sts	0x007D, r24
	if(songNumber < 256)
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	8f 3f       	cpi	r24, 0xFF	; 255
     d66:	91 05       	cpc	r25, r1
     d68:	09 f0       	breq	.+2      	; 0xd6c <DFPlayer_CMD_play+0x20>
     d6a:	20 f4       	brcc	.+8      	; 0xd74 <DFPlayer_CMD_play+0x28>
	{
		dataBuffer[6] = songNumber ;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	80 93 80 00 	sts	0x0080, r24
     d72:	0b c0       	rjmp	.+22     	; 0xd8a <DFPlayer_CMD_play+0x3e>
	}
	else
	{
		dataBuffer[6] = (uint8)songNumber;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	80 93 80 00 	sts	0x0080, r24
		dataBuffer[5] = (uint8)songNumber >> 8 ;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	89 2f       	mov	r24, r25
     d82:	99 0f       	add	r25, r25
     d84:	99 0b       	sbc	r25, r25
     d86:	80 93 7f 00 	sts	0x007F, r24
	}
	sendData();
     d8a:	0e 94 f6 05 	call	0xbec	; 0xbec <sendData>
}
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <DFPlayer_CMD_setVolume>:


void DFPlayer_CMD_setVolume(uint8 volume)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	0f 92       	push	r0
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	89 83       	std	Y+1, r24	; 0x01
	if(volume > 30)
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	8f 31       	cpi	r24, 0x1F	; 31
     da8:	10 f0       	brcs	.+4      	; 0xdae <DFPlayer_CMD_setVolume+0x16>
	{
		volume = 30;
     daa:	8e e1       	ldi	r24, 0x1E	; 30
     dac:	89 83       	std	Y+1, r24	; 0x01
	}
	dataBuffer[3] = SPE_VOL ;
     dae:	86 e0       	ldi	r24, 0x06	; 6
     db0:	80 93 7d 00 	sts	0x007D, r24
	dataBuffer[6] = volume;
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	80 93 80 00 	sts	0x0080, r24
	sendData();
     dba:	0e 94 f6 05 	call	0xbec	; 0xbec <sendData>
}
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <DFPlayer_CMD_playContinues>:
void DFPlayer_CMD_playContinues(uint8 songNumber)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	0f 92       	push	r0
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SPPLAYBACKMODE ; /* command to play song continue sly */
     dd2:	88 e0       	ldi	r24, 0x08	; 8
     dd4:	80 93 7d 00 	sts	0x007D, r24
	if(songNumber < 256)
	{
		dataBuffer[6] = songNumber ;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	80 93 80 00 	sts	0x0080, r24
	else
	{
		dataBuffer[6] = (uint8)songNumber;
		dataBuffer[5] = (uint8)songNumber >> 8 ;
	}
	sendData();
     dde:	0e 94 f6 05 	call	0xbec	; 0xbec <sendData>
}
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <DFPlayer_CMD_pause>:

void DFPlayer_CMD_pause(void)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PAUSE ;
     df2:	8e e0       	ldi	r24, 0x0E	; 14
     df4:	80 93 7d 00 	sts	0x007D, r24
	sendData();
     df8:	0e 94 f6 05 	call	0xbec	; 0xbec <sendData>
}
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <DFPlayer_CMD_stop>:

void DFPlayer_CMD_stop(void)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = STOP;
     e0a:	86 e1       	ldi	r24, 0x16	; 22
     e0c:	80 93 7d 00 	sts	0x007D, r24
	sendData();
     e10:	0e 94 f6 05 	call	0xbec	; 0xbec <sendData>
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <DFPlayer_CMD_continue>:
void DFPlayer_CMD_continue(void)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PLAYBACK;
     e22:	8d e0       	ldi	r24, 0x0D	; 13
     e24:	80 93 7d 00 	sts	0x007D, r24
	sendData();
     e28:	0e 94 f6 05 	call	0xbec	; 0xbec <sendData>
}
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <DFPlayer_CMD_Reset>:
void DFPlayer_CMD_Reset(void)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = RESET;
     e3a:	8c e0       	ldi	r24, 0x0C	; 12
     e3c:	80 93 7d 00 	sts	0x007D, r24
	sendData();
     e40:	0e 94 f6 05 	call	0xbec	; 0xbec <sendData>
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <play_sound>:

void play_sound(uint16 Sound)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <play_sound+0x6>
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	9a 83       	std	Y+2, r25	; 0x02
     e56:	89 83       	std	Y+1, r24	; 0x01
	DFPlayer_CMD_pause();
     e58:	0e 94 f5 06 	call	0xdea	; 0xdea <DFPlayer_CMD_pause>
	DFPlayer_CMD_setVolume(30);
     e5c:	8e e1       	ldi	r24, 0x1E	; 30
     e5e:	0e 94 cc 06 	call	0xd98	; 0xd98 <DFPlayer_CMD_setVolume>
	DFPlayer_CMD_play(Sound);
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	9a 81       	ldd	r25, Y+2	; 0x02
     e66:	0e 94 a6 06 	call	0xd4c	; 0xd4c <DFPlayer_CMD_play>
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <LCD_Init>:
#include <util/delay.h>
#include "BIT_MATH.h"
#include"lcd.h"

void LCD_Init(void)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	e8 97       	sbiw	r28, 0x38	; 56
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e2       	ldi	r26, 0x20	; 32
     e8e:	b2 e4       	ldi	r27, 0x42	; 66
     e90:	8d ab       	std	Y+53, r24	; 0x35
     e92:	9e ab       	std	Y+54, r25	; 0x36
     e94:	af ab       	std	Y+55, r26	; 0x37
     e96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e98:	6d a9       	ldd	r22, Y+53	; 0x35
     e9a:	7e a9       	ldd	r23, Y+54	; 0x36
     e9c:	8f a9       	ldd	r24, Y+55	; 0x37
     e9e:	98 ad       	ldd	r25, Y+56	; 0x38
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e8       	ldi	r19, 0x80	; 128
     ea4:	4b e3       	ldi	r20, 0x3B	; 59
     ea6:	55 e4       	ldi	r21, 0x45	; 69
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	89 ab       	std	Y+49, r24	; 0x31
     eb2:	9a ab       	std	Y+50, r25	; 0x32
     eb4:	ab ab       	std	Y+51, r26	; 0x33
     eb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     eb8:	69 a9       	ldd	r22, Y+49	; 0x31
     eba:	7a a9       	ldd	r23, Y+50	; 0x32
     ebc:	8b a9       	ldd	r24, Y+51	; 0x33
     ebe:	9c a9       	ldd	r25, Y+52	; 0x34
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e8       	ldi	r20, 0x80	; 128
     ec6:	5f e3       	ldi	r21, 0x3F	; 63
     ec8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ecc:	88 23       	and	r24, r24
     ece:	2c f4       	brge	.+10     	; 0xeda <LCD_Init+0x66>
		__ticks = 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	98 ab       	std	Y+48, r25	; 0x30
     ed6:	8f a7       	std	Y+47, r24	; 0x2f
     ed8:	3f c0       	rjmp	.+126    	; 0xf58 <LCD_Init+0xe4>
	else if (__tmp > 65535)
     eda:	69 a9       	ldd	r22, Y+49	; 0x31
     edc:	7a a9       	ldd	r23, Y+50	; 0x32
     ede:	8b a9       	ldd	r24, Y+51	; 0x33
     ee0:	9c a9       	ldd	r25, Y+52	; 0x34
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	3f ef       	ldi	r19, 0xFF	; 255
     ee6:	4f e7       	ldi	r20, 0x7F	; 127
     ee8:	57 e4       	ldi	r21, 0x47	; 71
     eea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eee:	18 16       	cp	r1, r24
     ef0:	4c f5       	brge	.+82     	; 0xf44 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef2:	6d a9       	ldd	r22, Y+53	; 0x35
     ef4:	7e a9       	ldd	r23, Y+54	; 0x36
     ef6:	8f a9       	ldd	r24, Y+55	; 0x37
     ef8:	98 ad       	ldd	r25, Y+56	; 0x38
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e2       	ldi	r20, 0x20	; 32
     f00:	51 e4       	ldi	r21, 0x41	; 65
     f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	bc 01       	movw	r22, r24
     f0c:	cd 01       	movw	r24, r26
     f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	98 ab       	std	Y+48, r25	; 0x30
     f18:	8f a7       	std	Y+47, r24	; 0x2f
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <LCD_Init+0xc6>
     f1c:	8c e2       	ldi	r24, 0x2C	; 44
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	9e a7       	std	Y+46, r25	; 0x2e
     f22:	8d a7       	std	Y+45, r24	; 0x2d
     f24:	8d a5       	ldd	r24, Y+45	; 0x2d
     f26:	9e a5       	ldd	r25, Y+46	; 0x2e
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <LCD_Init+0xb4>
     f2c:	9e a7       	std	Y+46, r25	; 0x2e
     f2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f30:	8f a5       	ldd	r24, Y+47	; 0x2f
     f32:	98 a9       	ldd	r25, Y+48	; 0x30
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	98 ab       	std	Y+48, r25	; 0x30
     f38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f3c:	98 a9       	ldd	r25, Y+48	; 0x30
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	69 f7       	brne	.-38     	; 0xf1c <LCD_Init+0xa8>
     f42:	14 c0       	rjmp	.+40     	; 0xf6c <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f44:	69 a9       	ldd	r22, Y+49	; 0x31
     f46:	7a a9       	ldd	r23, Y+50	; 0x32
     f48:	8b a9       	ldd	r24, Y+51	; 0x33
     f4a:	9c a9       	ldd	r25, Y+52	; 0x34
     f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	98 ab       	std	Y+48, r25	; 0x30
     f56:	8f a7       	std	Y+47, r24	; 0x2f
     f58:	8f a5       	ldd	r24, Y+47	; 0x2f
     f5a:	98 a9       	ldd	r25, Y+48	; 0x30
     f5c:	9c a7       	std	Y+44, r25	; 0x2c
     f5e:	8b a7       	std	Y+43, r24	; 0x2b
     f60:	8b a5       	ldd	r24, Y+43	; 0x2b
     f62:	9c a5       	ldd	r25, Y+44	; 0x2c
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <LCD_Init+0xf0>
     f68:	9c a7       	std	Y+44, r25	; 0x2c
     f6a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_SendCommand (0b00111100);
     f6c:	8c e3       	ldi	r24, 0x3C	; 60
     f6e:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_SendCommand>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a0 e4       	ldi	r26, 0x40	; 64
     f78:	b0 e4       	ldi	r27, 0x40	; 64
     f7a:	8f a3       	std	Y+39, r24	; 0x27
     f7c:	98 a7       	std	Y+40, r25	; 0x28
     f7e:	a9 a7       	std	Y+41, r26	; 0x29
     f80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f82:	6f a1       	ldd	r22, Y+39	; 0x27
     f84:	78 a5       	ldd	r23, Y+40	; 0x28
     f86:	89 a5       	ldd	r24, Y+41	; 0x29
     f88:	9a a5       	ldd	r25, Y+42	; 0x2a
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e8       	ldi	r19, 0x80	; 128
     f8e:	4b e3       	ldi	r20, 0x3B	; 59
     f90:	55 e4       	ldi	r21, 0x45	; 69
     f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	8b a3       	std	Y+35, r24	; 0x23
     f9c:	9c a3       	std	Y+36, r25	; 0x24
     f9e:	ad a3       	std	Y+37, r26	; 0x25
     fa0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fa2:	6b a1       	ldd	r22, Y+35	; 0x23
     fa4:	7c a1       	ldd	r23, Y+36	; 0x24
     fa6:	8d a1       	ldd	r24, Y+37	; 0x25
     fa8:	9e a1       	ldd	r25, Y+38	; 0x26
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e8       	ldi	r20, 0x80	; 128
     fb0:	5f e3       	ldi	r21, 0x3F	; 63
     fb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fb6:	88 23       	and	r24, r24
     fb8:	2c f4       	brge	.+10     	; 0xfc4 <LCD_Init+0x150>
		__ticks = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9a a3       	std	Y+34, r25	; 0x22
     fc0:	89 a3       	std	Y+33, r24	; 0x21
     fc2:	3f c0       	rjmp	.+126    	; 0x1042 <LCD_Init+0x1ce>
	else if (__tmp > 65535)
     fc4:	6b a1       	ldd	r22, Y+35	; 0x23
     fc6:	7c a1       	ldd	r23, Y+36	; 0x24
     fc8:	8d a1       	ldd	r24, Y+37	; 0x25
     fca:	9e a1       	ldd	r25, Y+38	; 0x26
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	3f ef       	ldi	r19, 0xFF	; 255
     fd0:	4f e7       	ldi	r20, 0x7F	; 127
     fd2:	57 e4       	ldi	r21, 0x47	; 71
     fd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fd8:	18 16       	cp	r1, r24
     fda:	4c f5       	brge	.+82     	; 0x102e <LCD_Init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fdc:	6f a1       	ldd	r22, Y+39	; 0x27
     fde:	78 a5       	ldd	r23, Y+40	; 0x28
     fe0:	89 a5       	ldd	r24, Y+41	; 0x29
     fe2:	9a a5       	ldd	r25, Y+42	; 0x2a
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e2       	ldi	r20, 0x20	; 32
     fea:	51 e4       	ldi	r21, 0x41	; 65
     fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	bc 01       	movw	r22, r24
     ff6:	cd 01       	movw	r24, r26
     ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	9a a3       	std	Y+34, r25	; 0x22
    1002:	89 a3       	std	Y+33, r24	; 0x21
    1004:	0f c0       	rjmp	.+30     	; 0x1024 <LCD_Init+0x1b0>
    1006:	8c e2       	ldi	r24, 0x2C	; 44
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	98 a3       	std	Y+32, r25	; 0x20
    100c:	8f 8f       	std	Y+31, r24	; 0x1f
    100e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1010:	98 a1       	ldd	r25, Y+32	; 0x20
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <LCD_Init+0x19e>
    1016:	98 a3       	std	Y+32, r25	; 0x20
    1018:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    101a:	89 a1       	ldd	r24, Y+33	; 0x21
    101c:	9a a1       	ldd	r25, Y+34	; 0x22
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	9a a3       	std	Y+34, r25	; 0x22
    1022:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1024:	89 a1       	ldd	r24, Y+33	; 0x21
    1026:	9a a1       	ldd	r25, Y+34	; 0x22
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	69 f7       	brne	.-38     	; 0x1006 <LCD_Init+0x192>
    102c:	14 c0       	rjmp	.+40     	; 0x1056 <LCD_Init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102e:	6b a1       	ldd	r22, Y+35	; 0x23
    1030:	7c a1       	ldd	r23, Y+36	; 0x24
    1032:	8d a1       	ldd	r24, Y+37	; 0x25
    1034:	9e a1       	ldd	r25, Y+38	; 0x26
    1036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	9a a3       	std	Y+34, r25	; 0x22
    1040:	89 a3       	std	Y+33, r24	; 0x21
    1042:	89 a1       	ldd	r24, Y+33	; 0x21
    1044:	9a a1       	ldd	r25, Y+34	; 0x22
    1046:	9e 8f       	std	Y+30, r25	; 0x1e
    1048:	8d 8f       	std	Y+29, r24	; 0x1d
    104a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    104c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <LCD_Init+0x1da>
    1052:	9e 8f       	std	Y+30, r25	; 0x1e
    1054:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);
	LCD_SendCommand(0b00001100);
    1056:	8c e0       	ldi	r24, 0x0C	; 12
    1058:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_SendCommand>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 e4       	ldi	r26, 0x40	; 64
    1062:	b0 e4       	ldi	r27, 0x40	; 64
    1064:	89 8f       	std	Y+25, r24	; 0x19
    1066:	9a 8f       	std	Y+26, r25	; 0x1a
    1068:	ab 8f       	std	Y+27, r26	; 0x1b
    106a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106c:	69 8d       	ldd	r22, Y+25	; 0x19
    106e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1070:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1072:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e8       	ldi	r19, 0x80	; 128
    1078:	4b e3       	ldi	r20, 0x3B	; 59
    107a:	55 e4       	ldi	r21, 0x45	; 69
    107c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8d 8b       	std	Y+21, r24	; 0x15
    1086:	9e 8b       	std	Y+22, r25	; 0x16
    1088:	af 8b       	std	Y+23, r26	; 0x17
    108a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    108c:	6d 89       	ldd	r22, Y+21	; 0x15
    108e:	7e 89       	ldd	r23, Y+22	; 0x16
    1090:	8f 89       	ldd	r24, Y+23	; 0x17
    1092:	98 8d       	ldd	r25, Y+24	; 0x18
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e8       	ldi	r20, 0x80	; 128
    109a:	5f e3       	ldi	r21, 0x3F	; 63
    109c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	2c f4       	brge	.+10     	; 0x10ae <LCD_Init+0x23a>
		__ticks = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9c 8b       	std	Y+20, r25	; 0x14
    10aa:	8b 8b       	std	Y+19, r24	; 0x13
    10ac:	3f c0       	rjmp	.+126    	; 0x112c <LCD_Init+0x2b8>
	else if (__tmp > 65535)
    10ae:	6d 89       	ldd	r22, Y+21	; 0x15
    10b0:	7e 89       	ldd	r23, Y+22	; 0x16
    10b2:	8f 89       	ldd	r24, Y+23	; 0x17
    10b4:	98 8d       	ldd	r25, Y+24	; 0x18
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	3f ef       	ldi	r19, 0xFF	; 255
    10ba:	4f e7       	ldi	r20, 0x7F	; 127
    10bc:	57 e4       	ldi	r21, 0x47	; 71
    10be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	4c f5       	brge	.+82     	; 0x1118 <LCD_Init+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	69 8d       	ldd	r22, Y+25	; 0x19
    10c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e2       	ldi	r20, 0x20	; 32
    10d4:	51 e4       	ldi	r21, 0x41	; 65
    10d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9c 8b       	std	Y+20, r25	; 0x14
    10ec:	8b 8b       	std	Y+19, r24	; 0x13
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <LCD_Init+0x29a>
    10f0:	8c e2       	ldi	r24, 0x2C	; 44
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	9a 8b       	std	Y+18, r25	; 0x12
    10f6:	89 8b       	std	Y+17, r24	; 0x11
    10f8:	89 89       	ldd	r24, Y+17	; 0x11
    10fa:	9a 89       	ldd	r25, Y+18	; 0x12
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <LCD_Init+0x288>
    1100:	9a 8b       	std	Y+18, r25	; 0x12
    1102:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1104:	8b 89       	ldd	r24, Y+19	; 0x13
    1106:	9c 89       	ldd	r25, Y+20	; 0x14
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	9c 8b       	std	Y+20, r25	; 0x14
    110c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110e:	8b 89       	ldd	r24, Y+19	; 0x13
    1110:	9c 89       	ldd	r25, Y+20	; 0x14
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	69 f7       	brne	.-38     	; 0x10f0 <LCD_Init+0x27c>
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <LCD_Init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	6d 89       	ldd	r22, Y+21	; 0x15
    111a:	7e 89       	ldd	r23, Y+22	; 0x16
    111c:	8f 89       	ldd	r24, Y+23	; 0x17
    111e:	98 8d       	ldd	r25, Y+24	; 0x18
    1120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9c 8b       	std	Y+20, r25	; 0x14
    112a:	8b 8b       	std	Y+19, r24	; 0x13
    112c:	8b 89       	ldd	r24, Y+19	; 0x13
    112e:	9c 89       	ldd	r25, Y+20	; 0x14
    1130:	98 8b       	std	Y+16, r25	; 0x10
    1132:	8f 87       	std	Y+15, r24	; 0x0f
    1134:	8f 85       	ldd	r24, Y+15	; 0x0f
    1136:	98 89       	ldd	r25, Y+16	; 0x10
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <LCD_Init+0x2c4>
    113c:	98 8b       	std	Y+16, r25	; 0x10
    113e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	LCD_SendCommand (0b00000001);
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_SendCommand>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a0 e4       	ldi	r26, 0x40	; 64
    114c:	b0 e4       	ldi	r27, 0x40	; 64
    114e:	8b 87       	std	Y+11, r24	; 0x0b
    1150:	9c 87       	std	Y+12, r25	; 0x0c
    1152:	ad 87       	std	Y+13, r26	; 0x0d
    1154:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1156:	6b 85       	ldd	r22, Y+11	; 0x0b
    1158:	7c 85       	ldd	r23, Y+12	; 0x0c
    115a:	8d 85       	ldd	r24, Y+13	; 0x0d
    115c:	9e 85       	ldd	r25, Y+14	; 0x0e
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e8       	ldi	r19, 0x80	; 128
    1162:	4b e3       	ldi	r20, 0x3B	; 59
    1164:	55 e4       	ldi	r21, 0x45	; 69
    1166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	8f 83       	std	Y+7, r24	; 0x07
    1170:	98 87       	std	Y+8, r25	; 0x08
    1172:	a9 87       	std	Y+9, r26	; 0x09
    1174:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1176:	6f 81       	ldd	r22, Y+7	; 0x07
    1178:	78 85       	ldd	r23, Y+8	; 0x08
    117a:	89 85       	ldd	r24, Y+9	; 0x09
    117c:	9a 85       	ldd	r25, Y+10	; 0x0a
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e8       	ldi	r20, 0x80	; 128
    1184:	5f e3       	ldi	r21, 0x3F	; 63
    1186:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    118a:	88 23       	and	r24, r24
    118c:	2c f4       	brge	.+10     	; 0x1198 <LCD_Init+0x324>
		__ticks = 1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	3f c0       	rjmp	.+126    	; 0x1216 <LCD_Init+0x3a2>
	else if (__tmp > 65535)
    1198:	6f 81       	ldd	r22, Y+7	; 0x07
    119a:	78 85       	ldd	r23, Y+8	; 0x08
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	4f e7       	ldi	r20, 0x7F	; 127
    11a6:	57 e4       	ldi	r21, 0x47	; 71
    11a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	4c f5       	brge	.+82     	; 0x1202 <LCD_Init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e2       	ldi	r20, 0x20	; 32
    11be:	51 e4       	ldi	r21, 0x41	; 65
    11c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	8d 83       	std	Y+5, r24	; 0x05
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <LCD_Init+0x384>
    11da:	8c e2       	ldi	r24, 0x2C	; 44
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <LCD_Init+0x372>
    11ea:	9c 83       	std	Y+4, r25	; 0x04
    11ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	69 f7       	brne	.-38     	; 0x11da <LCD_Init+0x366>
    1200:	14 c0       	rjmp	.+40     	; 0x122a <LCD_Init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1202:	6f 81       	ldd	r22, Y+7	; 0x07
    1204:	78 85       	ldd	r23, Y+8	; 0x08
    1206:	89 85       	ldd	r24, Y+9	; 0x09
    1208:	9a 85       	ldd	r25, Y+10	; 0x0a
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <LCD_Init+0x3ae>
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    122a:	e8 96       	adiw	r28, 0x38	; 56
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <LCD_SendCommand>:

 void LCD_SendCommand(u8 command)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	2f 97       	sbiw	r28, 0x0f	; 15
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1252:	a8 e3       	ldi	r26, 0x38	; 56
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8e 7f       	andi	r24, 0xFE	; 254
    125e:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    1260:	a8 e3       	ldi	r26, 0x38	; 56
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e8 e3       	ldi	r30, 0x38	; 56
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	8d 7f       	andi	r24, 0xFD	; 253
    126c:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RS_Pin);
    126e:	a8 e3       	ldi	r26, 0x38	; 56
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e8 e3       	ldi	r30, 0x38	; 56
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8b 7f       	andi	r24, 0xFB	; 251
    127a:	8c 93       	st	X, r24

	LCD_DataPORT= command;
    127c:	e5 e3       	ldi	r30, 0x35	; 53
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8f 85       	ldd	r24, Y+15	; 0x0f
    1282:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    1284:	a8 e3       	ldi	r26, 0x38	; 56
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e8 e3       	ldi	r30, 0x38	; 56
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	81 60       	ori	r24, 0x01	; 1
    1290:	8c 93       	st	X, r24
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a0 e0       	ldi	r26, 0x00	; 0
    1298:	b0 e4       	ldi	r27, 0x40	; 64
    129a:	8b 87       	std	Y+11, r24	; 0x0b
    129c:	9c 87       	std	Y+12, r25	; 0x0c
    129e:	ad 87       	std	Y+13, r26	; 0x0d
    12a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e8       	ldi	r19, 0x80	; 128
    12ae:	4b e3       	ldi	r20, 0x3B	; 59
    12b0:	55 e4       	ldi	r21, 0x45	; 69
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	8f 83       	std	Y+7, r24	; 0x07
    12bc:	98 87       	std	Y+8, r25	; 0x08
    12be:	a9 87       	std	Y+9, r26	; 0x09
    12c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c2:	6f 81       	ldd	r22, Y+7	; 0x07
    12c4:	78 85       	ldd	r23, Y+8	; 0x08
    12c6:	89 85       	ldd	r24, Y+9	; 0x09
    12c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e8       	ldi	r20, 0x80	; 128
    12d0:	5f e3       	ldi	r21, 0x3F	; 63
    12d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d6:	88 23       	and	r24, r24
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <LCD_SendCommand+0xa8>
		__ticks = 1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	3f c0       	rjmp	.+126    	; 0x1362 <LCD_SendCommand+0x126>
	else if (__tmp > 65535)
    12e4:	6f 81       	ldd	r22, Y+7	; 0x07
    12e6:	78 85       	ldd	r23, Y+8	; 0x08
    12e8:	89 85       	ldd	r24, Y+9	; 0x09
    12ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	3f ef       	ldi	r19, 0xFF	; 255
    12f0:	4f e7       	ldi	r20, 0x7F	; 127
    12f2:	57 e4       	ldi	r21, 0x47	; 71
    12f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f8:	18 16       	cp	r1, r24
    12fa:	4c f5       	brge	.+82     	; 0x134e <LCD_SendCommand+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1300:	8d 85       	ldd	r24, Y+13	; 0x0d
    1302:	9e 85       	ldd	r25, Y+14	; 0x0e
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e2       	ldi	r20, 0x20	; 32
    130a:	51 e4       	ldi	r21, 0x41	; 65
    130c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	bc 01       	movw	r22, r24
    1316:	cd 01       	movw	r24, r26
    1318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	0f c0       	rjmp	.+30     	; 0x1344 <LCD_SendCommand+0x108>
    1326:	8c e2       	ldi	r24, 0x2C	; 44
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <LCD_SendCommand+0xf6>
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	69 f7       	brne	.-38     	; 0x1326 <LCD_SendCommand+0xea>
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <LCD_SendCommand+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134e:	6f 81       	ldd	r22, Y+7	; 0x07
    1350:	78 85       	ldd	r23, Y+8	; 0x08
    1352:	89 85       	ldd	r24, Y+9	; 0x09
    1354:	9a 85       	ldd	r25, Y+10	; 0x0a
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9e 83       	std	Y+6, r25	; 0x06
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <LCD_SendCommand+0x132>
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1376:	a8 e3       	ldi	r26, 0x38	; 56
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e8 e3       	ldi	r30, 0x38	; 56
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	8e 7f       	andi	r24, 0xFE	; 254
    1382:	8c 93       	st	X, r24
}
    1384:	2f 96       	adiw	r28, 0x0f	; 15
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <LCD_WriteData>:

 void LCD_WriteData(u8 data)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	2f 97       	sbiw	r28, 0x0f	; 15
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    13ac:	a8 e3       	ldi	r26, 0x38	; 56
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e8 e3       	ldi	r30, 0x38	; 56
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8e 7f       	andi	r24, 0xFE	; 254
    13b8:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    13ba:	a8 e3       	ldi	r26, 0x38	; 56
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e8 e3       	ldi	r30, 0x38	; 56
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8d 7f       	andi	r24, 0xFD	; 253
    13c6:	8c 93       	st	X, r24
	SETBIT (LCD_ControlPORT, RS_Pin);
    13c8:	a8 e3       	ldi	r26, 0x38	; 56
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e8 e3       	ldi	r30, 0x38	; 56
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	84 60       	ori	r24, 0x04	; 4
    13d4:	8c 93       	st	X, r24

	LCD_DataPORT= data;
    13d6:	e5 e3       	ldi	r30, 0x35	; 53
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	8f 85       	ldd	r24, Y+15	; 0x0f
    13dc:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    13de:	a8 e3       	ldi	r26, 0x38	; 56
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e8 e3       	ldi	r30, 0x38	; 56
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	81 60       	ori	r24, 0x01	; 1
    13ea:	8c 93       	st	X, r24
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 e0       	ldi	r26, 0x00	; 0
    13f2:	b0 e4       	ldi	r27, 0x40	; 64
    13f4:	8b 87       	std	Y+11, r24	; 0x0b
    13f6:	9c 87       	std	Y+12, r25	; 0x0c
    13f8:	ad 87       	std	Y+13, r26	; 0x0d
    13fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1400:	8d 85       	ldd	r24, Y+13	; 0x0d
    1402:	9e 85       	ldd	r25, Y+14	; 0x0e
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e8       	ldi	r19, 0x80	; 128
    1408:	4b e3       	ldi	r20, 0x3B	; 59
    140a:	55 e4       	ldi	r21, 0x45	; 69
    140c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	8f 83       	std	Y+7, r24	; 0x07
    1416:	98 87       	std	Y+8, r25	; 0x08
    1418:	a9 87       	std	Y+9, r26	; 0x09
    141a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    141c:	6f 81       	ldd	r22, Y+7	; 0x07
    141e:	78 85       	ldd	r23, Y+8	; 0x08
    1420:	89 85       	ldd	r24, Y+9	; 0x09
    1422:	9a 85       	ldd	r25, Y+10	; 0x0a
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	5f e3       	ldi	r21, 0x3F	; 63
    142c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1430:	88 23       	and	r24, r24
    1432:	2c f4       	brge	.+10     	; 0x143e <LCD_WriteData+0xa8>
		__ticks = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	3f c0       	rjmp	.+126    	; 0x14bc <LCD_WriteData+0x126>
	else if (__tmp > 65535)
    143e:	6f 81       	ldd	r22, Y+7	; 0x07
    1440:	78 85       	ldd	r23, Y+8	; 0x08
    1442:	89 85       	ldd	r24, Y+9	; 0x09
    1444:	9a 85       	ldd	r25, Y+10	; 0x0a
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	4c f5       	brge	.+82     	; 0x14a8 <LCD_WriteData+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1456:	6b 85       	ldd	r22, Y+11	; 0x0b
    1458:	7c 85       	ldd	r23, Y+12	; 0x0c
    145a:	8d 85       	ldd	r24, Y+13	; 0x0d
    145c:	9e 85       	ldd	r25, Y+14	; 0x0e
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e2       	ldi	r20, 0x20	; 32
    1464:	51 e4       	ldi	r21, 0x41	; 65
    1466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	bc 01       	movw	r22, r24
    1470:	cd 01       	movw	r24, r26
    1472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	9e 83       	std	Y+6, r25	; 0x06
    147c:	8d 83       	std	Y+5, r24	; 0x05
    147e:	0f c0       	rjmp	.+30     	; 0x149e <LCD_WriteData+0x108>
    1480:	8c e2       	ldi	r24, 0x2C	; 44
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	9c 83       	std	Y+4, r25	; 0x04
    1486:	8b 83       	std	Y+3, r24	; 0x03
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <LCD_WriteData+0xf6>
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	69 f7       	brne	.-38     	; 0x1480 <LCD_WriteData+0xea>
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <LCD_WriteData+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a8:	6f 81       	ldd	r22, Y+7	; 0x07
    14aa:	78 85       	ldd	r23, Y+8	; 0x08
    14ac:	89 85       	ldd	r24, Y+9	; 0x09
    14ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <LCD_WriteData+0x132>
    14cc:	9a 83       	std	Y+2, r25	; 0x02
    14ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    14d0:	a8 e3       	ldi	r26, 0x38	; 56
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e8 e3       	ldi	r30, 0x38	; 56
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8e 7f       	andi	r24, 0xFE	; 254
    14dc:	8c 93       	st	X, r24
}
    14de:	2f 96       	adiw	r28, 0x0f	; 15
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <LCD_WriteString>:

void LCD_WriteString(u8* pu8StringCpy)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	61 97       	sbiw	r28, 0x11	; 17
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	99 8b       	std	Y+17, r25	; 0x11
    1506:	88 8b       	std	Y+16, r24	; 0x10

  /* Local loop index */
  u8 u8Index = 0;
    1508:	1f 86       	std	Y+15, r1	; 0x0f
    150a:	80 c0       	rjmp	.+256    	; 0x160c <LCD_WriteString+0x11c>

  while (pu8StringCpy [u8Index] != 0)
  {
    /* Write Character on LCD */
    LCD_WriteData (pu8StringCpy [u8Index]);
    150c:	8f 85       	ldd	r24, Y+15	; 0x0f
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	88 89       	ldd	r24, Y+16	; 0x10
    1514:	99 89       	ldd	r25, Y+17	; 0x11
    1516:	fc 01       	movw	r30, r24
    1518:	e2 0f       	add	r30, r18
    151a:	f3 1f       	adc	r31, r19
    151c:	80 81       	ld	r24, Z
    151e:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_WriteData>

    /* Increment local loop index */
    u8Index++;
    1522:	8f 85       	ldd	r24, Y+15	; 0x0f
    1524:	8f 5f       	subi	r24, 0xFF	; 255
    1526:	8f 87       	std	Y+15, r24	; 0x0f
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 e0       	ldi	r26, 0x00	; 0
    152e:	b0 e4       	ldi	r27, 0x40	; 64
    1530:	8b 87       	std	Y+11, r24	; 0x0b
    1532:	9c 87       	std	Y+12, r25	; 0x0c
    1534:	ad 87       	std	Y+13, r26	; 0x0d
    1536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1538:	6b 85       	ldd	r22, Y+11	; 0x0b
    153a:	7c 85       	ldd	r23, Y+12	; 0x0c
    153c:	8d 85       	ldd	r24, Y+13	; 0x0d
    153e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e8       	ldi	r19, 0x80	; 128
    1544:	4b e3       	ldi	r20, 0x3B	; 59
    1546:	55 e4       	ldi	r21, 0x45	; 69
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8f 83       	std	Y+7, r24	; 0x07
    1552:	98 87       	std	Y+8, r25	; 0x08
    1554:	a9 87       	std	Y+9, r26	; 0x09
    1556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	2c f4       	brge	.+10     	; 0x157a <LCD_WriteString+0x8a>
		__ticks = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	3f c0       	rjmp	.+126    	; 0x15f8 <LCD_WriteString+0x108>
	else if (__tmp > 65535)
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	4f e7       	ldi	r20, 0x7F	; 127
    1588:	57 e4       	ldi	r21, 0x47	; 71
    158a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158e:	18 16       	cp	r1, r24
    1590:	4c f5       	brge	.+82     	; 0x15e4 <LCD_WriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1592:	6b 85       	ldd	r22, Y+11	; 0x0b
    1594:	7c 85       	ldd	r23, Y+12	; 0x0c
    1596:	8d 85       	ldd	r24, Y+13	; 0x0d
    1598:	9e 85       	ldd	r25, Y+14	; 0x0e
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e2       	ldi	r20, 0x20	; 32
    15a0:	51 e4       	ldi	r21, 0x41	; 65
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <LCD_WriteString+0xea>
    15bc:	8c e2       	ldi	r24, 0x2C	; 44
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <LCD_WriteString+0xd8>
    15cc:	9c 83       	std	Y+4, r25	; 0x04
    15ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	69 f7       	brne	.-38     	; 0x15bc <LCD_WriteString+0xcc>
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <LCD_WriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e4:	6f 81       	ldd	r22, Y+7	; 0x07
    15e6:	78 85       	ldd	r23, Y+8	; 0x08
    15e8:	89 85       	ldd	r24, Y+9	; 0x09
    15ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <LCD_WriteString+0x114>
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01
{

  /* Local loop index */
  u8 u8Index = 0;

  while (pu8StringCpy [u8Index] != 0)
    160c:	8f 85       	ldd	r24, Y+15	; 0x0f
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	88 89       	ldd	r24, Y+16	; 0x10
    1614:	99 89       	ldd	r25, Y+17	; 0x11
    1616:	fc 01       	movw	r30, r24
    1618:	e2 0f       	add	r30, r18
    161a:	f3 1f       	adc	r31, r19
    161c:	80 81       	ld	r24, Z
    161e:	88 23       	and	r24, r24
    1620:	09 f0       	breq	.+2      	; 0x1624 <LCD_WriteString+0x134>
    1622:	74 cf       	rjmp	.-280    	; 0x150c <LCD_WriteString+0x1c>

    /* Delay to let the LCD show the character */
    _delay_ms(2);
  }

}
    1624:	61 96       	adiw	r28, 0x11	; 17
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <LCD_Goto_xy>:

void LCD_Goto_xy(u8 x, u8 y)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	64 97       	sbiw	r28, 0x14	; 20
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	8b 8b       	std	Y+19, r24	; 0x13
    164c:	6c 8b       	std	Y+20, r22	; 0x14
	u8 firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
    164e:	80 e8       	ldi	r24, 0x80	; 128
    1650:	8f 87       	std	Y+15, r24	; 0x0f
    1652:	80 ec       	ldi	r24, 0xC0	; 192
    1654:	88 8b       	std	Y+16, r24	; 0x10
    1656:	84 e9       	ldi	r24, 0x94	; 148
    1658:	89 8b       	std	Y+17, r24	; 0x11
    165a:	84 ed       	ldi	r24, 0xD4	; 212
    165c:	8a 8b       	std	Y+18, r24	; 0x12
	LCD_SendCommand (firstcharAdr[y-1] + x - 1);
    165e:	8c 89       	ldd	r24, Y+20	; 0x14
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9c 01       	movw	r18, r24
    1666:	21 50       	subi	r18, 0x01	; 1
    1668:	30 40       	sbci	r19, 0x00	; 0
    166a:	ce 01       	movw	r24, r28
    166c:	0f 96       	adiw	r24, 0x0f	; 15
    166e:	fc 01       	movw	r30, r24
    1670:	e2 0f       	add	r30, r18
    1672:	f3 1f       	adc	r31, r19
    1674:	90 81       	ld	r25, Z
    1676:	8b 89       	ldd	r24, Y+19	; 0x13
    1678:	89 0f       	add	r24, r25
    167a:	81 50       	subi	r24, 0x01	; 1
    167c:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_SendCommand>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 e8       	ldi	r26, 0x80	; 128
    1686:	bf e3       	ldi	r27, 0x3F	; 63
    1688:	8b 87       	std	Y+11, r24	; 0x0b
    168a:	9c 87       	std	Y+12, r25	; 0x0c
    168c:	ad 87       	std	Y+13, r26	; 0x0d
    168e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	6b 85       	ldd	r22, Y+11	; 0x0b
    1692:	7c 85       	ldd	r23, Y+12	; 0x0c
    1694:	8d 85       	ldd	r24, Y+13	; 0x0d
    1696:	9e 85       	ldd	r25, Y+14	; 0x0e
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e8       	ldi	r19, 0x80	; 128
    169c:	4b e3       	ldi	r20, 0x3B	; 59
    169e:	55 e4       	ldi	r21, 0x45	; 69
    16a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	8f 83       	std	Y+7, r24	; 0x07
    16aa:	98 87       	std	Y+8, r25	; 0x08
    16ac:	a9 87       	std	Y+9, r26	; 0x09
    16ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b0:	6f 81       	ldd	r22, Y+7	; 0x07
    16b2:	78 85       	ldd	r23, Y+8	; 0x08
    16b4:	89 85       	ldd	r24, Y+9	; 0x09
    16b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <LCD_Goto_xy+0x9c>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <LCD_Goto_xy+0x11a>
	else if (__tmp > 65535)
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	4c f5       	brge	.+82     	; 0x173c <LCD_Goto_xy+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <LCD_Goto_xy+0xfc>
    1714:	8c e2       	ldi	r24, 0x2C	; 44
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	9c 83       	std	Y+4, r25	; 0x04
    171a:	8b 83       	std	Y+3, r24	; 0x03
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_Goto_xy+0xea>
    1724:	9c 83       	std	Y+4, r25	; 0x04
    1726:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f7       	brne	.-38     	; 0x1714 <LCD_Goto_xy+0xde>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <LCD_Goto_xy+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <LCD_Goto_xy+0x126>
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1764:	64 96       	adiw	r28, 0x14	; 20
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <LCD_MoveCursorLeft>:

void LCD_MoveCursorLeft (void)
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	2e 97       	sbiw	r28, 0x0e	; 14
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_LEFT);
    178a:	80 e1       	ldi	r24, 0x10	; 16
    178c:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_SendCommand>
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a0 e8       	ldi	r26, 0x80	; 128
    1796:	bf e3       	ldi	r27, 0x3F	; 63
    1798:	8b 87       	std	Y+11, r24	; 0x0b
    179a:	9c 87       	std	Y+12, r25	; 0x0c
    179c:	ad 87       	std	Y+13, r26	; 0x0d
    179e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e8       	ldi	r19, 0x80	; 128
    17ac:	4b e3       	ldi	r20, 0x3B	; 59
    17ae:	55 e4       	ldi	r21, 0x45	; 69
    17b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	8f 83       	std	Y+7, r24	; 0x07
    17ba:	98 87       	std	Y+8, r25	; 0x08
    17bc:	a9 87       	std	Y+9, r26	; 0x09
    17be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17c0:	6f 81       	ldd	r22, Y+7	; 0x07
    17c2:	78 85       	ldd	r23, Y+8	; 0x08
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	5f e3       	ldi	r21, 0x3F	; 63
    17d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d4:	88 23       	and	r24, r24
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <LCD_MoveCursorLeft+0x6c>
		__ticks = 1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	3f c0       	rjmp	.+126    	; 0x1860 <LCD_MoveCursorLeft+0xea>
	else if (__tmp > 65535)
    17e2:	6f 81       	ldd	r22, Y+7	; 0x07
    17e4:	78 85       	ldd	r23, Y+8	; 0x08
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	3f ef       	ldi	r19, 0xFF	; 255
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	57 e4       	ldi	r21, 0x47	; 71
    17f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f6:	18 16       	cp	r1, r24
    17f8:	4c f5       	brge	.+82     	; 0x184c <LCD_MoveCursorLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1800:	9e 85       	ldd	r25, Y+14	; 0x0e
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <LCD_MoveCursorLeft+0xcc>
    1824:	8c e2       	ldi	r24, 0x2C	; 44
    1826:	91 e0       	ldi	r25, 0x01	; 1
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <LCD_MoveCursorLeft+0xba>
    1834:	9c 83       	std	Y+4, r25	; 0x04
    1836:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	69 f7       	brne	.-38     	; 0x1824 <LCD_MoveCursorLeft+0xae>
    184a:	14 c0       	rjmp	.+40     	; 0x1874 <LCD_MoveCursorLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184c:	6f 81       	ldd	r22, Y+7	; 0x07
    184e:	78 85       	ldd	r23, Y+8	; 0x08
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_MoveCursorLeft+0xf6>
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1874:	2e 96       	adiw	r28, 0x0e	; 14
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <LCD_MoveCursorRight>:

//*******************************************************************************
void LCD_MoveCursorRight (void)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	2e 97       	sbiw	r28, 0x0e	; 14
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_RIGHT);
    189a:	84 e1       	ldi	r24, 0x14	; 20
    189c:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_SendCommand>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a0 e8       	ldi	r26, 0x80	; 128
    18a6:	bf e3       	ldi	r27, 0x3F	; 63
    18a8:	8b 87       	std	Y+11, r24	; 0x0b
    18aa:	9c 87       	std	Y+12, r25	; 0x0c
    18ac:	ad 87       	std	Y+13, r26	; 0x0d
    18ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e8       	ldi	r19, 0x80	; 128
    18bc:	4b e3       	ldi	r20, 0x3B	; 59
    18be:	55 e4       	ldi	r21, 0x45	; 69
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	8f 83       	std	Y+7, r24	; 0x07
    18ca:	98 87       	std	Y+8, r25	; 0x08
    18cc:	a9 87       	std	Y+9, r26	; 0x09
    18ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d0:	6f 81       	ldd	r22, Y+7	; 0x07
    18d2:	78 85       	ldd	r23, Y+8	; 0x08
    18d4:	89 85       	ldd	r24, Y+9	; 0x09
    18d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e8       	ldi	r20, 0x80	; 128
    18de:	5f e3       	ldi	r21, 0x3F	; 63
    18e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e4:	88 23       	and	r24, r24
    18e6:	2c f4       	brge	.+10     	; 0x18f2 <LCD_MoveCursorRight+0x6c>
		__ticks = 1;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
    18f0:	3f c0       	rjmp	.+126    	; 0x1970 <LCD_MoveCursorRight+0xea>
	else if (__tmp > 65535)
    18f2:	6f 81       	ldd	r22, Y+7	; 0x07
    18f4:	78 85       	ldd	r23, Y+8	; 0x08
    18f6:	89 85       	ldd	r24, Y+9	; 0x09
    18f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	57 e4       	ldi	r21, 0x47	; 71
    1902:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	4c f5       	brge	.+82     	; 0x195c <LCD_MoveCursorRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190a:	6b 85       	ldd	r22, Y+11	; 0x0b
    190c:	7c 85       	ldd	r23, Y+12	; 0x0c
    190e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1910:	9e 85       	ldd	r25, Y+14	; 0x0e
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e2       	ldi	r20, 0x20	; 32
    1918:	51 e4       	ldi	r21, 0x41	; 65
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	0f c0       	rjmp	.+30     	; 0x1952 <LCD_MoveCursorRight+0xcc>
    1934:	8c e2       	ldi	r24, 0x2C	; 44
    1936:	91 e0       	ldi	r25, 0x01	; 1
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	8b 83       	std	Y+3, r24	; 0x03
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <LCD_MoveCursorRight+0xba>
    1944:	9c 83       	std	Y+4, r25	; 0x04
    1946:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	9e 83       	std	Y+6, r25	; 0x06
    1950:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1952:	8d 81       	ldd	r24, Y+5	; 0x05
    1954:	9e 81       	ldd	r25, Y+6	; 0x06
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	69 f7       	brne	.-38     	; 0x1934 <LCD_MoveCursorRight+0xae>
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <LCD_MoveCursorRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195c:	6f 81       	ldd	r22, Y+7	; 0x07
    195e:	78 85       	ldd	r23, Y+8	; 0x08
    1960:	89 85       	ldd	r24, Y+9	; 0x09
    1962:	9a 85       	ldd	r25, Y+10	; 0x0a
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9e 83       	std	Y+6, r25	; 0x06
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_MoveCursorRight+0xf6>
    1980:	9a 83       	std	Y+2, r25	; 0x02
    1982:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1984:	2e 96       	adiw	r28, 0x0e	; 14
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <LCD_WriteString_xy>:

void LCD_WriteString_xy(u8 x, u8 y, u8* pu8StringCpy)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	00 d0       	rcall	.+0      	; 0x199c <LCD_WriteString_xy+0x6>
    199c:	00 d0       	rcall	.+0      	; 0x199e <LCD_WriteString_xy+0x8>
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	6a 83       	std	Y+2, r22	; 0x02
    19a6:	5c 83       	std	Y+4, r21	; 0x04
    19a8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_Goto_xy(x,y);
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	6a 81       	ldd	r22, Y+2	; 0x02
    19ae:	0e 94 1b 0b 	call	0x1636	; 0x1636 <LCD_Goto_xy>
	LCD_WriteString(pu8StringCpy);
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_WriteString>
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <LCD_WriteInteger_xy>:

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	29 97       	sbiw	r28, 0x09	; 9
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    19e6:	6c 83       	std	Y+4, r22	; 0x04
    19e8:	5e 83       	std	Y+6, r21	; 0x06
    19ea:	4d 83       	std	Y+5, r20	; 0x05
    19ec:	2f 83       	std	Y+7, r18	; 0x07
	u8 StringToDisplay[NumberOfDigits];
	itoa (IntegerToDisplay, StringToDisplay, 10);
	LCD_WriteString_xy (x, y, StringToDisplay);
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)

}
    19ee:	0d b7       	in	r16, 0x3d	; 61
    19f0:	1e b7       	in	r17, 0x3e	; 62
	LCD_Goto_xy(x,y);
	LCD_WriteString(pu8StringCpy);
}

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    19f2:	8d b7       	in	r24, 0x3d	; 61
    19f4:	9e b7       	in	r25, 0x3e	; 62
    19f6:	7c 01       	movw	r14, r24
	u8 StringToDisplay[NumberOfDigits];
    19f8:	8f 81       	ldd	r24, Y+7	; 0x07
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	2d b7       	in	r18, 0x3d	; 61
    1a00:	3e b7       	in	r19, 0x3e	; 62
    1a02:	28 1b       	sub	r18, r24
    1a04:	39 0b       	sbc	r19, r25
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	3e bf       	out	0x3e, r19	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	2d bf       	out	0x3d, r18	; 61
    1a10:	8d b7       	in	r24, 0x3d	; 61
    1a12:	9e b7       	in	r25, 0x3e	; 62
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	99 87       	std	Y+9, r25	; 0x09
    1a18:	88 87       	std	Y+8, r24	; 0x08
    1a1a:	88 85       	ldd	r24, Y+8	; 0x08
    1a1c:	99 85       	ldd	r25, Y+9	; 0x09
    1a1e:	00 96       	adiw	r24, 0x00	; 0
    1a20:	99 87       	std	Y+9, r25	; 0x09
    1a22:	88 87       	std	Y+8, r24	; 0x08
    1a24:	28 85       	ldd	r18, Y+8	; 0x08
    1a26:	39 85       	ldd	r19, Y+9	; 0x09
    1a28:	3a 83       	std	Y+2, r19	; 0x02
    1a2a:	29 83       	std	Y+1, r18	; 0x01
	itoa (IntegerToDisplay, StringToDisplay, 10);
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a30:	29 81       	ldd	r18, Y+1	; 0x01
    1a32:	3a 81       	ldd	r19, Y+2	; 0x02
    1a34:	b9 01       	movw	r22, r18
    1a36:	4a e0       	ldi	r20, 0x0A	; 10
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	0e 94 6d 12 	call	0x24da	; 0x24da <itoa>
	LCD_WriteString_xy (x, y, StringToDisplay);
    1a3e:	29 81       	ldd	r18, Y+1	; 0x01
    1a40:	3a 81       	ldd	r19, Y+2	; 0x02
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	6c 81       	ldd	r22, Y+4	; 0x04
    1a46:	a9 01       	movw	r20, r18
    1a48:	0e 94 cb 0c 	call	0x1996	; 0x1996 <LCD_WriteString_xy>
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)
    1a4c:	80 e6       	ldi	r24, 0x60	; 96
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_WriteString>
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	fe be       	out	0x3e, r15	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	ed be       	out	0x3d, r14	; 61

}
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	1e bf       	out	0x3e, r17	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	0d bf       	out	0x3d, r16	; 61
    1a68:	29 96       	adiw	r28, 0x09	; 9
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	ff 90       	pop	r15
    1a7e:	ef 90       	pop	r14
    1a80:	08 95       	ret

00001a82 <main>:
u8  Compare_Flex_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data);

/*-------------------------------------------------------------*/

int main (void)
{
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	c9 54       	subi	r28, 0x49	; 73
    1a90:	d0 40       	sbci	r29, 0x00	; 0
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
		Letter_D,
	};
//	u8 Word_index;
	u8 result;
//	DDRA=0x00;  "reserved for ADCs"
	DDRC=0xff;
    1a9c:	e4 e3       	ldi	r30, 0x34	; 52
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	8f ef       	ldi	r24, 0xFF	; 255
    1aa2:	80 83       	st	Z, r24
//	DDRD=0xff;
	DDRB=0xff;
    1aa4:	e7 e3       	ldi	r30, 0x37	; 55
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	8f ef       	ldi	r24, 0xFF	; 255
    1aaa:	80 83       	st	Z, r24

	LCD_Init();
    1aac:	0e 94 3a 07 	call	0xe74	; 0xe74 <LCD_Init>
	LCD_SendCommand(0);
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_SendCommand>
	LCD_WriteData('L');
    1ab6:	8c e4       	ldi	r24, 0x4C	; 76
    1ab8:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_WriteData>
    1abc:	fe 01       	movw	r30, r28
    1abe:	ed 5b       	subi	r30, 0xBD	; 189
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	aa ef       	ldi	r26, 0xFA	; 250
    1ac8:	b4 e4       	ldi	r27, 0x44	; 68
    1aca:	80 83       	st	Z, r24
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	a2 83       	std	Z+2, r26	; 0x02
    1ad0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	8e 01       	movw	r16, r28
    1ad4:	01 5c       	subi	r16, 0xC1	; 193
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	fe 01       	movw	r30, r28
    1ada:	ed 5b       	subi	r30, 0xBD	; 189
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e8       	ldi	r19, 0x80	; 128
    1aea:	4b e3       	ldi	r20, 0x3B	; 59
    1aec:	55 e4       	ldi	r21, 0x45	; 69
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	f8 01       	movw	r30, r16
    1af8:	80 83       	st	Z, r24
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	a2 83       	std	Z+2, r26	; 0x02
    1afe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b00:	fe 01       	movw	r30, r28
    1b02:	ff 96       	adiw	r30, 0x3f	; 63
    1b04:	60 81       	ld	r22, Z
    1b06:	71 81       	ldd	r23, Z+1	; 0x01
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e8       	ldi	r20, 0x80	; 128
    1b12:	5f e3       	ldi	r21, 0x3F	; 63
    1b14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b18:	88 23       	and	r24, r24
    1b1a:	2c f4       	brge	.+10     	; 0x1b26 <main+0xa4>
		__ticks = 1;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	9e af       	std	Y+62, r25	; 0x3e
    1b22:	8d af       	std	Y+61, r24	; 0x3d
    1b24:	46 c0       	rjmp	.+140    	; 0x1bb2 <main+0x130>
	else if (__tmp > 65535)
    1b26:	fe 01       	movw	r30, r28
    1b28:	ff 96       	adiw	r30, 0x3f	; 63
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	64 f5       	brge	.+88     	; 0x1b9a <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b42:	fe 01       	movw	r30, r28
    1b44:	ed 5b       	subi	r30, 0xBD	; 189
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	60 81       	ld	r22, Z
    1b4a:	71 81       	ldd	r23, Z+1	; 0x01
    1b4c:	82 81       	ldd	r24, Z+2	; 0x02
    1b4e:	93 81       	ldd	r25, Z+3	; 0x03
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e2       	ldi	r20, 0x20	; 32
    1b56:	51 e4       	ldi	r21, 0x41	; 65
    1b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9e af       	std	Y+62, r25	; 0x3e
    1b6e:	8d af       	std	Y+61, r24	; 0x3d
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <main+0x10e>
    1b72:	8c e2       	ldi	r24, 0x2C	; 44
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	9c af       	std	Y+60, r25	; 0x3c
    1b78:	8b af       	std	Y+59, r24	; 0x3b
    1b7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b7c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <main+0xfc>
    1b82:	9c af       	std	Y+60, r25	; 0x3c
    1b84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	9e af       	std	Y+62, r25	; 0x3e
    1b8e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b90:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b92:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	69 f7       	brne	.-38     	; 0x1b72 <main+0xf0>
    1b98:	16 c0       	rjmp	.+44     	; 0x1bc6 <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ff 96       	adiw	r30, 0x3f	; 63
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9e af       	std	Y+62, r25	; 0x3e
    1bb0:	8d af       	std	Y+61, r24	; 0x3d
    1bb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bb6:	9a af       	std	Y+58, r25	; 0x3a
    1bb8:	89 af       	std	Y+57, r24	; 0x39
    1bba:	89 ad       	ldd	r24, Y+57	; 0x39
    1bbc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <main+0x13c>
    1bc2:	9a af       	std	Y+58, r25	; 0x3a
    1bc4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2000);

	UART_init();
    1bc6:	0e 94 bd 11 	call	0x237a	; 0x237a <UART_init>
	DFPlayer_init();
    1bca:	0e 94 9a 06 	call	0xd34	; 0xd34 <DFPlayer_init>
	ADC_init();
    1bce:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_init>

	while(1)
	{
		Update_Flexs(&Sensors_Readings);
    1bd2:	8a ea       	ldi	r24, 0xAA	; 170
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <Update_Flexs>
	/*	CmpFlexData ( &Flex, &Stored_Data);*/

		if( Compare_Flex_Data(&Sensors_Readings, &Stored_Data) )
    1bda:	8a ea       	ldi	r24, 0xAA	; 170
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	22 e8       	ldi	r18, 0x82	; 130
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	b9 01       	movw	r22, r18
    1be4:	0e 94 4a 11 	call	0x2294	; 0x2294 <Compare_Flex_Data>
    1be8:	88 23       	and	r24, r24
    1bea:	09 f4       	brne	.+2      	; 0x1bee <main+0x16c>
    1bec:	38 c2       	rjmp	.+1136   	; 0x205e <main+0x5dc>
		{
			switch(Word_index)
    1bee:	80 91 b2 00 	lds	r24, 0x00B2
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	2a 96       	adiw	r28, 0x0a	; 10
    1bf8:	3f af       	std	Y+63, r19	; 0x3f
    1bfa:	2e af       	std	Y+62, r18	; 0x3e
    1bfc:	2a 97       	sbiw	r28, 0x0a	; 10
    1bfe:	2a 96       	adiw	r28, 0x0a	; 10
    1c00:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c02:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c04:	2a 97       	sbiw	r28, 0x0a	; 10
    1c06:	82 30       	cpi	r24, 0x02	; 2
    1c08:	91 05       	cpc	r25, r1
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <main+0x18c>
    1c0c:	a2 c0       	rjmp	.+324    	; 0x1d52 <main+0x2d0>
    1c0e:	2a 96       	adiw	r28, 0x0a	; 10
    1c10:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c12:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c14:	2a 97       	sbiw	r28, 0x0a	; 10
    1c16:	e3 30       	cpi	r30, 0x03	; 3
    1c18:	f1 05       	cpc	r31, r1
    1c1a:	44 f4       	brge	.+16     	; 0x1c2c <main+0x1aa>
    1c1c:	2a 96       	adiw	r28, 0x0a	; 10
    1c1e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c20:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c22:	2a 97       	sbiw	r28, 0x0a	; 10
    1c24:	21 30       	cpi	r18, 0x01	; 1
    1c26:	31 05       	cpc	r19, r1
    1c28:	91 f0       	breq	.+36     	; 0x1c4e <main+0x1cc>
    1c2a:	d3 cf       	rjmp	.-90     	; 0x1bd2 <main+0x150>
    1c2c:	2a 96       	adiw	r28, 0x0a	; 10
    1c2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c30:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c32:	2a 97       	sbiw	r28, 0x0a	; 10
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <main+0x1ba>
    1c3a:	0d c1       	rjmp	.+538    	; 0x1e56 <main+0x3d4>
    1c3c:	2a 96       	adiw	r28, 0x0a	; 10
    1c3e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c40:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c42:	2a 97       	sbiw	r28, 0x0a	; 10
    1c44:	e4 30       	cpi	r30, 0x04	; 4
    1c46:	f1 05       	cpc	r31, r1
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <main+0x1ca>
    1c4a:	87 c1       	rjmp	.+782    	; 0x1f5a <main+0x4d8>
    1c4c:	c2 cf       	rjmp	.-124    	; 0x1bd2 <main+0x150>
			{
			case Letter_A:
				PORTC=0x01;
    1c4e:	e5 e3       	ldi	r30, 0x35	; 53
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	80 83       	st	Z, r24
				LCD_SendCommand(0);
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_SendCommand>
				LCD_WriteString("A");
    1c5c:	82 e6       	ldi	r24, 0x62	; 98
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_WriteString>
				play_sound(Letter_A);
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 25 07 	call	0xe4a	; 0xe4a <play_sound>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	aa e7       	ldi	r26, 0x7A	; 122
    1c72:	b4 e4       	ldi	r27, 0x44	; 68
    1c74:	8d ab       	std	Y+53, r24	; 0x35
    1c76:	9e ab       	std	Y+54, r25	; 0x36
    1c78:	af ab       	std	Y+55, r26	; 0x37
    1c7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c7e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c80:	8f a9       	ldd	r24, Y+55	; 0x37
    1c82:	98 ad       	ldd	r25, Y+56	; 0x38
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e8       	ldi	r19, 0x80	; 128
    1c88:	4b e3       	ldi	r20, 0x3B	; 59
    1c8a:	55 e4       	ldi	r21, 0x45	; 69
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	89 ab       	std	Y+49, r24	; 0x31
    1c96:	9a ab       	std	Y+50, r25	; 0x32
    1c98:	ab ab       	std	Y+51, r26	; 0x33
    1c9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e8       	ldi	r20, 0x80	; 128
    1caa:	5f e3       	ldi	r21, 0x3F	; 63
    1cac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb0:	88 23       	and	r24, r24
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <main+0x23c>
		__ticks = 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	98 ab       	std	Y+48, r25	; 0x30
    1cba:	8f a7       	std	Y+47, r24	; 0x2f
    1cbc:	3f c0       	rjmp	.+126    	; 0x1d3c <main+0x2ba>
	else if (__tmp > 65535)
    1cbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	4c f5       	brge	.+82     	; 0x1d28 <main+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1cda:	8f a9       	ldd	r24, Y+55	; 0x37
    1cdc:	98 ad       	ldd	r25, Y+56	; 0x38
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e2       	ldi	r20, 0x20	; 32
    1ce4:	51 e4       	ldi	r21, 0x41	; 65
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	98 ab       	std	Y+48, r25	; 0x30
    1cfc:	8f a7       	std	Y+47, r24	; 0x2f
    1cfe:	0f c0       	rjmp	.+30     	; 0x1d1e <main+0x29c>
    1d00:	8c e2       	ldi	r24, 0x2C	; 44
    1d02:	91 e0       	ldi	r25, 0x01	; 1
    1d04:	9e a7       	std	Y+46, r25	; 0x2e
    1d06:	8d a7       	std	Y+45, r24	; 0x2d
    1d08:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d0a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <main+0x28a>
    1d10:	9e a7       	std	Y+46, r25	; 0x2e
    1d12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d16:	98 a9       	ldd	r25, Y+48	; 0x30
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	98 ab       	std	Y+48, r25	; 0x30
    1d1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d20:	98 a9       	ldd	r25, Y+48	; 0x30
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	69 f7       	brne	.-38     	; 0x1d00 <main+0x27e>
    1d26:	55 cf       	rjmp	.-342    	; 0x1bd2 <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d28:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	98 ab       	std	Y+48, r25	; 0x30
    1d3a:	8f a7       	std	Y+47, r24	; 0x2f
    1d3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d40:	9c a7       	std	Y+44, r25	; 0x2c
    1d42:	8b a7       	std	Y+43, r24	; 0x2b
    1d44:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d46:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <main+0x2c6>
    1d4c:	9c a7       	std	Y+44, r25	; 0x2c
    1d4e:	8b a7       	std	Y+43, r24	; 0x2b
    1d50:	40 cf       	rjmp	.-384    	; 0x1bd2 <main+0x150>
				_delay_ms(1000);
				break;
			case Letter_B:
				PORTC=0x02;
    1d52:	e5 e3       	ldi	r30, 0x35	; 53
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	80 83       	st	Z, r24
				LCD_SendCommand(0);
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_SendCommand>
				LCD_WriteString("B");
    1d60:	84 e6       	ldi	r24, 0x64	; 100
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_WriteString>
				play_sound(Letter_B);
    1d68:	82 e0       	ldi	r24, 0x02	; 2
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 25 07 	call	0xe4a	; 0xe4a <play_sound>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	aa e7       	ldi	r26, 0x7A	; 122
    1d76:	b4 e4       	ldi	r27, 0x44	; 68
    1d78:	8f a3       	std	Y+39, r24	; 0x27
    1d7a:	98 a7       	std	Y+40, r25	; 0x28
    1d7c:	a9 a7       	std	Y+41, r26	; 0x29
    1d7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	6f a1       	ldd	r22, Y+39	; 0x27
    1d82:	78 a5       	ldd	r23, Y+40	; 0x28
    1d84:	89 a5       	ldd	r24, Y+41	; 0x29
    1d86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e8       	ldi	r19, 0x80	; 128
    1d8c:	4b e3       	ldi	r20, 0x3B	; 59
    1d8e:	55 e4       	ldi	r21, 0x45	; 69
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	8b a3       	std	Y+35, r24	; 0x23
    1d9a:	9c a3       	std	Y+36, r25	; 0x24
    1d9c:	ad a3       	std	Y+37, r26	; 0x25
    1d9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1da0:	6b a1       	ldd	r22, Y+35	; 0x23
    1da2:	7c a1       	ldd	r23, Y+36	; 0x24
    1da4:	8d a1       	ldd	r24, Y+37	; 0x25
    1da6:	9e a1       	ldd	r25, Y+38	; 0x26
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <main+0x340>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9a a3       	std	Y+34, r25	; 0x22
    1dbe:	89 a3       	std	Y+33, r24	; 0x21
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <main+0x3be>
	else if (__tmp > 65535)
    1dc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <main+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	6f a1       	ldd	r22, Y+39	; 0x27
    1ddc:	78 a5       	ldd	r23, Y+40	; 0x28
    1dde:	89 a5       	ldd	r24, Y+41	; 0x29
    1de0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9a a3       	std	Y+34, r25	; 0x22
    1e00:	89 a3       	std	Y+33, r24	; 0x21
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <main+0x3a0>
    1e04:	8c e2       	ldi	r24, 0x2C	; 44
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	98 a3       	std	Y+32, r25	; 0x20
    1e0a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e0e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <main+0x38e>
    1e14:	98 a3       	std	Y+32, r25	; 0x20
    1e16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	9a a3       	std	Y+34, r25	; 0x22
    1e20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	89 a1       	ldd	r24, Y+33	; 0x21
    1e24:	9a a1       	ldd	r25, Y+34	; 0x22
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <main+0x382>
    1e2a:	d3 ce       	rjmp	.-602    	; 0x1bd2 <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e30:	8d a1       	ldd	r24, Y+37	; 0x25
    1e32:	9e a1       	ldd	r25, Y+38	; 0x26
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9a a3       	std	Y+34, r25	; 0x22
    1e3e:	89 a3       	std	Y+33, r24	; 0x21
    1e40:	89 a1       	ldd	r24, Y+33	; 0x21
    1e42:	9a a1       	ldd	r25, Y+34	; 0x22
    1e44:	9e 8f       	std	Y+30, r25	; 0x1e
    1e46:	8d 8f       	std	Y+29, r24	; 0x1d
    1e48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <main+0x3ca>
    1e50:	9e 8f       	std	Y+30, r25	; 0x1e
    1e52:	8d 8f       	std	Y+29, r24	; 0x1d
    1e54:	be ce       	rjmp	.-644    	; 0x1bd2 <main+0x150>
				_delay_ms(1000);
				break;
			case Letter_C:
				PORTC=0x04;
    1e56:	e5 e3       	ldi	r30, 0x35	; 53
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	84 e0       	ldi	r24, 0x04	; 4
    1e5c:	80 83       	st	Z, r24
				LCD_SendCommand(0);
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_SendCommand>
				LCD_WriteString("C");
    1e64:	86 e6       	ldi	r24, 0x66	; 102
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_WriteString>
				play_sound(Letter_C);
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 25 07 	call	0xe4a	; 0xe4a <play_sound>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	aa e7       	ldi	r26, 0x7A	; 122
    1e7a:	b4 e4       	ldi	r27, 0x44	; 68
    1e7c:	89 8f       	std	Y+25, r24	; 0x19
    1e7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e80:	ab 8f       	std	Y+27, r26	; 0x1b
    1e82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e84:	69 8d       	ldd	r22, Y+25	; 0x19
    1e86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e8       	ldi	r19, 0x80	; 128
    1e90:	4b e3       	ldi	r20, 0x3B	; 59
    1e92:	55 e4       	ldi	r21, 0x45	; 69
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8d 8b       	std	Y+21, r24	; 0x15
    1e9e:	9e 8b       	std	Y+22, r25	; 0x16
    1ea0:	af 8b       	std	Y+23, r26	; 0x17
    1ea2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eaa:	98 8d       	ldd	r25, Y+24	; 0x18
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <main+0x444>
		__ticks = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9c 8b       	std	Y+20, r25	; 0x14
    1ec2:	8b 8b       	std	Y+19, r24	; 0x13
    1ec4:	3f c0       	rjmp	.+126    	; 0x1f44 <main+0x4c2>
	else if (__tmp > 65535)
    1ec6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eca:	8f 89       	ldd	r24, Y+23	; 0x17
    1ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	57 e4       	ldi	r21, 0x47	; 71
    1ed6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	4c f5       	brge	.+82     	; 0x1f30 <main+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9c 8b       	std	Y+20, r25	; 0x14
    1f04:	8b 8b       	std	Y+19, r24	; 0x13
    1f06:	0f c0       	rjmp	.+30     	; 0x1f26 <main+0x4a4>
    1f08:	8c e2       	ldi	r24, 0x2C	; 44
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	9a 8b       	std	Y+18, r25	; 0x12
    1f0e:	89 8b       	std	Y+17, r24	; 0x11
    1f10:	89 89       	ldd	r24, Y+17	; 0x11
    1f12:	9a 89       	ldd	r25, Y+18	; 0x12
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <main+0x492>
    1f18:	9a 8b       	std	Y+18, r25	; 0x12
    1f1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	9c 8b       	std	Y+20, r25	; 0x14
    1f24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <main+0x486>
    1f2e:	51 ce       	rjmp	.-862    	; 0x1bd2 <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f30:	6d 89       	ldd	r22, Y+21	; 0x15
    1f32:	7e 89       	ldd	r23, Y+22	; 0x16
    1f34:	8f 89       	ldd	r24, Y+23	; 0x17
    1f36:	98 8d       	ldd	r25, Y+24	; 0x18
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9c 8b       	std	Y+20, r25	; 0x14
    1f42:	8b 8b       	std	Y+19, r24	; 0x13
    1f44:	8b 89       	ldd	r24, Y+19	; 0x13
    1f46:	9c 89       	ldd	r25, Y+20	; 0x14
    1f48:	98 8b       	std	Y+16, r25	; 0x10
    1f4a:	8f 87       	std	Y+15, r24	; 0x0f
    1f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4e:	98 89       	ldd	r25, Y+16	; 0x10
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <main+0x4ce>
    1f54:	98 8b       	std	Y+16, r25	; 0x10
    1f56:	8f 87       	std	Y+15, r24	; 0x0f
    1f58:	3c ce       	rjmp	.-904    	; 0x1bd2 <main+0x150>
				_delay_ms(1000);
				break;
			case Letter_D:
				PORTC=0x08;
    1f5a:	e5 e3       	ldi	r30, 0x35	; 53
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	88 e0       	ldi	r24, 0x08	; 8
    1f60:	80 83       	st	Z, r24
				LCD_SendCommand(0);
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_SendCommand>
				LCD_WriteString("D");
    1f68:	88 e6       	ldi	r24, 0x68	; 104
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCD_WriteString>
				play_sound(Letter_D);
    1f70:	84 e0       	ldi	r24, 0x04	; 4
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	0e 94 25 07 	call	0xe4a	; 0xe4a <play_sound>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	aa ef       	ldi	r26, 0xFA	; 250
    1f7e:	b3 e4       	ldi	r27, 0x43	; 67
    1f80:	8b 87       	std	Y+11, r24	; 0x0b
    1f82:	9c 87       	std	Y+12, r25	; 0x0c
    1f84:	ad 87       	std	Y+13, r26	; 0x0d
    1f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e8       	ldi	r19, 0x80	; 128
    1f94:	4b e3       	ldi	r20, 0x3B	; 59
    1f96:	55 e4       	ldi	r21, 0x45	; 69
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	8f 83       	std	Y+7, r24	; 0x07
    1fa2:	98 87       	std	Y+8, r25	; 0x08
    1fa4:	a9 87       	std	Y+9, r26	; 0x09
    1fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <main+0x548>
		__ticks = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	3f c0       	rjmp	.+126    	; 0x2048 <main+0x5c6>
	else if (__tmp > 65535)
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	3f ef       	ldi	r19, 0xFF	; 255
    1fd6:	4f e7       	ldi	r20, 0x7F	; 127
    1fd8:	57 e4       	ldi	r21, 0x47	; 71
    1fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fde:	18 16       	cp	r1, r24
    1fe0:	4c f5       	brge	.+82     	; 0x2034 <main+0x5b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e2       	ldi	r20, 0x20	; 32
    1ff0:	51 e4       	ldi	r21, 0x41	; 65
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	0f c0       	rjmp	.+30     	; 0x202a <main+0x5a8>
    200c:	8c e2       	ldi	r24, 0x2C	; 44
    200e:	91 e0       	ldi	r25, 0x01	; 1
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8b 83       	std	Y+3, r24	; 0x03
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <main+0x596>
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	69 f7       	brne	.-38     	; 0x200c <main+0x58a>
    2032:	cf cd       	rjmp	.-1122   	; 0x1bd2 <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	9a 83       	std	Y+2, r25	; 0x02
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <main+0x5d2>
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	ba cd       	rjmp	.-1164   	; 0x1bd2 <main+0x150>
				break;
			}
		}
		else
		{
			PORTC=0x00;
    205e:	e5 e3       	ldi	r30, 0x35	; 53
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	10 82       	st	Z, r1
    2064:	b6 cd       	rjmp	.-1172   	; 0x1bd2 <main+0x150>

00002066 <Adjust_Flex_Range>:
	}
	return 0;
}
/*---------------------------------------------------------------*/
void Adjust_Flex_Range( u8 Flex_adcChannel_Number, u16 adcDigial_Value)
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	00 d0       	rcall	.+0      	; 0x206c <Adjust_Flex_Range+0x6>
    206c:	0f 92       	push	r0
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	89 83       	std	Y+1, r24	; 0x01
    2074:	7b 83       	std	Y+3, r23	; 0x03
    2076:	6a 83       	std	Y+2, r22	; 0x02
	if (adcDigial_Value > 60 + 85)
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	9b 81       	ldd	r25, Y+3	; 0x03
    207c:	82 39       	cpi	r24, 0x92	; 146
    207e:	91 05       	cpc	r25, r1
    2080:	40 f0       	brcs	.+16     	; 0x2092 <Adjust_Flex_Range+0x2c>
		Flex[Flex_adcChannel_Number]=0;
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	fc 01       	movw	r30, r24
    208a:	e2 55       	subi	r30, 0x52	; 82
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	10 82       	st	Z, r1
    2090:	46 c0       	rjmp	.+140    	; 0x211e <Adjust_Flex_Range+0xb8>
	else if ( (adcDigial_Value <= 60 + 85) && (adcDigial_Value > 30 + 85) )
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	9b 81       	ldd	r25, Y+3	; 0x03
    2096:	82 39       	cpi	r24, 0x92	; 146
    2098:	91 05       	cpc	r25, r1
    209a:	70 f4       	brcc	.+28     	; 0x20b8 <Adjust_Flex_Range+0x52>
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	9b 81       	ldd	r25, Y+3	; 0x03
    20a0:	84 37       	cpi	r24, 0x74	; 116
    20a2:	91 05       	cpc	r25, r1
    20a4:	48 f0       	brcs	.+18     	; 0x20b8 <Adjust_Flex_Range+0x52>
		Flex[Flex_adcChannel_Number]=1;
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	fc 01       	movw	r30, r24
    20ae:	e2 55       	subi	r30, 0x52	; 82
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	80 83       	st	Z, r24
    20b6:	33 c0       	rjmp	.+102    	; 0x211e <Adjust_Flex_Range+0xb8>
	else if ( (adcDigial_Value <= 30 + 85) && (adcDigial_Value > 15 + 85) )
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	9b 81       	ldd	r25, Y+3	; 0x03
    20bc:	84 37       	cpi	r24, 0x74	; 116
    20be:	91 05       	cpc	r25, r1
    20c0:	70 f4       	brcc	.+28     	; 0x20de <Adjust_Flex_Range+0x78>
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	9b 81       	ldd	r25, Y+3	; 0x03
    20c6:	85 36       	cpi	r24, 0x65	; 101
    20c8:	91 05       	cpc	r25, r1
    20ca:	48 f0       	brcs	.+18     	; 0x20de <Adjust_Flex_Range+0x78>
		Flex[Flex_adcChannel_Number]=2;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	fc 01       	movw	r30, r24
    20d4:	e2 55       	subi	r30, 0x52	; 82
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	80 83       	st	Z, r24
    20dc:	20 c0       	rjmp	.+64     	; 0x211e <Adjust_Flex_Range+0xb8>
	else if ( (adcDigial_Value <= 15 + 85) && (adcDigial_Value > 5 + 85) )
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	9b 81       	ldd	r25, Y+3	; 0x03
    20e2:	85 36       	cpi	r24, 0x65	; 101
    20e4:	91 05       	cpc	r25, r1
    20e6:	70 f4       	brcc	.+28     	; 0x2104 <Adjust_Flex_Range+0x9e>
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	8b 35       	cpi	r24, 0x5B	; 91
    20ee:	91 05       	cpc	r25, r1
    20f0:	48 f0       	brcs	.+18     	; 0x2104 <Adjust_Flex_Range+0x9e>
		Flex[Flex_adcChannel_Number]=3;
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	88 2f       	mov	r24, r24
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	fc 01       	movw	r30, r24
    20fa:	e2 55       	subi	r30, 0x52	; 82
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	83 e0       	ldi	r24, 0x03	; 3
    2100:	80 83       	st	Z, r24
    2102:	0d c0       	rjmp	.+26     	; 0x211e <Adjust_Flex_Range+0xb8>
	else if (adcDigial_Value < 5 + 85)
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	9b 81       	ldd	r25, Y+3	; 0x03
    2108:	8a 35       	cpi	r24, 0x5A	; 90
    210a:	91 05       	cpc	r25, r1
    210c:	40 f4       	brcc	.+16     	; 0x211e <Adjust_Flex_Range+0xb8>
		Flex[Flex_adcChannel_Number]=4;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	88 2f       	mov	r24, r24
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	fc 01       	movw	r30, r24
    2116:	e2 55       	subi	r30, 0x52	; 82
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	84 e0       	ldi	r24, 0x04	; 4
    211c:	80 83       	st	Z, r24
}
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <CmpFlexData>:
/*---------------------------------------------------------------*/
void CmpFlexData ( u8* ReadingsArr, u8* StoredArr)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	28 97       	sbiw	r28, 0x08	; 8
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	78 87       	std	Y+8, r23	; 0x08
    2144:	6f 83       	std	Y+7, r22	; 0x07
	u8 Counter_struct;
	u8 Counter;
	u8 Matching_flag= FALSE;
    2146:	1a 82       	std	Y+2, r1	; 0x02
	u8 Word_index;

	for (Counter_struct= 0 ; Counter_struct < 10 ; Counter_struct++)
    2148:	1c 82       	std	Y+4, r1	; 0x04
    214a:	43 c0       	rjmp	.+134    	; 0x21d2 <CmpFlexData+0xa8>
	{
		for (Counter= 0 ; Counter < NumberOfFlexs ; Counter++)
    214c:	1b 82       	std	Y+3, r1	; 0x03
    214e:	38 c0       	rjmp	.+112    	; 0x21c0 <CmpFlexData+0x96>
		{
			if ( ReadingsArr[Counter] != StoredArr[Counter])
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	fc 01       	movw	r30, r24
    215c:	e2 0f       	add	r30, r18
    215e:	f3 1f       	adc	r31, r19
    2160:	40 81       	ld	r20, Z
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	8f 81       	ldd	r24, Y+7	; 0x07
    216a:	98 85       	ldd	r25, Y+8	; 0x08
    216c:	fc 01       	movw	r30, r24
    216e:	e2 0f       	add	r30, r18
    2170:	f3 1f       	adc	r31, r19
    2172:	80 81       	ld	r24, Z
    2174:	48 17       	cp	r20, r24
    2176:	21 f0       	breq	.+8      	; 0x2180 <CmpFlexData+0x56>
			{
				PORTC=0x00;
    2178:	e5 e3       	ldi	r30, 0x35	; 53
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	10 82       	st	Z, r1
    217e:	23 c0       	rjmp	.+70     	; 0x21c6 <CmpFlexData+0x9c>
//				return 0;
				break;
			}
				if (Counter == NumberOfFlexs-1)
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	88 23       	and	r24, r24
    2184:	d1 f4       	brne	.+52     	; 0x21ba <CmpFlexData+0x90>
				{
					if ( ReadingsArr[Counter] == StoredArr[Counter])
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	8d 81       	ldd	r24, Y+5	; 0x05
    218e:	9e 81       	ldd	r25, Y+6	; 0x06
    2190:	fc 01       	movw	r30, r24
    2192:	e2 0f       	add	r30, r18
    2194:	f3 1f       	adc	r31, r19
    2196:	40 81       	ld	r20, Z
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	8f 81       	ldd	r24, Y+7	; 0x07
    21a0:	98 85       	ldd	r25, Y+8	; 0x08
    21a2:	fc 01       	movw	r30, r24
    21a4:	e2 0f       	add	r30, r18
    21a6:	f3 1f       	adc	r31, r19
    21a8:	80 81       	ld	r24, Z
    21aa:	48 17       	cp	r20, r24
    21ac:	31 f4       	brne	.+12     	; 0x21ba <CmpFlexData+0x90>
						{
							PORTC=0x01;
    21ae:	e5 e3       	ldi	r30, 0x35	; 53
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	80 83       	st	Z, r24
							Matching_flag= TRUE;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Matching_flag= FALSE;
	u8 Word_index;

	for (Counter_struct= 0 ; Counter_struct < 10 ; Counter_struct++)
	{
		for (Counter= 0 ; Counter < NumberOfFlexs ; Counter++)
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	8b 83       	std	Y+3, r24	; 0x03
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	88 23       	and	r24, r24
    21c4:	29 f2       	breq	.-118    	; 0x2150 <CmpFlexData+0x26>
							PORTC=0x01;
							Matching_flag= TRUE;
						}
				}
		}
		if ( Matching_flag == TRUE)
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	39 f0       	breq	.+14     	; 0x21da <CmpFlexData+0xb0>
	u8 Counter_struct;
	u8 Counter;
	u8 Matching_flag= FALSE;
	u8 Word_index;

	for (Counter_struct= 0 ; Counter_struct < 10 ; Counter_struct++)
    21cc:	8c 81       	ldd	r24, Y+4	; 0x04
    21ce:	8f 5f       	subi	r24, 0xFF	; 255
    21d0:	8c 83       	std	Y+4, r24	; 0x04
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	8a 30       	cpi	r24, 0x0A	; 10
    21d6:	08 f4       	brcc	.+2      	; 0x21da <CmpFlexData+0xb0>
    21d8:	b9 cf       	rjmp	.-142    	; 0x214c <CmpFlexData+0x22>
		if ( Matching_flag == TRUE)
//			return Word_index;
			break;
	}
//	return 0;
}
    21da:	28 96       	adiw	r28, 0x08	; 8
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <Update_Flexs>:
/*---------------------------------------------------------------*/
void Update_Flexs (Letters_and_Words * PTR_Flex)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <Update_Flexs+0x6>
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	9a 83       	std	Y+2, r25	; 0x02
    21f8:	89 83       	std	Y+1, r24	; 0x01
	Flex[0]= ADC_GetResult(0);
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	0e 94 b8 05 	call	0xb70	; 0xb70 <ADC_GetResult>
    2200:	80 93 ae 00 	sts	0x00AE, r24
	Adjust_Flex_Range(0, Flex[0]);
    2204:	80 91 ae 00 	lds	r24, 0x00AE
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	b9 01       	movw	r22, r18
    2210:	0e 94 33 10 	call	0x2066	; 0x2066 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[0]= Flex[0];
    2214:	80 91 ae 00 	lds	r24, 0x00AE
    2218:	e9 81       	ldd	r30, Y+1	; 0x01
    221a:	fa 81       	ldd	r31, Y+2	; 0x02
    221c:	80 83       	st	Z, r24

	Flex[1]= ADC_GetResult(1);
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	0e 94 b8 05 	call	0xb70	; 0xb70 <ADC_GetResult>
    2224:	80 93 af 00 	sts	0x00AF, r24
	Adjust_Flex_Range(1, Flex[1]);
    2228:	80 91 af 00 	lds	r24, 0x00AF
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	b9 01       	movw	r22, r18
    2234:	0e 94 33 10 	call	0x2066	; 0x2066 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[1]= Flex[1];
    2238:	80 91 af 00 	lds	r24, 0x00AF
    223c:	e9 81       	ldd	r30, Y+1	; 0x01
    223e:	fa 81       	ldd	r31, Y+2	; 0x02
    2240:	81 83       	std	Z+1, r24	; 0x01

	Flex[2]= ADC_GetResult(2);
    2242:	82 e0       	ldi	r24, 0x02	; 2
    2244:	0e 94 b8 05 	call	0xb70	; 0xb70 <ADC_GetResult>
    2248:	80 93 b0 00 	sts	0x00B0, r24
	Adjust_Flex_Range(2, Flex[2]);
    224c:	80 91 b0 00 	lds	r24, 0x00B0
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	b9 01       	movw	r22, r18
    2258:	0e 94 33 10 	call	0x2066	; 0x2066 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[2]= Flex[2];
    225c:	80 91 b0 00 	lds	r24, 0x00B0
    2260:	e9 81       	ldd	r30, Y+1	; 0x01
    2262:	fa 81       	ldd	r31, Y+2	; 0x02
    2264:	82 83       	std	Z+2, r24	; 0x02

	Flex[3]= ADC_GetResult(3);
    2266:	83 e0       	ldi	r24, 0x03	; 3
    2268:	0e 94 b8 05 	call	0xb70	; 0xb70 <ADC_GetResult>
    226c:	80 93 b1 00 	sts	0x00B1, r24
	Adjust_Flex_Range(3, Flex[3]);
    2270:	80 91 b1 00 	lds	r24, 0x00B1
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	83 e0       	ldi	r24, 0x03	; 3
    227a:	b9 01       	movw	r22, r18
    227c:	0e 94 33 10 	call	0x2066	; 0x2066 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[3]= Flex[3];
    2280:	80 91 b1 00 	lds	r24, 0x00B1
    2284:	e9 81       	ldd	r30, Y+1	; 0x01
    2286:	fa 81       	ldd	r31, Y+2	; 0x02
    2288:	83 83       	std	Z+3, r24	; 0x03
}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <Compare_Flex_Data>:
/*---------------------------------------------------------------*/
u8  Compare_Flex_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	27 97       	sbiw	r28, 0x07	; 7
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	8b 83       	std	Y+3, r24	; 0x03
    22ac:	7e 83       	std	Y+6, r23	; 0x06
    22ae:	6d 83       	std	Y+5, r22	; 0x05
	u8 Counter;
	u8 Counter1;
/*	u8 Matching_flag=FALSE;*/
	Word_index=0;
    22b0:	10 92 b2 00 	sts	0x00B2, r1
	for (Counter1=0; Counter1<10; Counter1++)
    22b4:	19 82       	std	Y+1, r1	; 0x01
    22b6:	52 c0       	rjmp	.+164    	; 0x235c <Compare_Flex_Data+0xc8>
	{
/*			Matching_flag= FALSE;*/

		for (Counter=0; Counter<NumberOfFlexs; Counter++)
    22b8:	1a 82       	std	Y+2, r1	; 0x02
    22ba:	49 c0       	rjmp	.+146    	; 0x234e <Compare_Flex_Data+0xba>
			{
				if ( Ptr_Sensor_Readings ->Arr_Flex[Counter] != Ptr_Stored_Data[Counter1].Arr_Flex[Counter])
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	fc 01       	movw	r30, r24
    22c8:	e2 0f       	add	r30, r18
    22ca:	f3 1f       	adc	r31, r19
    22cc:	40 81       	ld	r20, Z
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	88 2f       	mov	r24, r24
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9c 01       	movw	r18, r24
    22d6:	22 0f       	add	r18, r18
    22d8:	33 1f       	adc	r19, r19
    22da:	22 0f       	add	r18, r18
    22dc:	33 1f       	adc	r19, r19
    22de:	8d 81       	ldd	r24, Y+5	; 0x05
    22e0:	9e 81       	ldd	r25, Y+6	; 0x06
    22e2:	28 0f       	add	r18, r24
    22e4:	39 1f       	adc	r19, r25
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	f9 01       	movw	r30, r18
    22ee:	e8 0f       	add	r30, r24
    22f0:	f9 1f       	adc	r31, r25
    22f2:	80 81       	ld	r24, Z
    22f4:	48 17       	cp	r20, r24
    22f6:	79 f5       	brne	.+94     	; 0x2356 <Compare_Flex_Data+0xc2>
				{
//					PORTC=0x00;
	//				return 0;
					break;
				}
					if (Counter == NumberOfFlexs-1)
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	88 23       	and	r24, r24
    22fc:	29 f5       	brne	.+74     	; 0x2348 <Compare_Flex_Data+0xb4>
					{
						if ( Ptr_Sensor_Readings ->Arr_Flex[Counter] == Ptr_Stored_Data[Counter1].Arr_Flex[Counter])
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	fc 01       	movw	r30, r24
    230a:	e2 0f       	add	r30, r18
    230c:	f3 1f       	adc	r31, r19
    230e:	40 81       	ld	r20, Z
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	88 2f       	mov	r24, r24
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	9c 01       	movw	r18, r24
    2318:	22 0f       	add	r18, r18
    231a:	33 1f       	adc	r19, r19
    231c:	22 0f       	add	r18, r18
    231e:	33 1f       	adc	r19, r19
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	28 0f       	add	r18, r24
    2326:	39 1f       	adc	r19, r25
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	88 2f       	mov	r24, r24
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	f9 01       	movw	r30, r18
    2330:	e8 0f       	add	r30, r24
    2332:	f9 1f       	adc	r31, r25
    2334:	80 81       	ld	r24, Z
    2336:	48 17       	cp	r20, r24
    2338:	39 f4       	brne	.+14     	; 0x2348 <Compare_Flex_Data+0xb4>
							{
//								PORTC=0x01;
//							Matching_flag= TRUE;
							Word_index= Counter1 + 1;
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	8f 5f       	subi	r24, 0xFF	; 255
    233e:	80 93 b2 00 	sts	0x00B2, r24
							return 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	8f 83       	std	Y+7, r24	; 0x07
    2346:	0f c0       	rjmp	.+30     	; 0x2366 <Compare_Flex_Data+0xd2>
	Word_index=0;
	for (Counter1=0; Counter1<10; Counter1++)
	{
/*			Matching_flag= FALSE;*/

		for (Counter=0; Counter<NumberOfFlexs; Counter++)
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	8f 5f       	subi	r24, 0xFF	; 255
    234c:	8a 83       	std	Y+2, r24	; 0x02
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	88 23       	and	r24, r24
    2352:	09 f4       	brne	.+2      	; 0x2356 <Compare_Flex_Data+0xc2>
    2354:	b3 cf       	rjmp	.-154    	; 0x22bc <Compare_Flex_Data+0x28>
{
	u8 Counter;
	u8 Counter1;
/*	u8 Matching_flag=FALSE;*/
	Word_index=0;
	for (Counter1=0; Counter1<10; Counter1++)
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	8f 5f       	subi	r24, 0xFF	; 255
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	8a 30       	cpi	r24, 0x0A	; 10
    2360:	08 f4       	brcc	.+2      	; 0x2364 <Compare_Flex_Data+0xd0>
    2362:	aa cf       	rjmp	.-172    	; 0x22b8 <Compare_Flex_Data+0x24>
/*
		if ( Matching_flag == TRUE)
		break;
*/
	}
	return 0;
    2364:	1f 82       	std	Y+7, r1	; 0x07
    2366:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2368:	27 96       	adiw	r28, 0x07	; 7
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <UART_init>:

#include "uart.h"
#define  BAUD_RATE (9600.0)

	void UART_init(void)
	{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	00 d0       	rcall	.+0      	; 0x2380 <UART_init+0x6>
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
		
		uint16 UBRR_Value= ((F_CPU /(8.0 *BAUD_RATE ) ) - 1) +0.5; 
    2384:	8b e9       	ldi	r24, 0x9B	; 155
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	89 83       	std	Y+1, r24	; 0x01
		/* Set U2x " Double Speed Mode " */
		SET_BIT(UCSRA,U2X);
    238c:	ab e2       	ldi	r26, 0x2B	; 43
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	eb e2       	ldi	r30, 0x2B	; 43
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	82 60       	ori	r24, 0x02	; 2
    2398:	8c 93       	st	X, r24
		
		/* Enable Rx , Tx */
		UCSRB |= (1<<TXEN) | (1<<RXEN);
    239a:	aa e2       	ldi	r26, 0x2A	; 42
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	ea e2       	ldi	r30, 0x2A	; 42
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	88 61       	ori	r24, 0x18	; 24
    23a6:	8c 93       	st	X, r24
		
		UCSRC |= (1<<URSEL) |(1<<UCSZ0) | (1<<UCSZ1);
    23a8:	a0 e4       	ldi	r26, 0x40	; 64
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e0 e4       	ldi	r30, 0x40	; 64
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	86 68       	ori	r24, 0x86	; 134
    23b4:	8c 93       	st	X, r24
		
		UBRRL = UBRR_Value & 0x00FF;
    23b6:	e9 e2       	ldi	r30, 0x29	; 41
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	80 83       	st	Z, r24
		UBRRH = UBRR_Value >>8;
    23be:	e0 e4       	ldi	r30, 0x40	; 64
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	89 2f       	mov	r24, r25
    23c8:	99 27       	eor	r25, r25
    23ca:	80 83       	st	Z, r24
	}
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <UART_SendByte>:
	
	void UART_SendByte(uint8 Data)
	{
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	89 83       	std	Y+1, r24	; 0x01
		/* if Send Buffer is not empty wait until it being  empty */
		while (BIT_IS_CLEAR(UCSRA,UDRE))
    23e2:	eb e2       	ldi	r30, 0x2B	; 43
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	80 72       	andi	r24, 0x20	; 32
    23ee:	90 70       	andi	r25, 0x00	; 0
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	b9 f3       	breq	.-18     	; 0x23e2 <UART_SendByte+0xc>
		{
			
		}	
		UDR = Data;
    23f4:	ec e2       	ldi	r30, 0x2C	; 44
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	80 83       	st	Z, r24
		
	}
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <UART_SendArray>:
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <UART_SendArray+0x6>
    240a:	00 d0       	rcall	.+0      	; 0x240c <UART_SendArray+0x8>
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	9b 83       	std	Y+3, r25	; 0x03
    2412:	8a 83       	std	Y+2, r24	; 0x02
    2414:	6c 83       	std	Y+4, r22	; 0x04
		uint8 i = 0;
    2416:	19 82       	std	Y+1, r1	; 0x01
		
		for(i=0;i<size;i++)
    2418:	19 82       	std	Y+1, r1	; 0x01
    241a:	0e c0       	rjmp	.+28     	; 0x2438 <UART_SendArray+0x34>
		{
			UART_SendByte(Data[i]);
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	9b 81       	ldd	r25, Y+3	; 0x03
    2426:	fc 01       	movw	r30, r24
    2428:	e2 0f       	add	r30, r18
    242a:	f3 1f       	adc	r31, r19
    242c:	80 81       	ld	r24, Z
    242e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <UART_SendByte>
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
		uint8 i = 0;
		
		for(i=0;i<size;i++)
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	8f 5f       	subi	r24, 0xFF	; 255
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	99 81       	ldd	r25, Y+1	; 0x01
    243a:	8c 81       	ldd	r24, Y+4	; 0x04
    243c:	98 17       	cp	r25, r24
    243e:	70 f3       	brcs	.-36     	; 0x241c <UART_SendArray+0x18>
		{
			UART_SendByte(Data[i]);
		}
	}
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <UART_recieveByte>:



uint8 UART_recieveByte(void)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2456:	eb e2       	ldi	r30, 0x2B	; 43
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	88 23       	and	r24, r24
    245e:	dc f7       	brge	.-10     	; 0x2456 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2460:	ec e2       	ldi	r30, 0x2C	; 44
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
}
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <__prologue_saves__>:
    246c:	2f 92       	push	r2
    246e:	3f 92       	push	r3
    2470:	4f 92       	push	r4
    2472:	5f 92       	push	r5
    2474:	6f 92       	push	r6
    2476:	7f 92       	push	r7
    2478:	8f 92       	push	r8
    247a:	9f 92       	push	r9
    247c:	af 92       	push	r10
    247e:	bf 92       	push	r11
    2480:	cf 92       	push	r12
    2482:	df 92       	push	r13
    2484:	ef 92       	push	r14
    2486:	ff 92       	push	r15
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	ca 1b       	sub	r28, r26
    2496:	db 0b       	sbc	r29, r27
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	09 94       	ijmp

000024a4 <__epilogue_restores__>:
    24a4:	2a 88       	ldd	r2, Y+18	; 0x12
    24a6:	39 88       	ldd	r3, Y+17	; 0x11
    24a8:	48 88       	ldd	r4, Y+16	; 0x10
    24aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    24ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    24ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    24b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    24b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    24b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    24b6:	b9 84       	ldd	r11, Y+9	; 0x09
    24b8:	c8 84       	ldd	r12, Y+8	; 0x08
    24ba:	df 80       	ldd	r13, Y+7	; 0x07
    24bc:	ee 80       	ldd	r14, Y+6	; 0x06
    24be:	fd 80       	ldd	r15, Y+5	; 0x05
    24c0:	0c 81       	ldd	r16, Y+4	; 0x04
    24c2:	1b 81       	ldd	r17, Y+3	; 0x03
    24c4:	aa 81       	ldd	r26, Y+2	; 0x02
    24c6:	b9 81       	ldd	r27, Y+1	; 0x01
    24c8:	ce 0f       	add	r28, r30
    24ca:	d1 1d       	adc	r29, r1
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	ed 01       	movw	r28, r26
    24d8:	08 95       	ret

000024da <itoa>:
    24da:	fb 01       	movw	r30, r22
    24dc:	9f 01       	movw	r18, r30
    24de:	e8 94       	clt
    24e0:	42 30       	cpi	r20, 0x02	; 2
    24e2:	c4 f0       	brlt	.+48     	; 0x2514 <itoa+0x3a>
    24e4:	45 32       	cpi	r20, 0x25	; 37
    24e6:	b4 f4       	brge	.+44     	; 0x2514 <itoa+0x3a>
    24e8:	4a 30       	cpi	r20, 0x0A	; 10
    24ea:	29 f4       	brne	.+10     	; 0x24f6 <itoa+0x1c>
    24ec:	97 fb       	bst	r25, 7
    24ee:	1e f4       	brtc	.+6      	; 0x24f6 <itoa+0x1c>
    24f0:	90 95       	com	r25
    24f2:	81 95       	neg	r24
    24f4:	9f 4f       	sbci	r25, 0xFF	; 255
    24f6:	64 2f       	mov	r22, r20
    24f8:	77 27       	eor	r23, r23
    24fa:	0e 94 9e 12 	call	0x253c	; 0x253c <__udivmodhi4>
    24fe:	80 5d       	subi	r24, 0xD0	; 208
    2500:	8a 33       	cpi	r24, 0x3A	; 58
    2502:	0c f0       	brlt	.+2      	; 0x2506 <itoa+0x2c>
    2504:	89 5d       	subi	r24, 0xD9	; 217
    2506:	81 93       	st	Z+, r24
    2508:	cb 01       	movw	r24, r22
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	a1 f7       	brne	.-24     	; 0x24f6 <itoa+0x1c>
    250e:	16 f4       	brtc	.+4      	; 0x2514 <itoa+0x3a>
    2510:	5d e2       	ldi	r21, 0x2D	; 45
    2512:	51 93       	st	Z+, r21
    2514:	10 82       	st	Z, r1
    2516:	c9 01       	movw	r24, r18
    2518:	0c 94 8e 12 	jmp	0x251c	; 0x251c <strrev>

0000251c <strrev>:
    251c:	dc 01       	movw	r26, r24
    251e:	fc 01       	movw	r30, r24
    2520:	67 2f       	mov	r22, r23
    2522:	71 91       	ld	r23, Z+
    2524:	77 23       	and	r23, r23
    2526:	e1 f7       	brne	.-8      	; 0x2520 <strrev+0x4>
    2528:	32 97       	sbiw	r30, 0x02	; 2
    252a:	04 c0       	rjmp	.+8      	; 0x2534 <strrev+0x18>
    252c:	7c 91       	ld	r23, X
    252e:	6d 93       	st	X+, r22
    2530:	70 83       	st	Z, r23
    2532:	62 91       	ld	r22, -Z
    2534:	ae 17       	cp	r26, r30
    2536:	bf 07       	cpc	r27, r31
    2538:	c8 f3       	brcs	.-14     	; 0x252c <strrev+0x10>
    253a:	08 95       	ret

0000253c <__udivmodhi4>:
    253c:	aa 1b       	sub	r26, r26
    253e:	bb 1b       	sub	r27, r27
    2540:	51 e1       	ldi	r21, 0x11	; 17
    2542:	07 c0       	rjmp	.+14     	; 0x2552 <__udivmodhi4_ep>

00002544 <__udivmodhi4_loop>:
    2544:	aa 1f       	adc	r26, r26
    2546:	bb 1f       	adc	r27, r27
    2548:	a6 17       	cp	r26, r22
    254a:	b7 07       	cpc	r27, r23
    254c:	10 f0       	brcs	.+4      	; 0x2552 <__udivmodhi4_ep>
    254e:	a6 1b       	sub	r26, r22
    2550:	b7 0b       	sbc	r27, r23

00002552 <__udivmodhi4_ep>:
    2552:	88 1f       	adc	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	5a 95       	dec	r21
    2558:	a9 f7       	brne	.-22     	; 0x2544 <__udivmodhi4_loop>
    255a:	80 95       	com	r24
    255c:	90 95       	com	r25
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	08 95       	ret

00002564 <_exit>:
    2564:	f8 94       	cli

00002566 <__stop_program>:
    2566:	ff cf       	rjmp	.-2      	; 0x2566 <__stop_program>
