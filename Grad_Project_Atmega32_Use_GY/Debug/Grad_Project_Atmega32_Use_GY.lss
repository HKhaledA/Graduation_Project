
Grad_Project_Atmega32_Use_GY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003994  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  00800060  00003994  00003a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008001cc  008001cc  00003b94  2**0
                  ALLOC
  3 .stab         00002c70  00000000  00000000  00003b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014e8  00000000  00000000  00006804  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000807e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a489  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c9e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ce9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d80c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3e       	cpi	r26, 0xE7	; 231
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <main>
      8a:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 70 1c 	jmp	0x38e0	; 0x38e0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 70 1c 	jmp	0x38e0	; 0x38e0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
#include<avr/io.h>
#include"std_types.h"
#include "ADC.h"

void ADC_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e36:	a6 e2       	ldi	r26, 0x26	; 38
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e6 e2       	ldi	r30, 0x26	; 38
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	87 68       	ori	r24, 0x87	; 135
     e42:	8c 93       	st	X, r24
	ADMUX|=(1<<REFS0)|(1<<REFS1)|(1<<ADLAR);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 6e       	ori	r24, 0xE0	; 224
     e50:	8c 93       	st	X, r24
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <ADC_GetResult>:

int ADC_GetResult(u8 channel)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <ADC_GetResult+0x6>
     e5e:	0f 92       	push	r0
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	8b 83       	std	Y+3, r24	; 0x03
	int value;
	ADMUX &= 0b11111000;
     e66:	a7 e2       	ldi	r26, 0x27	; 39
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e7 e2       	ldi	r30, 0x27	; 39
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	88 7f       	andi	r24, 0xF8	; 248
     e72:	8c 93       	st	X, r24
	ADMUX |= (channel & (0b00000111) );
     e74:	a7 e2       	ldi	r26, 0x27	; 39
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e7 e2       	ldi	r30, 0x27	; 39
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	98 2f       	mov	r25, r24
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	87 70       	andi	r24, 0x07	; 7
     e84:	89 2b       	or	r24, r25
     e86:	8c 93       	st	X, r24
	ADCSRA|= (1<<ADSC);
     e88:	a6 e2       	ldi	r26, 0x26	; 38
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e6 e2       	ldi	r30, 0x26	; 38
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	8c 93       	st	X, r24
	while((ADCSRA & (1<<ADSC))!=0);
     e96:	e6 e2       	ldi	r30, 0x26	; 38
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	80 74       	andi	r24, 0x40	; 64
     ea2:	90 70       	andi	r25, 0x00	; 0
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	b9 f7       	brne	.-18     	; 0xe96 <ADC_GetResult+0x3e>
	value=ADCH;
     ea8:	e5 e2       	ldi	r30, 0x25	; 37
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|= 0x10;
     eb6:	a6 e2       	ldi	r26, 0x26	; 38
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e6 e2       	ldi	r30, 0x26	; 38
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 61       	ori	r24, 0x10	; 16
     ec2:	8c 93       	st	X, r24
	return value;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <Accelerometor_init>:
 
#include "ADXL345.h"
#include "LCD.h"

void Accelerometor_init(ADX345_PowerModes Mode , ADXL345_Address EFF_Address)
{	
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <Accelerometor_init+0x6>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	6a 83       	std	Y+2, r22	; 0x02
	I2C_ByteWrite(EFF_Address,POWER_CTRL,Mode);	
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	6d e2       	ldi	r22, 0x2D	; 45
     ee6:	49 81       	ldd	r20, Y+1	; 0x01
     ee8:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0x0B);
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	61 e3       	ldi	r22, 0x31	; 49
     ef0:	4b e0       	ldi	r20, 0x0B	; 11
     ef2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSX,-1);
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	6e e1       	ldi	r22, 0x1E	; 30
     efa:	4f ef       	ldi	r20, 0xFF	; 255
     efc:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSY,0);
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	6f e1       	ldi	r22, 0x1F	; 31
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSZ,-1);
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	60 e2       	ldi	r22, 0x20	; 32
     f0e:	4f ef       	ldi	r20, 0xFF	; 255
     f10:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <I2C_ByteWrite>
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0);
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,8);
			
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <Accelerometor_ReadAxis>:



void Accelerometor_ReadAxis(ADXL345_Address EFF_Address ,volatile ADXL345_Data * Data_ptr)  
{
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	cd 55       	subi	r28, 0x5D	; 93
     f2c:	d0 40       	sbci	r29, 0x00	; 0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	fe 01       	movw	r30, r28
     f3a:	e5 5a       	subi	r30, 0xA5	; 165
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 83       	st	Z, r24
     f40:	fe 01       	movw	r30, r28
     f42:	e4 5a       	subi	r30, 0xA4	; 164
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	71 83       	std	Z+1, r23	; 0x01
     f48:	60 83       	st	Z, r22
	uint16 X_Axis_Read;
	uint16 Y_Axis_Read;
	uint16 Z_Axis_Read;
	
	
	X_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX0);
     f4a:	fe 01       	movw	r30, r28
     f4c:	e5 5a       	subi	r30, 0xA5	; 165
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 81       	ld	r24, Z
     f52:	62 e3       	ldi	r22, 0x32	; 50
     f54:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
     f58:	fe 01       	movw	r30, r28
     f5a:	e7 5a       	subi	r30, 0xA7	; 167
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	80 83       	st	Z, r24
     f66:	fe 01       	movw	r30, r28
     f68:	ef 5a       	subi	r30, 0xAF	; 175
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 e8       	ldi	r26, 0x80	; 128
     f72:	bf e3       	ldi	r27, 0x3F	; 63
     f74:	80 83       	st	Z, r24
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	a2 83       	std	Z+2, r26	; 0x02
     f7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	8e 01       	movw	r16, r28
     f7e:	03 5b       	subi	r16, 0xB3	; 179
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	fe 01       	movw	r30, r28
     f84:	ef 5a       	subi	r30, 0xAF	; 175
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	60 81       	ld	r22, Z
     f8a:	71 81       	ldd	r23, Z+1	; 0x01
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e8       	ldi	r19, 0x80	; 128
     f94:	4b e3       	ldi	r20, 0x3B	; 59
     f96:	55 e4       	ldi	r21, 0x45	; 69
     f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	f8 01       	movw	r30, r16
     fa2:	80 83       	st	Z, r24
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	a2 83       	std	Z+2, r26	; 0x02
     fa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     faa:	fe 01       	movw	r30, r28
     fac:	e3 5b       	subi	r30, 0xB3	; 179
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	5f e3       	ldi	r21, 0x3F	; 63
     fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	44 f4       	brge	.+16     	; 0xfd8 <Accelerometor_ReadAxis+0xba>
		__ticks = 1;
     fc8:	fe 01       	movw	r30, r28
     fca:	e5 5b       	subi	r30, 0xB5	; 181
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
     fd6:	64 c0       	rjmp	.+200    	; 0x10a0 <Accelerometor_ReadAxis+0x182>
	else if (__tmp > 65535)
     fd8:	fe 01       	movw	r30, r28
     fda:	e3 5b       	subi	r30, 0xB3	; 179
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	0c f0       	brlt	.+2      	; 0xff8 <Accelerometor_ReadAxis+0xda>
     ff6:	43 c0       	rjmp	.+134    	; 0x107e <Accelerometor_ReadAxis+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff8:	fe 01       	movw	r30, r28
     ffa:	ef 5a       	subi	r30, 0xAF	; 175
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	60 81       	ld	r22, Z
    1000:	71 81       	ldd	r23, Z+1	; 0x01
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	93 81       	ldd	r25, Z+3	; 0x03
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e2       	ldi	r20, 0x20	; 32
    100c:	51 e4       	ldi	r21, 0x41	; 65
    100e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8e 01       	movw	r16, r28
    1018:	05 5b       	subi	r16, 0xB5	; 181
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	f8 01       	movw	r30, r16
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	80 83       	st	Z, r24
    102e:	1f c0       	rjmp	.+62     	; 0x106e <Accelerometor_ReadAxis+0x150>
    1030:	fe 01       	movw	r30, r28
    1032:	e7 5b       	subi	r30, 0xB7	; 183
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	8c e2       	ldi	r24, 0x2C	; 44
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    103e:	fe 01       	movw	r30, r28
    1040:	e7 5b       	subi	r30, 0xB7	; 183
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <Accelerometor_ReadAxis+0x12a>
    104c:	fe 01       	movw	r30, r28
    104e:	e7 5b       	subi	r30, 0xB7	; 183
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	91 83       	std	Z+1, r25	; 0x01
    1054:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1056:	de 01       	movw	r26, r28
    1058:	a5 5b       	subi	r26, 0xB5	; 181
    105a:	bf 4f       	sbci	r27, 0xFF	; 255
    105c:	fe 01       	movw	r30, r28
    105e:	e5 5b       	subi	r30, 0xB5	; 181
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	9c 93       	st	X, r25
    106c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106e:	fe 01       	movw	r30, r28
    1070:	e5 5b       	subi	r30, 0xB5	; 181
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	d1 f6       	brne	.-76     	; 0x1030 <Accelerometor_ReadAxis+0x112>
    107c:	27 c0       	rjmp	.+78     	; 0x10cc <Accelerometor_ReadAxis+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107e:	8e 01       	movw	r16, r28
    1080:	05 5b       	subi	r16, 0xB5	; 181
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	fe 01       	movw	r30, r28
    1086:	e3 5b       	subi	r30, 0xB3	; 179
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	f8 01       	movw	r30, r16
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
    10a0:	de 01       	movw	r26, r28
    10a2:	a9 5b       	subi	r26, 0xB9	; 185
    10a4:	bf 4f       	sbci	r27, 0xFF	; 255
    10a6:	fe 01       	movw	r30, r28
    10a8:	e5 5b       	subi	r30, 0xB5	; 181
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	8d 93       	st	X+, r24
    10b2:	9c 93       	st	X, r25
    10b4:	fe 01       	movw	r30, r28
    10b6:	e9 5b       	subi	r30, 0xB9	; 185
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <Accelerometor_ReadAxis+0x1a0>
    10c2:	fe 01       	movw	r30, r28
    10c4:	e9 5b       	subi	r30, 0xB9	; 185
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	80 83       	st	Z, r24
	_delay_ms(1);
	X_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX1))<<8;
    10cc:	fe 01       	movw	r30, r28
    10ce:	e5 5a       	subi	r30, 0xA5	; 165
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	80 81       	ld	r24, Z
    10d4:	63 e3       	ldi	r22, 0x33	; 51
    10d6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	98 2f       	mov	r25, r24
    10e0:	88 27       	eor	r24, r24
    10e2:	9c 01       	movw	r18, r24
    10e4:	de 01       	movw	r26, r28
    10e6:	a7 5a       	subi	r26, 0xA7	; 167
    10e8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ea:	fe 01       	movw	r30, r28
    10ec:	e7 5a       	subi	r30, 0xA7	; 167
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	82 2b       	or	r24, r18
    10f6:	93 2b       	or	r25, r19
    10f8:	8d 93       	st	X+, r24
    10fa:	9c 93       	st	X, r25
    10fc:	fe 01       	movw	r30, r28
    10fe:	ed 5b       	subi	r30, 0xBD	; 189
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a0 e8       	ldi	r26, 0x80	; 128
    1108:	bf e3       	ldi	r27, 0x3F	; 63
    110a:	80 83       	st	Z, r24
    110c:	91 83       	std	Z+1, r25	; 0x01
    110e:	a2 83       	std	Z+2, r26	; 0x02
    1110:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1112:	8e 01       	movw	r16, r28
    1114:	01 5c       	subi	r16, 0xC1	; 193
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	fe 01       	movw	r30, r28
    111a:	ed 5b       	subi	r30, 0xBD	; 189
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e8       	ldi	r19, 0x80	; 128
    112a:	4b e3       	ldi	r20, 0x3B	; 59
    112c:	55 e4       	ldi	r21, 0x45	; 69
    112e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	f8 01       	movw	r30, r16
    1138:	80 83       	st	Z, r24
    113a:	91 83       	std	Z+1, r25	; 0x01
    113c:	a2 83       	std	Z+2, r26	; 0x02
    113e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1140:	fe 01       	movw	r30, r28
    1142:	ff 96       	adiw	r30, 0x3f	; 63
    1144:	60 81       	ld	r22, Z
    1146:	71 81       	ldd	r23, Z+1	; 0x01
    1148:	82 81       	ldd	r24, Z+2	; 0x02
    114a:	93 81       	ldd	r25, Z+3	; 0x03
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1158:	88 23       	and	r24, r24
    115a:	2c f4       	brge	.+10     	; 0x1166 <Accelerometor_ReadAxis+0x248>
		__ticks = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9e af       	std	Y+62, r25	; 0x3e
    1162:	8d af       	std	Y+61, r24	; 0x3d
    1164:	46 c0       	rjmp	.+140    	; 0x11f2 <Accelerometor_ReadAxis+0x2d4>
	else if (__tmp > 65535)
    1166:	fe 01       	movw	r30, r28
    1168:	ff 96       	adiw	r30, 0x3f	; 63
    116a:	60 81       	ld	r22, Z
    116c:	71 81       	ldd	r23, Z+1	; 0x01
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	3f ef       	ldi	r19, 0xFF	; 255
    1176:	4f e7       	ldi	r20, 0x7F	; 127
    1178:	57 e4       	ldi	r21, 0x47	; 71
    117a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    117e:	18 16       	cp	r1, r24
    1180:	64 f5       	brge	.+88     	; 0x11da <Accelerometor_ReadAxis+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1182:	fe 01       	movw	r30, r28
    1184:	ed 5b       	subi	r30, 0xBD	; 189
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	60 81       	ld	r22, Z
    118a:	71 81       	ldd	r23, Z+1	; 0x01
    118c:	82 81       	ldd	r24, Z+2	; 0x02
    118e:	93 81       	ldd	r25, Z+3	; 0x03
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e2       	ldi	r20, 0x20	; 32
    1196:	51 e4       	ldi	r21, 0x41	; 65
    1198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	bc 01       	movw	r22, r24
    11a2:	cd 01       	movw	r24, r26
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9e af       	std	Y+62, r25	; 0x3e
    11ae:	8d af       	std	Y+61, r24	; 0x3d
    11b0:	0f c0       	rjmp	.+30     	; 0x11d0 <Accelerometor_ReadAxis+0x2b2>
    11b2:	8c e2       	ldi	r24, 0x2C	; 44
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	9c af       	std	Y+60, r25	; 0x3c
    11b8:	8b af       	std	Y+59, r24	; 0x3b
    11ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    11bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <Accelerometor_ReadAxis+0x2a0>
    11c2:	9c af       	std	Y+60, r25	; 0x3c
    11c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    11c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	9e af       	std	Y+62, r25	; 0x3e
    11ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    11d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	69 f7       	brne	.-38     	; 0x11b2 <Accelerometor_ReadAxis+0x294>
    11d8:	16 c0       	rjmp	.+44     	; 0x1206 <Accelerometor_ReadAxis+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11da:	fe 01       	movw	r30, r28
    11dc:	ff 96       	adiw	r30, 0x3f	; 63
    11de:	60 81       	ld	r22, Z
    11e0:	71 81       	ldd	r23, Z+1	; 0x01
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	9e af       	std	Y+62, r25	; 0x3e
    11f0:	8d af       	std	Y+61, r24	; 0x3d
    11f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    11f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    11f6:	9a af       	std	Y+58, r25	; 0x3a
    11f8:	89 af       	std	Y+57, r24	; 0x39
    11fa:	89 ad       	ldd	r24, Y+57	; 0x39
    11fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <Accelerometor_ReadAxis+0x2e0>
    1202:	9a af       	std	Y+58, r25	; 0x3a
    1204:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	Y_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY0);
    1206:	fe 01       	movw	r30, r28
    1208:	e5 5a       	subi	r30, 0xA5	; 165
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 81       	ld	r24, Z
    120e:	64 e3       	ldi	r22, 0x34	; 52
    1210:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
    1214:	fe 01       	movw	r30, r28
    1216:	e9 5a       	subi	r30, 0xA9	; 169
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	a0 e8       	ldi	r26, 0x80	; 128
    1228:	bf e3       	ldi	r27, 0x3F	; 63
    122a:	8d ab       	std	Y+53, r24	; 0x35
    122c:	9e ab       	std	Y+54, r25	; 0x36
    122e:	af ab       	std	Y+55, r26	; 0x37
    1230:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1232:	6d a9       	ldd	r22, Y+53	; 0x35
    1234:	7e a9       	ldd	r23, Y+54	; 0x36
    1236:	8f a9       	ldd	r24, Y+55	; 0x37
    1238:	98 ad       	ldd	r25, Y+56	; 0x38
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e8       	ldi	r19, 0x80	; 128
    123e:	4b e3       	ldi	r20, 0x3B	; 59
    1240:	55 e4       	ldi	r21, 0x45	; 69
    1242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	89 ab       	std	Y+49, r24	; 0x31
    124c:	9a ab       	std	Y+50, r25	; 0x32
    124e:	ab ab       	std	Y+51, r26	; 0x33
    1250:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1252:	69 a9       	ldd	r22, Y+49	; 0x31
    1254:	7a a9       	ldd	r23, Y+50	; 0x32
    1256:	8b a9       	ldd	r24, Y+51	; 0x33
    1258:	9c a9       	ldd	r25, Y+52	; 0x34
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e8       	ldi	r20, 0x80	; 128
    1260:	5f e3       	ldi	r21, 0x3F	; 63
    1262:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1266:	88 23       	and	r24, r24
    1268:	2c f4       	brge	.+10     	; 0x1274 <Accelerometor_ReadAxis+0x356>
		__ticks = 1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	98 ab       	std	Y+48, r25	; 0x30
    1270:	8f a7       	std	Y+47, r24	; 0x2f
    1272:	3f c0       	rjmp	.+126    	; 0x12f2 <Accelerometor_ReadAxis+0x3d4>
	else if (__tmp > 65535)
    1274:	69 a9       	ldd	r22, Y+49	; 0x31
    1276:	7a a9       	ldd	r23, Y+50	; 0x32
    1278:	8b a9       	ldd	r24, Y+51	; 0x33
    127a:	9c a9       	ldd	r25, Y+52	; 0x34
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	3f ef       	ldi	r19, 0xFF	; 255
    1280:	4f e7       	ldi	r20, 0x7F	; 127
    1282:	57 e4       	ldi	r21, 0x47	; 71
    1284:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1288:	18 16       	cp	r1, r24
    128a:	4c f5       	brge	.+82     	; 0x12de <Accelerometor_ReadAxis+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128c:	6d a9       	ldd	r22, Y+53	; 0x35
    128e:	7e a9       	ldd	r23, Y+54	; 0x36
    1290:	8f a9       	ldd	r24, Y+55	; 0x37
    1292:	98 ad       	ldd	r25, Y+56	; 0x38
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	98 ab       	std	Y+48, r25	; 0x30
    12b2:	8f a7       	std	Y+47, r24	; 0x2f
    12b4:	0f c0       	rjmp	.+30     	; 0x12d4 <Accelerometor_ReadAxis+0x3b6>
    12b6:	8c e2       	ldi	r24, 0x2C	; 44
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	9e a7       	std	Y+46, r25	; 0x2e
    12bc:	8d a7       	std	Y+45, r24	; 0x2d
    12be:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <Accelerometor_ReadAxis+0x3a4>
    12c6:	9e a7       	std	Y+46, r25	; 0x2e
    12c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    12cc:	98 a9       	ldd	r25, Y+48	; 0x30
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	98 ab       	std	Y+48, r25	; 0x30
    12d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12d6:	98 a9       	ldd	r25, Y+48	; 0x30
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	69 f7       	brne	.-38     	; 0x12b6 <Accelerometor_ReadAxis+0x398>
    12dc:	14 c0       	rjmp	.+40     	; 0x1306 <Accelerometor_ReadAxis+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12de:	69 a9       	ldd	r22, Y+49	; 0x31
    12e0:	7a a9       	ldd	r23, Y+50	; 0x32
    12e2:	8b a9       	ldd	r24, Y+51	; 0x33
    12e4:	9c a9       	ldd	r25, Y+52	; 0x34
    12e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	98 ab       	std	Y+48, r25	; 0x30
    12f0:	8f a7       	std	Y+47, r24	; 0x2f
    12f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12f4:	98 a9       	ldd	r25, Y+48	; 0x30
    12f6:	9c a7       	std	Y+44, r25	; 0x2c
    12f8:	8b a7       	std	Y+43, r24	; 0x2b
    12fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    12fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <Accelerometor_ReadAxis+0x3e0>
    1302:	9c a7       	std	Y+44, r25	; 0x2c
    1304:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Y_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY1))<<8;
    1306:	fe 01       	movw	r30, r28
    1308:	e5 5a       	subi	r30, 0xA5	; 165
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 81       	ld	r24, Z
    130e:	65 e3       	ldi	r22, 0x35	; 53
    1310:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
    1314:	88 2f       	mov	r24, r24
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	98 2f       	mov	r25, r24
    131a:	88 27       	eor	r24, r24
    131c:	9c 01       	movw	r18, r24
    131e:	de 01       	movw	r26, r28
    1320:	a9 5a       	subi	r26, 0xA9	; 169
    1322:	bf 4f       	sbci	r27, 0xFF	; 255
    1324:	fe 01       	movw	r30, r28
    1326:	e9 5a       	subi	r30, 0xA9	; 169
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	82 2b       	or	r24, r18
    1330:	93 2b       	or	r25, r19
    1332:	8d 93       	st	X+, r24
    1334:	9c 93       	st	X, r25
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a0 e8       	ldi	r26, 0x80	; 128
    133c:	bf e3       	ldi	r27, 0x3F	; 63
    133e:	8f a3       	std	Y+39, r24	; 0x27
    1340:	98 a7       	std	Y+40, r25	; 0x28
    1342:	a9 a7       	std	Y+41, r26	; 0x29
    1344:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1346:	6f a1       	ldd	r22, Y+39	; 0x27
    1348:	78 a5       	ldd	r23, Y+40	; 0x28
    134a:	89 a5       	ldd	r24, Y+41	; 0x29
    134c:	9a a5       	ldd	r25, Y+42	; 0x2a
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e8       	ldi	r19, 0x80	; 128
    1352:	4b e3       	ldi	r20, 0x3B	; 59
    1354:	55 e4       	ldi	r21, 0x45	; 69
    1356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	8b a3       	std	Y+35, r24	; 0x23
    1360:	9c a3       	std	Y+36, r25	; 0x24
    1362:	ad a3       	std	Y+37, r26	; 0x25
    1364:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1366:	6b a1       	ldd	r22, Y+35	; 0x23
    1368:	7c a1       	ldd	r23, Y+36	; 0x24
    136a:	8d a1       	ldd	r24, Y+37	; 0x25
    136c:	9e a1       	ldd	r25, Y+38	; 0x26
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e8       	ldi	r20, 0x80	; 128
    1374:	5f e3       	ldi	r21, 0x3F	; 63
    1376:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    137a:	88 23       	and	r24, r24
    137c:	2c f4       	brge	.+10     	; 0x1388 <Accelerometor_ReadAxis+0x46a>
		__ticks = 1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9a a3       	std	Y+34, r25	; 0x22
    1384:	89 a3       	std	Y+33, r24	; 0x21
    1386:	3f c0       	rjmp	.+126    	; 0x1406 <Accelerometor_ReadAxis+0x4e8>
	else if (__tmp > 65535)
    1388:	6b a1       	ldd	r22, Y+35	; 0x23
    138a:	7c a1       	ldd	r23, Y+36	; 0x24
    138c:	8d a1       	ldd	r24, Y+37	; 0x25
    138e:	9e a1       	ldd	r25, Y+38	; 0x26
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	3f ef       	ldi	r19, 0xFF	; 255
    1394:	4f e7       	ldi	r20, 0x7F	; 127
    1396:	57 e4       	ldi	r21, 0x47	; 71
    1398:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    139c:	18 16       	cp	r1, r24
    139e:	4c f5       	brge	.+82     	; 0x13f2 <Accelerometor_ReadAxis+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a0:	6f a1       	ldd	r22, Y+39	; 0x27
    13a2:	78 a5       	ldd	r23, Y+40	; 0x28
    13a4:	89 a5       	ldd	r24, Y+41	; 0x29
    13a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e2       	ldi	r20, 0x20	; 32
    13ae:	51 e4       	ldi	r21, 0x41	; 65
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9a a3       	std	Y+34, r25	; 0x22
    13c6:	89 a3       	std	Y+33, r24	; 0x21
    13c8:	0f c0       	rjmp	.+30     	; 0x13e8 <Accelerometor_ReadAxis+0x4ca>
    13ca:	8c e2       	ldi	r24, 0x2C	; 44
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	98 a3       	std	Y+32, r25	; 0x20
    13d0:	8f 8f       	std	Y+31, r24	; 0x1f
    13d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13d4:	98 a1       	ldd	r25, Y+32	; 0x20
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <Accelerometor_ReadAxis+0x4b8>
    13da:	98 a3       	std	Y+32, r25	; 0x20
    13dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13de:	89 a1       	ldd	r24, Y+33	; 0x21
    13e0:	9a a1       	ldd	r25, Y+34	; 0x22
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	9a a3       	std	Y+34, r25	; 0x22
    13e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e8:	89 a1       	ldd	r24, Y+33	; 0x21
    13ea:	9a a1       	ldd	r25, Y+34	; 0x22
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	69 f7       	brne	.-38     	; 0x13ca <Accelerometor_ReadAxis+0x4ac>
    13f0:	14 c0       	rjmp	.+40     	; 0x141a <Accelerometor_ReadAxis+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f2:	6b a1       	ldd	r22, Y+35	; 0x23
    13f4:	7c a1       	ldd	r23, Y+36	; 0x24
    13f6:	8d a1       	ldd	r24, Y+37	; 0x25
    13f8:	9e a1       	ldd	r25, Y+38	; 0x26
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9a a3       	std	Y+34, r25	; 0x22
    1404:	89 a3       	std	Y+33, r24	; 0x21
    1406:	89 a1       	ldd	r24, Y+33	; 0x21
    1408:	9a a1       	ldd	r25, Y+34	; 0x22
    140a:	9e 8f       	std	Y+30, r25	; 0x1e
    140c:	8d 8f       	std	Y+29, r24	; 0x1d
    140e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1410:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <Accelerometor_ReadAxis+0x4f4>
    1416:	9e 8f       	std	Y+30, r25	; 0x1e
    1418:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Z_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ0);
    141a:	fe 01       	movw	r30, r28
    141c:	e5 5a       	subi	r30, 0xA5	; 165
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	80 81       	ld	r24, Z
    1422:	66 e3       	ldi	r22, 0x36	; 54
    1424:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
    1428:	fe 01       	movw	r30, r28
    142a:	eb 5a       	subi	r30, 0xAB	; 171
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a0 e8       	ldi	r26, 0x80	; 128
    143c:	bf e3       	ldi	r27, 0x3F	; 63
    143e:	89 8f       	std	Y+25, r24	; 0x19
    1440:	9a 8f       	std	Y+26, r25	; 0x1a
    1442:	ab 8f       	std	Y+27, r26	; 0x1b
    1444:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1446:	69 8d       	ldd	r22, Y+25	; 0x19
    1448:	7a 8d       	ldd	r23, Y+26	; 0x1a
    144a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e8       	ldi	r19, 0x80	; 128
    1452:	4b e3       	ldi	r20, 0x3B	; 59
    1454:	55 e4       	ldi	r21, 0x45	; 69
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	8d 8b       	std	Y+21, r24	; 0x15
    1460:	9e 8b       	std	Y+22, r25	; 0x16
    1462:	af 8b       	std	Y+23, r26	; 0x17
    1464:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1466:	6d 89       	ldd	r22, Y+21	; 0x15
    1468:	7e 89       	ldd	r23, Y+22	; 0x16
    146a:	8f 89       	ldd	r24, Y+23	; 0x17
    146c:	98 8d       	ldd	r25, Y+24	; 0x18
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e8       	ldi	r20, 0x80	; 128
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    147a:	88 23       	and	r24, r24
    147c:	2c f4       	brge	.+10     	; 0x1488 <Accelerometor_ReadAxis+0x56a>
		__ticks = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9c 8b       	std	Y+20, r25	; 0x14
    1484:	8b 8b       	std	Y+19, r24	; 0x13
    1486:	3f c0       	rjmp	.+126    	; 0x1506 <Accelerometor_ReadAxis+0x5e8>
	else if (__tmp > 65535)
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	7e 89       	ldd	r23, Y+22	; 0x16
    148c:	8f 89       	ldd	r24, Y+23	; 0x17
    148e:	98 8d       	ldd	r25, Y+24	; 0x18
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	3f ef       	ldi	r19, 0xFF	; 255
    1494:	4f e7       	ldi	r20, 0x7F	; 127
    1496:	57 e4       	ldi	r21, 0x47	; 71
    1498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    149c:	18 16       	cp	r1, r24
    149e:	4c f5       	brge	.+82     	; 0x14f2 <Accelerometor_ReadAxis+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a0:	69 8d       	ldd	r22, Y+25	; 0x19
    14a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e2       	ldi	r20, 0x20	; 32
    14ae:	51 e4       	ldi	r21, 0x41	; 65
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9c 8b       	std	Y+20, r25	; 0x14
    14c6:	8b 8b       	std	Y+19, r24	; 0x13
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <Accelerometor_ReadAxis+0x5ca>
    14ca:	8c e2       	ldi	r24, 0x2C	; 44
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	9a 8b       	std	Y+18, r25	; 0x12
    14d0:	89 8b       	std	Y+17, r24	; 0x11
    14d2:	89 89       	ldd	r24, Y+17	; 0x11
    14d4:	9a 89       	ldd	r25, Y+18	; 0x12
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <Accelerometor_ReadAxis+0x5b8>
    14da:	9a 8b       	std	Y+18, r25	; 0x12
    14dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	8b 89       	ldd	r24, Y+19	; 0x13
    14e0:	9c 89       	ldd	r25, Y+20	; 0x14
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	9c 8b       	std	Y+20, r25	; 0x14
    14e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ea:	9c 89       	ldd	r25, Y+20	; 0x14
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	69 f7       	brne	.-38     	; 0x14ca <Accelerometor_ReadAxis+0x5ac>
    14f0:	14 c0       	rjmp	.+40     	; 0x151a <Accelerometor_ReadAxis+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f2:	6d 89       	ldd	r22, Y+21	; 0x15
    14f4:	7e 89       	ldd	r23, Y+22	; 0x16
    14f6:	8f 89       	ldd	r24, Y+23	; 0x17
    14f8:	98 8d       	ldd	r25, Y+24	; 0x18
    14fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	9c 8b       	std	Y+20, r25	; 0x14
    1504:	8b 8b       	std	Y+19, r24	; 0x13
    1506:	8b 89       	ldd	r24, Y+19	; 0x13
    1508:	9c 89       	ldd	r25, Y+20	; 0x14
    150a:	98 8b       	std	Y+16, r25	; 0x10
    150c:	8f 87       	std	Y+15, r24	; 0x0f
    150e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1510:	98 89       	ldd	r25, Y+16	; 0x10
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <Accelerometor_ReadAxis+0x5f4>
    1516:	98 8b       	std	Y+16, r25	; 0x10
    1518:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Z_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ1))<<8;
    151a:	fe 01       	movw	r30, r28
    151c:	e5 5a       	subi	r30, 0xA5	; 165
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	80 81       	ld	r24, Z
    1522:	67 e3       	ldi	r22, 0x37	; 55
    1524:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	98 2f       	mov	r25, r24
    152e:	88 27       	eor	r24, r24
    1530:	9c 01       	movw	r18, r24
    1532:	de 01       	movw	r26, r28
    1534:	ab 5a       	subi	r26, 0xAB	; 171
    1536:	bf 4f       	sbci	r27, 0xFF	; 255
    1538:	fe 01       	movw	r30, r28
    153a:	eb 5a       	subi	r30, 0xAB	; 171
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	82 2b       	or	r24, r18
    1544:	93 2b       	or	r25, r19
    1546:	8d 93       	st	X+, r24
    1548:	9c 93       	st	X, r25
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 e8       	ldi	r26, 0x80	; 128
    1550:	bf e3       	ldi	r27, 0x3F	; 63
    1552:	8b 87       	std	Y+11, r24	; 0x0b
    1554:	9c 87       	std	Y+12, r25	; 0x0c
    1556:	ad 87       	std	Y+13, r26	; 0x0d
    1558:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155a:	6b 85       	ldd	r22, Y+11	; 0x0b
    155c:	7c 85       	ldd	r23, Y+12	; 0x0c
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e8       	ldi	r19, 0x80	; 128
    1566:	4b e3       	ldi	r20, 0x3B	; 59
    1568:	55 e4       	ldi	r21, 0x45	; 69
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8f 83       	std	Y+7, r24	; 0x07
    1574:	98 87       	std	Y+8, r25	; 0x08
    1576:	a9 87       	std	Y+9, r26	; 0x09
    1578:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <Accelerometor_ReadAxis+0x67e>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	3f c0       	rjmp	.+126    	; 0x161a <Accelerometor_ReadAxis+0x6fc>
	else if (__tmp > 65535)
    159c:	6f 81       	ldd	r22, Y+7	; 0x07
    159e:	78 85       	ldd	r23, Y+8	; 0x08
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	4c f5       	brge	.+82     	; 0x1606 <Accelerometor_ReadAxis+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <Accelerometor_ReadAxis+0x6de>
    15de:	8c e2       	ldi	r24, 0x2C	; 44
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <Accelerometor_ReadAxis+0x6cc>
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f7       	brne	.-38     	; 0x15de <Accelerometor_ReadAxis+0x6c0>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <Accelerometor_ReadAxis+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <Accelerometor_ReadAxis+0x708>
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);	
	
	Data_ptr ->X_Axis = (X_Axis_Read);
    162e:	fe 01       	movw	r30, r28
    1630:	e7 5a       	subi	r30, 0xA7	; 167
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	cc 01       	movw	r24, r24
    163a:	a0 e0       	ldi	r26, 0x00	; 0
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	fe 01       	movw	r30, r28
    164c:	e4 5a       	subi	r30, 0xA4	; 164
    164e:	ff 4f       	sbci	r31, 0xFF	; 255
    1650:	01 90       	ld	r0, Z+
    1652:	f0 81       	ld	r31, Z
    1654:	e0 2d       	mov	r30, r0
    1656:	80 83       	st	Z, r24
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	a2 83       	std	Z+2, r26	; 0x02
    165c:	b3 83       	std	Z+3, r27	; 0x03
	Data_ptr ->Y_Axis=(Y_Axis_Read);
    165e:	fe 01       	movw	r30, r28
    1660:	e9 5a       	subi	r30, 0xA9	; 169
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	80 81       	ld	r24, Z
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	cc 01       	movw	r24, r24
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	fe 01       	movw	r30, r28
    167c:	e4 5a       	subi	r30, 0xA4	; 164
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	01 90       	ld	r0, Z+
    1682:	f0 81       	ld	r31, Z
    1684:	e0 2d       	mov	r30, r0
    1686:	84 83       	std	Z+4, r24	; 0x04
    1688:	95 83       	std	Z+5, r25	; 0x05
    168a:	a6 83       	std	Z+6, r26	; 0x06
    168c:	b7 83       	std	Z+7, r27	; 0x07
	Data_ptr ->Z_Axis=(Z_Axis_Read);
    168e:	fe 01       	movw	r30, r28
    1690:	eb 5a       	subi	r30, 0xAB	; 171
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	cc 01       	movw	r24, r24
    169a:	a0 e0       	ldi	r26, 0x00	; 0
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	fe 01       	movw	r30, r28
    16ac:	e4 5a       	subi	r30, 0xA4	; 164
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	01 90       	ld	r0, Z+
    16b2:	f0 81       	ld	r31, Z
    16b4:	e0 2d       	mov	r30, r0
    16b6:	80 87       	std	Z+8, r24	; 0x08
    16b8:	91 87       	std	Z+9, r25	; 0x09
    16ba:	a2 87       	std	Z+10, r26	; 0x0a
    16bc:	b3 87       	std	Z+11, r27	; 0x0b
	
    16be:	c3 5a       	subi	r28, 0xA3	; 163
    16c0:	df 4f       	sbci	r29, 0xFF	; 255
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	08 95       	ret

000016d6 <LCD_init>:


	#include "LCD.h"
	
	void LCD_init(void)
	{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
		/* Set The Control Pins Direction to OUtput */
		LCD_Control_reg_DIR |=(1<<E) | (1<<RW) | (1<<RS);
    16de:	aa e3       	ldi	r26, 0x3A	; 58
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ea e3       	ldi	r30, 0x3A	; 58
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	87 60       	ori	r24, 0x07	; 7
    16ea:	8c 93       	st	X, r24
			LCD_Data_Reg_DIR =0xFF;
		#else
			
			#ifdef Upper_Data_port
				/* Set The Direction of The Upper Pins to OP*/
				LCD_Data_Reg_DIR |=(0xF0);
    16ec:	a1 e3       	ldi	r26, 0x31	; 49
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e1 e3       	ldi	r30, 0x31	; 49
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	80 6f       	ori	r24, 0xF0	; 240
    16f8:	8c 93       	st	X, r24
			#else
				/* Set The Direction of The LOWER Pins to OP*/
				LCD_Data_Reg_DIR|=(0x0F);
			#endif
			Send_instruction(Return_Home);
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Send_instruction>
		#endif
		
		Send_instruction(Data_Set);
    1700:	88 e2       	ldi	r24, 0x28	; 40
    1702:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Send_instruction>
		Send_instruction(Display_on);
    1706:	8c e0       	ldi	r24, 0x0C	; 12
    1708:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Send_instruction>
		Send_instruction(Clear_display);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Send_instruction>
	}
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <Send_instruction>:
	
	void Send_instruction(uint8 instruction)
	{
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	c3 56       	subi	r28, 0x63	; 99
    1726:	d0 40       	sbci	r29, 0x00	; 0
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	fe 01       	movw	r30, r28
    1734:	ed 59       	subi	r30, 0x9D	; 157
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 83       	st	Z, r24
		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEAR_BIT(LCD_Control_reg_OP,RS);
    173a:	ab e3       	ldi	r26, 0x3B	; 59
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	eb e3       	ldi	r30, 0x3B	; 59
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_Control_reg_OP,RW);
    1748:	ab e3       	ldi	r26, 0x3B	; 59
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	eb e3       	ldi	r30, 0x3B	; 59
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8d 7f       	andi	r24, 0xFD	; 253
    1754:	8c 93       	st	X, r24
    1756:	fe 01       	movw	r30, r28
    1758:	e1 5a       	subi	r30, 0xA1	; 161
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a0 e8       	ldi	r26, 0x80	; 128
    1762:	bf e3       	ldi	r27, 0x3F	; 63
    1764:	80 83       	st	Z, r24
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	a2 83       	std	Z+2, r26	; 0x02
    176a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176c:	8e 01       	movw	r16, r28
    176e:	05 5a       	subi	r16, 0xA5	; 165
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	fe 01       	movw	r30, r28
    1774:	e1 5a       	subi	r30, 0xA1	; 161
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e8       	ldi	r19, 0x80	; 128
    1784:	4b e3       	ldi	r20, 0x3B	; 59
    1786:	55 e4       	ldi	r21, 0x45	; 69
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	f8 01       	movw	r30, r16
    1792:	80 83       	st	Z, r24
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	a2 83       	std	Z+2, r26	; 0x02
    1798:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    179a:	fe 01       	movw	r30, r28
    179c:	e5 5a       	subi	r30, 0xA5	; 165
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	44 f4       	brge	.+16     	; 0x17c8 <Send_instruction+0xb0>
		__ticks = 1;
    17b8:	fe 01       	movw	r30, r28
    17ba:	e7 5a       	subi	r30, 0xA7	; 167
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	80 83       	st	Z, r24
    17c6:	64 c0       	rjmp	.+200    	; 0x1890 <Send_instruction+0x178>
	else if (__tmp > 65535)
    17c8:	fe 01       	movw	r30, r28
    17ca:	e5 5a       	subi	r30, 0xA5	; 165
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <Send_instruction+0xd0>
    17e6:	43 c0       	rjmp	.+134    	; 0x186e <Send_instruction+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	fe 01       	movw	r30, r28
    17ea:	e1 5a       	subi	r30, 0xA1	; 161
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e2       	ldi	r20, 0x20	; 32
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8e 01       	movw	r16, r28
    1808:	07 5a       	subi	r16, 0xA7	; 167
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	f8 01       	movw	r30, r16
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24
    181e:	1f c0       	rjmp	.+62     	; 0x185e <Send_instruction+0x146>
    1820:	fe 01       	movw	r30, r28
    1822:	e9 5a       	subi	r30, 0xA9	; 169
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	8c e2       	ldi	r24, 0x2C	; 44
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	fe 01       	movw	r30, r28
    1830:	e9 5a       	subi	r30, 0xA9	; 169
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <Send_instruction+0x120>
    183c:	fe 01       	movw	r30, r28
    183e:	e9 5a       	subi	r30, 0xA9	; 169
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1846:	de 01       	movw	r26, r28
    1848:	a7 5a       	subi	r26, 0xA7	; 167
    184a:	bf 4f       	sbci	r27, 0xFF	; 255
    184c:	fe 01       	movw	r30, r28
    184e:	e7 5a       	subi	r30, 0xA7	; 167
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185e:	fe 01       	movw	r30, r28
    1860:	e7 5a       	subi	r30, 0xA7	; 167
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 81       	ld	r24, Z
    1866:	91 81       	ldd	r25, Z+1	; 0x01
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	d1 f6       	brne	.-76     	; 0x1820 <Send_instruction+0x108>
    186c:	27 c0       	rjmp	.+78     	; 0x18bc <Send_instruction+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186e:	8e 01       	movw	r16, r28
    1870:	07 5a       	subi	r16, 0xA7	; 167
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	fe 01       	movw	r30, r28
    1876:	e5 5a       	subi	r30, 0xA5	; 165
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	f8 01       	movw	r30, r16
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	80 83       	st	Z, r24
    1890:	de 01       	movw	r26, r28
    1892:	ab 5a       	subi	r26, 0xAB	; 171
    1894:	bf 4f       	sbci	r27, 0xFF	; 255
    1896:	fe 01       	movw	r30, r28
    1898:	e7 5a       	subi	r30, 0xA7	; 167
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	8d 93       	st	X+, r24
    18a2:	9c 93       	st	X, r25
    18a4:	fe 01       	movw	r30, r28
    18a6:	eb 5a       	subi	r30, 0xAB	; 171
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <Send_instruction+0x196>
    18b2:	fe 01       	movw	r30, r28
    18b4:	eb 5a       	subi	r30, 0xAB	; 171
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SET_BIT(LCD_Control_reg_OP,E);
    18bc:	ab e3       	ldi	r26, 0x3B	; 59
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	eb e3       	ldi	r30, 0x3B	; 59
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	84 60       	ori	r24, 0x04	; 4
    18c8:	8c 93       	st	X, r24
    18ca:	fe 01       	movw	r30, r28
    18cc:	ef 5a       	subi	r30, 0xAF	; 175
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 e8       	ldi	r26, 0x80	; 128
    18d6:	bf e3       	ldi	r27, 0x3F	; 63
    18d8:	80 83       	st	Z, r24
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	a2 83       	std	Z+2, r26	; 0x02
    18de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	8e 01       	movw	r16, r28
    18e2:	03 5b       	subi	r16, 0xB3	; 179
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	fe 01       	movw	r30, r28
    18e8:	ef 5a       	subi	r30, 0xAF	; 175
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e8       	ldi	r19, 0x80	; 128
    18f8:	4b e3       	ldi	r20, 0x3B	; 59
    18fa:	55 e4       	ldi	r21, 0x45	; 69
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	f8 01       	movw	r30, r16
    1906:	80 83       	st	Z, r24
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	a2 83       	std	Z+2, r26	; 0x02
    190c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    190e:	fe 01       	movw	r30, r28
    1910:	e3 5b       	subi	r30, 0xB3	; 179
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1928:	88 23       	and	r24, r24
    192a:	44 f4       	brge	.+16     	; 0x193c <Send_instruction+0x224>
		__ticks = 1;
    192c:	fe 01       	movw	r30, r28
    192e:	e5 5b       	subi	r30, 0xB5	; 181
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
    193a:	64 c0       	rjmp	.+200    	; 0x1a04 <Send_instruction+0x2ec>
	else if (__tmp > 65535)
    193c:	fe 01       	movw	r30, r28
    193e:	e3 5b       	subi	r30, 0xB3	; 179
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	0c f0       	brlt	.+2      	; 0x195c <Send_instruction+0x244>
    195a:	43 c0       	rjmp	.+134    	; 0x19e2 <Send_instruction+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195c:	fe 01       	movw	r30, r28
    195e:	ef 5a       	subi	r30, 0xAF	; 175
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	8e 01       	movw	r16, r28
    197c:	05 5b       	subi	r16, 0xB5	; 181
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	f8 01       	movw	r30, r16
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	80 83       	st	Z, r24
    1992:	1f c0       	rjmp	.+62     	; 0x19d2 <Send_instruction+0x2ba>
    1994:	fe 01       	movw	r30, r28
    1996:	e7 5b       	subi	r30, 0xB7	; 183
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	8c e2       	ldi	r24, 0x2C	; 44
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	fe 01       	movw	r30, r28
    19a4:	e7 5b       	subi	r30, 0xB7	; 183
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <Send_instruction+0x294>
    19b0:	fe 01       	movw	r30, r28
    19b2:	e7 5b       	subi	r30, 0xB7	; 183
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	de 01       	movw	r26, r28
    19bc:	a5 5b       	subi	r26, 0xB5	; 181
    19be:	bf 4f       	sbci	r27, 0xFF	; 255
    19c0:	fe 01       	movw	r30, r28
    19c2:	e5 5b       	subi	r30, 0xB5	; 181
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	11 96       	adiw	r26, 0x01	; 1
    19ce:	9c 93       	st	X, r25
    19d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d2:	fe 01       	movw	r30, r28
    19d4:	e5 5b       	subi	r30, 0xB5	; 181
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	d1 f6       	brne	.-76     	; 0x1994 <Send_instruction+0x27c>
    19e0:	27 c0       	rjmp	.+78     	; 0x1a30 <Send_instruction+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e2:	8e 01       	movw	r16, r28
    19e4:	05 5b       	subi	r16, 0xB5	; 181
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	fe 01       	movw	r30, r28
    19ea:	e3 5b       	subi	r30, 0xB3	; 179
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	f8 01       	movw	r30, r16
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
    1a04:	de 01       	movw	r26, r28
    1a06:	a9 5b       	subi	r26, 0xB9	; 185
    1a08:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e5 5b       	subi	r30, 0xB5	; 181
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	8d 93       	st	X+, r24
    1a16:	9c 93       	st	X, r25
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e9 5b       	subi	r30, 0xB9	; 185
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <Send_instruction+0x30a>
    1a26:	fe 01       	movw	r30, r28
    1a28:	e9 5b       	subi	r30, 0xB9	; 185
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24
			_delay_ms(1); 
		#else 
			
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    1a30:	a2 e3       	ldi	r26, 0x32	; 50
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e2 e3       	ldi	r30, 0x32	; 50
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8f 70       	andi	r24, 0x0F	; 15
    1a3c:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= (instruction & 0xF0);
    1a3e:	a2 e3       	ldi	r26, 0x32	; 50
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e2 e3       	ldi	r30, 0x32	; 50
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	98 2f       	mov	r25, r24
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	ed 59       	subi	r30, 0x9D	; 157
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	80 81       	ld	r24, Z
    1a52:	80 7f       	andi	r24, 0xF0	; 240
    1a54:	89 2b       	or	r24, r25
    1a56:	8c 93       	st	X, r24
    1a58:	fe 01       	movw	r30, r28
    1a5a:	ed 5b       	subi	r30, 0xBD	; 189
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a0 e8       	ldi	r26, 0x80	; 128
    1a64:	bf e3       	ldi	r27, 0x3F	; 63
    1a66:	80 83       	st	Z, r24
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	a2 83       	std	Z+2, r26	; 0x02
    1a6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6e:	8e 01       	movw	r16, r28
    1a70:	01 5c       	subi	r16, 0xC1	; 193
    1a72:	1f 4f       	sbci	r17, 0xFF	; 255
    1a74:	fe 01       	movw	r30, r28
    1a76:	ed 5b       	subi	r30, 0xBD	; 189
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	60 81       	ld	r22, Z
    1a7c:	71 81       	ldd	r23, Z+1	; 0x01
    1a7e:	82 81       	ldd	r24, Z+2	; 0x02
    1a80:	93 81       	ldd	r25, Z+3	; 0x03
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e8       	ldi	r19, 0x80	; 128
    1a86:	4b e3       	ldi	r20, 0x3B	; 59
    1a88:	55 e4       	ldi	r21, 0x45	; 69
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	f8 01       	movw	r30, r16
    1a94:	80 83       	st	Z, r24
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	a2 83       	std	Z+2, r26	; 0x02
    1a9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ff 96       	adiw	r30, 0x3f	; 63
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <Send_instruction+0x3aa>
		__ticks = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9e af       	std	Y+62, r25	; 0x3e
    1abe:	8d af       	std	Y+61, r24	; 0x3d
    1ac0:	46 c0       	rjmp	.+140    	; 0x1b4e <Send_instruction+0x436>
	else if (__tmp > 65535)
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	ff 96       	adiw	r30, 0x3f	; 63
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	3f ef       	ldi	r19, 0xFF	; 255
    1ad2:	4f e7       	ldi	r20, 0x7F	; 127
    1ad4:	57 e4       	ldi	r21, 0x47	; 71
    1ad6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	64 f5       	brge	.+88     	; 0x1b36 <Send_instruction+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ade:	fe 01       	movw	r30, r28
    1ae0:	ed 5b       	subi	r30, 0xBD	; 189
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e2       	ldi	r20, 0x20	; 32
    1af2:	51 e4       	ldi	r21, 0x41	; 65
    1af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	bc 01       	movw	r22, r24
    1afe:	cd 01       	movw	r24, r26
    1b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	9e af       	std	Y+62, r25	; 0x3e
    1b0a:	8d af       	std	Y+61, r24	; 0x3d
    1b0c:	0f c0       	rjmp	.+30     	; 0x1b2c <Send_instruction+0x414>
    1b0e:	8c e2       	ldi	r24, 0x2C	; 44
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	9c af       	std	Y+60, r25	; 0x3c
    1b14:	8b af       	std	Y+59, r24	; 0x3b
    1b16:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b18:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <Send_instruction+0x402>
    1b1e:	9c af       	std	Y+60, r25	; 0x3c
    1b20:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b22:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b24:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	9e af       	std	Y+62, r25	; 0x3e
    1b2a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	69 f7       	brne	.-38     	; 0x1b0e <Send_instruction+0x3f6>
    1b34:	16 c0       	rjmp	.+44     	; 0x1b62 <Send_instruction+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b36:	fe 01       	movw	r30, r28
    1b38:	ff 96       	adiw	r30, 0x3f	; 63
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e af       	std	Y+62, r25	; 0x3e
    1b4c:	8d af       	std	Y+61, r24	; 0x3d
    1b4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b50:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b52:	9a af       	std	Y+58, r25	; 0x3a
    1b54:	89 af       	std	Y+57, r24	; 0x39
    1b56:	89 ad       	ldd	r24, Y+57	; 0x39
    1b58:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <Send_instruction+0x442>
    1b5e:	9a af       	std	Y+58, r25	; 0x3a
    1b60:	89 af       	std	Y+57, r24	; 0x39
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEAR_BIT(LCD_Control_reg_OP,E);
    1b62:	ab e3       	ldi	r26, 0x3B	; 59
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	eb e3       	ldi	r30, 0x3B	; 59
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8b 7f       	andi	r24, 0xFB	; 251
    1b6e:	8c 93       	st	X, r24
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e8       	ldi	r26, 0x80	; 128
    1b76:	bf e3       	ldi	r27, 0x3F	; 63
    1b78:	8d ab       	std	Y+53, r24	; 0x35
    1b7a:	9e ab       	std	Y+54, r25	; 0x36
    1b7c:	af ab       	std	Y+55, r26	; 0x37
    1b7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b80:	6d a9       	ldd	r22, Y+53	; 0x35
    1b82:	7e a9       	ldd	r23, Y+54	; 0x36
    1b84:	8f a9       	ldd	r24, Y+55	; 0x37
    1b86:	98 ad       	ldd	r25, Y+56	; 0x38
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e8       	ldi	r19, 0x80	; 128
    1b8c:	4b e3       	ldi	r20, 0x3B	; 59
    1b8e:	55 e4       	ldi	r21, 0x45	; 69
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	89 ab       	std	Y+49, r24	; 0x31
    1b9a:	9a ab       	std	Y+50, r25	; 0x32
    1b9c:	ab ab       	std	Y+51, r26	; 0x33
    1b9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ba0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <Send_instruction+0x4aa>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	98 ab       	std	Y+48, r25	; 0x30
    1bbe:	8f a7       	std	Y+47, r24	; 0x2f
    1bc0:	3f c0       	rjmp	.+126    	; 0x1c40 <Send_instruction+0x528>
	else if (__tmp > 65535)
    1bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	3f ef       	ldi	r19, 0xFF	; 255
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	57 e4       	ldi	r21, 0x47	; 71
    1bd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	4c f5       	brge	.+82     	; 0x1c2c <Send_instruction+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bda:	6d a9       	ldd	r22, Y+53	; 0x35
    1bdc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bde:	8f a9       	ldd	r24, Y+55	; 0x37
    1be0:	98 ad       	ldd	r25, Y+56	; 0x38
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e2       	ldi	r20, 0x20	; 32
    1be8:	51 e4       	ldi	r21, 0x41	; 65
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	98 ab       	std	Y+48, r25	; 0x30
    1c00:	8f a7       	std	Y+47, r24	; 0x2f
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <Send_instruction+0x50a>
    1c04:	8c e2       	ldi	r24, 0x2C	; 44
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	9e a7       	std	Y+46, r25	; 0x2e
    1c0a:	8d a7       	std	Y+45, r24	; 0x2d
    1c0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <Send_instruction+0x4f8>
    1c14:	9e a7       	std	Y+46, r25	; 0x2e
    1c16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	98 ab       	std	Y+48, r25	; 0x30
    1c20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c24:	98 a9       	ldd	r25, Y+48	; 0x30
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	69 f7       	brne	.-38     	; 0x1c04 <Send_instruction+0x4ec>
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <Send_instruction+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c30:	8b a9       	ldd	r24, Y+51	; 0x33
    1c32:	9c a9       	ldd	r25, Y+52	; 0x34
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	98 ab       	std	Y+48, r25	; 0x30
    1c3e:	8f a7       	std	Y+47, r24	; 0x2f
    1c40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c42:	98 a9       	ldd	r25, Y+48	; 0x30
    1c44:	9c a7       	std	Y+44, r25	; 0x2c
    1c46:	8b a7       	std	Y+43, r24	; 0x2b
    1c48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <Send_instruction+0x534>
    1c50:	9c a7       	std	Y+44, r25	; 0x2c
    1c52:	8b a7       	std	Y+43, r24	; 0x2b
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SET_BIT(LCD_Control_reg_OP,E);
    1c54:	ab e3       	ldi	r26, 0x3B	; 59
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	eb e3       	ldi	r30, 0x3B	; 59
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	84 60       	ori	r24, 0x04	; 4
    1c60:	8c 93       	st	X, r24
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	a0 e8       	ldi	r26, 0x80	; 128
    1c68:	bf e3       	ldi	r27, 0x3F	; 63
    1c6a:	8f a3       	std	Y+39, r24	; 0x27
    1c6c:	98 a7       	std	Y+40, r25	; 0x28
    1c6e:	a9 a7       	std	Y+41, r26	; 0x29
    1c70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c72:	6f a1       	ldd	r22, Y+39	; 0x27
    1c74:	78 a5       	ldd	r23, Y+40	; 0x28
    1c76:	89 a5       	ldd	r24, Y+41	; 0x29
    1c78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e8       	ldi	r19, 0x80	; 128
    1c7e:	4b e3       	ldi	r20, 0x3B	; 59
    1c80:	55 e4       	ldi	r21, 0x45	; 69
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	8b a3       	std	Y+35, r24	; 0x23
    1c8c:	9c a3       	std	Y+36, r25	; 0x24
    1c8e:	ad a3       	std	Y+37, r26	; 0x25
    1c90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c92:	6b a1       	ldd	r22, Y+35	; 0x23
    1c94:	7c a1       	ldd	r23, Y+36	; 0x24
    1c96:	8d a1       	ldd	r24, Y+37	; 0x25
    1c98:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e8       	ldi	r20, 0x80	; 128
    1ca0:	5f e3       	ldi	r21, 0x3F	; 63
    1ca2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca6:	88 23       	and	r24, r24
    1ca8:	2c f4       	brge	.+10     	; 0x1cb4 <Send_instruction+0x59c>
		__ticks = 1;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9a a3       	std	Y+34, r25	; 0x22
    1cb0:	89 a3       	std	Y+33, r24	; 0x21
    1cb2:	3f c0       	rjmp	.+126    	; 0x1d32 <Send_instruction+0x61a>
	else if (__tmp > 65535)
    1cb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cba:	9e a1       	ldd	r25, Y+38	; 0x26
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	3f ef       	ldi	r19, 0xFF	; 255
    1cc0:	4f e7       	ldi	r20, 0x7F	; 127
    1cc2:	57 e4       	ldi	r21, 0x47	; 71
    1cc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc8:	18 16       	cp	r1, r24
    1cca:	4c f5       	brge	.+82     	; 0x1d1e <Send_instruction+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ccc:	6f a1       	ldd	r22, Y+39	; 0x27
    1cce:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e2       	ldi	r20, 0x20	; 32
    1cda:	51 e4       	ldi	r21, 0x41	; 65
    1cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	cd 01       	movw	r24, r26
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9a a3       	std	Y+34, r25	; 0x22
    1cf2:	89 a3       	std	Y+33, r24	; 0x21
    1cf4:	0f c0       	rjmp	.+30     	; 0x1d14 <Send_instruction+0x5fc>
    1cf6:	8c e2       	ldi	r24, 0x2C	; 44
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
    1cfa:	98 a3       	std	Y+32, r25	; 0x20
    1cfc:	8f 8f       	std	Y+31, r24	; 0x1f
    1cfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d00:	98 a1       	ldd	r25, Y+32	; 0x20
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <Send_instruction+0x5ea>
    1d06:	98 a3       	std	Y+32, r25	; 0x20
    1d08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	9a a3       	std	Y+34, r25	; 0x22
    1d12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d14:	89 a1       	ldd	r24, Y+33	; 0x21
    1d16:	9a a1       	ldd	r25, Y+34	; 0x22
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	69 f7       	brne	.-38     	; 0x1cf6 <Send_instruction+0x5de>
    1d1c:	14 c0       	rjmp	.+40     	; 0x1d46 <Send_instruction+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d20:	7c a1       	ldd	r23, Y+36	; 0x24
    1d22:	8d a1       	ldd	r24, Y+37	; 0x25
    1d24:	9e a1       	ldd	r25, Y+38	; 0x26
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9a a3       	std	Y+34, r25	; 0x22
    1d30:	89 a3       	std	Y+33, r24	; 0x21
    1d32:	89 a1       	ldd	r24, Y+33	; 0x21
    1d34:	9a a1       	ldd	r25, Y+34	; 0x22
    1d36:	9e 8f       	std	Y+30, r25	; 0x1e
    1d38:	8d 8f       	std	Y+29, r24	; 0x1d
    1d3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <Send_instruction+0x626>
    1d42:	9e 8f       	std	Y+30, r25	; 0x1e
    1d44:	8d 8f       	std	Y+29, r24	; 0x1d
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    1d46:	a2 e3       	ldi	r26, 0x32	; 50
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e2 e3       	ldi	r30, 0x32	; 50
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	8f 70       	andi	r24, 0x0F	; 15
    1d52:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= ((instruction <<4) & 0xF0);
    1d54:	a2 e3       	ldi	r26, 0x32	; 50
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e2 e3       	ldi	r30, 0x32	; 50
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	28 2f       	mov	r18, r24
    1d60:	fe 01       	movw	r30, r28
    1d62:	ed 59       	subi	r30, 0x9D	; 157
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	82 95       	swap	r24
    1d6e:	92 95       	swap	r25
    1d70:	90 7f       	andi	r25, 0xF0	; 240
    1d72:	98 27       	eor	r25, r24
    1d74:	80 7f       	andi	r24, 0xF0	; 240
    1d76:	98 27       	eor	r25, r24
    1d78:	82 2b       	or	r24, r18
    1d7a:	8c 93       	st	X, r24
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	a0 e8       	ldi	r26, 0x80	; 128
    1d82:	bf e3       	ldi	r27, 0x3F	; 63
    1d84:	89 8f       	std	Y+25, r24	; 0x19
    1d86:	9a 8f       	std	Y+26, r25	; 0x1a
    1d88:	ab 8f       	std	Y+27, r26	; 0x1b
    1d8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e8       	ldi	r19, 0x80	; 128
    1d98:	4b e3       	ldi	r20, 0x3B	; 59
    1d9a:	55 e4       	ldi	r21, 0x45	; 69
    1d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	8d 8b       	std	Y+21, r24	; 0x15
    1da6:	9e 8b       	std	Y+22, r25	; 0x16
    1da8:	af 8b       	std	Y+23, r26	; 0x17
    1daa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dac:	6d 89       	ldd	r22, Y+21	; 0x15
    1dae:	7e 89       	ldd	r23, Y+22	; 0x16
    1db0:	8f 89       	ldd	r24, Y+23	; 0x17
    1db2:	98 8d       	ldd	r25, Y+24	; 0x18
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <Send_instruction+0x6b6>
		__ticks = 1;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9c 8b       	std	Y+20, r25	; 0x14
    1dca:	8b 8b       	std	Y+19, r24	; 0x13
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <Send_instruction+0x734>
	else if (__tmp > 65535)
    1dce:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	4c f5       	brge	.+82     	; 0x1e38 <Send_instruction+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	69 8d       	ldd	r22, Y+25	; 0x19
    1de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9c 8b       	std	Y+20, r25	; 0x14
    1e0c:	8b 8b       	std	Y+19, r24	; 0x13
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <Send_instruction+0x716>
    1e10:	8c e2       	ldi	r24, 0x2C	; 44
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	9a 8b       	std	Y+18, r25	; 0x12
    1e16:	89 8b       	std	Y+17, r24	; 0x11
    1e18:	89 89       	ldd	r24, Y+17	; 0x11
    1e1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <Send_instruction+0x704>
    1e20:	9a 8b       	std	Y+18, r25	; 0x12
    1e22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	8b 89       	ldd	r24, Y+19	; 0x13
    1e26:	9c 89       	ldd	r25, Y+20	; 0x14
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	9c 8b       	std	Y+20, r25	; 0x14
    1e2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e30:	9c 89       	ldd	r25, Y+20	; 0x14
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	69 f7       	brne	.-38     	; 0x1e10 <Send_instruction+0x6f8>
    1e36:	14 c0       	rjmp	.+40     	; 0x1e60 <Send_instruction+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9c 8b       	std	Y+20, r25	; 0x14
    1e4a:	8b 8b       	std	Y+19, r24	; 0x13
    1e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e50:	98 8b       	std	Y+16, r25	; 0x10
    1e52:	8f 87       	std	Y+15, r24	; 0x0f
    1e54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e56:	98 89       	ldd	r25, Y+16	; 0x10
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <Send_instruction+0x740>
    1e5c:	98 8b       	std	Y+16, r25	; 0x10
    1e5e:	8f 87       	std	Y+15, r24	; 0x0f
				LCD_Data_Reg_OP |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEAR_BIT(LCD_Control_reg_OP,E);
    1e60:	ab e3       	ldi	r26, 0x3B	; 59
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	eb e3       	ldi	r30, 0x3B	; 59
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	8b 7f       	andi	r24, 0xFB	; 251
    1e6c:	8c 93       	st	X, r24
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 e8       	ldi	r26, 0x80	; 128
    1e74:	bf e3       	ldi	r27, 0x3F	; 63
    1e76:	8b 87       	std	Y+11, r24	; 0x0b
    1e78:	9c 87       	std	Y+12, r25	; 0x0c
    1e7a:	ad 87       	std	Y+13, r26	; 0x0d
    1e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e8       	ldi	r19, 0x80	; 128
    1e8a:	4b e3       	ldi	r20, 0x3B	; 59
    1e8c:	55 e4       	ldi	r21, 0x45	; 69
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8f 83       	std	Y+7, r24	; 0x07
    1e98:	98 87       	std	Y+8, r25	; 0x08
    1e9a:	a9 87       	std	Y+9, r26	; 0x09
    1e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <Send_instruction+0x7a8>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <Send_instruction+0x826>
	else if (__tmp > 65535)
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <Send_instruction+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <Send_instruction+0x808>
    1f02:	8c e2       	ldi	r24, 0x2C	; 44
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <Send_instruction+0x7f6>
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <Send_instruction+0x7ea>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <Send_instruction+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2c:	78 85       	ldd	r23, Y+8	; 0x08
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <Send_instruction+0x832>
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
				/* Data Hold delay Th = 10ns */
				_delay_ms(1);
		#endif
	}
    1f52:	cd 59       	subi	r28, 0x9D	; 157
    1f54:	df 4f       	sbci	r29, 0xFF	; 255
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	08 95       	ret

00001f6a <LCD_DisplayChar>:
	
	
	void LCD_DisplayChar(uint8 Data)
	{
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	c3 56       	subi	r28, 0x63	; 99
    1f78:	d0 40       	sbci	r29, 0x00	; 0
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	fe 01       	movw	r30, r28
    1f86:	ed 59       	subi	r30, 0x9D	; 157
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	80 83       	st	Z, r24
		/* RW  Should be 0  and RS should be 1 when Writing Data to LCD */
		SET_BIT(LCD_Control_reg_OP,RS);
    1f8c:	ab e3       	ldi	r26, 0x3B	; 59
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	eb e3       	ldi	r30, 0x3B	; 59
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	81 60       	ori	r24, 0x01	; 1
    1f98:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_Control_reg_OP,RW);
    1f9a:	ab e3       	ldi	r26, 0x3B	; 59
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	eb e3       	ldi	r30, 0x3B	; 59
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	8d 7f       	andi	r24, 0xFD	; 253
    1fa6:	8c 93       	st	X, r24
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e1 5a       	subi	r30, 0xA1	; 161
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e8       	ldi	r26, 0x80	; 128
    1fb4:	bf e3       	ldi	r27, 0x3F	; 63
    1fb6:	80 83       	st	Z, r24
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	a2 83       	std	Z+2, r26	; 0x02
    1fbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	8e 01       	movw	r16, r28
    1fc0:	05 5a       	subi	r16, 0xA5	; 165
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e1 5a       	subi	r30, 0xA1	; 161
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	60 81       	ld	r22, Z
    1fcc:	71 81       	ldd	r23, Z+1	; 0x01
    1fce:	82 81       	ldd	r24, Z+2	; 0x02
    1fd0:	93 81       	ldd	r25, Z+3	; 0x03
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e8       	ldi	r19, 0x80	; 128
    1fd6:	4b e3       	ldi	r20, 0x3B	; 59
    1fd8:	55 e4       	ldi	r21, 0x45	; 69
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	80 83       	st	Z, r24
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	a2 83       	std	Z+2, r26	; 0x02
    1fea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fec:	fe 01       	movw	r30, r28
    1fee:	e5 5a       	subi	r30, 0xA5	; 165
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	60 81       	ld	r22, Z
    1ff4:	71 81       	ldd	r23, Z+1	; 0x01
    1ff6:	82 81       	ldd	r24, Z+2	; 0x02
    1ff8:	93 81       	ldd	r25, Z+3	; 0x03
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	44 f4       	brge	.+16     	; 0x201a <LCD_DisplayChar+0xb0>
		__ticks = 1;
    200a:	fe 01       	movw	r30, r28
    200c:	e7 5a       	subi	r30, 0xA7	; 167
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
    2018:	64 c0       	rjmp	.+200    	; 0x20e2 <LCD_DisplayChar+0x178>
	else if (__tmp > 65535)
    201a:	fe 01       	movw	r30, r28
    201c:	e5 5a       	subi	r30, 0xA5	; 165
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	60 81       	ld	r22, Z
    2022:	71 81       	ldd	r23, Z+1	; 0x01
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	0c f0       	brlt	.+2      	; 0x203a <LCD_DisplayChar+0xd0>
    2038:	43 c0       	rjmp	.+134    	; 0x20c0 <LCD_DisplayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203a:	fe 01       	movw	r30, r28
    203c:	e1 5a       	subi	r30, 0xA1	; 161
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	60 81       	ld	r22, Z
    2042:	71 81       	ldd	r23, Z+1	; 0x01
    2044:	82 81       	ldd	r24, Z+2	; 0x02
    2046:	93 81       	ldd	r25, Z+3	; 0x03
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e2       	ldi	r20, 0x20	; 32
    204e:	51 e4       	ldi	r21, 0x41	; 65
    2050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	8e 01       	movw	r16, r28
    205a:	07 5a       	subi	r16, 0xA7	; 167
    205c:	1f 4f       	sbci	r17, 0xFF	; 255
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	f8 01       	movw	r30, r16
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	80 83       	st	Z, r24
    2070:	1f c0       	rjmp	.+62     	; 0x20b0 <LCD_DisplayChar+0x146>
    2072:	fe 01       	movw	r30, r28
    2074:	e9 5a       	subi	r30, 0xA9	; 169
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	8c e2       	ldi	r24, 0x2C	; 44
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	80 83       	st	Z, r24
    2080:	fe 01       	movw	r30, r28
    2082:	e9 5a       	subi	r30, 0xA9	; 169
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_DisplayChar+0x120>
    208e:	fe 01       	movw	r30, r28
    2090:	e9 5a       	subi	r30, 0xA9	; 169
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	de 01       	movw	r26, r28
    209a:	a7 5a       	subi	r26, 0xA7	; 167
    209c:	bf 4f       	sbci	r27, 0xFF	; 255
    209e:	fe 01       	movw	r30, r28
    20a0:	e7 5a       	subi	r30, 0xA7	; 167
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	11 96       	adiw	r26, 0x01	; 1
    20ac:	9c 93       	st	X, r25
    20ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b0:	fe 01       	movw	r30, r28
    20b2:	e7 5a       	subi	r30, 0xA7	; 167
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	d1 f6       	brne	.-76     	; 0x2072 <LCD_DisplayChar+0x108>
    20be:	27 c0       	rjmp	.+78     	; 0x210e <LCD_DisplayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c0:	8e 01       	movw	r16, r28
    20c2:	07 5a       	subi	r16, 0xA7	; 167
    20c4:	1f 4f       	sbci	r17, 0xFF	; 255
    20c6:	fe 01       	movw	r30, r28
    20c8:	e5 5a       	subi	r30, 0xA5	; 165
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	60 81       	ld	r22, Z
    20ce:	71 81       	ldd	r23, Z+1	; 0x01
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	f8 01       	movw	r30, r16
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	80 83       	st	Z, r24
    20e2:	de 01       	movw	r26, r28
    20e4:	ab 5a       	subi	r26, 0xAB	; 171
    20e6:	bf 4f       	sbci	r27, 0xFF	; 255
    20e8:	fe 01       	movw	r30, r28
    20ea:	e7 5a       	subi	r30, 0xA7	; 167
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 81       	ld	r24, Z
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	8d 93       	st	X+, r24
    20f4:	9c 93       	st	X, r25
    20f6:	fe 01       	movw	r30, r28
    20f8:	eb 5a       	subi	r30, 0xAB	; 171
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_DisplayChar+0x196>
    2104:	fe 01       	movw	r30, r28
    2106:	eb 5a       	subi	r30, 0xAB	; 171
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	91 83       	std	Z+1, r25	; 0x01
    210c:	80 83       	st	Z, r24
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		/* Enable LCD E=1 */
		SET_BIT(LCD_Control_reg_OP,E);
    210e:	ab e3       	ldi	r26, 0x3B	; 59
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	eb e3       	ldi	r30, 0x3B	; 59
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	84 60       	ori	r24, 0x04	; 4
    211a:	8c 93       	st	X, r24
    211c:	fe 01       	movw	r30, r28
    211e:	ef 5a       	subi	r30, 0xAF	; 175
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a0 e8       	ldi	r26, 0x80	; 128
    2128:	bf e3       	ldi	r27, 0x3F	; 63
    212a:	80 83       	st	Z, r24
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	a2 83       	std	Z+2, r26	; 0x02
    2130:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	8e 01       	movw	r16, r28
    2134:	03 5b       	subi	r16, 0xB3	; 179
    2136:	1f 4f       	sbci	r17, 0xFF	; 255
    2138:	fe 01       	movw	r30, r28
    213a:	ef 5a       	subi	r30, 0xAF	; 175
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	60 81       	ld	r22, Z
    2140:	71 81       	ldd	r23, Z+1	; 0x01
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	93 81       	ldd	r25, Z+3	; 0x03
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e8       	ldi	r19, 0x80	; 128
    214a:	4b e3       	ldi	r20, 0x3B	; 59
    214c:	55 e4       	ldi	r21, 0x45	; 69
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	f8 01       	movw	r30, r16
    2158:	80 83       	st	Z, r24
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	a2 83       	std	Z+2, r26	; 0x02
    215e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2160:	fe 01       	movw	r30, r28
    2162:	e3 5b       	subi	r30, 0xB3	; 179
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	60 81       	ld	r22, Z
    2168:	71 81       	ldd	r23, Z+1	; 0x01
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	93 81       	ldd	r25, Z+3	; 0x03
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	44 f4       	brge	.+16     	; 0x218e <LCD_DisplayChar+0x224>
		__ticks = 1;
    217e:	fe 01       	movw	r30, r28
    2180:	e5 5b       	subi	r30, 0xB5	; 181
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
    218c:	64 c0       	rjmp	.+200    	; 0x2256 <LCD_DisplayChar+0x2ec>
	else if (__tmp > 65535)
    218e:	fe 01       	movw	r30, r28
    2190:	e3 5b       	subi	r30, 0xB3	; 179
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	3f ef       	ldi	r19, 0xFF	; 255
    21a0:	4f e7       	ldi	r20, 0x7F	; 127
    21a2:	57 e4       	ldi	r21, 0x47	; 71
    21a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a8:	18 16       	cp	r1, r24
    21aa:	0c f0       	brlt	.+2      	; 0x21ae <LCD_DisplayChar+0x244>
    21ac:	43 c0       	rjmp	.+134    	; 0x2234 <LCD_DisplayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	fe 01       	movw	r30, r28
    21b0:	ef 5a       	subi	r30, 0xAF	; 175
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	8e 01       	movw	r16, r28
    21ce:	05 5b       	subi	r16, 0xB5	; 181
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	f8 01       	movw	r30, r16
    21e0:	91 83       	std	Z+1, r25	; 0x01
    21e2:	80 83       	st	Z, r24
    21e4:	1f c0       	rjmp	.+62     	; 0x2224 <LCD_DisplayChar+0x2ba>
    21e6:	fe 01       	movw	r30, r28
    21e8:	e7 5b       	subi	r30, 0xB7	; 183
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	8c e2       	ldi	r24, 0x2C	; 44
    21ee:	91 e0       	ldi	r25, 0x01	; 1
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
    21f4:	fe 01       	movw	r30, r28
    21f6:	e7 5b       	subi	r30, 0xB7	; 183
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_DisplayChar+0x294>
    2202:	fe 01       	movw	r30, r28
    2204:	e7 5b       	subi	r30, 0xB7	; 183
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	de 01       	movw	r26, r28
    220e:	a5 5b       	subi	r26, 0xB5	; 181
    2210:	bf 4f       	sbci	r27, 0xFF	; 255
    2212:	fe 01       	movw	r30, r28
    2214:	e5 5b       	subi	r30, 0xB5	; 181
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	11 96       	adiw	r26, 0x01	; 1
    2220:	9c 93       	st	X, r25
    2222:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	fe 01       	movw	r30, r28
    2226:	e5 5b       	subi	r30, 0xB5	; 181
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	d1 f6       	brne	.-76     	; 0x21e6 <LCD_DisplayChar+0x27c>
    2232:	27 c0       	rjmp	.+78     	; 0x2282 <LCD_DisplayChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2234:	8e 01       	movw	r16, r28
    2236:	05 5b       	subi	r16, 0xB5	; 181
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	fe 01       	movw	r30, r28
    223c:	e3 5b       	subi	r30, 0xB3	; 179
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	f8 01       	movw	r30, r16
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	80 83       	st	Z, r24
    2256:	de 01       	movw	r26, r28
    2258:	a9 5b       	subi	r26, 0xB9	; 185
    225a:	bf 4f       	sbci	r27, 0xFF	; 255
    225c:	fe 01       	movw	r30, r28
    225e:	e5 5b       	subi	r30, 0xB5	; 181
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	8d 93       	st	X+, r24
    2268:	9c 93       	st	X, r25
    226a:	fe 01       	movw	r30, r28
    226c:	e9 5b       	subi	r30, 0xB9	; 185
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	91 81       	ldd	r25, Z+1	; 0x01
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_DisplayChar+0x30a>
    2278:	fe 01       	movw	r30, r28
    227a:	e9 5b       	subi	r30, 0xB9	; 185
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	80 83       	st	Z, r24
		#if eight_bitdata
			LCD_Data_Reg_OP=Data;
		#else
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    2282:	a2 e3       	ldi	r26, 0x32	; 50
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e2 e3       	ldi	r30, 0x32	; 50
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8f 70       	andi	r24, 0x0F	; 15
    228e:	8c 93       	st	X, r24
				/* Send MSB (4-bits )*/
				LCD_Data_Reg_OP |= (Data & 0xF0);
    2290:	a2 e3       	ldi	r26, 0x32	; 50
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e2 e3       	ldi	r30, 0x32	; 50
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	98 2f       	mov	r25, r24
    229c:	fe 01       	movw	r30, r28
    229e:	ed 59       	subi	r30, 0x9D	; 157
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	80 81       	ld	r24, Z
    22a4:	80 7f       	andi	r24, 0xF0	; 240
    22a6:	89 2b       	or	r24, r25
    22a8:	8c 93       	st	X, r24
    22aa:	fe 01       	movw	r30, r28
    22ac:	ed 5b       	subi	r30, 0xBD	; 189
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 e8       	ldi	r26, 0x80	; 128
    22b6:	bf e3       	ldi	r27, 0x3F	; 63
    22b8:	80 83       	st	Z, r24
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	a2 83       	std	Z+2, r26	; 0x02
    22be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	8e 01       	movw	r16, r28
    22c2:	01 5c       	subi	r16, 0xC1	; 193
    22c4:	1f 4f       	sbci	r17, 0xFF	; 255
    22c6:	fe 01       	movw	r30, r28
    22c8:	ed 5b       	subi	r30, 0xBD	; 189
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e8       	ldi	r19, 0x80	; 128
    22d8:	4b e3       	ldi	r20, 0x3B	; 59
    22da:	55 e4       	ldi	r21, 0x45	; 69
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	f8 01       	movw	r30, r16
    22e6:	80 83       	st	Z, r24
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	a2 83       	std	Z+2, r26	; 0x02
    22ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ee:	fe 01       	movw	r30, r28
    22f0:	ff 96       	adiw	r30, 0x3f	; 63
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <LCD_DisplayChar+0x3aa>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9e af       	std	Y+62, r25	; 0x3e
    2310:	8d af       	std	Y+61, r24	; 0x3d
    2312:	46 c0       	rjmp	.+140    	; 0x23a0 <LCD_DisplayChar+0x436>
	else if (__tmp > 65535)
    2314:	fe 01       	movw	r30, r28
    2316:	ff 96       	adiw	r30, 0x3f	; 63
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	4f e7       	ldi	r20, 0x7F	; 127
    2326:	57 e4       	ldi	r21, 0x47	; 71
    2328:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    232c:	18 16       	cp	r1, r24
    232e:	64 f5       	brge	.+88     	; 0x2388 <LCD_DisplayChar+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2330:	fe 01       	movw	r30, r28
    2332:	ed 5b       	subi	r30, 0xBD	; 189
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e af       	std	Y+62, r25	; 0x3e
    235c:	8d af       	std	Y+61, r24	; 0x3d
    235e:	0f c0       	rjmp	.+30     	; 0x237e <LCD_DisplayChar+0x414>
    2360:	8c e2       	ldi	r24, 0x2C	; 44
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	9c af       	std	Y+60, r25	; 0x3c
    2366:	8b af       	std	Y+59, r24	; 0x3b
    2368:	8b ad       	ldd	r24, Y+59	; 0x3b
    236a:	9c ad       	ldd	r25, Y+60	; 0x3c
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_DisplayChar+0x402>
    2370:	9c af       	std	Y+60, r25	; 0x3c
    2372:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2374:	8d ad       	ldd	r24, Y+61	; 0x3d
    2376:	9e ad       	ldd	r25, Y+62	; 0x3e
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9e af       	std	Y+62, r25	; 0x3e
    237c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2380:	9e ad       	ldd	r25, Y+62	; 0x3e
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f7       	brne	.-38     	; 0x2360 <LCD_DisplayChar+0x3f6>
    2386:	16 c0       	rjmp	.+44     	; 0x23b4 <LCD_DisplayChar+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	fe 01       	movw	r30, r28
    238a:	ff 96       	adiw	r30, 0x3f	; 63
    238c:	60 81       	ld	r22, Z
    238e:	71 81       	ldd	r23, Z+1	; 0x01
    2390:	82 81       	ldd	r24, Z+2	; 0x02
    2392:	93 81       	ldd	r25, Z+3	; 0x03
    2394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9e af       	std	Y+62, r25	; 0x3e
    239e:	8d af       	std	Y+61, r24	; 0x3d
    23a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23a4:	9a af       	std	Y+58, r25	; 0x3a
    23a6:	89 af       	std	Y+57, r24	; 0x39
    23a8:	89 ad       	ldd	r24, Y+57	; 0x39
    23aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <LCD_DisplayChar+0x442>
    23b0:	9a af       	std	Y+58, r25	; 0x3a
    23b2:	89 af       	std	Y+57, r24	; 0x39
			#endif
				
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
			/* disable LCD E=0 */
			CLEAR_BIT(LCD_Control_reg_OP,E);
    23b4:	ab e3       	ldi	r26, 0x3B	; 59
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	eb e3       	ldi	r30, 0x3B	; 59
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	8b 7f       	andi	r24, 0xFB	; 251
    23c0:	8c 93       	st	X, r24
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	a0 e8       	ldi	r26, 0x80	; 128
    23c8:	bf e3       	ldi	r27, 0x3F	; 63
    23ca:	8d ab       	std	Y+53, r24	; 0x35
    23cc:	9e ab       	std	Y+54, r25	; 0x36
    23ce:	af ab       	std	Y+55, r26	; 0x37
    23d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d2:	6d a9       	ldd	r22, Y+53	; 0x35
    23d4:	7e a9       	ldd	r23, Y+54	; 0x36
    23d6:	8f a9       	ldd	r24, Y+55	; 0x37
    23d8:	98 ad       	ldd	r25, Y+56	; 0x38
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e8       	ldi	r19, 0x80	; 128
    23de:	4b e3       	ldi	r20, 0x3B	; 59
    23e0:	55 e4       	ldi	r21, 0x45	; 69
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	89 ab       	std	Y+49, r24	; 0x31
    23ec:	9a ab       	std	Y+50, r25	; 0x32
    23ee:	ab ab       	std	Y+51, r26	; 0x33
    23f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23f2:	69 a9       	ldd	r22, Y+49	; 0x31
    23f4:	7a a9       	ldd	r23, Y+50	; 0x32
    23f6:	8b a9       	ldd	r24, Y+51	; 0x33
    23f8:	9c a9       	ldd	r25, Y+52	; 0x34
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2406:	88 23       	and	r24, r24
    2408:	2c f4       	brge	.+10     	; 0x2414 <LCD_DisplayChar+0x4aa>
		__ticks = 1;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	98 ab       	std	Y+48, r25	; 0x30
    2410:	8f a7       	std	Y+47, r24	; 0x2f
    2412:	3f c0       	rjmp	.+126    	; 0x2492 <LCD_DisplayChar+0x528>
	else if (__tmp > 65535)
    2414:	69 a9       	ldd	r22, Y+49	; 0x31
    2416:	7a a9       	ldd	r23, Y+50	; 0x32
    2418:	8b a9       	ldd	r24, Y+51	; 0x33
    241a:	9c a9       	ldd	r25, Y+52	; 0x34
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	3f ef       	ldi	r19, 0xFF	; 255
    2420:	4f e7       	ldi	r20, 0x7F	; 127
    2422:	57 e4       	ldi	r21, 0x47	; 71
    2424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2428:	18 16       	cp	r1, r24
    242a:	4c f5       	brge	.+82     	; 0x247e <LCD_DisplayChar+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	6d a9       	ldd	r22, Y+53	; 0x35
    242e:	7e a9       	ldd	r23, Y+54	; 0x36
    2430:	8f a9       	ldd	r24, Y+55	; 0x37
    2432:	98 ad       	ldd	r25, Y+56	; 0x38
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	98 ab       	std	Y+48, r25	; 0x30
    2452:	8f a7       	std	Y+47, r24	; 0x2f
    2454:	0f c0       	rjmp	.+30     	; 0x2474 <LCD_DisplayChar+0x50a>
    2456:	8c e2       	ldi	r24, 0x2C	; 44
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	9e a7       	std	Y+46, r25	; 0x2e
    245c:	8d a7       	std	Y+45, r24	; 0x2d
    245e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2460:	9e a5       	ldd	r25, Y+46	; 0x2e
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <LCD_DisplayChar+0x4f8>
    2466:	9e a7       	std	Y+46, r25	; 0x2e
    2468:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246a:	8f a5       	ldd	r24, Y+47	; 0x2f
    246c:	98 a9       	ldd	r25, Y+48	; 0x30
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	98 ab       	std	Y+48, r25	; 0x30
    2472:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2474:	8f a5       	ldd	r24, Y+47	; 0x2f
    2476:	98 a9       	ldd	r25, Y+48	; 0x30
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	69 f7       	brne	.-38     	; 0x2456 <LCD_DisplayChar+0x4ec>
    247c:	14 c0       	rjmp	.+40     	; 0x24a6 <LCD_DisplayChar+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247e:	69 a9       	ldd	r22, Y+49	; 0x31
    2480:	7a a9       	ldd	r23, Y+50	; 0x32
    2482:	8b a9       	ldd	r24, Y+51	; 0x33
    2484:	9c a9       	ldd	r25, Y+52	; 0x34
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	98 ab       	std	Y+48, r25	; 0x30
    2490:	8f a7       	std	Y+47, r24	; 0x2f
    2492:	8f a5       	ldd	r24, Y+47	; 0x2f
    2494:	98 a9       	ldd	r25, Y+48	; 0x30
    2496:	9c a7       	std	Y+44, r25	; 0x2c
    2498:	8b a7       	std	Y+43, r24	; 0x2b
    249a:	8b a5       	ldd	r24, Y+43	; 0x2b
    249c:	9c a5       	ldd	r25, Y+44	; 0x2c
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <LCD_DisplayChar+0x534>
    24a2:	9c a7       	std	Y+44, r25	; 0x2c
    24a4:	8b a7       	std	Y+43, r24	; 0x2b
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			/* Enable LCD E=1 */
			SET_BIT(LCD_Control_reg_OP,E); 
    24a6:	ab e3       	ldi	r26, 0x3B	; 59
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	eb e3       	ldi	r30, 0x3B	; 59
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	84 60       	ori	r24, 0x04	; 4
    24b2:	8c 93       	st	X, r24
				
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    24b4:	a2 e3       	ldi	r26, 0x32	; 50
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e2 e3       	ldi	r30, 0x32	; 50
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	8f 70       	andi	r24, 0x0F	; 15
    24c0:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= ((Data <<4) & 0xF0);
    24c2:	a2 e3       	ldi	r26, 0x32	; 50
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e2 e3       	ldi	r30, 0x32	; 50
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	28 2f       	mov	r18, r24
    24ce:	fe 01       	movw	r30, r28
    24d0:	ed 59       	subi	r30, 0x9D	; 157
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	88 2f       	mov	r24, r24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	82 95       	swap	r24
    24dc:	92 95       	swap	r25
    24de:	90 7f       	andi	r25, 0xF0	; 240
    24e0:	98 27       	eor	r25, r24
    24e2:	80 7f       	andi	r24, 0xF0	; 240
    24e4:	98 27       	eor	r25, r24
    24e6:	82 2b       	or	r24, r18
    24e8:	8c 93       	st	X, r24
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	a0 e8       	ldi	r26, 0x80	; 128
    24f0:	bf e3       	ldi	r27, 0x3F	; 63
    24f2:	8f a3       	std	Y+39, r24	; 0x27
    24f4:	98 a7       	std	Y+40, r25	; 0x28
    24f6:	a9 a7       	std	Y+41, r26	; 0x29
    24f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fa:	6f a1       	ldd	r22, Y+39	; 0x27
    24fc:	78 a5       	ldd	r23, Y+40	; 0x28
    24fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2500:	9a a5       	ldd	r25, Y+42	; 0x2a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e8       	ldi	r19, 0x80	; 128
    2506:	4b e3       	ldi	r20, 0x3B	; 59
    2508:	55 e4       	ldi	r21, 0x45	; 69
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	8b a3       	std	Y+35, r24	; 0x23
    2514:	9c a3       	std	Y+36, r25	; 0x24
    2516:	ad a3       	std	Y+37, r26	; 0x25
    2518:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    251a:	6b a1       	ldd	r22, Y+35	; 0x23
    251c:	7c a1       	ldd	r23, Y+36	; 0x24
    251e:	8d a1       	ldd	r24, Y+37	; 0x25
    2520:	9e a1       	ldd	r25, Y+38	; 0x26
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e8       	ldi	r20, 0x80	; 128
    2528:	5f e3       	ldi	r21, 0x3F	; 63
    252a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    252e:	88 23       	and	r24, r24
    2530:	2c f4       	brge	.+10     	; 0x253c <LCD_DisplayChar+0x5d2>
		__ticks = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9a a3       	std	Y+34, r25	; 0x22
    2538:	89 a3       	std	Y+33, r24	; 0x21
    253a:	3f c0       	rjmp	.+126    	; 0x25ba <LCD_DisplayChar+0x650>
	else if (__tmp > 65535)
    253c:	6b a1       	ldd	r22, Y+35	; 0x23
    253e:	7c a1       	ldd	r23, Y+36	; 0x24
    2540:	8d a1       	ldd	r24, Y+37	; 0x25
    2542:	9e a1       	ldd	r25, Y+38	; 0x26
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2550:	18 16       	cp	r1, r24
    2552:	4c f5       	brge	.+82     	; 0x25a6 <LCD_DisplayChar+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	6f a1       	ldd	r22, Y+39	; 0x27
    2556:	78 a5       	ldd	r23, Y+40	; 0x28
    2558:	89 a5       	ldd	r24, Y+41	; 0x29
    255a:	9a a5       	ldd	r25, Y+42	; 0x2a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e2       	ldi	r20, 0x20	; 32
    2562:	51 e4       	ldi	r21, 0x41	; 65
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9a a3       	std	Y+34, r25	; 0x22
    257a:	89 a3       	std	Y+33, r24	; 0x21
    257c:	0f c0       	rjmp	.+30     	; 0x259c <LCD_DisplayChar+0x632>
    257e:	8c e2       	ldi	r24, 0x2C	; 44
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	98 a3       	std	Y+32, r25	; 0x20
    2584:	8f 8f       	std	Y+31, r24	; 0x1f
    2586:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2588:	98 a1       	ldd	r25, Y+32	; 0x20
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <LCD_DisplayChar+0x620>
    258e:	98 a3       	std	Y+32, r25	; 0x20
    2590:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2592:	89 a1       	ldd	r24, Y+33	; 0x21
    2594:	9a a1       	ldd	r25, Y+34	; 0x22
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	9a a3       	std	Y+34, r25	; 0x22
    259a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259c:	89 a1       	ldd	r24, Y+33	; 0x21
    259e:	9a a1       	ldd	r25, Y+34	; 0x22
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	69 f7       	brne	.-38     	; 0x257e <LCD_DisplayChar+0x614>
    25a4:	14 c0       	rjmp	.+40     	; 0x25ce <LCD_DisplayChar+0x664>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a6:	6b a1       	ldd	r22, Y+35	; 0x23
    25a8:	7c a1       	ldd	r23, Y+36	; 0x24
    25aa:	8d a1       	ldd	r24, Y+37	; 0x25
    25ac:	9e a1       	ldd	r25, Y+38	; 0x26
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9a a3       	std	Y+34, r25	; 0x22
    25b8:	89 a3       	std	Y+33, r24	; 0x21
    25ba:	89 a1       	ldd	r24, Y+33	; 0x21
    25bc:	9a a1       	ldd	r25, Y+34	; 0x22
    25be:	9e 8f       	std	Y+30, r25	; 0x1e
    25c0:	8d 8f       	std	Y+29, r24	; 0x1d
    25c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <LCD_DisplayChar+0x65c>
    25ca:	9e 8f       	std	Y+30, r25	; 0x1e
    25cc:	8d 8f       	std	Y+29, r24	; 0x1d
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	a0 e8       	ldi	r26, 0x80	; 128
    25d4:	bf e3       	ldi	r27, 0x3F	; 63
    25d6:	89 8f       	std	Y+25, r24	; 0x19
    25d8:	9a 8f       	std	Y+26, r25	; 0x1a
    25da:	ab 8f       	std	Y+27, r26	; 0x1b
    25dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25de:	69 8d       	ldd	r22, Y+25	; 0x19
    25e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e8       	ldi	r19, 0x80	; 128
    25ea:	4b e3       	ldi	r20, 0x3B	; 59
    25ec:	55 e4       	ldi	r21, 0x45	; 69
    25ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	8d 8b       	std	Y+21, r24	; 0x15
    25f8:	9e 8b       	std	Y+22, r25	; 0x16
    25fa:	af 8b       	std	Y+23, r26	; 0x17
    25fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2600:	7e 89       	ldd	r23, Y+22	; 0x16
    2602:	8f 89       	ldd	r24, Y+23	; 0x17
    2604:	98 8d       	ldd	r25, Y+24	; 0x18
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e8       	ldi	r20, 0x80	; 128
    260c:	5f e3       	ldi	r21, 0x3F	; 63
    260e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2612:	88 23       	and	r24, r24
    2614:	2c f4       	brge	.+10     	; 0x2620 <LCD_DisplayChar+0x6b6>
		__ticks = 1;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9c 8b       	std	Y+20, r25	; 0x14
    261c:	8b 8b       	std	Y+19, r24	; 0x13
    261e:	3f c0       	rjmp	.+126    	; 0x269e <LCD_DisplayChar+0x734>
	else if (__tmp > 65535)
    2620:	6d 89       	ldd	r22, Y+21	; 0x15
    2622:	7e 89       	ldd	r23, Y+22	; 0x16
    2624:	8f 89       	ldd	r24, Y+23	; 0x17
    2626:	98 8d       	ldd	r25, Y+24	; 0x18
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	3f ef       	ldi	r19, 0xFF	; 255
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	57 e4       	ldi	r21, 0x47	; 71
    2630:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2634:	18 16       	cp	r1, r24
    2636:	4c f5       	brge	.+82     	; 0x268a <LCD_DisplayChar+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2638:	69 8d       	ldd	r22, Y+25	; 0x19
    263a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    263c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    263e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e2       	ldi	r20, 0x20	; 32
    2646:	51 e4       	ldi	r21, 0x41	; 65
    2648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	9c 8b       	std	Y+20, r25	; 0x14
    265e:	8b 8b       	std	Y+19, r24	; 0x13
    2660:	0f c0       	rjmp	.+30     	; 0x2680 <LCD_DisplayChar+0x716>
    2662:	8c e2       	ldi	r24, 0x2C	; 44
    2664:	91 e0       	ldi	r25, 0x01	; 1
    2666:	9a 8b       	std	Y+18, r25	; 0x12
    2668:	89 8b       	std	Y+17, r24	; 0x11
    266a:	89 89       	ldd	r24, Y+17	; 0x11
    266c:	9a 89       	ldd	r25, Y+18	; 0x12
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <LCD_DisplayChar+0x704>
    2672:	9a 8b       	std	Y+18, r25	; 0x12
    2674:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	9c 89       	ldd	r25, Y+20	; 0x14
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	9c 8b       	std	Y+20, r25	; 0x14
    267e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2680:	8b 89       	ldd	r24, Y+19	; 0x13
    2682:	9c 89       	ldd	r25, Y+20	; 0x14
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	69 f7       	brne	.-38     	; 0x2662 <LCD_DisplayChar+0x6f8>
    2688:	14 c0       	rjmp	.+40     	; 0x26b2 <LCD_DisplayChar+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268a:	6d 89       	ldd	r22, Y+21	; 0x15
    268c:	7e 89       	ldd	r23, Y+22	; 0x16
    268e:	8f 89       	ldd	r24, Y+23	; 0x17
    2690:	98 8d       	ldd	r25, Y+24	; 0x18
    2692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	9c 8b       	std	Y+20, r25	; 0x14
    269c:	8b 8b       	std	Y+19, r24	; 0x13
    269e:	8b 89       	ldd	r24, Y+19	; 0x13
    26a0:	9c 89       	ldd	r25, Y+20	; 0x14
    26a2:	98 8b       	std	Y+16, r25	; 0x10
    26a4:	8f 87       	std	Y+15, r24	; 0x0f
    26a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a8:	98 89       	ldd	r25, Y+16	; 0x10
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <LCD_DisplayChar+0x740>
    26ae:	98 8b       	std	Y+16, r25	; 0x10
    26b0:	8f 87       	std	Y+15, r24	; 0x0f
			
			#endif
		/* Data set-up time delay  Tdsw = 195 ns */
		_delay_ms(1);
		/* disable LCD E=0 */
		CLEAR_BIT(LCD_Control_reg_OP,E);						
    26b2:	ab e3       	ldi	r26, 0x3B	; 59
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	eb e3       	ldi	r30, 0x3B	; 59
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	8b 7f       	andi	r24, 0xFB	; 251
    26be:	8c 93       	st	X, r24
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a0 e8       	ldi	r26, 0x80	; 128
    26c6:	bf e3       	ldi	r27, 0x3F	; 63
    26c8:	8b 87       	std	Y+11, r24	; 0x0b
    26ca:	9c 87       	std	Y+12, r25	; 0x0c
    26cc:	ad 87       	std	Y+13, r26	; 0x0d
    26ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e8       	ldi	r19, 0x80	; 128
    26dc:	4b e3       	ldi	r20, 0x3B	; 59
    26de:	55 e4       	ldi	r21, 0x45	; 69
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	8f 83       	std	Y+7, r24	; 0x07
    26ea:	98 87       	std	Y+8, r25	; 0x08
    26ec:	a9 87       	std	Y+9, r26	; 0x09
    26ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f0:	6f 81       	ldd	r22, Y+7	; 0x07
    26f2:	78 85       	ldd	r23, Y+8	; 0x08
    26f4:	89 85       	ldd	r24, Y+9	; 0x09
    26f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e8       	ldi	r20, 0x80	; 128
    26fe:	5f e3       	ldi	r21, 0x3F	; 63
    2700:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2704:	88 23       	and	r24, r24
    2706:	2c f4       	brge	.+10     	; 0x2712 <LCD_DisplayChar+0x7a8>
		__ticks = 1;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
    2710:	3f c0       	rjmp	.+126    	; 0x2790 <LCD_DisplayChar+0x826>
	else if (__tmp > 65535)
    2712:	6f 81       	ldd	r22, Y+7	; 0x07
    2714:	78 85       	ldd	r23, Y+8	; 0x08
    2716:	89 85       	ldd	r24, Y+9	; 0x09
    2718:	9a 85       	ldd	r25, Y+10	; 0x0a
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	3f ef       	ldi	r19, 0xFF	; 255
    271e:	4f e7       	ldi	r20, 0x7F	; 127
    2720:	57 e4       	ldi	r21, 0x47	; 71
    2722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2726:	18 16       	cp	r1, r24
    2728:	4c f5       	brge	.+82     	; 0x277c <LCD_DisplayChar+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272a:	6b 85       	ldd	r22, Y+11	; 0x0b
    272c:	7c 85       	ldd	r23, Y+12	; 0x0c
    272e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2730:	9e 85       	ldd	r25, Y+14	; 0x0e
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9e 83       	std	Y+6, r25	; 0x06
    2750:	8d 83       	std	Y+5, r24	; 0x05
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <LCD_DisplayChar+0x808>
    2754:	8c e2       	ldi	r24, 0x2C	; 44
    2756:	91 e0       	ldi	r25, 0x01	; 1
    2758:	9c 83       	std	Y+4, r25	; 0x04
    275a:	8b 83       	std	Y+3, r24	; 0x03
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <LCD_DisplayChar+0x7f6>
    2764:	9c 83       	std	Y+4, r25	; 0x04
    2766:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2768:	8d 81       	ldd	r24, Y+5	; 0x05
    276a:	9e 81       	ldd	r25, Y+6	; 0x06
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	9e 83       	std	Y+6, r25	; 0x06
    2770:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2772:	8d 81       	ldd	r24, Y+5	; 0x05
    2774:	9e 81       	ldd	r25, Y+6	; 0x06
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	69 f7       	brne	.-38     	; 0x2754 <LCD_DisplayChar+0x7ea>
    277a:	14 c0       	rjmp	.+40     	; 0x27a4 <LCD_DisplayChar+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277c:	6f 81       	ldd	r22, Y+7	; 0x07
    277e:	78 85       	ldd	r23, Y+8	; 0x08
    2780:	89 85       	ldd	r24, Y+9	; 0x09
    2782:	9a 85       	ldd	r25, Y+10	; 0x0a
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9e 83       	std	Y+6, r25	; 0x06
    278e:	8d 83       	std	Y+5, r24	; 0x05
    2790:	8d 81       	ldd	r24, Y+5	; 0x05
    2792:	9e 81       	ldd	r25, Y+6	; 0x06
    2794:	9a 83       	std	Y+2, r25	; 0x02
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <LCD_DisplayChar+0x832>
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
		/* Data Hold delay Th = 10ns */
		_delay_ms(1);
		
	}
    27a4:	cd 59       	subi	r28, 0x9D	; 157
    27a6:	df 4f       	sbci	r29, 0xFF	; 255
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
    27ba:	08 95       	ret

000027bc <LCD_Clear>:
	
	void LCD_Clear(void)
	{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
		/* Clear Screen */
		Send_instruction(Clear_display); 
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Send_instruction>
	}
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <LCD_DisplayString>:
	
	
	void LCD_DisplayString(char * ptr)
	{
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <LCD_DisplayString+0x6>
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	0a c0       	rjmp	.+20     	; 0x27f4 <LCD_DisplayString+0x24>
		while(*ptr != '\0')
		{
			LCD_DisplayChar(*ptr);
    27e0:	e9 81       	ldd	r30, Y+1	; 0x01
    27e2:	fa 81       	ldd	r31, Y+2	; 0x02
    27e4:	80 81       	ld	r24, Z
    27e6:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_DisplayChar>
			ptr++;
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	9a 83       	std	Y+2, r25	; 0x02
    27f2:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
    27f4:	e9 81       	ldd	r30, Y+1	; 0x01
    27f6:	fa 81       	ldd	r31, Y+2	; 0x02
    27f8:	80 81       	ld	r24, Z
    27fa:	88 23       	and	r24, r24
    27fc:	89 f7       	brne	.-30     	; 0x27e0 <LCD_DisplayString+0x10>
		{
			LCD_DisplayChar(*ptr);
			ptr++;
		}
	}
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <LCD_Select_RowCol>:
	
	void LCD_Select_RowCol(uint8 Row , uint8 col)
	{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	00 d0       	rcall	.+0      	; 0x280e <LCD_Select_RowCol+0x6>
    280e:	00 d0       	rcall	.+0      	; 0x2810 <LCD_Select_RowCol+0x8>
    2810:	0f 92       	push	r0
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	8a 83       	std	Y+2, r24	; 0x02
    2818:	6b 83       	std	Y+3, r22	; 0x03
		uint8 Address=0;
    281a:	19 82       	std	Y+1, r1	; 0x01
		
		switch(Row)
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	3d 83       	std	Y+5, r19	; 0x05
    2824:	2c 83       	std	Y+4, r18	; 0x04
    2826:	8c 81       	ldd	r24, Y+4	; 0x04
    2828:	9d 81       	ldd	r25, Y+5	; 0x05
    282a:	81 30       	cpi	r24, 0x01	; 1
    282c:	91 05       	cpc	r25, r1
    282e:	c1 f0       	breq	.+48     	; 0x2860 <LCD_Select_RowCol+0x58>
    2830:	2c 81       	ldd	r18, Y+4	; 0x04
    2832:	3d 81       	ldd	r19, Y+5	; 0x05
    2834:	22 30       	cpi	r18, 0x02	; 2
    2836:	31 05       	cpc	r19, r1
    2838:	2c f4       	brge	.+10     	; 0x2844 <LCD_Select_RowCol+0x3c>
    283a:	8c 81       	ldd	r24, Y+4	; 0x04
    283c:	9d 81       	ldd	r25, Y+5	; 0x05
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	61 f0       	breq	.+24     	; 0x285a <LCD_Select_RowCol+0x52>
    2842:	19 c0       	rjmp	.+50     	; 0x2876 <LCD_Select_RowCol+0x6e>
    2844:	2c 81       	ldd	r18, Y+4	; 0x04
    2846:	3d 81       	ldd	r19, Y+5	; 0x05
    2848:	22 30       	cpi	r18, 0x02	; 2
    284a:	31 05       	cpc	r19, r1
    284c:	69 f0       	breq	.+26     	; 0x2868 <LCD_Select_RowCol+0x60>
    284e:	8c 81       	ldd	r24, Y+4	; 0x04
    2850:	9d 81       	ldd	r25, Y+5	; 0x05
    2852:	83 30       	cpi	r24, 0x03	; 3
    2854:	91 05       	cpc	r25, r1
    2856:	61 f0       	breq	.+24     	; 0x2870 <LCD_Select_RowCol+0x68>
    2858:	0e c0       	rjmp	.+28     	; 0x2876 <LCD_Select_RowCol+0x6e>
		{
			case 0:
					/* When Writing To LCD 1st Col The Base Address is 0x00 */
						Address=col | LCD_1ST_BASE;
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	0b c0       	rjmp	.+22     	; 0x2876 <LCD_Select_RowCol+0x6e>
						break;
			case 1:
					/* When Writing To LCD 2nd Col The Base Address is 0x40 */
						Address=col | LCD_2ND_BASE;
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	80 64       	ori	r24, 0x40	; 64
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	07 c0       	rjmp	.+14     	; 0x2876 <LCD_Select_RowCol+0x6e>
						break;
			case 2:
					/* When Writing To LCD 1st Col The Base Address is 0x10 */
						Address = col | LCD_3RD_BASE;
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	80 61       	ori	r24, 0x10	; 16
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	03 c0       	rjmp	.+6      	; 0x2876 <LCD_Select_RowCol+0x6e>
						break;
			case 3:
					/* When Writing To LCD 1st Col The Base Address is 0x50 */
						Address=col| LCD_4TH_BASE;
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	80 65       	ori	r24, 0x50	; 80
    2874:	89 83       	std	Y+1, r24	; 0x01
						break;		
		}
		
		Send_instruction(DDRAM_CONST|Address);
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	80 68       	ori	r24, 0x80	; 128
    287a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Send_instruction>
	}
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <LCD_DisplayInt>:
	
	
	void LCD_DisplayInt(sint32 data)
	{
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	65 97       	sbiw	r28, 0x15	; 21
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	6a 8b       	std	Y+18, r22	; 0x12
    28a4:	7b 8b       	std	Y+19, r23	; 0x13
    28a6:	8c 8b       	std	Y+20, r24	; 0x14
    28a8:	9d 8b       	std	Y+21, r25	; 0x15
		/* String to hold the ascii result */
		char Result[17]; 
		 /* 10 for decimal */
		itoa(data,Result,10);
    28aa:	8a 89       	ldd	r24, Y+18	; 0x12
    28ac:	9b 89       	ldd	r25, Y+19	; 0x13
    28ae:	9e 01       	movw	r18, r28
    28b0:	2f 5f       	subi	r18, 0xFF	; 255
    28b2:	3f 4f       	sbci	r19, 0xFF	; 255
    28b4:	b9 01       	movw	r22, r18
    28b6:	4a e0       	ldi	r20, 0x0A	; 10
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	0e 94 83 1c 	call	0x3906	; 0x3906 <itoa>
		/* Display The Result */
		LCD_DisplayString(Result);
    28be:	ce 01       	movw	r24, r28
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <LCD_DisplayString>
	}
    28c6:	65 96       	adiw	r28, 0x15	; 21
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <TWI_Init>:

#include "i2c.h"
#include "LCD.h"

void TWI_Init(I2C_Prescaler Prescale , I2C_interruptState int_state , uint32 F_SCL , uint8 Address)
{
    28d8:	0f 93       	push	r16
    28da:	1f 93       	push	r17
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	29 97       	sbiw	r28, 0x09	; 9
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	6a 83       	std	Y+2, r22	; 0x02
    28f4:	2b 83       	std	Y+3, r18	; 0x03
    28f6:	3c 83       	std	Y+4, r19	; 0x04
    28f8:	4d 83       	std	Y+5, r20	; 0x05
    28fa:	5e 83       	std	Y+6, r21	; 0x06
    28fc:	0f 83       	std	Y+7, r16	; 0x07
	TWAR = Address<<1;
    28fe:	e2 e2       	ldi	r30, 0x22	; 34
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	8f 81       	ldd	r24, Y+7	; 0x07
    2904:	88 0f       	add	r24, r24
    2906:	80 83       	st	Z, r24
	 /*  Calculating Bit Rate: */
	switch (Prescale)
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	28 2f       	mov	r18, r24
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	39 87       	std	Y+9, r19	; 0x09
    2910:	28 87       	std	Y+8, r18	; 0x08
    2912:	88 85       	ldd	r24, Y+8	; 0x08
    2914:	99 85       	ldd	r25, Y+9	; 0x09
    2916:	81 30       	cpi	r24, 0x01	; 1
    2918:	91 05       	cpc	r25, r1
    291a:	09 f4       	brne	.+2      	; 0x291e <TWI_Init+0x46>
    291c:	45 c0       	rjmp	.+138    	; 0x29a8 <TWI_Init+0xd0>
    291e:	e8 85       	ldd	r30, Y+8	; 0x08
    2920:	f9 85       	ldd	r31, Y+9	; 0x09
    2922:	e2 30       	cpi	r30, 0x02	; 2
    2924:	f1 05       	cpc	r31, r1
    2926:	34 f4       	brge	.+12     	; 0x2934 <TWI_Init+0x5c>
    2928:	28 85       	ldd	r18, Y+8	; 0x08
    292a:	39 85       	ldd	r19, Y+9	; 0x09
    292c:	21 15       	cp	r18, r1
    292e:	31 05       	cpc	r19, r1
    2930:	71 f0       	breq	.+28     	; 0x294e <TWI_Init+0x76>
    2932:	e8 c0       	rjmp	.+464    	; 0x2b04 <TWI_Init+0x22c>
    2934:	88 85       	ldd	r24, Y+8	; 0x08
    2936:	99 85       	ldd	r25, Y+9	; 0x09
    2938:	82 30       	cpi	r24, 0x02	; 2
    293a:	91 05       	cpc	r25, r1
    293c:	09 f4       	brne	.+2      	; 0x2940 <TWI_Init+0x68>
    293e:	65 c0       	rjmp	.+202    	; 0x2a0a <TWI_Init+0x132>
    2940:	e8 85       	ldd	r30, Y+8	; 0x08
    2942:	f9 85       	ldd	r31, Y+9	; 0x09
    2944:	e3 30       	cpi	r30, 0x03	; 3
    2946:	f1 05       	cpc	r31, r1
    2948:	09 f4       	brne	.+2      	; 0x294c <TWI_Init+0x74>
    294a:	9a c0       	rjmp	.+308    	; 0x2a80 <TWI_Init+0x1a8>
    294c:	db c0       	rjmp	.+438    	; 0x2b04 <TWI_Init+0x22c>
	{
		case I2C_PRESCALE1:
								TWBR = (uint8) (((float)F_CPU/(2.0*F_SCL)) -8);
    294e:	00 e2       	ldi	r16, 0x20	; 32
    2950:	10 e0       	ldi	r17, 0x00	; 0
    2952:	6b 81       	ldd	r22, Y+3	; 0x03
    2954:	7c 81       	ldd	r23, Y+4	; 0x04
    2956:	8d 81       	ldd	r24, Y+5	; 0x05
    2958:	9e 81       	ldd	r25, Y+6	; 0x06
    295a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    295e:	9b 01       	movw	r18, r22
    2960:	ac 01       	movw	r20, r24
    2962:	ca 01       	movw	r24, r20
    2964:	b9 01       	movw	r22, r18
    2966:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9c 01       	movw	r18, r24
    2970:	ad 01       	movw	r20, r26
    2972:	60 e0       	ldi	r22, 0x00	; 0
    2974:	7b e1       	ldi	r23, 0x1B	; 27
    2976:	87 e3       	ldi	r24, 0x37	; 55
    2978:	9b e4       	ldi	r25, 0x4B	; 75
    297a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	51 e4       	ldi	r21, 0x41	; 65
    298e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	f8 01       	movw	r30, r16
    29a4:	80 83       	st	Z, r24
    29a6:	ae c0       	rjmp	.+348    	; 0x2b04 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE4:
								TWBR = (uint8) (((float)F_CPU/(8.0*F_SCL)) -2);
    29a8:	00 e2       	ldi	r16, 0x20	; 32
    29aa:	10 e0       	ldi	r17, 0x00	; 0
    29ac:	6b 81       	ldd	r22, Y+3	; 0x03
    29ae:	7c 81       	ldd	r23, Y+4	; 0x04
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	bc 01       	movw	r22, r24
    29be:	cd 01       	movw	r24, r26
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	51 e4       	ldi	r21, 0x41	; 65
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9c 01       	movw	r18, r24
    29d2:	ad 01       	movw	r20, r26
    29d4:	60 e0       	ldi	r22, 0x00	; 0
    29d6:	7b e1       	ldi	r23, 0x1B	; 27
    29d8:	87 e3       	ldi	r24, 0x37	; 55
    29da:	9b e4       	ldi	r25, 0x4B	; 75
    29dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	50 e4       	ldi	r21, 0x40	; 64
    29f0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	bc 01       	movw	r22, r24
    29fa:	cd 01       	movw	r24, r26
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	f8 01       	movw	r30, r16
    2a06:	80 83       	st	Z, r24
    2a08:	7d c0       	rjmp	.+250    	; 0x2b04 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE16:
								TWBR = (uint8) (((float)F_CPU/(32*F_SCL)) -0.5);
    2a0a:	00 e2       	ldi	r16, 0x20	; 32
    2a0c:	10 e0       	ldi	r17, 0x00	; 0
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	9c 81       	ldd	r25, Y+4	; 0x04
    2a12:	ad 81       	ldd	r26, Y+5	; 0x05
    2a14:	be 81       	ldd	r27, Y+6	; 0x06
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	aa 1f       	adc	r26, r26
    2a1c:	bb 1f       	adc	r27, r27
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	aa 1f       	adc	r26, r26
    2a24:	bb 1f       	adc	r27, r27
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	aa 1f       	adc	r26, r26
    2a2c:	bb 1f       	adc	r27, r27
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	aa 1f       	adc	r26, r26
    2a34:	bb 1f       	adc	r27, r27
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	aa 1f       	adc	r26, r26
    2a3c:	bb 1f       	adc	r27, r27
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2a46:	9b 01       	movw	r18, r22
    2a48:	ac 01       	movw	r20, r24
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	7b e1       	ldi	r23, 0x1B	; 27
    2a4e:	87 e3       	ldi	r24, 0x37	; 55
    2a50:	9b e4       	ldi	r25, 0x4B	; 75
    2a52:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	80 83       	st	Z, r24
    2a7e:	42 c0       	rjmp	.+132    	; 0x2b04 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE64:
								TWBR = (uint8) (((float)F_CPU/(128*F_SCL)) -0.125);
    2a80:	00 e2       	ldi	r16, 0x20	; 32
    2a82:	10 e0       	ldi	r17, 0x00	; 0
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	9c 81       	ldd	r25, Y+4	; 0x04
    2a88:	ad 81       	ldd	r26, Y+5	; 0x05
    2a8a:	be 81       	ldd	r27, Y+6	; 0x06
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	aa 1f       	adc	r26, r26
    2a92:	bb 1f       	adc	r27, r27
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	aa 1f       	adc	r26, r26
    2a9a:	bb 1f       	adc	r27, r27
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	aa 1f       	adc	r26, r26
    2aa2:	bb 1f       	adc	r27, r27
    2aa4:	88 0f       	add	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	aa 1f       	adc	r26, r26
    2aaa:	bb 1f       	adc	r27, r27
    2aac:	88 0f       	add	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	aa 1f       	adc	r26, r26
    2ab2:	bb 1f       	adc	r27, r27
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	aa 1f       	adc	r26, r26
    2aba:	bb 1f       	adc	r27, r27
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	aa 1f       	adc	r26, r26
    2ac2:	bb 1f       	adc	r27, r27
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2acc:	9b 01       	movw	r18, r22
    2ace:	ac 01       	movw	r20, r24
    2ad0:	60 e0       	ldi	r22, 0x00	; 0
    2ad2:	7b e1       	ldi	r23, 0x1B	; 27
    2ad4:	87 e3       	ldi	r24, 0x37	; 55
    2ad6:	9b e4       	ldi	r25, 0x4B	; 75
    2ad8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	5e e3       	ldi	r21, 0x3E	; 62
    2aec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	f8 01       	movw	r30, r16
    2b02:	80 83       	st	Z, r24
		default:
					break;
	}
   
	
	TWSR |= (Prescale & 0x03);
    2b04:	a1 e2       	ldi	r26, 0x21	; 33
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e1 e2       	ldi	r30, 0x21	; 33
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	98 2f       	mov	r25, r24
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	83 70       	andi	r24, 0x03	; 3
    2b14:	89 2b       	or	r24, r25
    2b16:	8c 93       	st	X, r24
	TWCR |= (1<<TWEN) | (int_state & 0x01) ;
    2b18:	a6 e5       	ldi	r26, 0x56	; 86
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e6 e5       	ldi	r30, 0x56	; 86
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	98 2f       	mov	r25, r24
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	81 70       	andi	r24, 0x01	; 1
    2b28:	84 60       	ori	r24, 0x04	; 4
    2b2a:	89 2b       	or	r24, r25
    2b2c:	8c 93       	st	X, r24
}
    2b2e:	29 96       	adiw	r28, 0x09	; 9
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	1f 91       	pop	r17
    2b40:	0f 91       	pop	r16
    2b42:	08 95       	ret

00002b44 <TWI_Start>:

void TWI_Start(void)
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
    2b4c:	e6 e5       	ldi	r30, 0x56	; 86
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	84 ea       	ldi	r24, 0xA4	; 164
    2b52:	80 83       	st	Z, r24
 
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    2b54:	e6 e5       	ldi	r30, 0x56	; 86
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	88 23       	and	r24, r24
    2b5c:	dc f7       	brge	.-10     	; 0x2b54 <TWI_Start+0x10>
}
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <TWI_Stop>:

void TWI_Stop(void)
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
    2b6c:	e6 e5       	ldi	r30, 0x56	; 86
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	84 e9       	ldi	r24, 0x94	; 148
    2b72:	80 83       	st	Z, r24
 
}
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	08 95       	ret

00002b7a <TWI_Write>:

void TWI_Write(uint8 data)
{
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	0f 92       	push	r0
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2b86:	e3 e2       	ldi	r30, 0x23	; 35
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
   TWCR = (1<<TWEN) | (1<<TWINT);
    2b8e:	e6 e5       	ldi	r30, 0x56	; 86
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	84 e8       	ldi	r24, 0x84	; 132
    2b94:	80 83       	st	Z, r24
   
   /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    2b96:	e6 e5       	ldi	r30, 0x56	; 86
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	88 23       	and	r24, r24
    2b9e:	dc f7       	brge	.-10     	; 0x2b96 <TWI_Write+0x1c>
}
    2ba0:	0f 90       	pop	r0
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 

    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);    
    2bb0:	e6 e5       	ldi	r30, 0x56	; 86
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	84 ec       	ldi	r24, 0xC4	; 196
    2bb6:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2bb8:	e6 e5       	ldi	r30, 0x56	; 86
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	88 23       	and	r24, r24
    2bc0:	dc f7       	brge	.-10     	; 0x2bb8 <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    2bc2:	e3 e2       	ldi	r30, 0x23	; 35
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
}
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62



		TWCR =(1<<TWEN) | (1<<TWINT);
    2bd6:	e6 e5       	ldi	r30, 0x56	; 86
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	84 e8       	ldi	r24, 0x84	; 132
    2bdc:	80 83       	st	Z, r24
/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
while(BIT_IS_CLEAR(TWCR,TWINT));
    2bde:	e6 e5       	ldi	r30, 0x56	; 86
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	88 23       	and	r24, r24
    2be6:	dc f7       	brge	.-10     	; 0x2bde <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    2be8:	e3 e2       	ldi	r30, 0x23	; 35
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
}
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    2bfc:	e1 e2       	ldi	r30, 0x21	; 33
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	88 7f       	andi	r24, 0xF8	; 248
}
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <I2C_ByteWrite>:




void I2C_ByteWrite(uint8 SL_Address,uint8 Reg_Address ,uint8 Data )
{
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	00 d0       	rcall	.+0      	; 0x2c10 <I2C_ByteWrite+0x6>
    2c10:	0f 92       	push	r0
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	6a 83       	std	Y+2, r22	; 0x02
    2c1a:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();
    2c1c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    2c20:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <TWI_Get_Status>
    2c24:	88 30       	cpi	r24, 0x08	; 8
    2c26:	19 f0       	breq	.+6      	; 0x2c2e <I2C_ByteWrite+0x24>
	{
		TWI_Stop();
    2c28:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Stop>
    2c2c:	21 c0       	rjmp	.+66     	; 0x2c70 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write((SL_Address<<1));
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	88 0f       	add	r24, r24
    2c32:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <TWI_Write>
if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    2c36:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <TWI_Get_Status>
    2c3a:	88 31       	cpi	r24, 0x18	; 24
    2c3c:	19 f0       	breq	.+6      	; 0x2c44 <I2C_ByteWrite+0x3a>
	{

		TWI_Stop();
    2c3e:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Stop>
    2c42:	16 c0       	rjmp	.+44     	; 0x2c70 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write(Reg_Address);
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2c4a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <TWI_Get_Status>
    2c4e:	88 32       	cpi	r24, 0x28	; 40
    2c50:	19 f0       	breq	.+6      	; 0x2c58 <I2C_ByteWrite+0x4e>
	{
		TWI_Stop();
    2c52:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Stop>
    2c56:	0c c0       	rjmp	.+24     	; 0x2c70 <I2C_ByteWrite+0x66>
		return ;
	}
	
TWI_Write(Data);
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2c5e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <TWI_Get_Status>
    2c62:	88 32       	cpi	r24, 0x28	; 40
    2c64:	19 f0       	breq	.+6      	; 0x2c6c <I2C_ByteWrite+0x62>
	{

		TWI_Stop();
    2c66:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Stop>
    2c6a:	02 c0       	rjmp	.+4      	; 0x2c70 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
    2c6c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Stop>
	return ;

}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <I2C_ByteRead>:

 

 
uint8 I2C_ByteRead(uint8 SL_Address , uint8 Reg_Address)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <I2C_ByteRead+0x6>
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <I2C_ByteRead+0x8>
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	8a 83       	std	Y+2, r24	; 0x02
    2c8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Data=0;
    2c8c:	19 82       	std	Y+1, r1	; 0x01
	
	
	TWI_Start();
    2c8e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    2c92:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <TWI_Get_Status>
    2c96:	88 30       	cpi	r24, 0x08	; 8
    2c98:	29 f0       	breq	.+10     	; 0x2ca4 <I2C_ByteRead+0x28>
	{
		TWI_Stop();
    2c9a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Stop>
		return 1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	8c 83       	std	Y+4, r24	; 0x04
    2ca2:	3c c0       	rjmp	.+120    	; 0x2d1c <I2C_ByteRead+0xa0>
	}
	
	
	TWI_Write((SL_Address<<1));
    2ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca6:	88 0f       	add	r24, r24
    2ca8:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    2cac:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <TWI_Get_Status>
    2cb0:	88 31       	cpi	r24, 0x18	; 24
    2cb2:	29 f0       	breq	.+10     	; 0x2cbe <I2C_ByteRead+0x42>
	{

		TWI_Stop();
    2cb4:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Stop>
		return 2;
    2cb8:	82 e0       	ldi	r24, 0x02	; 2
    2cba:	8c 83       	std	Y+4, r24	; 0x04
    2cbc:	2f c0       	rjmp	.+94     	; 0x2d1c <I2C_ByteRead+0xa0>
	}
	
	TWI_Write(Reg_Address);
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2cc4:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <TWI_Get_Status>
    2cc8:	88 32       	cpi	r24, 0x28	; 40
    2cca:	29 f0       	breq	.+10     	; 0x2cd6 <I2C_ByteRead+0x5a>
	{
		TWI_Stop();
    2ccc:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Stop>
		return 3;
    2cd0:	83 e0       	ldi	r24, 0x03	; 3
    2cd2:	8c 83       	std	Y+4, r24	; 0x04
    2cd4:	23 c0       	rjmp	.+70     	; 0x2d1c <I2C_ByteRead+0xa0>
	}
	
	TWI_Start();
    2cd6:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    2cda:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <TWI_Get_Status>
    2cde:	80 31       	cpi	r24, 0x10	; 16
    2ce0:	29 f0       	breq	.+10     	; 0x2cec <I2C_ByteRead+0x70>
	{
		TWI_Stop();
    2ce2:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Stop>
		return 4;
    2ce6:	84 e0       	ldi	r24, 0x04	; 4
    2ce8:	8c 83       	std	Y+4, r24	; 0x04
    2cea:	18 c0       	rjmp	.+48     	; 0x2d1c <I2C_ByteRead+0xa0>
	}
	
	TWI_Write((SL_Address<<1) | READ);
    2cec:	8a 81       	ldd	r24, Y+2	; 0x02
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	81 60       	ori	r24, 0x01	; 1
    2cf8:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    2cfc:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <TWI_Get_Status>
    2d00:	80 34       	cpi	r24, 0x40	; 64
    2d02:	29 f0       	breq	.+10     	; 0x2d0e <I2C_ByteRead+0x92>
	{

		TWI_Stop();
    2d04:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Stop>
		return 5;
    2d08:	85 e0       	ldi	r24, 0x05	; 5
    2d0a:	8c 83       	std	Y+4, r24	; 0x04
    2d0c:	07 c0       	rjmp	.+14     	; 0x2d1c <I2C_ByteRead+0xa0>
	}
	Data=TWI_Read_With_NACK();
    2d0e:	0e 94 e7 15 	call	0x2bce	; 0x2bce <TWI_Read_With_NACK>
    2d12:	89 83       	std	Y+1, r24	; 0x01
	TWI_Stop();
    2d14:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Stop>
	
	return Data;		
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	8c 83       	std	Y+4, r24	; 0x04
    2d1c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <main>:
u8 Flex[4];
u8 Word_index;
volatile ADXL345_Data Live_Data;

int main (void)
{
    2d2c:	0f 93       	push	r16
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	00 d0       	rcall	.+0      	; 0x2d34 <main+0x8>
    2d34:	0f 92       	push	r0
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
		Letter_D,
	};
//	u8 Word_index;
	u8 result;
//	DDRA=0x00;  "reserved for ADCs"
	DDRC=0xff;
    2d3a:	e4 e3       	ldi	r30, 0x34	; 52
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	8f ef       	ldi	r24, 0xFF	; 255
    2d40:	80 83       	st	Z, r24
	LCD_init();
    2d42:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <LCD_init>
	TWI_Init(I2C_PRESCALE1,I2C_intDisable,F_ADXL,0x01);
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	60 e0       	ldi	r22, 0x00	; 0
    2d4a:	20 e8       	ldi	r18, 0x80	; 128
    2d4c:	3a e1       	ldi	r19, 0x1A	; 26
    2d4e:	46 e0       	ldi	r20, 0x06	; 6
    2d50:	50 e0       	ldi	r21, 0x00	; 0
    2d52:	01 e0       	ldi	r16, 0x01	; 1
    2d54:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <TWI_Init>
	Accelerometor_init(ADXL345_MessureMode,ADXL345_ALTERNATIVE_ADDRESS);
    2d58:	88 e0       	ldi	r24, 0x08	; 8
    2d5a:	63 e5       	ldi	r22, 0x53	; 83
    2d5c:	0e 94 6a 07 	call	0xed4	; 0xed4 <Accelerometor_init>
	ADC_init();
    2d60:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>

	while(1)
	{
		Update_Flexs(&Sensors_Readings);
    2d64:	8c ec       	ldi	r24, 0xCC	; 204
    2d66:	91 e0       	ldi	r25, 0x01	; 1
    2d68:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <Update_Flexs>
		Update_Accelerometor_Axis (ADXL345_ALTERNATIVE_ADDRESS, &Sensors_Readings);
    2d6c:	2c ec       	ldi	r18, 0xCC	; 204
    2d6e:	31 e0       	ldi	r19, 0x01	; 1
    2d70:	83 e5       	ldi	r24, 0x53	; 83
    2d72:	b9 01       	movw	r22, r18
    2d74:	0e 94 14 18 	call	0x3028	; 0x3028 <Update_Accelerometor_Axis>

	/*	CmpFlexData ( &Flex, &Stored_Data);*/

		if( Compare_Flex_Data(&Sensors_Readings, &Stored_Data) )
    2d78:	8c ec       	ldi	r24, 0xCC	; 204
    2d7a:	91 e0       	ldi	r25, 0x01	; 1
    2d7c:	28 e6       	ldi	r18, 0x68	; 104
    2d7e:	31 e0       	ldi	r19, 0x01	; 1
    2d80:	b9 01       	movw	r22, r18
    2d82:	0e 94 cf 1b 	call	0x379e	; 0x379e <Compare_Flex_Data>
    2d86:	88 23       	and	r24, r24
    2d88:	a9 f1       	breq	.+106    	; 0x2df4 <main+0xc8>
		{
			switch(Word_index)
    2d8a:	80 91 da 01 	lds	r24, 0x01DA
    2d8e:	28 2f       	mov	r18, r24
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	3b 83       	std	Y+3, r19	; 0x03
    2d94:	2a 83       	std	Y+2, r18	; 0x02
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9a:	82 30       	cpi	r24, 0x02	; 2
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	d9 f0       	breq	.+54     	; 0x2dd6 <main+0xaa>
    2da0:	2a 81       	ldd	r18, Y+2	; 0x02
    2da2:	3b 81       	ldd	r19, Y+3	; 0x03
    2da4:	23 30       	cpi	r18, 0x03	; 3
    2da6:	31 05       	cpc	r19, r1
    2da8:	34 f4       	brge	.+12     	; 0x2db6 <main+0x8a>
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	9b 81       	ldd	r25, Y+3	; 0x03
    2dae:	81 30       	cpi	r24, 0x01	; 1
    2db0:	91 05       	cpc	r25, r1
    2db2:	61 f0       	breq	.+24     	; 0x2dcc <main+0xa0>
    2db4:	d7 cf       	rjmp	.-82     	; 0x2d64 <main+0x38>
    2db6:	2a 81       	ldd	r18, Y+2	; 0x02
    2db8:	3b 81       	ldd	r19, Y+3	; 0x03
    2dba:	23 30       	cpi	r18, 0x03	; 3
    2dbc:	31 05       	cpc	r19, r1
    2dbe:	81 f0       	breq	.+32     	; 0x2de0 <main+0xb4>
    2dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc4:	84 30       	cpi	r24, 0x04	; 4
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	81 f0       	breq	.+32     	; 0x2dea <main+0xbe>
    2dca:	cc cf       	rjmp	.-104    	; 0x2d64 <main+0x38>
			{
			case Letter_A:
				PORTC=0x01;
    2dcc:	e5 e3       	ldi	r30, 0x35	; 53
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	80 83       	st	Z, r24
    2dd4:	c7 cf       	rjmp	.-114    	; 0x2d64 <main+0x38>
				break;
			case Letter_B:
				PORTC=0x02;
    2dd6:	e5 e3       	ldi	r30, 0x35	; 53
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	82 e0       	ldi	r24, 0x02	; 2
    2ddc:	80 83       	st	Z, r24
    2dde:	c2 cf       	rjmp	.-124    	; 0x2d64 <main+0x38>
				break;
			case Letter_C:
				PORTC=0x04;
    2de0:	e5 e3       	ldi	r30, 0x35	; 53
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	84 e0       	ldi	r24, 0x04	; 4
    2de6:	80 83       	st	Z, r24
    2de8:	bd cf       	rjmp	.-134    	; 0x2d64 <main+0x38>
				break;
			case Letter_D:
				PORTC=0x08;
    2dea:	e5 e3       	ldi	r30, 0x35	; 53
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	88 e0       	ldi	r24, 0x08	; 8
    2df0:	80 83       	st	Z, r24
    2df2:	b8 cf       	rjmp	.-144    	; 0x2d64 <main+0x38>
				break;
			}
		}
		else
		{
			PORTC=0x00;
    2df4:	e5 e3       	ldi	r30, 0x35	; 53
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	10 82       	st	Z, r1
    2dfa:	b4 cf       	rjmp	.-152    	; 0x2d64 <main+0x38>

00002dfc <Adjust_Flex_Range>:
	}
	return 0;
}
/*---------------------------------------------------------------*/
void Adjust_Flex_Range( u8 Flex_adcChannel_Number, u16 adcDigial_Value)
{
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <Adjust_Flex_Range+0x6>
    2e02:	0f 92       	push	r0
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	89 83       	std	Y+1, r24	; 0x01
    2e0a:	7b 83       	std	Y+3, r23	; 0x03
    2e0c:	6a 83       	std	Y+2, r22	; 0x02
	if ( (adcDigial_Value > 0) && (adcDigial_Value <= 15) )
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	9b 81       	ldd	r25, Y+3	; 0x03
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	71 f0       	breq	.+28     	; 0x2e32 <Adjust_Flex_Range+0x36>
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1a:	80 31       	cpi	r24, 0x10	; 16
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	48 f4       	brcc	.+18     	; 0x2e32 <Adjust_Flex_Range+0x36>
		Flex[Flex_adcChannel_Number]=1;
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	88 2f       	mov	r24, r24
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	fc 01       	movw	r30, r24
    2e28:	ea 52       	subi	r30, 0x2A	; 42
    2e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	80 83       	st	Z, r24
    2e30:	40 c0       	rjmp	.+128    	; 0x2eb2 <Adjust_Flex_Range+0xb6>
	else if ( (adcDigial_Value > 15) && (adcDigial_Value <= 30) )
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	9b 81       	ldd	r25, Y+3	; 0x03
    2e36:	80 31       	cpi	r24, 0x10	; 16
    2e38:	91 05       	cpc	r25, r1
    2e3a:	70 f0       	brcs	.+28     	; 0x2e58 <Adjust_Flex_Range+0x5c>
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e40:	8f 31       	cpi	r24, 0x1F	; 31
    2e42:	91 05       	cpc	r25, r1
    2e44:	48 f4       	brcc	.+18     	; 0x2e58 <Adjust_Flex_Range+0x5c>
		Flex[Flex_adcChannel_Number]=2;
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	88 2f       	mov	r24, r24
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	ea 52       	subi	r30, 0x2A	; 42
    2e50:	fe 4f       	sbci	r31, 0xFE	; 254
    2e52:	82 e0       	ldi	r24, 0x02	; 2
    2e54:	80 83       	st	Z, r24
    2e56:	2d c0       	rjmp	.+90     	; 0x2eb2 <Adjust_Flex_Range+0xb6>
	else if ( (adcDigial_Value > 30) && (adcDigial_Value <= 45) )
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5c:	8f 31       	cpi	r24, 0x1F	; 31
    2e5e:	91 05       	cpc	r25, r1
    2e60:	70 f0       	brcs	.+28     	; 0x2e7e <Adjust_Flex_Range+0x82>
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	9b 81       	ldd	r25, Y+3	; 0x03
    2e66:	8e 32       	cpi	r24, 0x2E	; 46
    2e68:	91 05       	cpc	r25, r1
    2e6a:	48 f4       	brcc	.+18     	; 0x2e7e <Adjust_Flex_Range+0x82>
		Flex[Flex_adcChannel_Number]=3;
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	88 2f       	mov	r24, r24
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	fc 01       	movw	r30, r24
    2e74:	ea 52       	subi	r30, 0x2A	; 42
    2e76:	fe 4f       	sbci	r31, 0xFE	; 254
    2e78:	83 e0       	ldi	r24, 0x03	; 3
    2e7a:	80 83       	st	Z, r24
    2e7c:	1a c0       	rjmp	.+52     	; 0x2eb2 <Adjust_Flex_Range+0xb6>
	else if ( (adcDigial_Value > 45) && (adcDigial_Value <= 60) )
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	9b 81       	ldd	r25, Y+3	; 0x03
    2e82:	8e 32       	cpi	r24, 0x2E	; 46
    2e84:	91 05       	cpc	r25, r1
    2e86:	70 f0       	brcs	.+28     	; 0x2ea4 <Adjust_Flex_Range+0xa8>
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8c:	8d 33       	cpi	r24, 0x3D	; 61
    2e8e:	91 05       	cpc	r25, r1
    2e90:	48 f4       	brcc	.+18     	; 0x2ea4 <Adjust_Flex_Range+0xa8>
		Flex[Flex_adcChannel_Number]=4;
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	fc 01       	movw	r30, r24
    2e9a:	ea 52       	subi	r30, 0x2A	; 42
    2e9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9e:	84 e0       	ldi	r24, 0x04	; 4
    2ea0:	80 83       	st	Z, r24
    2ea2:	07 c0       	rjmp	.+14     	; 0x2eb2 <Adjust_Flex_Range+0xb6>
	else
		Flex[Flex_adcChannel_Number]=0;
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	88 2f       	mov	r24, r24
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	fc 01       	movw	r30, r24
    2eac:	ea 52       	subi	r30, 0x2A	; 42
    2eae:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb0:	10 82       	st	Z, r1
}
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	08 95       	ret

00002ebe <CmpFlexData>:
/*---------------------------------------------------------------*/
void  CmpFlexData ( u8* ReadingsArr, u8* StoredArr)
{
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	28 97       	sbiw	r28, 0x08	; 8
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
    2ed6:	78 87       	std	Y+8, r23	; 0x08
    2ed8:	6f 83       	std	Y+7, r22	; 0x07
	u8 Counter_struct;
	u8 Counter;
	u8 Matching_flag= FALSE;
    2eda:	1a 82       	std	Y+2, r1	; 0x02
	u8 Word_index;

	for (Counter_struct= 0 ; Counter_struct < 10 ; Counter_struct++)
    2edc:	1c 82       	std	Y+4, r1	; 0x04
    2ede:	43 c0       	rjmp	.+134    	; 0x2f66 <CmpFlexData+0xa8>
	{
		for (Counter= 0 ; Counter < NumberOfFlexs ; Counter++)
    2ee0:	1b 82       	std	Y+3, r1	; 0x03
    2ee2:	38 c0       	rjmp	.+112    	; 0x2f54 <CmpFlexData+0x96>
		{
			if ( ReadingsArr[Counter] != StoredArr[Counter])
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	fc 01       	movw	r30, r24
    2ef0:	e2 0f       	add	r30, r18
    2ef2:	f3 1f       	adc	r31, r19
    2ef4:	40 81       	ld	r20, Z
    2ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef8:	28 2f       	mov	r18, r24
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	8f 81       	ldd	r24, Y+7	; 0x07
    2efe:	98 85       	ldd	r25, Y+8	; 0x08
    2f00:	fc 01       	movw	r30, r24
    2f02:	e2 0f       	add	r30, r18
    2f04:	f3 1f       	adc	r31, r19
    2f06:	80 81       	ld	r24, Z
    2f08:	48 17       	cp	r20, r24
    2f0a:	21 f0       	breq	.+8      	; 0x2f14 <CmpFlexData+0x56>
			{
				PORTC=0x00;
    2f0c:	e5 e3       	ldi	r30, 0x35	; 53
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	10 82       	st	Z, r1
    2f12:	23 c0       	rjmp	.+70     	; 0x2f5a <CmpFlexData+0x9c>
//				return 0;
				break;
			}
				if (Counter == NumberOfFlexs-1)
    2f14:	8b 81       	ldd	r24, Y+3	; 0x03
    2f16:	83 30       	cpi	r24, 0x03	; 3
    2f18:	d1 f4       	brne	.+52     	; 0x2f4e <CmpFlexData+0x90>
				{
					if ( ReadingsArr[Counter] == StoredArr[Counter])
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	8d 81       	ldd	r24, Y+5	; 0x05
    2f22:	9e 81       	ldd	r25, Y+6	; 0x06
    2f24:	fc 01       	movw	r30, r24
    2f26:	e2 0f       	add	r30, r18
    2f28:	f3 1f       	adc	r31, r19
    2f2a:	40 81       	ld	r20, Z
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	28 2f       	mov	r18, r24
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	8f 81       	ldd	r24, Y+7	; 0x07
    2f34:	98 85       	ldd	r25, Y+8	; 0x08
    2f36:	fc 01       	movw	r30, r24
    2f38:	e2 0f       	add	r30, r18
    2f3a:	f3 1f       	adc	r31, r19
    2f3c:	80 81       	ld	r24, Z
    2f3e:	48 17       	cp	r20, r24
    2f40:	31 f4       	brne	.+12     	; 0x2f4e <CmpFlexData+0x90>
						{
							PORTC=0x01;
    2f42:	e5 e3       	ldi	r30, 0x35	; 53
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	80 83       	st	Z, r24
							Matching_flag= TRUE;
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Matching_flag= FALSE;
	u8 Word_index;

	for (Counter_struct= 0 ; Counter_struct < 10 ; Counter_struct++)
	{
		for (Counter= 0 ; Counter < NumberOfFlexs ; Counter++)
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	8f 5f       	subi	r24, 0xFF	; 255
    2f52:	8b 83       	std	Y+3, r24	; 0x03
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	84 30       	cpi	r24, 0x04	; 4
    2f58:	28 f2       	brcs	.-118    	; 0x2ee4 <CmpFlexData+0x26>
							PORTC=0x01;
							Matching_flag= TRUE;
						}
				}
		}
		if ( Matching_flag == TRUE)
    2f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5c:	81 30       	cpi	r24, 0x01	; 1
    2f5e:	39 f0       	breq	.+14     	; 0x2f6e <CmpFlexData+0xb0>
	u8 Counter_struct;
	u8 Counter;
	u8 Matching_flag= FALSE;
	u8 Word_index;

	for (Counter_struct= 0 ; Counter_struct < 10 ; Counter_struct++)
    2f60:	8c 81       	ldd	r24, Y+4	; 0x04
    2f62:	8f 5f       	subi	r24, 0xFF	; 255
    2f64:	8c 83       	std	Y+4, r24	; 0x04
    2f66:	8c 81       	ldd	r24, Y+4	; 0x04
    2f68:	8a 30       	cpi	r24, 0x0A	; 10
    2f6a:	08 f4       	brcc	.+2      	; 0x2f6e <CmpFlexData+0xb0>
    2f6c:	b9 cf       	rjmp	.-142    	; 0x2ee0 <CmpFlexData+0x22>
		if ( Matching_flag == TRUE)
//			return Word_index;
			break;
	}
//	return 0;
}
    2f6e:	28 96       	adiw	r28, 0x08	; 8
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <Update_Flexs>:
/*---------------------------------------------------------------*/
void Update_Flexs (Letters_and_Words * PTR_Flex)
{
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	00 d0       	rcall	.+0      	; 0x2f86 <Update_Flexs+0x6>
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	9a 83       	std	Y+2, r25	; 0x02
    2f8c:	89 83       	std	Y+1, r24	; 0x01
	Flex[0]= ADC_GetResult(0);
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    2f94:	80 93 d6 01 	sts	0x01D6, r24
	Adjust_Flex_Range(0, Flex[0]);
    2f98:	80 91 d6 01 	lds	r24, 0x01D6
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	b9 01       	movw	r22, r18
    2fa4:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[0]= Flex[0];
    2fa8:	80 91 d6 01 	lds	r24, 0x01D6
    2fac:	e9 81       	ldd	r30, Y+1	; 0x01
    2fae:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb0:	80 83       	st	Z, r24

	Flex[1]= ADC_GetResult(1);
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    2fb8:	80 93 d7 01 	sts	0x01D7, r24
	Adjust_Flex_Range(1, Flex[1]);
    2fbc:	80 91 d7 01 	lds	r24, 0x01D7
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	b9 01       	movw	r22, r18
    2fc8:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[1]= Flex[1];
    2fcc:	80 91 d7 01 	lds	r24, 0x01D7
    2fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd4:	81 83       	std	Z+1, r24	; 0x01

	Flex[2]= ADC_GetResult(2);
    2fd6:	82 e0       	ldi	r24, 0x02	; 2
    2fd8:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    2fdc:	80 93 d8 01 	sts	0x01D8, r24
	Adjust_Flex_Range(2, Flex[2]);
    2fe0:	80 91 d8 01 	lds	r24, 0x01D8
    2fe4:	28 2f       	mov	r18, r24
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	82 e0       	ldi	r24, 0x02	; 2
    2fea:	b9 01       	movw	r22, r18
    2fec:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[2]= Flex[2];
    2ff0:	80 91 d8 01 	lds	r24, 0x01D8
    2ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff8:	82 83       	std	Z+2, r24	; 0x02

	Flex[3]= ADC_GetResult(3);
    2ffa:	83 e0       	ldi	r24, 0x03	; 3
    2ffc:	0e 94 2c 07 	call	0xe58	; 0xe58 <ADC_GetResult>
    3000:	80 93 d9 01 	sts	0x01D9, r24
	Adjust_Flex_Range(3, Flex[3]);
    3004:	80 91 d9 01 	lds	r24, 0x01D9
    3008:	28 2f       	mov	r18, r24
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	83 e0       	ldi	r24, 0x03	; 3
    300e:	b9 01       	movw	r22, r18
    3010:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[3]= Flex[3];
    3014:	80 91 d9 01 	lds	r24, 0x01D9
    3018:	e9 81       	ldd	r30, Y+1	; 0x01
    301a:	fa 81       	ldd	r31, Y+2	; 0x02
    301c:	83 83       	std	Z+3, r24	; 0x03
}
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	cf 91       	pop	r28
    3024:	df 91       	pop	r29
    3026:	08 95       	ret

00003028 <Update_Accelerometor_Axis>:
/*----------------------------------------------------------------*/
void Update_Accelerometor_Axis (ADXL345_Address EFF_Address, Letters_and_Words * PTR_Accelerometor)
{
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	df 93       	push	r29
    302e:	cf 93       	push	r28
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	cd 55       	subi	r28, 0x5D	; 93
    3036:	d0 40       	sbci	r29, 0x00	; 0
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	fe 01       	movw	r30, r28
    3044:	e5 5a       	subi	r30, 0xA5	; 165
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	80 83       	st	Z, r24
    304a:	fe 01       	movw	r30, r28
    304c:	e4 5a       	subi	r30, 0xA4	; 164
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	71 83       	std	Z+1, r23	; 0x01
    3052:	60 83       	st	Z, r22
		u16 X_Axis_Read;
		u16 Y_Axis_Read;
		u16 Z_Axis_Read;


		X_Axis_Read = (u8)I2C_ByteRead(EFF_Address , ACCS_DATAX0);
    3054:	fe 01       	movw	r30, r28
    3056:	e5 5a       	subi	r30, 0xA5	; 165
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	80 81       	ld	r24, Z
    305c:	62 e3       	ldi	r22, 0x32	; 50
    305e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
    3062:	fe 01       	movw	r30, r28
    3064:	e7 5a       	subi	r30, 0xA7	; 167
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	88 2f       	mov	r24, r24
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	91 83       	std	Z+1, r25	; 0x01
    306e:	80 83       	st	Z, r24
    3070:	fe 01       	movw	r30, r28
    3072:	ef 5a       	subi	r30, 0xAF	; 175
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	a0 e8       	ldi	r26, 0x80	; 128
    307c:	bf e3       	ldi	r27, 0x3F	; 63
    307e:	80 83       	st	Z, r24
    3080:	91 83       	std	Z+1, r25	; 0x01
    3082:	a2 83       	std	Z+2, r26	; 0x02
    3084:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3086:	8e 01       	movw	r16, r28
    3088:	03 5b       	subi	r16, 0xB3	; 179
    308a:	1f 4f       	sbci	r17, 0xFF	; 255
    308c:	fe 01       	movw	r30, r28
    308e:	ef 5a       	subi	r30, 0xAF	; 175
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	60 81       	ld	r22, Z
    3094:	71 81       	ldd	r23, Z+1	; 0x01
    3096:	82 81       	ldd	r24, Z+2	; 0x02
    3098:	93 81       	ldd	r25, Z+3	; 0x03
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e8       	ldi	r19, 0x80	; 128
    309e:	4b e3       	ldi	r20, 0x3B	; 59
    30a0:	55 e4       	ldi	r21, 0x45	; 69
    30a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	f8 01       	movw	r30, r16
    30ac:	80 83       	st	Z, r24
    30ae:	91 83       	std	Z+1, r25	; 0x01
    30b0:	a2 83       	std	Z+2, r26	; 0x02
    30b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30b4:	fe 01       	movw	r30, r28
    30b6:	e3 5b       	subi	r30, 0xB3	; 179
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	60 81       	ld	r22, Z
    30bc:	71 81       	ldd	r23, Z+1	; 0x01
    30be:	82 81       	ldd	r24, Z+2	; 0x02
    30c0:	93 81       	ldd	r25, Z+3	; 0x03
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e8       	ldi	r20, 0x80	; 128
    30c8:	5f e3       	ldi	r21, 0x3F	; 63
    30ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ce:	88 23       	and	r24, r24
    30d0:	44 f4       	brge	.+16     	; 0x30e2 <Update_Accelerometor_Axis+0xba>
		__ticks = 1;
    30d2:	fe 01       	movw	r30, r28
    30d4:	e5 5b       	subi	r30, 0xB5	; 181
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	91 83       	std	Z+1, r25	; 0x01
    30de:	80 83       	st	Z, r24
    30e0:	64 c0       	rjmp	.+200    	; 0x31aa <Update_Accelerometor_Axis+0x182>
	else if (__tmp > 65535)
    30e2:	fe 01       	movw	r30, r28
    30e4:	e3 5b       	subi	r30, 0xB3	; 179
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	60 81       	ld	r22, Z
    30ea:	71 81       	ldd	r23, Z+1	; 0x01
    30ec:	82 81       	ldd	r24, Z+2	; 0x02
    30ee:	93 81       	ldd	r25, Z+3	; 0x03
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	3f ef       	ldi	r19, 0xFF	; 255
    30f4:	4f e7       	ldi	r20, 0x7F	; 127
    30f6:	57 e4       	ldi	r21, 0x47	; 71
    30f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30fc:	18 16       	cp	r1, r24
    30fe:	0c f0       	brlt	.+2      	; 0x3102 <Update_Accelerometor_Axis+0xda>
    3100:	43 c0       	rjmp	.+134    	; 0x3188 <Update_Accelerometor_Axis+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3102:	fe 01       	movw	r30, r28
    3104:	ef 5a       	subi	r30, 0xAF	; 175
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e2       	ldi	r20, 0x20	; 32
    3116:	51 e4       	ldi	r21, 0x41	; 65
    3118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	8e 01       	movw	r16, r28
    3122:	05 5b       	subi	r16, 0xB5	; 181
    3124:	1f 4f       	sbci	r17, 0xFF	; 255
    3126:	bc 01       	movw	r22, r24
    3128:	cd 01       	movw	r24, r26
    312a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	f8 01       	movw	r30, r16
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	80 83       	st	Z, r24
    3138:	1f c0       	rjmp	.+62     	; 0x3178 <Update_Accelerometor_Axis+0x150>
    313a:	fe 01       	movw	r30, r28
    313c:	e7 5b       	subi	r30, 0xB7	; 183
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	8c e2       	ldi	r24, 0x2C	; 44
    3142:	91 e0       	ldi	r25, 0x01	; 1
    3144:	91 83       	std	Z+1, r25	; 0x01
    3146:	80 83       	st	Z, r24
    3148:	fe 01       	movw	r30, r28
    314a:	e7 5b       	subi	r30, 0xB7	; 183
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	80 81       	ld	r24, Z
    3150:	91 81       	ldd	r25, Z+1	; 0x01
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	f1 f7       	brne	.-4      	; 0x3152 <Update_Accelerometor_Axis+0x12a>
    3156:	fe 01       	movw	r30, r28
    3158:	e7 5b       	subi	r30, 0xB7	; 183
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3160:	de 01       	movw	r26, r28
    3162:	a5 5b       	subi	r26, 0xB5	; 181
    3164:	bf 4f       	sbci	r27, 0xFF	; 255
    3166:	fe 01       	movw	r30, r28
    3168:	e5 5b       	subi	r30, 0xB5	; 181
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	80 81       	ld	r24, Z
    316e:	91 81       	ldd	r25, Z+1	; 0x01
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	11 96       	adiw	r26, 0x01	; 1
    3174:	9c 93       	st	X, r25
    3176:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3178:	fe 01       	movw	r30, r28
    317a:	e5 5b       	subi	r30, 0xB5	; 181
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	80 81       	ld	r24, Z
    3180:	91 81       	ldd	r25, Z+1	; 0x01
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	d1 f6       	brne	.-76     	; 0x313a <Update_Accelerometor_Axis+0x112>
    3186:	27 c0       	rjmp	.+78     	; 0x31d6 <Update_Accelerometor_Axis+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3188:	8e 01       	movw	r16, r28
    318a:	05 5b       	subi	r16, 0xB5	; 181
    318c:	1f 4f       	sbci	r17, 0xFF	; 255
    318e:	fe 01       	movw	r30, r28
    3190:	e3 5b       	subi	r30, 0xB3	; 179
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	60 81       	ld	r22, Z
    3196:	71 81       	ldd	r23, Z+1	; 0x01
    3198:	82 81       	ldd	r24, Z+2	; 0x02
    319a:	93 81       	ldd	r25, Z+3	; 0x03
    319c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	f8 01       	movw	r30, r16
    31a6:	91 83       	std	Z+1, r25	; 0x01
    31a8:	80 83       	st	Z, r24
    31aa:	de 01       	movw	r26, r28
    31ac:	a9 5b       	subi	r26, 0xB9	; 185
    31ae:	bf 4f       	sbci	r27, 0xFF	; 255
    31b0:	fe 01       	movw	r30, r28
    31b2:	e5 5b       	subi	r30, 0xB5	; 181
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	80 81       	ld	r24, Z
    31b8:	91 81       	ldd	r25, Z+1	; 0x01
    31ba:	8d 93       	st	X+, r24
    31bc:	9c 93       	st	X, r25
    31be:	fe 01       	movw	r30, r28
    31c0:	e9 5b       	subi	r30, 0xB9	; 185
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	80 81       	ld	r24, Z
    31c6:	91 81       	ldd	r25, Z+1	; 0x01
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <Update_Accelerometor_Axis+0x1a0>
    31cc:	fe 01       	movw	r30, r28
    31ce:	e9 5b       	subi	r30, 0xB9	; 185
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	80 83       	st	Z, r24
		_delay_ms(1);
		X_Axis_Read |= ((u8)I2C_ByteRead(EFF_Address , ACCS_DATAX1))<<8;
    31d6:	fe 01       	movw	r30, r28
    31d8:	e5 5a       	subi	r30, 0xA5	; 165
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	63 e3       	ldi	r22, 0x33	; 51
    31e0:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
    31e4:	88 2f       	mov	r24, r24
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	98 2f       	mov	r25, r24
    31ea:	88 27       	eor	r24, r24
    31ec:	9c 01       	movw	r18, r24
    31ee:	de 01       	movw	r26, r28
    31f0:	a7 5a       	subi	r26, 0xA7	; 167
    31f2:	bf 4f       	sbci	r27, 0xFF	; 255
    31f4:	fe 01       	movw	r30, r28
    31f6:	e7 5a       	subi	r30, 0xA7	; 167
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	80 81       	ld	r24, Z
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	82 2b       	or	r24, r18
    3200:	93 2b       	or	r25, r19
    3202:	8d 93       	st	X+, r24
    3204:	9c 93       	st	X, r25
    3206:	fe 01       	movw	r30, r28
    3208:	ed 5b       	subi	r30, 0xBD	; 189
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	a0 e8       	ldi	r26, 0x80	; 128
    3212:	bf e3       	ldi	r27, 0x3F	; 63
    3214:	80 83       	st	Z, r24
    3216:	91 83       	std	Z+1, r25	; 0x01
    3218:	a2 83       	std	Z+2, r26	; 0x02
    321a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321c:	8e 01       	movw	r16, r28
    321e:	01 5c       	subi	r16, 0xC1	; 193
    3220:	1f 4f       	sbci	r17, 0xFF	; 255
    3222:	fe 01       	movw	r30, r28
    3224:	ed 5b       	subi	r30, 0xBD	; 189
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e8       	ldi	r19, 0x80	; 128
    3234:	4b e3       	ldi	r20, 0x3B	; 59
    3236:	55 e4       	ldi	r21, 0x45	; 69
    3238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	f8 01       	movw	r30, r16
    3242:	80 83       	st	Z, r24
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	a2 83       	std	Z+2, r26	; 0x02
    3248:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    324a:	fe 01       	movw	r30, r28
    324c:	ff 96       	adiw	r30, 0x3f	; 63
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e8       	ldi	r20, 0x80	; 128
    325c:	5f e3       	ldi	r21, 0x3F	; 63
    325e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3262:	88 23       	and	r24, r24
    3264:	2c f4       	brge	.+10     	; 0x3270 <Update_Accelerometor_Axis+0x248>
		__ticks = 1;
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	9e af       	std	Y+62, r25	; 0x3e
    326c:	8d af       	std	Y+61, r24	; 0x3d
    326e:	46 c0       	rjmp	.+140    	; 0x32fc <Update_Accelerometor_Axis+0x2d4>
	else if (__tmp > 65535)
    3270:	fe 01       	movw	r30, r28
    3272:	ff 96       	adiw	r30, 0x3f	; 63
    3274:	60 81       	ld	r22, Z
    3276:	71 81       	ldd	r23, Z+1	; 0x01
    3278:	82 81       	ldd	r24, Z+2	; 0x02
    327a:	93 81       	ldd	r25, Z+3	; 0x03
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	3f ef       	ldi	r19, 0xFF	; 255
    3280:	4f e7       	ldi	r20, 0x7F	; 127
    3282:	57 e4       	ldi	r21, 0x47	; 71
    3284:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3288:	18 16       	cp	r1, r24
    328a:	64 f5       	brge	.+88     	; 0x32e4 <Update_Accelerometor_Axis+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328c:	fe 01       	movw	r30, r28
    328e:	ed 5b       	subi	r30, 0xBD	; 189
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	60 81       	ld	r22, Z
    3294:	71 81       	ldd	r23, Z+1	; 0x01
    3296:	82 81       	ldd	r24, Z+2	; 0x02
    3298:	93 81       	ldd	r25, Z+3	; 0x03
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e2       	ldi	r20, 0x20	; 32
    32a0:	51 e4       	ldi	r21, 0x41	; 65
    32a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	bc 01       	movw	r22, r24
    32ac:	cd 01       	movw	r24, r26
    32ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	9e af       	std	Y+62, r25	; 0x3e
    32b8:	8d af       	std	Y+61, r24	; 0x3d
    32ba:	0f c0       	rjmp	.+30     	; 0x32da <Update_Accelerometor_Axis+0x2b2>
    32bc:	8c e2       	ldi	r24, 0x2C	; 44
    32be:	91 e0       	ldi	r25, 0x01	; 1
    32c0:	9c af       	std	Y+60, r25	; 0x3c
    32c2:	8b af       	std	Y+59, r24	; 0x3b
    32c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    32c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <Update_Accelerometor_Axis+0x2a0>
    32cc:	9c af       	std	Y+60, r25	; 0x3c
    32ce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    32d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    32d4:	01 97       	sbiw	r24, 0x01	; 1
    32d6:	9e af       	std	Y+62, r25	; 0x3e
    32d8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32da:	8d ad       	ldd	r24, Y+61	; 0x3d
    32dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	69 f7       	brne	.-38     	; 0x32bc <Update_Accelerometor_Axis+0x294>
    32e2:	16 c0       	rjmp	.+44     	; 0x3310 <Update_Accelerometor_Axis+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e4:	fe 01       	movw	r30, r28
    32e6:	ff 96       	adiw	r30, 0x3f	; 63
    32e8:	60 81       	ld	r22, Z
    32ea:	71 81       	ldd	r23, Z+1	; 0x01
    32ec:	82 81       	ldd	r24, Z+2	; 0x02
    32ee:	93 81       	ldd	r25, Z+3	; 0x03
    32f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	9e af       	std	Y+62, r25	; 0x3e
    32fa:	8d af       	std	Y+61, r24	; 0x3d
    32fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    32fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3300:	9a af       	std	Y+58, r25	; 0x3a
    3302:	89 af       	std	Y+57, r24	; 0x39
    3304:	89 ad       	ldd	r24, Y+57	; 0x39
    3306:	9a ad       	ldd	r25, Y+58	; 0x3a
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	f1 f7       	brne	.-4      	; 0x3308 <Update_Accelerometor_Axis+0x2e0>
    330c:	9a af       	std	Y+58, r25	; 0x3a
    330e:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		Y_Axis_Read = (u8)I2C_ByteRead(EFF_Address , ACCS_DATAY0);
    3310:	fe 01       	movw	r30, r28
    3312:	e5 5a       	subi	r30, 0xA5	; 165
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	80 81       	ld	r24, Z
    3318:	64 e3       	ldi	r22, 0x34	; 52
    331a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
    331e:	fe 01       	movw	r30, r28
    3320:	e9 5a       	subi	r30, 0xA9	; 169
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	88 2f       	mov	r24, r24
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	91 83       	std	Z+1, r25	; 0x01
    332a:	80 83       	st	Z, r24
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	a0 e8       	ldi	r26, 0x80	; 128
    3332:	bf e3       	ldi	r27, 0x3F	; 63
    3334:	8d ab       	std	Y+53, r24	; 0x35
    3336:	9e ab       	std	Y+54, r25	; 0x36
    3338:	af ab       	std	Y+55, r26	; 0x37
    333a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333c:	6d a9       	ldd	r22, Y+53	; 0x35
    333e:	7e a9       	ldd	r23, Y+54	; 0x36
    3340:	8f a9       	ldd	r24, Y+55	; 0x37
    3342:	98 ad       	ldd	r25, Y+56	; 0x38
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e8       	ldi	r19, 0x80	; 128
    3348:	4b e3       	ldi	r20, 0x3B	; 59
    334a:	55 e4       	ldi	r21, 0x45	; 69
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	89 ab       	std	Y+49, r24	; 0x31
    3356:	9a ab       	std	Y+50, r25	; 0x32
    3358:	ab ab       	std	Y+51, r26	; 0x33
    335a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    335c:	69 a9       	ldd	r22, Y+49	; 0x31
    335e:	7a a9       	ldd	r23, Y+50	; 0x32
    3360:	8b a9       	ldd	r24, Y+51	; 0x33
    3362:	9c a9       	ldd	r25, Y+52	; 0x34
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e8       	ldi	r20, 0x80	; 128
    336a:	5f e3       	ldi	r21, 0x3F	; 63
    336c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3370:	88 23       	and	r24, r24
    3372:	2c f4       	brge	.+10     	; 0x337e <Update_Accelerometor_Axis+0x356>
		__ticks = 1;
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	98 ab       	std	Y+48, r25	; 0x30
    337a:	8f a7       	std	Y+47, r24	; 0x2f
    337c:	3f c0       	rjmp	.+126    	; 0x33fc <Update_Accelerometor_Axis+0x3d4>
	else if (__tmp > 65535)
    337e:	69 a9       	ldd	r22, Y+49	; 0x31
    3380:	7a a9       	ldd	r23, Y+50	; 0x32
    3382:	8b a9       	ldd	r24, Y+51	; 0x33
    3384:	9c a9       	ldd	r25, Y+52	; 0x34
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	3f ef       	ldi	r19, 0xFF	; 255
    338a:	4f e7       	ldi	r20, 0x7F	; 127
    338c:	57 e4       	ldi	r21, 0x47	; 71
    338e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3392:	18 16       	cp	r1, r24
    3394:	4c f5       	brge	.+82     	; 0x33e8 <Update_Accelerometor_Axis+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3396:	6d a9       	ldd	r22, Y+53	; 0x35
    3398:	7e a9       	ldd	r23, Y+54	; 0x36
    339a:	8f a9       	ldd	r24, Y+55	; 0x37
    339c:	98 ad       	ldd	r25, Y+56	; 0x38
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e2       	ldi	r20, 0x20	; 32
    33a4:	51 e4       	ldi	r21, 0x41	; 65
    33a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	bc 01       	movw	r22, r24
    33b0:	cd 01       	movw	r24, r26
    33b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	98 ab       	std	Y+48, r25	; 0x30
    33bc:	8f a7       	std	Y+47, r24	; 0x2f
    33be:	0f c0       	rjmp	.+30     	; 0x33de <Update_Accelerometor_Axis+0x3b6>
    33c0:	8c e2       	ldi	r24, 0x2C	; 44
    33c2:	91 e0       	ldi	r25, 0x01	; 1
    33c4:	9e a7       	std	Y+46, r25	; 0x2e
    33c6:	8d a7       	std	Y+45, r24	; 0x2d
    33c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    33ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <Update_Accelerometor_Axis+0x3a4>
    33d0:	9e a7       	std	Y+46, r25	; 0x2e
    33d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    33d6:	98 a9       	ldd	r25, Y+48	; 0x30
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	98 ab       	std	Y+48, r25	; 0x30
    33dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33de:	8f a5       	ldd	r24, Y+47	; 0x2f
    33e0:	98 a9       	ldd	r25, Y+48	; 0x30
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	69 f7       	brne	.-38     	; 0x33c0 <Update_Accelerometor_Axis+0x398>
    33e6:	14 c0       	rjmp	.+40     	; 0x3410 <Update_Accelerometor_Axis+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e8:	69 a9       	ldd	r22, Y+49	; 0x31
    33ea:	7a a9       	ldd	r23, Y+50	; 0x32
    33ec:	8b a9       	ldd	r24, Y+51	; 0x33
    33ee:	9c a9       	ldd	r25, Y+52	; 0x34
    33f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	98 ab       	std	Y+48, r25	; 0x30
    33fa:	8f a7       	std	Y+47, r24	; 0x2f
    33fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    33fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3400:	9c a7       	std	Y+44, r25	; 0x2c
    3402:	8b a7       	std	Y+43, r24	; 0x2b
    3404:	8b a5       	ldd	r24, Y+43	; 0x2b
    3406:	9c a5       	ldd	r25, Y+44	; 0x2c
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	f1 f7       	brne	.-4      	; 0x3408 <Update_Accelerometor_Axis+0x3e0>
    340c:	9c a7       	std	Y+44, r25	; 0x2c
    340e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		Y_Axis_Read |= ((u8)I2C_ByteRead(EFF_Address , ACCS_DATAY1))<<8;
    3410:	fe 01       	movw	r30, r28
    3412:	e5 5a       	subi	r30, 0xA5	; 165
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	80 81       	ld	r24, Z
    3418:	65 e3       	ldi	r22, 0x35	; 53
    341a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
    341e:	88 2f       	mov	r24, r24
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	98 2f       	mov	r25, r24
    3424:	88 27       	eor	r24, r24
    3426:	9c 01       	movw	r18, r24
    3428:	de 01       	movw	r26, r28
    342a:	a9 5a       	subi	r26, 0xA9	; 169
    342c:	bf 4f       	sbci	r27, 0xFF	; 255
    342e:	fe 01       	movw	r30, r28
    3430:	e9 5a       	subi	r30, 0xA9	; 169
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	80 81       	ld	r24, Z
    3436:	91 81       	ldd	r25, Z+1	; 0x01
    3438:	82 2b       	or	r24, r18
    343a:	93 2b       	or	r25, r19
    343c:	8d 93       	st	X+, r24
    343e:	9c 93       	st	X, r25
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	a0 e8       	ldi	r26, 0x80	; 128
    3446:	bf e3       	ldi	r27, 0x3F	; 63
    3448:	8f a3       	std	Y+39, r24	; 0x27
    344a:	98 a7       	std	Y+40, r25	; 0x28
    344c:	a9 a7       	std	Y+41, r26	; 0x29
    344e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3450:	6f a1       	ldd	r22, Y+39	; 0x27
    3452:	78 a5       	ldd	r23, Y+40	; 0x28
    3454:	89 a5       	ldd	r24, Y+41	; 0x29
    3456:	9a a5       	ldd	r25, Y+42	; 0x2a
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e8       	ldi	r19, 0x80	; 128
    345c:	4b e3       	ldi	r20, 0x3B	; 59
    345e:	55 e4       	ldi	r21, 0x45	; 69
    3460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	8b a3       	std	Y+35, r24	; 0x23
    346a:	9c a3       	std	Y+36, r25	; 0x24
    346c:	ad a3       	std	Y+37, r26	; 0x25
    346e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3470:	6b a1       	ldd	r22, Y+35	; 0x23
    3472:	7c a1       	ldd	r23, Y+36	; 0x24
    3474:	8d a1       	ldd	r24, Y+37	; 0x25
    3476:	9e a1       	ldd	r25, Y+38	; 0x26
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	40 e8       	ldi	r20, 0x80	; 128
    347e:	5f e3       	ldi	r21, 0x3F	; 63
    3480:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3484:	88 23       	and	r24, r24
    3486:	2c f4       	brge	.+10     	; 0x3492 <Update_Accelerometor_Axis+0x46a>
		__ticks = 1;
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	9a a3       	std	Y+34, r25	; 0x22
    348e:	89 a3       	std	Y+33, r24	; 0x21
    3490:	3f c0       	rjmp	.+126    	; 0x3510 <Update_Accelerometor_Axis+0x4e8>
	else if (__tmp > 65535)
    3492:	6b a1       	ldd	r22, Y+35	; 0x23
    3494:	7c a1       	ldd	r23, Y+36	; 0x24
    3496:	8d a1       	ldd	r24, Y+37	; 0x25
    3498:	9e a1       	ldd	r25, Y+38	; 0x26
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	3f ef       	ldi	r19, 0xFF	; 255
    349e:	4f e7       	ldi	r20, 0x7F	; 127
    34a0:	57 e4       	ldi	r21, 0x47	; 71
    34a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34a6:	18 16       	cp	r1, r24
    34a8:	4c f5       	brge	.+82     	; 0x34fc <Update_Accelerometor_Axis+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34aa:	6f a1       	ldd	r22, Y+39	; 0x27
    34ac:	78 a5       	ldd	r23, Y+40	; 0x28
    34ae:	89 a5       	ldd	r24, Y+41	; 0x29
    34b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	40 e2       	ldi	r20, 0x20	; 32
    34b8:	51 e4       	ldi	r21, 0x41	; 65
    34ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	bc 01       	movw	r22, r24
    34c4:	cd 01       	movw	r24, r26
    34c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	9a a3       	std	Y+34, r25	; 0x22
    34d0:	89 a3       	std	Y+33, r24	; 0x21
    34d2:	0f c0       	rjmp	.+30     	; 0x34f2 <Update_Accelerometor_Axis+0x4ca>
    34d4:	8c e2       	ldi	r24, 0x2C	; 44
    34d6:	91 e0       	ldi	r25, 0x01	; 1
    34d8:	98 a3       	std	Y+32, r25	; 0x20
    34da:	8f 8f       	std	Y+31, r24	; 0x1f
    34dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34de:	98 a1       	ldd	r25, Y+32	; 0x20
    34e0:	01 97       	sbiw	r24, 0x01	; 1
    34e2:	f1 f7       	brne	.-4      	; 0x34e0 <Update_Accelerometor_Axis+0x4b8>
    34e4:	98 a3       	std	Y+32, r25	; 0x20
    34e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e8:	89 a1       	ldd	r24, Y+33	; 0x21
    34ea:	9a a1       	ldd	r25, Y+34	; 0x22
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	9a a3       	std	Y+34, r25	; 0x22
    34f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f2:	89 a1       	ldd	r24, Y+33	; 0x21
    34f4:	9a a1       	ldd	r25, Y+34	; 0x22
    34f6:	00 97       	sbiw	r24, 0x00	; 0
    34f8:	69 f7       	brne	.-38     	; 0x34d4 <Update_Accelerometor_Axis+0x4ac>
    34fa:	14 c0       	rjmp	.+40     	; 0x3524 <Update_Accelerometor_Axis+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34fc:	6b a1       	ldd	r22, Y+35	; 0x23
    34fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3500:	8d a1       	ldd	r24, Y+37	; 0x25
    3502:	9e a1       	ldd	r25, Y+38	; 0x26
    3504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	9a a3       	std	Y+34, r25	; 0x22
    350e:	89 a3       	std	Y+33, r24	; 0x21
    3510:	89 a1       	ldd	r24, Y+33	; 0x21
    3512:	9a a1       	ldd	r25, Y+34	; 0x22
    3514:	9e 8f       	std	Y+30, r25	; 0x1e
    3516:	8d 8f       	std	Y+29, r24	; 0x1d
    3518:	8d 8d       	ldd	r24, Y+29	; 0x1d
    351a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	f1 f7       	brne	.-4      	; 0x351c <Update_Accelerometor_Axis+0x4f4>
    3520:	9e 8f       	std	Y+30, r25	; 0x1e
    3522:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		Z_Axis_Read = (u8)I2C_ByteRead(EFF_Address , ACCS_DATAZ0);
    3524:	fe 01       	movw	r30, r28
    3526:	e5 5a       	subi	r30, 0xA5	; 165
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	80 81       	ld	r24, Z
    352c:	66 e3       	ldi	r22, 0x36	; 54
    352e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
    3532:	fe 01       	movw	r30, r28
    3534:	eb 5a       	subi	r30, 0xAB	; 171
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	88 2f       	mov	r24, r24
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	91 83       	std	Z+1, r25	; 0x01
    353e:	80 83       	st	Z, r24
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	a0 e8       	ldi	r26, 0x80	; 128
    3546:	bf e3       	ldi	r27, 0x3F	; 63
    3548:	89 8f       	std	Y+25, r24	; 0x19
    354a:	9a 8f       	std	Y+26, r25	; 0x1a
    354c:	ab 8f       	std	Y+27, r26	; 0x1b
    354e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3550:	69 8d       	ldd	r22, Y+25	; 0x19
    3552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e8       	ldi	r19, 0x80	; 128
    355c:	4b e3       	ldi	r20, 0x3B	; 59
    355e:	55 e4       	ldi	r21, 0x45	; 69
    3560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	8d 8b       	std	Y+21, r24	; 0x15
    356a:	9e 8b       	std	Y+22, r25	; 0x16
    356c:	af 8b       	std	Y+23, r26	; 0x17
    356e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3570:	6d 89       	ldd	r22, Y+21	; 0x15
    3572:	7e 89       	ldd	r23, Y+22	; 0x16
    3574:	8f 89       	ldd	r24, Y+23	; 0x17
    3576:	98 8d       	ldd	r25, Y+24	; 0x18
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	40 e8       	ldi	r20, 0x80	; 128
    357e:	5f e3       	ldi	r21, 0x3F	; 63
    3580:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3584:	88 23       	and	r24, r24
    3586:	2c f4       	brge	.+10     	; 0x3592 <Update_Accelerometor_Axis+0x56a>
		__ticks = 1;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9c 8b       	std	Y+20, r25	; 0x14
    358e:	8b 8b       	std	Y+19, r24	; 0x13
    3590:	3f c0       	rjmp	.+126    	; 0x3610 <Update_Accelerometor_Axis+0x5e8>
	else if (__tmp > 65535)
    3592:	6d 89       	ldd	r22, Y+21	; 0x15
    3594:	7e 89       	ldd	r23, Y+22	; 0x16
    3596:	8f 89       	ldd	r24, Y+23	; 0x17
    3598:	98 8d       	ldd	r25, Y+24	; 0x18
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	3f ef       	ldi	r19, 0xFF	; 255
    359e:	4f e7       	ldi	r20, 0x7F	; 127
    35a0:	57 e4       	ldi	r21, 0x47	; 71
    35a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35a6:	18 16       	cp	r1, r24
    35a8:	4c f5       	brge	.+82     	; 0x35fc <Update_Accelerometor_Axis+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35aa:	69 8d       	ldd	r22, Y+25	; 0x19
    35ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	40 e2       	ldi	r20, 0x20	; 32
    35b8:	51 e4       	ldi	r21, 0x41	; 65
    35ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	bc 01       	movw	r22, r24
    35c4:	cd 01       	movw	r24, r26
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	9c 8b       	std	Y+20, r25	; 0x14
    35d0:	8b 8b       	std	Y+19, r24	; 0x13
    35d2:	0f c0       	rjmp	.+30     	; 0x35f2 <Update_Accelerometor_Axis+0x5ca>
    35d4:	8c e2       	ldi	r24, 0x2C	; 44
    35d6:	91 e0       	ldi	r25, 0x01	; 1
    35d8:	9a 8b       	std	Y+18, r25	; 0x12
    35da:	89 8b       	std	Y+17, r24	; 0x11
    35dc:	89 89       	ldd	r24, Y+17	; 0x11
    35de:	9a 89       	ldd	r25, Y+18	; 0x12
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	f1 f7       	brne	.-4      	; 0x35e0 <Update_Accelerometor_Axis+0x5b8>
    35e4:	9a 8b       	std	Y+18, r25	; 0x12
    35e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ea:	9c 89       	ldd	r25, Y+20	; 0x14
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	9c 8b       	std	Y+20, r25	; 0x14
    35f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f2:	8b 89       	ldd	r24, Y+19	; 0x13
    35f4:	9c 89       	ldd	r25, Y+20	; 0x14
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	69 f7       	brne	.-38     	; 0x35d4 <Update_Accelerometor_Axis+0x5ac>
    35fa:	14 c0       	rjmp	.+40     	; 0x3624 <Update_Accelerometor_Axis+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fc:	6d 89       	ldd	r22, Y+21	; 0x15
    35fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3600:	8f 89       	ldd	r24, Y+23	; 0x17
    3602:	98 8d       	ldd	r25, Y+24	; 0x18
    3604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	9c 8b       	std	Y+20, r25	; 0x14
    360e:	8b 8b       	std	Y+19, r24	; 0x13
    3610:	8b 89       	ldd	r24, Y+19	; 0x13
    3612:	9c 89       	ldd	r25, Y+20	; 0x14
    3614:	98 8b       	std	Y+16, r25	; 0x10
    3616:	8f 87       	std	Y+15, r24	; 0x0f
    3618:	8f 85       	ldd	r24, Y+15	; 0x0f
    361a:	98 89       	ldd	r25, Y+16	; 0x10
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	f1 f7       	brne	.-4      	; 0x361c <Update_Accelerometor_Axis+0x5f4>
    3620:	98 8b       	std	Y+16, r25	; 0x10
    3622:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		Z_Axis_Read |= ((u8)I2C_ByteRead(EFF_Address , ACCS_DATAZ1))<<8;
    3624:	fe 01       	movw	r30, r28
    3626:	e5 5a       	subi	r30, 0xA5	; 165
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	80 81       	ld	r24, Z
    362c:	67 e3       	ldi	r22, 0x37	; 55
    362e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <I2C_ByteRead>
    3632:	88 2f       	mov	r24, r24
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	98 2f       	mov	r25, r24
    3638:	88 27       	eor	r24, r24
    363a:	9c 01       	movw	r18, r24
    363c:	de 01       	movw	r26, r28
    363e:	ab 5a       	subi	r26, 0xAB	; 171
    3640:	bf 4f       	sbci	r27, 0xFF	; 255
    3642:	fe 01       	movw	r30, r28
    3644:	eb 5a       	subi	r30, 0xAB	; 171
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	80 81       	ld	r24, Z
    364a:	91 81       	ldd	r25, Z+1	; 0x01
    364c:	82 2b       	or	r24, r18
    364e:	93 2b       	or	r25, r19
    3650:	8d 93       	st	X+, r24
    3652:	9c 93       	st	X, r25
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	a0 e8       	ldi	r26, 0x80	; 128
    365a:	bf e3       	ldi	r27, 0x3F	; 63
    365c:	8b 87       	std	Y+11, r24	; 0x0b
    365e:	9c 87       	std	Y+12, r25	; 0x0c
    3660:	ad 87       	std	Y+13, r26	; 0x0d
    3662:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3664:	6b 85       	ldd	r22, Y+11	; 0x0b
    3666:	7c 85       	ldd	r23, Y+12	; 0x0c
    3668:	8d 85       	ldd	r24, Y+13	; 0x0d
    366a:	9e 85       	ldd	r25, Y+14	; 0x0e
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e8       	ldi	r19, 0x80	; 128
    3670:	4b e3       	ldi	r20, 0x3B	; 59
    3672:	55 e4       	ldi	r21, 0x45	; 69
    3674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	8f 83       	std	Y+7, r24	; 0x07
    367e:	98 87       	std	Y+8, r25	; 0x08
    3680:	a9 87       	std	Y+9, r26	; 0x09
    3682:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3684:	6f 81       	ldd	r22, Y+7	; 0x07
    3686:	78 85       	ldd	r23, Y+8	; 0x08
    3688:	89 85       	ldd	r24, Y+9	; 0x09
    368a:	9a 85       	ldd	r25, Y+10	; 0x0a
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e8       	ldi	r20, 0x80	; 128
    3692:	5f e3       	ldi	r21, 0x3F	; 63
    3694:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3698:	88 23       	and	r24, r24
    369a:	2c f4       	brge	.+10     	; 0x36a6 <Update_Accelerometor_Axis+0x67e>
		__ticks = 1;
    369c:	81 e0       	ldi	r24, 0x01	; 1
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	9e 83       	std	Y+6, r25	; 0x06
    36a2:	8d 83       	std	Y+5, r24	; 0x05
    36a4:	3f c0       	rjmp	.+126    	; 0x3724 <Update_Accelerometor_Axis+0x6fc>
	else if (__tmp > 65535)
    36a6:	6f 81       	ldd	r22, Y+7	; 0x07
    36a8:	78 85       	ldd	r23, Y+8	; 0x08
    36aa:	89 85       	ldd	r24, Y+9	; 0x09
    36ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	3f ef       	ldi	r19, 0xFF	; 255
    36b2:	4f e7       	ldi	r20, 0x7F	; 127
    36b4:	57 e4       	ldi	r21, 0x47	; 71
    36b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ba:	18 16       	cp	r1, r24
    36bc:	4c f5       	brge	.+82     	; 0x3710 <Update_Accelerometor_Axis+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36be:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e2       	ldi	r20, 0x20	; 32
    36cc:	51 e4       	ldi	r21, 0x41	; 65
    36ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	bc 01       	movw	r22, r24
    36d8:	cd 01       	movw	r24, r26
    36da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	9e 83       	std	Y+6, r25	; 0x06
    36e4:	8d 83       	std	Y+5, r24	; 0x05
    36e6:	0f c0       	rjmp	.+30     	; 0x3706 <Update_Accelerometor_Axis+0x6de>
    36e8:	8c e2       	ldi	r24, 0x2C	; 44
    36ea:	91 e0       	ldi	r25, 0x01	; 1
    36ec:	9c 83       	std	Y+4, r25	; 0x04
    36ee:	8b 83       	std	Y+3, r24	; 0x03
    36f0:	8b 81       	ldd	r24, Y+3	; 0x03
    36f2:	9c 81       	ldd	r25, Y+4	; 0x04
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <Update_Accelerometor_Axis+0x6cc>
    36f8:	9c 83       	std	Y+4, r25	; 0x04
    36fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fc:	8d 81       	ldd	r24, Y+5	; 0x05
    36fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	9e 83       	std	Y+6, r25	; 0x06
    3704:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3706:	8d 81       	ldd	r24, Y+5	; 0x05
    3708:	9e 81       	ldd	r25, Y+6	; 0x06
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	69 f7       	brne	.-38     	; 0x36e8 <Update_Accelerometor_Axis+0x6c0>
    370e:	14 c0       	rjmp	.+40     	; 0x3738 <Update_Accelerometor_Axis+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3710:	6f 81       	ldd	r22, Y+7	; 0x07
    3712:	78 85       	ldd	r23, Y+8	; 0x08
    3714:	89 85       	ldd	r24, Y+9	; 0x09
    3716:	9a 85       	ldd	r25, Y+10	; 0x0a
    3718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	9e 83       	std	Y+6, r25	; 0x06
    3722:	8d 83       	std	Y+5, r24	; 0x05
    3724:	8d 81       	ldd	r24, Y+5	; 0x05
    3726:	9e 81       	ldd	r25, Y+6	; 0x06
    3728:	9a 83       	std	Y+2, r25	; 0x02
    372a:	89 83       	std	Y+1, r24	; 0x01
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	9a 81       	ldd	r25, Y+2	; 0x02
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	f1 f7       	brne	.-4      	; 0x3730 <Update_Accelerometor_Axis+0x708>
    3734:	9a 83       	std	Y+2, r25	; 0x02
    3736:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

		PTR_Accelerometor -> X_Axis= (X_Axis_Read);
    3738:	fe 01       	movw	r30, r28
    373a:	e7 5a       	subi	r30, 0xA7	; 167
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	80 81       	ld	r24, Z
    3740:	91 81       	ldd	r25, Z+1	; 0x01
    3742:	fe 01       	movw	r30, r28
    3744:	e4 5a       	subi	r30, 0xA4	; 164
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	01 90       	ld	r0, Z+
    374a:	f0 81       	ld	r31, Z
    374c:	e0 2d       	mov	r30, r0
    374e:	95 83       	std	Z+5, r25	; 0x05
    3750:	84 83       	std	Z+4, r24	; 0x04
		PTR_Accelerometor -> Y_Axis= (Y_Axis_Read);
    3752:	fe 01       	movw	r30, r28
    3754:	e9 5a       	subi	r30, 0xA9	; 169
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	80 81       	ld	r24, Z
    375a:	91 81       	ldd	r25, Z+1	; 0x01
    375c:	fe 01       	movw	r30, r28
    375e:	e4 5a       	subi	r30, 0xA4	; 164
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	01 90       	ld	r0, Z+
    3764:	f0 81       	ld	r31, Z
    3766:	e0 2d       	mov	r30, r0
    3768:	97 83       	std	Z+7, r25	; 0x07
    376a:	86 83       	std	Z+6, r24	; 0x06
		PTR_Accelerometor -> Z_Axis= (Z_Axis_Read);
    376c:	fe 01       	movw	r30, r28
    376e:	eb 5a       	subi	r30, 0xAB	; 171
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	80 81       	ld	r24, Z
    3774:	91 81       	ldd	r25, Z+1	; 0x01
    3776:	fe 01       	movw	r30, r28
    3778:	e4 5a       	subi	r30, 0xA4	; 164
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	01 90       	ld	r0, Z+
    377e:	f0 81       	ld	r31, Z
    3780:	e0 2d       	mov	r30, r0
    3782:	91 87       	std	Z+9, r25	; 0x09
    3784:	80 87       	std	Z+8, r24	; 0x08
}
    3786:	c3 5a       	subi	r28, 0xA3	; 163
    3788:	df 4f       	sbci	r29, 0xFF	; 255
    378a:	0f b6       	in	r0, 0x3f	; 63
    378c:	f8 94       	cli
    378e:	de bf       	out	0x3e, r29	; 62
    3790:	0f be       	out	0x3f, r0	; 63
    3792:	cd bf       	out	0x3d, r28	; 61
    3794:	cf 91       	pop	r28
    3796:	df 91       	pop	r29
    3798:	1f 91       	pop	r17
    379a:	0f 91       	pop	r16
    379c:	08 95       	ret

0000379e <Compare_Flex_Data>:

/*---------------------------------------------------------------*/
u8  Compare_Flex_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data)
{
    379e:	df 93       	push	r29
    37a0:	cf 93       	push	r28
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
    37a6:	27 97       	sbiw	r28, 0x07	; 7
    37a8:	0f b6       	in	r0, 0x3f	; 63
    37aa:	f8 94       	cli
    37ac:	de bf       	out	0x3e, r29	; 62
    37ae:	0f be       	out	0x3f, r0	; 63
    37b0:	cd bf       	out	0x3d, r28	; 61
    37b2:	9c 83       	std	Y+4, r25	; 0x04
    37b4:	8b 83       	std	Y+3, r24	; 0x03
    37b6:	7e 83       	std	Y+6, r23	; 0x06
    37b8:	6d 83       	std	Y+5, r22	; 0x05
	u8 Counter;
	u8 Counter1;
/*	u8 Matching_flag=FALSE;*/
	Word_index=0;
    37ba:	10 92 da 01 	sts	0x01DA, r1
	for (Counter1=0; Counter1<10; Counter1++)
    37be:	19 82       	std	Y+1, r1	; 0x01
    37c0:	5c c0       	rjmp	.+184    	; 0x387a <Compare_Flex_Data+0xdc>
	{
/*			Matching_flag= FALSE;*/

		for (Counter=0; Counter<NumberOfFlexs; Counter++)
    37c2:	1a 82       	std	Y+2, r1	; 0x02
    37c4:	53 c0       	rjmp	.+166    	; 0x386c <Compare_Flex_Data+0xce>
			{
				if ( Ptr_Sensor_Readings ->Arr_Flex[Counter] != Ptr_Stored_Data[Counter1].Arr_Flex[Counter])
    37c6:	8a 81       	ldd	r24, Y+2	; 0x02
    37c8:	28 2f       	mov	r18, r24
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	8b 81       	ldd	r24, Y+3	; 0x03
    37ce:	9c 81       	ldd	r25, Y+4	; 0x04
    37d0:	fc 01       	movw	r30, r24
    37d2:	e2 0f       	add	r30, r18
    37d4:	f3 1f       	adc	r31, r19
    37d6:	40 81       	ld	r20, Z
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	88 2f       	mov	r24, r24
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	9c 01       	movw	r18, r24
    37e0:	22 0f       	add	r18, r18
    37e2:	33 1f       	adc	r19, r19
    37e4:	c9 01       	movw	r24, r18
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	88 0f       	add	r24, r24
    37ec:	99 1f       	adc	r25, r25
    37ee:	28 0f       	add	r18, r24
    37f0:	39 1f       	adc	r19, r25
    37f2:	8d 81       	ldd	r24, Y+5	; 0x05
    37f4:	9e 81       	ldd	r25, Y+6	; 0x06
    37f6:	28 0f       	add	r18, r24
    37f8:	39 1f       	adc	r19, r25
    37fa:	8a 81       	ldd	r24, Y+2	; 0x02
    37fc:	88 2f       	mov	r24, r24
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	f9 01       	movw	r30, r18
    3802:	e8 0f       	add	r30, r24
    3804:	f9 1f       	adc	r31, r25
    3806:	80 81       	ld	r24, Z
    3808:	48 17       	cp	r20, r24
    380a:	a1 f5       	brne	.+104    	; 0x3874 <Compare_Flex_Data+0xd6>
				{
//					PORTC=0x00;
	//				return 0;
					break;
				}
					if (Counter == NumberOfFlexs-1)
    380c:	8a 81       	ldd	r24, Y+2	; 0x02
    380e:	83 30       	cpi	r24, 0x03	; 3
    3810:	51 f5       	brne	.+84     	; 0x3866 <Compare_Flex_Data+0xc8>
					{
						if ( Ptr_Sensor_Readings ->Arr_Flex[Counter] == Ptr_Stored_Data[Counter1].Arr_Flex[Counter])
    3812:	8a 81       	ldd	r24, Y+2	; 0x02
    3814:	28 2f       	mov	r18, r24
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	8b 81       	ldd	r24, Y+3	; 0x03
    381a:	9c 81       	ldd	r25, Y+4	; 0x04
    381c:	fc 01       	movw	r30, r24
    381e:	e2 0f       	add	r30, r18
    3820:	f3 1f       	adc	r31, r19
    3822:	40 81       	ld	r20, Z
    3824:	89 81       	ldd	r24, Y+1	; 0x01
    3826:	88 2f       	mov	r24, r24
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	9c 01       	movw	r18, r24
    382c:	22 0f       	add	r18, r18
    382e:	33 1f       	adc	r19, r19
    3830:	c9 01       	movw	r24, r18
    3832:	88 0f       	add	r24, r24
    3834:	99 1f       	adc	r25, r25
    3836:	88 0f       	add	r24, r24
    3838:	99 1f       	adc	r25, r25
    383a:	28 0f       	add	r18, r24
    383c:	39 1f       	adc	r19, r25
    383e:	8d 81       	ldd	r24, Y+5	; 0x05
    3840:	9e 81       	ldd	r25, Y+6	; 0x06
    3842:	28 0f       	add	r18, r24
    3844:	39 1f       	adc	r19, r25
    3846:	8a 81       	ldd	r24, Y+2	; 0x02
    3848:	88 2f       	mov	r24, r24
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	f9 01       	movw	r30, r18
    384e:	e8 0f       	add	r30, r24
    3850:	f9 1f       	adc	r31, r25
    3852:	80 81       	ld	r24, Z
    3854:	48 17       	cp	r20, r24
    3856:	39 f4       	brne	.+14     	; 0x3866 <Compare_Flex_Data+0xc8>
							{
//								PORTC=0x01;
//							Matching_flag= TRUE;
							Word_index= Counter1 + 1;
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	8f 5f       	subi	r24, 0xFF	; 255
    385c:	80 93 da 01 	sts	0x01DA, r24
							return 1;
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	8f 83       	std	Y+7, r24	; 0x07
    3864:	0f c0       	rjmp	.+30     	; 0x3884 <Compare_Flex_Data+0xe6>
	Word_index=0;
	for (Counter1=0; Counter1<10; Counter1++)
	{
/*			Matching_flag= FALSE;*/

		for (Counter=0; Counter<NumberOfFlexs; Counter++)
    3866:	8a 81       	ldd	r24, Y+2	; 0x02
    3868:	8f 5f       	subi	r24, 0xFF	; 255
    386a:	8a 83       	std	Y+2, r24	; 0x02
    386c:	8a 81       	ldd	r24, Y+2	; 0x02
    386e:	84 30       	cpi	r24, 0x04	; 4
    3870:	08 f4       	brcc	.+2      	; 0x3874 <Compare_Flex_Data+0xd6>
    3872:	a9 cf       	rjmp	.-174    	; 0x37c6 <Compare_Flex_Data+0x28>
{
	u8 Counter;
	u8 Counter1;
/*	u8 Matching_flag=FALSE;*/
	Word_index=0;
	for (Counter1=0; Counter1<10; Counter1++)
    3874:	89 81       	ldd	r24, Y+1	; 0x01
    3876:	8f 5f       	subi	r24, 0xFF	; 255
    3878:	89 83       	std	Y+1, r24	; 0x01
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	8a 30       	cpi	r24, 0x0A	; 10
    387e:	08 f4       	brcc	.+2      	; 0x3882 <Compare_Flex_Data+0xe4>
    3880:	a0 cf       	rjmp	.-192    	; 0x37c2 <Compare_Flex_Data+0x24>
/*
		if ( Matching_flag == TRUE)
		break;
*/
	}
	return 0;
    3882:	1f 82       	std	Y+7, r1	; 0x07
    3884:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3886:	27 96       	adiw	r28, 0x07	; 7
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	de bf       	out	0x3e, r29	; 62
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	cf 91       	pop	r28
    3894:	df 91       	pop	r29
    3896:	08 95       	ret

00003898 <__prologue_saves__>:
    3898:	2f 92       	push	r2
    389a:	3f 92       	push	r3
    389c:	4f 92       	push	r4
    389e:	5f 92       	push	r5
    38a0:	6f 92       	push	r6
    38a2:	7f 92       	push	r7
    38a4:	8f 92       	push	r8
    38a6:	9f 92       	push	r9
    38a8:	af 92       	push	r10
    38aa:	bf 92       	push	r11
    38ac:	cf 92       	push	r12
    38ae:	df 92       	push	r13
    38b0:	ef 92       	push	r14
    38b2:	ff 92       	push	r15
    38b4:	0f 93       	push	r16
    38b6:	1f 93       	push	r17
    38b8:	cf 93       	push	r28
    38ba:	df 93       	push	r29
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
    38c0:	ca 1b       	sub	r28, r26
    38c2:	db 0b       	sbc	r29, r27
    38c4:	0f b6       	in	r0, 0x3f	; 63
    38c6:	f8 94       	cli
    38c8:	de bf       	out	0x3e, r29	; 62
    38ca:	0f be       	out	0x3f, r0	; 63
    38cc:	cd bf       	out	0x3d, r28	; 61
    38ce:	09 94       	ijmp

000038d0 <__epilogue_restores__>:
    38d0:	2a 88       	ldd	r2, Y+18	; 0x12
    38d2:	39 88       	ldd	r3, Y+17	; 0x11
    38d4:	48 88       	ldd	r4, Y+16	; 0x10
    38d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    38d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    38da:	7d 84       	ldd	r7, Y+13	; 0x0d
    38dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    38de:	9b 84       	ldd	r9, Y+11	; 0x0b
    38e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    38e2:	b9 84       	ldd	r11, Y+9	; 0x09
    38e4:	c8 84       	ldd	r12, Y+8	; 0x08
    38e6:	df 80       	ldd	r13, Y+7	; 0x07
    38e8:	ee 80       	ldd	r14, Y+6	; 0x06
    38ea:	fd 80       	ldd	r15, Y+5	; 0x05
    38ec:	0c 81       	ldd	r16, Y+4	; 0x04
    38ee:	1b 81       	ldd	r17, Y+3	; 0x03
    38f0:	aa 81       	ldd	r26, Y+2	; 0x02
    38f2:	b9 81       	ldd	r27, Y+1	; 0x01
    38f4:	ce 0f       	add	r28, r30
    38f6:	d1 1d       	adc	r29, r1
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	de bf       	out	0x3e, r29	; 62
    38fe:	0f be       	out	0x3f, r0	; 63
    3900:	cd bf       	out	0x3d, r28	; 61
    3902:	ed 01       	movw	r28, r26
    3904:	08 95       	ret

00003906 <itoa>:
    3906:	fb 01       	movw	r30, r22
    3908:	9f 01       	movw	r18, r30
    390a:	e8 94       	clt
    390c:	42 30       	cpi	r20, 0x02	; 2
    390e:	c4 f0       	brlt	.+48     	; 0x3940 <itoa+0x3a>
    3910:	45 32       	cpi	r20, 0x25	; 37
    3912:	b4 f4       	brge	.+44     	; 0x3940 <itoa+0x3a>
    3914:	4a 30       	cpi	r20, 0x0A	; 10
    3916:	29 f4       	brne	.+10     	; 0x3922 <itoa+0x1c>
    3918:	97 fb       	bst	r25, 7
    391a:	1e f4       	brtc	.+6      	; 0x3922 <itoa+0x1c>
    391c:	90 95       	com	r25
    391e:	81 95       	neg	r24
    3920:	9f 4f       	sbci	r25, 0xFF	; 255
    3922:	64 2f       	mov	r22, r20
    3924:	77 27       	eor	r23, r23
    3926:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__udivmodhi4>
    392a:	80 5d       	subi	r24, 0xD0	; 208
    392c:	8a 33       	cpi	r24, 0x3A	; 58
    392e:	0c f0       	brlt	.+2      	; 0x3932 <itoa+0x2c>
    3930:	89 5d       	subi	r24, 0xD9	; 217
    3932:	81 93       	st	Z+, r24
    3934:	cb 01       	movw	r24, r22
    3936:	00 97       	sbiw	r24, 0x00	; 0
    3938:	a1 f7       	brne	.-24     	; 0x3922 <itoa+0x1c>
    393a:	16 f4       	brtc	.+4      	; 0x3940 <itoa+0x3a>
    393c:	5d e2       	ldi	r21, 0x2D	; 45
    393e:	51 93       	st	Z+, r21
    3940:	10 82       	st	Z, r1
    3942:	c9 01       	movw	r24, r18
    3944:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <strrev>

00003948 <strrev>:
    3948:	dc 01       	movw	r26, r24
    394a:	fc 01       	movw	r30, r24
    394c:	67 2f       	mov	r22, r23
    394e:	71 91       	ld	r23, Z+
    3950:	77 23       	and	r23, r23
    3952:	e1 f7       	brne	.-8      	; 0x394c <strrev+0x4>
    3954:	32 97       	sbiw	r30, 0x02	; 2
    3956:	04 c0       	rjmp	.+8      	; 0x3960 <strrev+0x18>
    3958:	7c 91       	ld	r23, X
    395a:	6d 93       	st	X+, r22
    395c:	70 83       	st	Z, r23
    395e:	62 91       	ld	r22, -Z
    3960:	ae 17       	cp	r26, r30
    3962:	bf 07       	cpc	r27, r31
    3964:	c8 f3       	brcs	.-14     	; 0x3958 <strrev+0x10>
    3966:	08 95       	ret

00003968 <__udivmodhi4>:
    3968:	aa 1b       	sub	r26, r26
    396a:	bb 1b       	sub	r27, r27
    396c:	51 e1       	ldi	r21, 0x11	; 17
    396e:	07 c0       	rjmp	.+14     	; 0x397e <__udivmodhi4_ep>

00003970 <__udivmodhi4_loop>:
    3970:	aa 1f       	adc	r26, r26
    3972:	bb 1f       	adc	r27, r27
    3974:	a6 17       	cp	r26, r22
    3976:	b7 07       	cpc	r27, r23
    3978:	10 f0       	brcs	.+4      	; 0x397e <__udivmodhi4_ep>
    397a:	a6 1b       	sub	r26, r22
    397c:	b7 0b       	sbc	r27, r23

0000397e <__udivmodhi4_ep>:
    397e:	88 1f       	adc	r24, r24
    3980:	99 1f       	adc	r25, r25
    3982:	5a 95       	dec	r21
    3984:	a9 f7       	brne	.-22     	; 0x3970 <__udivmodhi4_loop>
    3986:	80 95       	com	r24
    3988:	90 95       	com	r25
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	08 95       	ret

00003990 <_exit>:
    3990:	f8 94       	cli

00003992 <__stop_program>:
    3992:	ff cf       	rjmp	.-2      	; 0x3992 <__stop_program>
