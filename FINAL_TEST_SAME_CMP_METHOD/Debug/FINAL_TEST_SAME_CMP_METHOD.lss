
FINAL_TEST_SAME_CMP_METHOD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003622  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a6  00800060  00003622  000036b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800206  00800206  0000385c  2**0
                  ALLOC
  3 .stab         00003114  00000000  00000000  0000385c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000184a  00000000  00000000  00006970  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000081ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000837a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000858a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000ac14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000c0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000d3a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000d580  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000d87e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 19 11 	call	0x2232	; 0x2232 <main>
      8a:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	ec 58       	subi	r30, 0x8C	; 140
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <ADC_init>:
#include<avr/io.h>
#include"std_types.h"
#include "ADC.h"

void ADC_init(void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e96:	a6 e2       	ldi	r26, 0x26	; 38
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e6 e2       	ldi	r30, 0x26	; 38
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	87 68       	ori	r24, 0x87	; 135
     ea2:	8c 93       	st	X, r24
//	ADMUX|=(1<<REFS0)|(1<<REFS1)|(1<<ADLAR);
	ADMUX|=(1<<REFS0)|(1<<ADLAR);
     ea4:	a7 e2       	ldi	r26, 0x27	; 39
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e7 e2       	ldi	r30, 0x27	; 39
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 66       	ori	r24, 0x60	; 96
     eb0:	8c 93       	st	X, r24
}
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <ADC_GetResult>:

int ADC_GetResult(u8 channel)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <ADC_GetResult+0x6>
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	8b 83       	std	Y+3, r24	; 0x03
	int value;
	ADMUX &= 0b01111000;
     ec6:	a7 e2       	ldi	r26, 0x27	; 39
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e7 e2       	ldi	r30, 0x27	; 39
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	88 77       	andi	r24, 0x78	; 120
     ed2:	8c 93       	st	X, r24
	ADMUX |= (channel & (0b00000111) );
     ed4:	a7 e2       	ldi	r26, 0x27	; 39
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e7 e2       	ldi	r30, 0x27	; 39
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	98 2f       	mov	r25, r24
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	87 70       	andi	r24, 0x07	; 7
     ee4:	89 2b       	or	r24, r25
     ee6:	8c 93       	st	X, r24
	ADCSRA|= (1<<ADSC);
     ee8:	a6 e2       	ldi	r26, 0x26	; 38
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e6 e2       	ldi	r30, 0x26	; 38
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 64       	ori	r24, 0x40	; 64
     ef4:	8c 93       	st	X, r24
	while((ADCSRA & (1<<ADSC))!=0);
     ef6:	e6 e2       	ldi	r30, 0x26	; 38
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	80 74       	andi	r24, 0x40	; 64
     f02:	90 70       	andi	r25, 0x00	; 0
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	b9 f7       	brne	.-18     	; 0xef6 <ADC_GetResult+0x3e>
	value=ADCH;
     f08:	e5 e2       	ldi	r30, 0x25	; 37
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|= 0x10;
     f16:	a6 e2       	ldi	r26, 0x26	; 38
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e6 e2       	ldi	r30, 0x26	; 38
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	80 61       	ori	r24, 0x10	; 16
     f22:	8c 93       	st	X, r24
	return value;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <sendData>:

uint8 defaultBuffer[]={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	2f 97       	sbiw	r28, 0x0f	; 15
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
     f48:	1f 86       	std	Y+15, r1	; 0x0f
     f4a:	1a c0       	rjmp	.+52     	; 0xf80 <sendData+0x4c>
	{
		UART_SendByte(dataBuffer[counter]);
     f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fc 01       	movw	r30, r24
     f54:	e4 58       	subi	r30, 0x84	; 132
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	80 81       	ld	r24, Z
     f5a:	0e 94 48 1a 	call	0x3490	; 0x3490 <UART_SendByte>
		dataBuffer[counter] = defaultBuffer[counter];
     f5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	8f 85       	ldd	r24, Y+15	; 0x0f
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	fc 01       	movw	r30, r24
     f6c:	ec 58       	subi	r30, 0x8C	; 140
     f6e:	fe 4f       	sbci	r31, 0xFE	; 254
     f70:	80 81       	ld	r24, Z
     f72:	f9 01       	movw	r30, r18
     f74:	e4 58       	subi	r30, 0x84	; 132
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	80 83       	st	Z, r24
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
     f7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	8f 87       	std	Y+15, r24	; 0x0f
     f80:	8f 85       	ldd	r24, Y+15	; 0x0f
     f82:	88 30       	cpi	r24, 0x08	; 8
     f84:	18 f3       	brcs	.-58     	; 0xf4c <sendData+0x18>
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	a8 ec       	ldi	r26, 0xC8	; 200
     f8c:	b2 e4       	ldi	r27, 0x42	; 66
     f8e:	8b 87       	std	Y+11, r24	; 0x0b
     f90:	9c 87       	std	Y+12, r25	; 0x0c
     f92:	ad 87       	std	Y+13, r26	; 0x0d
     f94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f96:	6b 85       	ldd	r22, Y+11	; 0x0b
     f98:	7c 85       	ldd	r23, Y+12	; 0x0c
     f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e8       	ldi	r19, 0x80	; 128
     fa2:	4b e3       	ldi	r20, 0x3B	; 59
     fa4:	55 e4       	ldi	r21, 0x45	; 69
     fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	8f 83       	std	Y+7, r24	; 0x07
     fb0:	98 87       	std	Y+8, r25	; 0x08
     fb2:	a9 87       	std	Y+9, r26	; 0x09
     fb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fb6:	6f 81       	ldd	r22, Y+7	; 0x07
     fb8:	78 85       	ldd	r23, Y+8	; 0x08
     fba:	89 85       	ldd	r24, Y+9	; 0x09
     fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e8       	ldi	r20, 0x80	; 128
     fc4:	5f e3       	ldi	r21, 0x3F	; 63
     fc6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
     fca:	88 23       	and	r24, r24
     fcc:	2c f4       	brge	.+10     	; 0xfd8 <sendData+0xa4>
		__ticks = 1;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	9e 83       	std	Y+6, r25	; 0x06
     fd4:	8d 83       	std	Y+5, r24	; 0x05
     fd6:	3f c0       	rjmp	.+126    	; 0x1056 <sendData+0x122>
	else if (__tmp > 65535)
     fd8:	6f 81       	ldd	r22, Y+7	; 0x07
     fda:	78 85       	ldd	r23, Y+8	; 0x08
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	3f ef       	ldi	r19, 0xFF	; 255
     fe4:	4f e7       	ldi	r20, 0x7F	; 127
     fe6:	57 e4       	ldi	r21, 0x47	; 71
     fe8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
     fec:	18 16       	cp	r1, r24
     fee:	4c f5       	brge	.+82     	; 0x1042 <sendData+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e2       	ldi	r20, 0x20	; 32
     ffe:	51 e4       	ldi	r21, 0x41	; 65
    1000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	bc 01       	movw	r22, r24
    100a:	cd 01       	movw	r24, r26
    100c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	9e 83       	std	Y+6, r25	; 0x06
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	0f c0       	rjmp	.+30     	; 0x1038 <sendData+0x104>
    101a:	8c e2       	ldi	r24, 0x2C	; 44
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	9c 83       	std	Y+4, r25	; 0x04
    1020:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	9c 81       	ldd	r25, Y+4	; 0x04
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <sendData+0xf2>
    102a:	9c 83       	std	Y+4, r25	; 0x04
    102c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	9e 83       	std	Y+6, r25	; 0x06
    1036:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	69 f7       	brne	.-38     	; 0x101a <sendData+0xe6>
    1040:	14 c0       	rjmp	.+40     	; 0x106a <sendData+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1042:	6f 81       	ldd	r22, Y+7	; 0x07
    1044:	78 85       	ldd	r23, Y+8	; 0x08
    1046:	89 85       	ldd	r24, Y+9	; 0x09
    1048:	9a 85       	ldd	r25, Y+10	; 0x0a
    104a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	9e 83       	std	Y+6, r25	; 0x06
    1054:	8d 83       	std	Y+5, r24	; 0x05
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	9a 81       	ldd	r25, Y+2	; 0x02
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <sendData+0x12e>
    1066:	9a 83       	std	Y+2, r25	; 0x02
    1068:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_SendByte(dataBuffer[counter]);
		dataBuffer[counter] = defaultBuffer[counter];
	}
	_delay_ms(100);
}
    106a:	2f 96       	adiw	r28, 0x0f	; 15
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <DFPlayer_init>:

void DFPlayer_init(void)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
	/* set Digital to Analog converter (DAC) online */
	dataBuffer[3] = DAC_ONLINE ; /*command to set DAC online */
    1084:	8a e1       	ldi	r24, 0x1A	; 26
    1086:	80 93 7f 01 	sts	0x017F, r24
	sendData(); /* send this command through uart to DFPlayer module*/
    108a:	0e 94 9a 07 	call	0xf34	; 0xf34 <sendData>
}
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <DFPlayer_CMD_play>:
void DFPlayer_CMD_play(uint16 songNumber)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <DFPlayer_CMD_play+0x6>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SELECTSONG ; /* command to play song */
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	80 93 7f 01 	sts	0x017F, r24
	if(songNumber < 256)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	8f 3f       	cpi	r24, 0xFF	; 255
    10ae:	91 05       	cpc	r25, r1
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <DFPlayer_CMD_play+0x20>
    10b2:	20 f4       	brcc	.+8      	; 0x10bc <DFPlayer_CMD_play+0x28>
	{
		dataBuffer[6] = songNumber ;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	80 93 82 01 	sts	0x0182, r24
    10ba:	0b c0       	rjmp	.+22     	; 0x10d2 <DFPlayer_CMD_play+0x3e>
	}
	else
	{
		dataBuffer[6] = (uint8)songNumber;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	80 93 82 01 	sts	0x0182, r24
		dataBuffer[5] = (uint8)songNumber >> 8 ;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	89 2f       	mov	r24, r25
    10ca:	99 0f       	add	r25, r25
    10cc:	99 0b       	sbc	r25, r25
    10ce:	80 93 81 01 	sts	0x0181, r24
	}
	sendData();
    10d2:	0e 94 9a 07 	call	0xf34	; 0xf34 <sendData>
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <DFPlayer_CMD_setVolume>:


void DFPlayer_CMD_setVolume(uint8 volume)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	89 83       	std	Y+1, r24	; 0x01
	if(volume > 30)
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	8f 31       	cpi	r24, 0x1F	; 31
    10f0:	10 f0       	brcs	.+4      	; 0x10f6 <DFPlayer_CMD_setVolume+0x16>
	{
		volume = 30;
    10f2:	8e e1       	ldi	r24, 0x1E	; 30
    10f4:	89 83       	std	Y+1, r24	; 0x01
	}
	dataBuffer[3] = SPE_VOL ;
    10f6:	86 e0       	ldi	r24, 0x06	; 6
    10f8:	80 93 7f 01 	sts	0x017F, r24
	dataBuffer[6] = volume;
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	80 93 82 01 	sts	0x0182, r24
	sendData();
    1102:	0e 94 9a 07 	call	0xf34	; 0xf34 <sendData>
}
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <DFPlayer_CMD_playContinues>:
void DFPlayer_CMD_playContinues(uint8 songNumber)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SPPLAYBACKMODE ; /* command to play song continue sly */
    111a:	88 e0       	ldi	r24, 0x08	; 8
    111c:	80 93 7f 01 	sts	0x017F, r24
	if(songNumber < 256)
	{
		dataBuffer[6] = songNumber ;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	80 93 82 01 	sts	0x0182, r24
	else
	{
		dataBuffer[6] = (uint8)songNumber;
		dataBuffer[5] = (uint8)songNumber >> 8 ;
	}
	sendData();
    1126:	0e 94 9a 07 	call	0xf34	; 0xf34 <sendData>
}
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <DFPlayer_CMD_pause>:

void DFPlayer_CMD_pause(void)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PAUSE ;
    113a:	8e e0       	ldi	r24, 0x0E	; 14
    113c:	80 93 7f 01 	sts	0x017F, r24
	sendData();
    1140:	0e 94 9a 07 	call	0xf34	; 0xf34 <sendData>
}
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <DFPlayer_CMD_stop>:

void DFPlayer_CMD_stop(void)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = STOP;
    1152:	86 e1       	ldi	r24, 0x16	; 22
    1154:	80 93 7f 01 	sts	0x017F, r24
	sendData();
    1158:	0e 94 9a 07 	call	0xf34	; 0xf34 <sendData>
}
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <DFPlayer_CMD_continue>:
void DFPlayer_CMD_continue(void)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PLAYBACK;
    116a:	8d e0       	ldi	r24, 0x0D	; 13
    116c:	80 93 7f 01 	sts	0x017F, r24
	sendData();
    1170:	0e 94 9a 07 	call	0xf34	; 0xf34 <sendData>
}
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <DFPlayer_CMD_Reset>:
void DFPlayer_CMD_Reset(void)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = RESET;
    1182:	8c e0       	ldi	r24, 0x0C	; 12
    1184:	80 93 7f 01 	sts	0x017F, r24
	sendData();
    1188:	0e 94 9a 07 	call	0xf34	; 0xf34 <sendData>
}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <play_sound>:

void play_sound(uint16 Sound)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <play_sound+0x6>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
	DFPlayer_CMD_pause();
    11a0:	0e 94 99 08 	call	0x1132	; 0x1132 <DFPlayer_CMD_pause>
	DFPlayer_CMD_setVolume(30);
    11a4:	8e e1       	ldi	r24, 0x1E	; 30
    11a6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <DFPlayer_CMD_setVolume>
	DFPlayer_CMD_play(Sound);
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	0e 94 4a 08 	call	0x1094	; 0x1094 <DFPlayer_CMD_play>
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <TWI_Init>:

#include "i2c.h"
#include "LCD.h"

void TWI_Init(I2C_Prescaler Prescale , I2C_interruptState int_state , uint32 F_SCL , uint8 Address)
{
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	29 97       	sbiw	r28, 0x09	; 9
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	6a 83       	std	Y+2, r22	; 0x02
    11d8:	2b 83       	std	Y+3, r18	; 0x03
    11da:	3c 83       	std	Y+4, r19	; 0x04
    11dc:	4d 83       	std	Y+5, r20	; 0x05
    11de:	5e 83       	std	Y+6, r21	; 0x06
    11e0:	0f 83       	std	Y+7, r16	; 0x07
	TWAR = Address<<1;
    11e2:	e2 e2       	ldi	r30, 0x22	; 34
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8f 81       	ldd	r24, Y+7	; 0x07
    11e8:	88 0f       	add	r24, r24
    11ea:	80 83       	st	Z, r24
	 /*  Calculating Bit Rate: */
	switch (Prescale)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	39 87       	std	Y+9, r19	; 0x09
    11f4:	28 87       	std	Y+8, r18	; 0x08
    11f6:	88 85       	ldd	r24, Y+8	; 0x08
    11f8:	99 85       	ldd	r25, Y+9	; 0x09
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <TWI_Init+0x46>
    1200:	45 c0       	rjmp	.+138    	; 0x128c <TWI_Init+0xd0>
    1202:	e8 85       	ldd	r30, Y+8	; 0x08
    1204:	f9 85       	ldd	r31, Y+9	; 0x09
    1206:	e2 30       	cpi	r30, 0x02	; 2
    1208:	f1 05       	cpc	r31, r1
    120a:	34 f4       	brge	.+12     	; 0x1218 <TWI_Init+0x5c>
    120c:	28 85       	ldd	r18, Y+8	; 0x08
    120e:	39 85       	ldd	r19, Y+9	; 0x09
    1210:	21 15       	cp	r18, r1
    1212:	31 05       	cpc	r19, r1
    1214:	71 f0       	breq	.+28     	; 0x1232 <TWI_Init+0x76>
    1216:	e8 c0       	rjmp	.+464    	; 0x13e8 <TWI_Init+0x22c>
    1218:	88 85       	ldd	r24, Y+8	; 0x08
    121a:	99 85       	ldd	r25, Y+9	; 0x09
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	91 05       	cpc	r25, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <TWI_Init+0x68>
    1222:	65 c0       	rjmp	.+202    	; 0x12ee <TWI_Init+0x132>
    1224:	e8 85       	ldd	r30, Y+8	; 0x08
    1226:	f9 85       	ldd	r31, Y+9	; 0x09
    1228:	e3 30       	cpi	r30, 0x03	; 3
    122a:	f1 05       	cpc	r31, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <TWI_Init+0x74>
    122e:	9a c0       	rjmp	.+308    	; 0x1364 <TWI_Init+0x1a8>
    1230:	db c0       	rjmp	.+438    	; 0x13e8 <TWI_Init+0x22c>
	{
		case I2C_PRESCALE1:
								TWBR = (uint8) (((float)F_CPU/(2.0*F_SCL)) -8);
    1232:	00 e2       	ldi	r16, 0x20	; 32
    1234:	10 e0       	ldi	r17, 0x00	; 0
    1236:	6b 81       	ldd	r22, Y+3	; 0x03
    1238:	7c 81       	ldd	r23, Y+4	; 0x04
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1242:	9b 01       	movw	r18, r22
    1244:	ac 01       	movw	r20, r24
    1246:	ca 01       	movw	r24, r20
    1248:	b9 01       	movw	r22, r18
    124a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9c 01       	movw	r18, r24
    1254:	ad 01       	movw	r20, r26
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	7b e1       	ldi	r23, 0x1B	; 27
    125a:	87 e3       	ldi	r24, 0x37	; 55
    125c:	9b e4       	ldi	r25, 0x4B	; 75
    125e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	51 e4       	ldi	r21, 0x41	; 65
    1272:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	f8 01       	movw	r30, r16
    1288:	80 83       	st	Z, r24
    128a:	ae c0       	rjmp	.+348    	; 0x13e8 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE4:
								TWBR = (uint8) (((float)F_CPU/(8.0*F_SCL)) -2);
    128c:	00 e2       	ldi	r16, 0x20	; 32
    128e:	10 e0       	ldi	r17, 0x00	; 0
    1290:	6b 81       	ldd	r22, Y+3	; 0x03
    1292:	7c 81       	ldd	r23, Y+4	; 0x04
    1294:	8d 81       	ldd	r24, Y+5	; 0x05
    1296:	9e 81       	ldd	r25, Y+6	; 0x06
    1298:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	51 e4       	ldi	r21, 0x41	; 65
    12ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	9c 01       	movw	r18, r24
    12b6:	ad 01       	movw	r20, r26
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	7b e1       	ldi	r23, 0x1B	; 27
    12bc:	87 e3       	ldi	r24, 0x37	; 55
    12be:	9b e4       	ldi	r25, 0x4B	; 75
    12c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	50 e4       	ldi	r21, 0x40	; 64
    12d4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	bc 01       	movw	r22, r24
    12de:	cd 01       	movw	r24, r26
    12e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	f8 01       	movw	r30, r16
    12ea:	80 83       	st	Z, r24
    12ec:	7d c0       	rjmp	.+250    	; 0x13e8 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE16:
								TWBR = (uint8) (((float)F_CPU/(32*F_SCL)) -0.5);
    12ee:	00 e2       	ldi	r16, 0x20	; 32
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	ad 81       	ldd	r26, Y+5	; 0x05
    12f8:	be 81       	ldd	r27, Y+6	; 0x06
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	aa 1f       	adc	r26, r26
    1300:	bb 1f       	adc	r27, r27
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	aa 1f       	adc	r26, r26
    1308:	bb 1f       	adc	r27, r27
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	aa 1f       	adc	r26, r26
    1310:	bb 1f       	adc	r27, r27
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	aa 1f       	adc	r26, r26
    1318:	bb 1f       	adc	r27, r27
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	aa 1f       	adc	r26, r26
    1320:	bb 1f       	adc	r27, r27
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    132a:	9b 01       	movw	r18, r22
    132c:	ac 01       	movw	r20, r24
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	7b e1       	ldi	r23, 0x1B	; 27
    1332:	87 e3       	ldi	r24, 0x37	; 55
    1334:	9b e4       	ldi	r25, 0x4B	; 75
    1336:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	bc 01       	movw	r22, r24
    1354:	cd 01       	movw	r24, r26
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	f8 01       	movw	r30, r16
    1360:	80 83       	st	Z, r24
    1362:	42 c0       	rjmp	.+132    	; 0x13e8 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE64:
								TWBR = (uint8) (((float)F_CPU/(128*F_SCL)) -0.125);
    1364:	00 e2       	ldi	r16, 0x20	; 32
    1366:	10 e0       	ldi	r17, 0x00	; 0
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	ad 81       	ldd	r26, Y+5	; 0x05
    136e:	be 81       	ldd	r27, Y+6	; 0x06
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	aa 1f       	adc	r26, r26
    1376:	bb 1f       	adc	r27, r27
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	aa 1f       	adc	r26, r26
    137e:	bb 1f       	adc	r27, r27
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	aa 1f       	adc	r26, r26
    1386:	bb 1f       	adc	r27, r27
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	aa 1f       	adc	r26, r26
    138e:	bb 1f       	adc	r27, r27
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	aa 1f       	adc	r26, r26
    1396:	bb 1f       	adc	r27, r27
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	aa 1f       	adc	r26, r26
    139e:	bb 1f       	adc	r27, r27
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	aa 1f       	adc	r26, r26
    13a6:	bb 1f       	adc	r27, r27
    13a8:	bc 01       	movw	r22, r24
    13aa:	cd 01       	movw	r24, r26
    13ac:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    13b0:	9b 01       	movw	r18, r22
    13b2:	ac 01       	movw	r20, r24
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	7b e1       	ldi	r23, 0x1B	; 27
    13b8:	87 e3       	ldi	r24, 0x37	; 55
    13ba:	9b e4       	ldi	r25, 0x4B	; 75
    13bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	5e e3       	ldi	r21, 0x3E	; 62
    13d0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	f8 01       	movw	r30, r16
    13e6:	80 83       	st	Z, r24
		default:
					break;
	}
   
	
	TWSR |= (Prescale & 0x03);
    13e8:	a1 e2       	ldi	r26, 0x21	; 33
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e1 e2       	ldi	r30, 0x21	; 33
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	98 2f       	mov	r25, r24
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	83 70       	andi	r24, 0x03	; 3
    13f8:	89 2b       	or	r24, r25
    13fa:	8c 93       	st	X, r24
	TWCR |= (1<<TWEN) | (int_state & 0x01) ;
    13fc:	a6 e5       	ldi	r26, 0x56	; 86
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e6 e5       	ldi	r30, 0x56	; 86
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	98 2f       	mov	r25, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	81 70       	andi	r24, 0x01	; 1
    140c:	84 60       	ori	r24, 0x04	; 4
    140e:	89 2b       	or	r24, r25
    1410:	8c 93       	st	X, r24
}
    1412:	29 96       	adiw	r28, 0x09	; 9
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	08 95       	ret

00001428 <TWI_Start>:

void TWI_Start(void)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
    1430:	e6 e5       	ldi	r30, 0x56	; 86
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	84 ea       	ldi	r24, 0xA4	; 164
    1436:	80 83       	st	Z, r24
 
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    1438:	e6 e5       	ldi	r30, 0x56	; 86
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	88 23       	and	r24, r24
    1440:	dc f7       	brge	.-10     	; 0x1438 <TWI_Start+0x10>
}
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <TWI_Stop>:

void TWI_Stop(void)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
    1450:	e6 e5       	ldi	r30, 0x56	; 86
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	84 e9       	ldi	r24, 0x94	; 148
    1456:	80 83       	st	Z, r24
 
}
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <TWI_Write>:

void TWI_Write(uint8 data)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	0f 92       	push	r0
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    146a:	e3 e2       	ldi	r30, 0x23	; 35
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
   TWCR = (1<<TWEN) | (1<<TWINT);
    1472:	e6 e5       	ldi	r30, 0x56	; 86
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	84 e8       	ldi	r24, 0x84	; 132
    1478:	80 83       	st	Z, r24
   
   /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    147a:	e6 e5       	ldi	r30, 0x56	; 86
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	88 23       	and	r24, r24
    1482:	dc f7       	brge	.-10     	; 0x147a <TWI_Write+0x1c>
}
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 

    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);    
    1494:	e6 e5       	ldi	r30, 0x56	; 86
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	84 ec       	ldi	r24, 0xC4	; 196
    149a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    149c:	e6 e5       	ldi	r30, 0x56	; 86
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	88 23       	and	r24, r24
    14a4:	dc f7       	brge	.-10     	; 0x149c <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    14a6:	e3 e2       	ldi	r30, 0x23	; 35
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62



		TWCR =(1<<TWEN) | (1<<TWINT);
    14ba:	e6 e5       	ldi	r30, 0x56	; 86
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	84 e8       	ldi	r24, 0x84	; 132
    14c0:	80 83       	st	Z, r24
/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
while(BIT_IS_CLEAR(TWCR,TWINT));
    14c2:	e6 e5       	ldi	r30, 0x56	; 86
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	88 23       	and	r24, r24
    14ca:	dc f7       	brge	.-10     	; 0x14c2 <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    14cc:	e3 e2       	ldi	r30, 0x23	; 35
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
}
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    14e0:	e1 e2       	ldi	r30, 0x21	; 33
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	88 7f       	andi	r24, 0xF8	; 248
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <I2C_ByteWrite>:




void I2C_ByteWrite(uint8 SL_Address,uint8 Reg_Address ,uint8 Data )
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <I2C_ByteWrite+0x6>
    14f4:	0f 92       	push	r0
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	6a 83       	std	Y+2, r22	; 0x02
    14fe:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();
    1500:	0e 94 14 0a 	call	0x1428	; 0x1428 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    1504:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_Get_Status>
    1508:	88 30       	cpi	r24, 0x08	; 8
    150a:	19 f0       	breq	.+6      	; 0x1512 <I2C_ByteWrite+0x24>
	{
		TWI_Stop();
    150c:	0e 94 24 0a 	call	0x1448	; 0x1448 <TWI_Stop>
    1510:	21 c0       	rjmp	.+66     	; 0x1554 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write((SL_Address<<1));
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	88 0f       	add	r24, r24
    1516:	0e 94 2f 0a 	call	0x145e	; 0x145e <TWI_Write>
if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    151a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_Get_Status>
    151e:	88 31       	cpi	r24, 0x18	; 24
    1520:	19 f0       	breq	.+6      	; 0x1528 <I2C_ByteWrite+0x3a>
	{

		TWI_Stop();
    1522:	0e 94 24 0a 	call	0x1448	; 0x1448 <TWI_Stop>
    1526:	16 c0       	rjmp	.+44     	; 0x1554 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write(Reg_Address);
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	0e 94 2f 0a 	call	0x145e	; 0x145e <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    152e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_Get_Status>
    1532:	88 32       	cpi	r24, 0x28	; 40
    1534:	19 f0       	breq	.+6      	; 0x153c <I2C_ByteWrite+0x4e>
	{
		TWI_Stop();
    1536:	0e 94 24 0a 	call	0x1448	; 0x1448 <TWI_Stop>
    153a:	0c c0       	rjmp	.+24     	; 0x1554 <I2C_ByteWrite+0x66>
		return ;
	}
	
TWI_Write(Data);
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	0e 94 2f 0a 	call	0x145e	; 0x145e <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1542:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_Get_Status>
    1546:	88 32       	cpi	r24, 0x28	; 40
    1548:	19 f0       	breq	.+6      	; 0x1550 <I2C_ByteWrite+0x62>
	{

		TWI_Stop();
    154a:	0e 94 24 0a 	call	0x1448	; 0x1448 <TWI_Stop>
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
    1550:	0e 94 24 0a 	call	0x1448	; 0x1448 <TWI_Stop>
	return ;

}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <I2C_ByteRead>:

 

 
uint8 I2C_ByteRead(uint8 SL_Address , uint8 Reg_Address)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	00 d0       	rcall	.+0      	; 0x1566 <I2C_ByteRead+0x6>
    1566:	00 d0       	rcall	.+0      	; 0x1568 <I2C_ByteRead+0x8>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	8a 83       	std	Y+2, r24	; 0x02
    156e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Data=0;
    1570:	19 82       	std	Y+1, r1	; 0x01
	
	
	TWI_Start();
    1572:	0e 94 14 0a 	call	0x1428	; 0x1428 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    1576:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_Get_Status>
    157a:	88 30       	cpi	r24, 0x08	; 8
    157c:	29 f0       	breq	.+10     	; 0x1588 <I2C_ByteRead+0x28>
	{
		TWI_Stop();
    157e:	0e 94 24 0a 	call	0x1448	; 0x1448 <TWI_Stop>
		return 1;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	8c 83       	std	Y+4, r24	; 0x04
    1586:	3c c0       	rjmp	.+120    	; 0x1600 <I2C_ByteRead+0xa0>
	}
	
	
	TWI_Write((SL_Address<<1));
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	88 0f       	add	r24, r24
    158c:	0e 94 2f 0a 	call	0x145e	; 0x145e <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    1590:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_Get_Status>
    1594:	88 31       	cpi	r24, 0x18	; 24
    1596:	29 f0       	breq	.+10     	; 0x15a2 <I2C_ByteRead+0x42>
	{

		TWI_Stop();
    1598:	0e 94 24 0a 	call	0x1448	; 0x1448 <TWI_Stop>
		return 2;
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	8c 83       	std	Y+4, r24	; 0x04
    15a0:	2f c0       	rjmp	.+94     	; 0x1600 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write(Reg_Address);
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	0e 94 2f 0a 	call	0x145e	; 0x145e <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    15a8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_Get_Status>
    15ac:	88 32       	cpi	r24, 0x28	; 40
    15ae:	29 f0       	breq	.+10     	; 0x15ba <I2C_ByteRead+0x5a>
	{
		TWI_Stop();
    15b0:	0e 94 24 0a 	call	0x1448	; 0x1448 <TWI_Stop>
		return 3;
    15b4:	83 e0       	ldi	r24, 0x03	; 3
    15b6:	8c 83       	std	Y+4, r24	; 0x04
    15b8:	23 c0       	rjmp	.+70     	; 0x1600 <I2C_ByteRead+0xa0>
	}
	
	TWI_Start();
    15ba:	0e 94 14 0a 	call	0x1428	; 0x1428 <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    15be:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_Get_Status>
    15c2:	80 31       	cpi	r24, 0x10	; 16
    15c4:	29 f0       	breq	.+10     	; 0x15d0 <I2C_ByteRead+0x70>
	{
		TWI_Stop();
    15c6:	0e 94 24 0a 	call	0x1448	; 0x1448 <TWI_Stop>
		return 4;
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	8c 83       	std	Y+4, r24	; 0x04
    15ce:	18 c0       	rjmp	.+48     	; 0x1600 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write((SL_Address<<1) | READ);
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	81 60       	ori	r24, 0x01	; 1
    15dc:	0e 94 2f 0a 	call	0x145e	; 0x145e <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    15e0:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_Get_Status>
    15e4:	80 34       	cpi	r24, 0x40	; 64
    15e6:	29 f0       	breq	.+10     	; 0x15f2 <I2C_ByteRead+0x92>
	{

		TWI_Stop();
    15e8:	0e 94 24 0a 	call	0x1448	; 0x1448 <TWI_Stop>
		return 5;
    15ec:	85 e0       	ldi	r24, 0x05	; 5
    15ee:	8c 83       	std	Y+4, r24	; 0x04
    15f0:	07 c0       	rjmp	.+14     	; 0x1600 <I2C_ByteRead+0xa0>
	}
	Data=TWI_Read_With_NACK();
    15f2:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <TWI_Read_With_NACK>
    15f6:	89 83       	std	Y+1, r24	; 0x01
	TWI_Stop();
    15f8:	0e 94 24 0a 	call	0x1448	; 0x1448 <TWI_Stop>
	
	return Data;		
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	8c 83       	std	Y+4, r24	; 0x04
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <LCD_Init>:
#include <util/delay.h>
#include "BIT_MATH.h"
#include"lcd.h"

void LCD_Init(void)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	e8 97       	sbiw	r28, 0x38	; 56
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 e2       	ldi	r26, 0x20	; 32
    162a:	b2 e4       	ldi	r27, 0x42	; 66
    162c:	8d ab       	std	Y+53, r24	; 0x35
    162e:	9e ab       	std	Y+54, r25	; 0x36
    1630:	af ab       	std	Y+55, r26	; 0x37
    1632:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1634:	6d a9       	ldd	r22, Y+53	; 0x35
    1636:	7e a9       	ldd	r23, Y+54	; 0x36
    1638:	8f a9       	ldd	r24, Y+55	; 0x37
    163a:	98 ad       	ldd	r25, Y+56	; 0x38
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e8       	ldi	r19, 0x80	; 128
    1640:	4b e3       	ldi	r20, 0x3B	; 59
    1642:	55 e4       	ldi	r21, 0x45	; 69
    1644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	89 ab       	std	Y+49, r24	; 0x31
    164e:	9a ab       	std	Y+50, r25	; 0x32
    1650:	ab ab       	std	Y+51, r26	; 0x33
    1652:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1654:	69 a9       	ldd	r22, Y+49	; 0x31
    1656:	7a a9       	ldd	r23, Y+50	; 0x32
    1658:	8b a9       	ldd	r24, Y+51	; 0x33
    165a:	9c a9       	ldd	r25, Y+52	; 0x34
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1668:	88 23       	and	r24, r24
    166a:	2c f4       	brge	.+10     	; 0x1676 <LCD_Init+0x66>
		__ticks = 1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	98 ab       	std	Y+48, r25	; 0x30
    1672:	8f a7       	std	Y+47, r24	; 0x2f
    1674:	3f c0       	rjmp	.+126    	; 0x16f4 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    1676:	69 a9       	ldd	r22, Y+49	; 0x31
    1678:	7a a9       	ldd	r23, Y+50	; 0x32
    167a:	8b a9       	ldd	r24, Y+51	; 0x33
    167c:	9c a9       	ldd	r25, Y+52	; 0x34
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	3f ef       	ldi	r19, 0xFF	; 255
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	57 e4       	ldi	r21, 0x47	; 71
    1686:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    168a:	18 16       	cp	r1, r24
    168c:	4c f5       	brge	.+82     	; 0x16e0 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168e:	6d a9       	ldd	r22, Y+53	; 0x35
    1690:	7e a9       	ldd	r23, Y+54	; 0x36
    1692:	8f a9       	ldd	r24, Y+55	; 0x37
    1694:	98 ad       	ldd	r25, Y+56	; 0x38
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	98 ab       	std	Y+48, r25	; 0x30
    16b4:	8f a7       	std	Y+47, r24	; 0x2f
    16b6:	0f c0       	rjmp	.+30     	; 0x16d6 <LCD_Init+0xc6>
    16b8:	8c e2       	ldi	r24, 0x2C	; 44
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	9e a7       	std	Y+46, r25	; 0x2e
    16be:	8d a7       	std	Y+45, r24	; 0x2d
    16c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    16c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <LCD_Init+0xb4>
    16c8:	9e a7       	std	Y+46, r25	; 0x2e
    16ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ce:	98 a9       	ldd	r25, Y+48	; 0x30
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	98 ab       	std	Y+48, r25	; 0x30
    16d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d8:	98 a9       	ldd	r25, Y+48	; 0x30
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	69 f7       	brne	.-38     	; 0x16b8 <LCD_Init+0xa8>
    16de:	14 c0       	rjmp	.+40     	; 0x1708 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e0:	69 a9       	ldd	r22, Y+49	; 0x31
    16e2:	7a a9       	ldd	r23, Y+50	; 0x32
    16e4:	8b a9       	ldd	r24, Y+51	; 0x33
    16e6:	9c a9       	ldd	r25, Y+52	; 0x34
    16e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	98 ab       	std	Y+48, r25	; 0x30
    16f2:	8f a7       	std	Y+47, r24	; 0x2f
    16f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f6:	98 a9       	ldd	r25, Y+48	; 0x30
    16f8:	9c a7       	std	Y+44, r25	; 0x2c
    16fa:	8b a7       	std	Y+43, r24	; 0x2b
    16fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    16fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <LCD_Init+0xf0>
    1704:	9c a7       	std	Y+44, r25	; 0x2c
    1706:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_SendCommand (0b00111100);
    1708:	8c e3       	ldi	r24, 0x3C	; 60
    170a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a0 e4       	ldi	r26, 0x40	; 64
    1714:	b0 e4       	ldi	r27, 0x40	; 64
    1716:	8f a3       	std	Y+39, r24	; 0x27
    1718:	98 a7       	std	Y+40, r25	; 0x28
    171a:	a9 a7       	std	Y+41, r26	; 0x29
    171c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171e:	6f a1       	ldd	r22, Y+39	; 0x27
    1720:	78 a5       	ldd	r23, Y+40	; 0x28
    1722:	89 a5       	ldd	r24, Y+41	; 0x29
    1724:	9a a5       	ldd	r25, Y+42	; 0x2a
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e8       	ldi	r19, 0x80	; 128
    172a:	4b e3       	ldi	r20, 0x3B	; 59
    172c:	55 e4       	ldi	r21, 0x45	; 69
    172e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	8b a3       	std	Y+35, r24	; 0x23
    1738:	9c a3       	std	Y+36, r25	; 0x24
    173a:	ad a3       	std	Y+37, r26	; 0x25
    173c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    173e:	6b a1       	ldd	r22, Y+35	; 0x23
    1740:	7c a1       	ldd	r23, Y+36	; 0x24
    1742:	8d a1       	ldd	r24, Y+37	; 0x25
    1744:	9e a1       	ldd	r25, Y+38	; 0x26
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1752:	88 23       	and	r24, r24
    1754:	2c f4       	brge	.+10     	; 0x1760 <LCD_Init+0x150>
		__ticks = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9a a3       	std	Y+34, r25	; 0x22
    175c:	89 a3       	std	Y+33, r24	; 0x21
    175e:	3f c0       	rjmp	.+126    	; 0x17de <LCD_Init+0x1ce>
	else if (__tmp > 65535)
    1760:	6b a1       	ldd	r22, Y+35	; 0x23
    1762:	7c a1       	ldd	r23, Y+36	; 0x24
    1764:	8d a1       	ldd	r24, Y+37	; 0x25
    1766:	9e a1       	ldd	r25, Y+38	; 0x26
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	3f ef       	ldi	r19, 0xFF	; 255
    176c:	4f e7       	ldi	r20, 0x7F	; 127
    176e:	57 e4       	ldi	r21, 0x47	; 71
    1770:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1774:	18 16       	cp	r1, r24
    1776:	4c f5       	brge	.+82     	; 0x17ca <LCD_Init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1778:	6f a1       	ldd	r22, Y+39	; 0x27
    177a:	78 a5       	ldd	r23, Y+40	; 0x28
    177c:	89 a5       	ldd	r24, Y+41	; 0x29
    177e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e2       	ldi	r20, 0x20	; 32
    1786:	51 e4       	ldi	r21, 0x41	; 65
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9a a3       	std	Y+34, r25	; 0x22
    179e:	89 a3       	std	Y+33, r24	; 0x21
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <LCD_Init+0x1b0>
    17a2:	8c e2       	ldi	r24, 0x2C	; 44
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	98 a3       	std	Y+32, r25	; 0x20
    17a8:	8f 8f       	std	Y+31, r24	; 0x1f
    17aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17ac:	98 a1       	ldd	r25, Y+32	; 0x20
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_Init+0x19e>
    17b2:	98 a3       	std	Y+32, r25	; 0x20
    17b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b6:	89 a1       	ldd	r24, Y+33	; 0x21
    17b8:	9a a1       	ldd	r25, Y+34	; 0x22
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	9a a3       	std	Y+34, r25	; 0x22
    17be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c0:	89 a1       	ldd	r24, Y+33	; 0x21
    17c2:	9a a1       	ldd	r25, Y+34	; 0x22
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <LCD_Init+0x192>
    17c8:	14 c0       	rjmp	.+40     	; 0x17f2 <LCD_Init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ca:	6b a1       	ldd	r22, Y+35	; 0x23
    17cc:	7c a1       	ldd	r23, Y+36	; 0x24
    17ce:	8d a1       	ldd	r24, Y+37	; 0x25
    17d0:	9e a1       	ldd	r25, Y+38	; 0x26
    17d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9a a3       	std	Y+34, r25	; 0x22
    17dc:	89 a3       	std	Y+33, r24	; 0x21
    17de:	89 a1       	ldd	r24, Y+33	; 0x21
    17e0:	9a a1       	ldd	r25, Y+34	; 0x22
    17e2:	9e 8f       	std	Y+30, r25	; 0x1e
    17e4:	8d 8f       	std	Y+29, r24	; 0x1d
    17e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCD_Init+0x1da>
    17ee:	9e 8f       	std	Y+30, r25	; 0x1e
    17f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);
	LCD_SendCommand(0b00001100);
    17f2:	8c e0       	ldi	r24, 0x0C	; 12
    17f4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e4       	ldi	r26, 0x40	; 64
    17fe:	b0 e4       	ldi	r27, 0x40	; 64
    1800:	89 8f       	std	Y+25, r24	; 0x19
    1802:	9a 8f       	std	Y+26, r25	; 0x1a
    1804:	ab 8f       	std	Y+27, r26	; 0x1b
    1806:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	69 8d       	ldd	r22, Y+25	; 0x19
    180a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e8       	ldi	r19, 0x80	; 128
    1814:	4b e3       	ldi	r20, 0x3B	; 59
    1816:	55 e4       	ldi	r21, 0x45	; 69
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8d 8b       	std	Y+21, r24	; 0x15
    1822:	9e 8b       	std	Y+22, r25	; 0x16
    1824:	af 8b       	std	Y+23, r26	; 0x17
    1826:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1828:	6d 89       	ldd	r22, Y+21	; 0x15
    182a:	7e 89       	ldd	r23, Y+22	; 0x16
    182c:	8f 89       	ldd	r24, Y+23	; 0x17
    182e:	98 8d       	ldd	r25, Y+24	; 0x18
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <LCD_Init+0x23a>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9c 8b       	std	Y+20, r25	; 0x14
    1846:	8b 8b       	std	Y+19, r24	; 0x13
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <LCD_Init+0x2b8>
	else if (__tmp > 65535)
    184a:	6d 89       	ldd	r22, Y+21	; 0x15
    184c:	7e 89       	ldd	r23, Y+22	; 0x16
    184e:	8f 89       	ldd	r24, Y+23	; 0x17
    1850:	98 8d       	ldd	r25, Y+24	; 0x18
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <LCD_Init+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	69 8d       	ldd	r22, Y+25	; 0x19
    1864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <LCD_Init+0x29a>
    188c:	8c e2       	ldi	r24, 0x2C	; 44
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	9a 8b       	std	Y+18, r25	; 0x12
    1892:	89 8b       	std	Y+17, r24	; 0x11
    1894:	89 89       	ldd	r24, Y+17	; 0x11
    1896:	9a 89       	ldd	r25, Y+18	; 0x12
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <LCD_Init+0x288>
    189c:	9a 8b       	std	Y+18, r25	; 0x12
    189e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8b 89       	ldd	r24, Y+19	; 0x13
    18a2:	9c 89       	ldd	r25, Y+20	; 0x14
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9c 8b       	std	Y+20, r25	; 0x14
    18a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8b 89       	ldd	r24, Y+19	; 0x13
    18ac:	9c 89       	ldd	r25, Y+20	; 0x14
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <LCD_Init+0x27c>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <LCD_Init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	6d 89       	ldd	r22, Y+21	; 0x15
    18b6:	7e 89       	ldd	r23, Y+22	; 0x16
    18b8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ba:	98 8d       	ldd	r25, Y+24	; 0x18
    18bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9c 8b       	std	Y+20, r25	; 0x14
    18c6:	8b 8b       	std	Y+19, r24	; 0x13
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	98 8b       	std	Y+16, r25	; 0x10
    18ce:	8f 87       	std	Y+15, r24	; 0x0f
    18d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d2:	98 89       	ldd	r25, Y+16	; 0x10
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <LCD_Init+0x2c4>
    18d8:	98 8b       	std	Y+16, r25	; 0x10
    18da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	LCD_SendCommand (0b00000001);
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a0 e4       	ldi	r26, 0x40	; 64
    18e8:	b0 e4       	ldi	r27, 0x40	; 64
    18ea:	8b 87       	std	Y+11, r24	; 0x0b
    18ec:	9c 87       	std	Y+12, r25	; 0x0c
    18ee:	ad 87       	std	Y+13, r26	; 0x0d
    18f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e8       	ldi	r19, 0x80	; 128
    18fe:	4b e3       	ldi	r20, 0x3B	; 59
    1900:	55 e4       	ldi	r21, 0x45	; 69
    1902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	8f 83       	std	Y+7, r24	; 0x07
    190c:	98 87       	std	Y+8, r25	; 0x08
    190e:	a9 87       	std	Y+9, r26	; 0x09
    1910:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1912:	6f 81       	ldd	r22, Y+7	; 0x07
    1914:	78 85       	ldd	r23, Y+8	; 0x08
    1916:	89 85       	ldd	r24, Y+9	; 0x09
    1918:	9a 85       	ldd	r25, Y+10	; 0x0a
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e8       	ldi	r20, 0x80	; 128
    1920:	5f e3       	ldi	r21, 0x3F	; 63
    1922:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1926:	88 23       	and	r24, r24
    1928:	2c f4       	brge	.+10     	; 0x1934 <LCD_Init+0x324>
		__ticks = 1;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	3f c0       	rjmp	.+126    	; 0x19b2 <LCD_Init+0x3a2>
	else if (__tmp > 65535)
    1934:	6f 81       	ldd	r22, Y+7	; 0x07
    1936:	78 85       	ldd	r23, Y+8	; 0x08
    1938:	89 85       	ldd	r24, Y+9	; 0x09
    193a:	9a 85       	ldd	r25, Y+10	; 0x0a
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	4c f5       	brge	.+82     	; 0x199e <LCD_Init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194c:	6b 85       	ldd	r22, Y+11	; 0x0b
    194e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1950:	8d 85       	ldd	r24, Y+13	; 0x0d
    1952:	9e 85       	ldd	r25, Y+14	; 0x0e
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	51 e4       	ldi	r21, 0x41	; 65
    195c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <LCD_Init+0x384>
    1976:	8c e2       	ldi	r24, 0x2C	; 44
    1978:	91 e0       	ldi	r25, 0x01	; 1
    197a:	9c 83       	std	Y+4, r25	; 0x04
    197c:	8b 83       	std	Y+3, r24	; 0x03
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	9c 81       	ldd	r25, Y+4	; 0x04
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <LCD_Init+0x372>
    1986:	9c 83       	std	Y+4, r25	; 0x04
    1988:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	9e 83       	std	Y+6, r25	; 0x06
    1992:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	9e 81       	ldd	r25, Y+6	; 0x06
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	69 f7       	brne	.-38     	; 0x1976 <LCD_Init+0x366>
    199c:	14 c0       	rjmp	.+40     	; 0x19c6 <LCD_Init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199e:	6f 81       	ldd	r22, Y+7	; 0x07
    19a0:	78 85       	ldd	r23, Y+8	; 0x08
    19a2:	89 85       	ldd	r24, Y+9	; 0x09
    19a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9e 83       	std	Y+6, r25	; 0x06
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <LCD_Init+0x3ae>
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    19c6:	e8 96       	adiw	r28, 0x38	; 56
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <LCD_SendCommand>:

 void LCD_SendCommand(u8 command)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	2f 97       	sbiw	r28, 0x0f	; 15
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    19ee:	a8 e3       	ldi	r26, 0x38	; 56
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e8 e3       	ldi	r30, 0x38	; 56
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8e 7f       	andi	r24, 0xFE	; 254
    19fa:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    19fc:	a8 e3       	ldi	r26, 0x38	; 56
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e8 e3       	ldi	r30, 0x38	; 56
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	8d 7f       	andi	r24, 0xFD	; 253
    1a08:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RS_Pin);
    1a0a:	a8 e3       	ldi	r26, 0x38	; 56
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e8 e3       	ldi	r30, 0x38	; 56
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8b 7f       	andi	r24, 0xFB	; 251
    1a16:	8c 93       	st	X, r24

	LCD_DataPORT= command;
    1a18:	e2 e3       	ldi	r30, 0x32	; 50
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a1e:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    1a20:	a8 e3       	ldi	r26, 0x38	; 56
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e8 e3       	ldi	r30, 0x38	; 56
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	81 60       	ori	r24, 0x01	; 1
    1a2c:	8c 93       	st	X, r24
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a0 e0       	ldi	r26, 0x00	; 0
    1a34:	b0 e4       	ldi	r27, 0x40	; 64
    1a36:	8b 87       	std	Y+11, r24	; 0x0b
    1a38:	9c 87       	std	Y+12, r25	; 0x0c
    1a3a:	ad 87       	std	Y+13, r26	; 0x0d
    1a3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e8       	ldi	r19, 0x80	; 128
    1a4a:	4b e3       	ldi	r20, 0x3B	; 59
    1a4c:	55 e4       	ldi	r21, 0x45	; 69
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	8f 83       	std	Y+7, r24	; 0x07
    1a58:	98 87       	std	Y+8, r25	; 0x08
    1a5a:	a9 87       	std	Y+9, r26	; 0x09
    1a5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a60:	78 85       	ldd	r23, Y+8	; 0x08
    1a62:	89 85       	ldd	r24, Y+9	; 0x09
    1a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <LCD_SendCommand+0xa8>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	3f c0       	rjmp	.+126    	; 0x1afe <LCD_SendCommand+0x126>
	else if (__tmp > 65535)
    1a80:	6f 81       	ldd	r22, Y+7	; 0x07
    1a82:	78 85       	ldd	r23, Y+8	; 0x08
    1a84:	89 85       	ldd	r24, Y+9	; 0x09
    1a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	4f e7       	ldi	r20, 0x7F	; 127
    1a8e:	57 e4       	ldi	r21, 0x47	; 71
    1a90:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	4c f5       	brge	.+82     	; 0x1aea <LCD_SendCommand+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <LCD_SendCommand+0x108>
    1ac2:	8c e2       	ldi	r24, 0x2C	; 44
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	9c 83       	std	Y+4, r25	; 0x04
    1ac8:	8b 83       	std	Y+3, r24	; 0x03
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <LCD_SendCommand+0xf6>
    1ad2:	9c 83       	std	Y+4, r25	; 0x04
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	69 f7       	brne	.-38     	; 0x1ac2 <LCD_SendCommand+0xea>
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <LCD_SendCommand+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	6f 81       	ldd	r22, Y+7	; 0x07
    1aec:	78 85       	ldd	r23, Y+8	; 0x08
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_SendCommand+0x132>
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1b12:	a8 e3       	ldi	r26, 0x38	; 56
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e8 e3       	ldi	r30, 0x38	; 56
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	8e 7f       	andi	r24, 0xFE	; 254
    1b1e:	8c 93       	st	X, r24
}
    1b20:	2f 96       	adiw	r28, 0x0f	; 15
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <LCD_Clear>:

 void LCD_Clear (void)
 {
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
	 LCD_SendCommand(1);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
 }
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <LCD_WriteData>:

 void LCD_WriteData(u8 data)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	2f 97       	sbiw	r28, 0x0f	; 15
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1b5c:	a8 e3       	ldi	r26, 0x38	; 56
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e8 e3       	ldi	r30, 0x38	; 56
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	8e 7f       	andi	r24, 0xFE	; 254
    1b68:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    1b6a:	a8 e3       	ldi	r26, 0x38	; 56
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e8 e3       	ldi	r30, 0x38	; 56
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	8d 7f       	andi	r24, 0xFD	; 253
    1b76:	8c 93       	st	X, r24
	SETBIT (LCD_ControlPORT, RS_Pin);
    1b78:	a8 e3       	ldi	r26, 0x38	; 56
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e8 e3       	ldi	r30, 0x38	; 56
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	84 60       	ori	r24, 0x04	; 4
    1b84:	8c 93       	st	X, r24

	LCD_DataPORT= data;
    1b86:	e2 e3       	ldi	r30, 0x32	; 50
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8c:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    1b8e:	a8 e3       	ldi	r26, 0x38	; 56
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e8 e3       	ldi	r30, 0x38	; 56
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	81 60       	ori	r24, 0x01	; 1
    1b9a:	8c 93       	st	X, r24
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e4       	ldi	r27, 0x40	; 64
    1ba4:	8b 87       	std	Y+11, r24	; 0x0b
    1ba6:	9c 87       	std	Y+12, r25	; 0x0c
    1ba8:	ad 87       	std	Y+13, r26	; 0x0d
    1baa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e8       	ldi	r19, 0x80	; 128
    1bb8:	4b e3       	ldi	r20, 0x3B	; 59
    1bba:	55 e4       	ldi	r21, 0x45	; 69
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8f 83       	std	Y+7, r24	; 0x07
    1bc6:	98 87       	std	Y+8, r25	; 0x08
    1bc8:	a9 87       	std	Y+9, r26	; 0x09
    1bca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	5f e3       	ldi	r21, 0x3F	; 63
    1bdc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1be0:	88 23       	and	r24, r24
    1be2:	2c f4       	brge	.+10     	; 0x1bee <LCD_WriteData+0xa8>
		__ticks = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <LCD_WriteData+0x126>
	else if (__tmp > 65535)
    1bee:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf0:	78 85       	ldd	r23, Y+8	; 0x08
    1bf2:	89 85       	ldd	r24, Y+9	; 0x09
    1bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	4c f5       	brge	.+82     	; 0x1c58 <LCD_WriteData+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e2       	ldi	r20, 0x20	; 32
    1c14:	51 e4       	ldi	r21, 0x41	; 65
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <LCD_WriteData+0x108>
    1c30:	8c e2       	ldi	r24, 0x2C	; 44
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	9c 83       	std	Y+4, r25	; 0x04
    1c36:	8b 83       	std	Y+3, r24	; 0x03
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_WriteData+0xf6>
    1c40:	9c 83       	std	Y+4, r25	; 0x04
    1c42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	8d 81       	ldd	r24, Y+5	; 0x05
    1c46:	9e 81       	ldd	r25, Y+6	; 0x06
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <LCD_WriteData+0xea>
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <LCD_WriteData+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_WriteData+0x132>
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1c80:	a8 e3       	ldi	r26, 0x38	; 56
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e8 e3       	ldi	r30, 0x38	; 56
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8e 7f       	andi	r24, 0xFE	; 254
    1c8c:	8c 93       	st	X, r24
}
    1c8e:	2f 96       	adiw	r28, 0x0f	; 15
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <LCD_WriteString>:

void LCD_WriteString(u8* pu8StringCpy)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	61 97       	sbiw	r28, 0x11	; 17
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	99 8b       	std	Y+17, r25	; 0x11
    1cb6:	88 8b       	std	Y+16, r24	; 0x10

  /* Local loop index */
  u8 u8Index = 0;
    1cb8:	1f 86       	std	Y+15, r1	; 0x0f
    1cba:	80 c0       	rjmp	.+256    	; 0x1dbc <LCD_WriteString+0x11c>

  while (pu8StringCpy [u8Index] != 0)
  {
    /* Write Character on LCD */
    LCD_WriteData (pu8StringCpy [u8Index]);
    1cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	88 89       	ldd	r24, Y+16	; 0x10
    1cc4:	99 89       	ldd	r25, Y+17	; 0x11
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	e2 0f       	add	r30, r18
    1cca:	f3 1f       	adc	r31, r19
    1ccc:	80 81       	ld	r24, Z
    1cce:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_WriteData>

    /* Increment local loop index */
    u8Index++;
    1cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	8f 87       	std	Y+15, r24	; 0x0f
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 e0       	ldi	r26, 0x00	; 0
    1cde:	b0 e4       	ldi	r27, 0x40	; 64
    1ce0:	8b 87       	std	Y+11, r24	; 0x0b
    1ce2:	9c 87       	std	Y+12, r25	; 0x0c
    1ce4:	ad 87       	std	Y+13, r26	; 0x0d
    1ce6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e8       	ldi	r19, 0x80	; 128
    1cf4:	4b e3       	ldi	r20, 0x3B	; 59
    1cf6:	55 e4       	ldi	r21, 0x45	; 69
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	8f 83       	std	Y+7, r24	; 0x07
    1d02:	98 87       	std	Y+8, r25	; 0x08
    1d04:	a9 87       	std	Y+9, r26	; 0x09
    1d06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d08:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0a:	78 85       	ldd	r23, Y+8	; 0x08
    1d0c:	89 85       	ldd	r24, Y+9	; 0x09
    1d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <LCD_WriteString+0x8a>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <LCD_WriteString+0x108>
	else if (__tmp > 65535)
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <LCD_WriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9e 83       	std	Y+6, r25	; 0x06
    1d68:	8d 83       	std	Y+5, r24	; 0x05
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <LCD_WriteString+0xea>
    1d6c:	8c e2       	ldi	r24, 0x2C	; 44
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	9c 83       	std	Y+4, r25	; 0x04
    1d72:	8b 83       	std	Y+3, r24	; 0x03
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_WriteString+0xd8>
    1d7c:	9c 83       	std	Y+4, r25	; 0x04
    1d7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8d 81       	ldd	r24, Y+5	; 0x05
    1d82:	9e 81       	ldd	r25, Y+6	; 0x06
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	9e 83       	std	Y+6, r25	; 0x06
    1d88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <LCD_WriteString+0xcc>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <LCD_WriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	6f 81       	ldd	r22, Y+7	; 0x07
    1d96:	78 85       	ldd	r23, Y+8	; 0x08
    1d98:	89 85       	ldd	r24, Y+9	; 0x09
    1d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	8d 81       	ldd	r24, Y+5	; 0x05
    1daa:	9e 81       	ldd	r25, Y+6	; 0x06
    1dac:	9a 83       	std	Y+2, r25	; 0x02
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_WriteString+0x114>
    1db8:	9a 83       	std	Y+2, r25	; 0x02
    1dba:	89 83       	std	Y+1, r24	; 0x01
{

  /* Local loop index */
  u8 u8Index = 0;

  while (pu8StringCpy [u8Index] != 0)
    1dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	88 89       	ldd	r24, Y+16	; 0x10
    1dc4:	99 89       	ldd	r25, Y+17	; 0x11
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	80 81       	ld	r24, Z
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <LCD_WriteString+0x134>
    1dd2:	74 cf       	rjmp	.-280    	; 0x1cbc <LCD_WriteString+0x1c>

    /* Delay to let the LCD show the character */
    _delay_ms(2);
  }

}
    1dd4:	61 96       	adiw	r28, 0x11	; 17
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <LCD_Goto_xy>:

void LCD_Goto_xy(u8 x, u8 y)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	64 97       	sbiw	r28, 0x14	; 20
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
    1dfc:	6c 8b       	std	Y+20, r22	; 0x14
	u8 firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
    1dfe:	80 e8       	ldi	r24, 0x80	; 128
    1e00:	8f 87       	std	Y+15, r24	; 0x0f
    1e02:	80 ec       	ldi	r24, 0xC0	; 192
    1e04:	88 8b       	std	Y+16, r24	; 0x10
    1e06:	84 e9       	ldi	r24, 0x94	; 148
    1e08:	89 8b       	std	Y+17, r24	; 0x11
    1e0a:	84 ed       	ldi	r24, 0xD4	; 212
    1e0c:	8a 8b       	std	Y+18, r24	; 0x12
	LCD_SendCommand (firstcharAdr[y-1] + x - 1);
    1e0e:	8c 89       	ldd	r24, Y+20	; 0x14
    1e10:	88 2f       	mov	r24, r24
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9c 01       	movw	r18, r24
    1e16:	21 50       	subi	r18, 0x01	; 1
    1e18:	30 40       	sbci	r19, 0x00	; 0
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	0f 96       	adiw	r24, 0x0f	; 15
    1e1e:	fc 01       	movw	r30, r24
    1e20:	e2 0f       	add	r30, r18
    1e22:	f3 1f       	adc	r31, r19
    1e24:	90 81       	ld	r25, Z
    1e26:	8b 89       	ldd	r24, Y+19	; 0x13
    1e28:	89 0f       	add	r24, r25
    1e2a:	81 50       	subi	r24, 0x01	; 1
    1e2c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a0 e8       	ldi	r26, 0x80	; 128
    1e36:	bf e3       	ldi	r27, 0x3F	; 63
    1e38:	8b 87       	std	Y+11, r24	; 0x0b
    1e3a:	9c 87       	std	Y+12, r25	; 0x0c
    1e3c:	ad 87       	std	Y+13, r26	; 0x0d
    1e3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e8       	ldi	r19, 0x80	; 128
    1e4c:	4b e3       	ldi	r20, 0x3B	; 59
    1e4e:	55 e4       	ldi	r21, 0x45	; 69
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	8f 83       	std	Y+7, r24	; 0x07
    1e5a:	98 87       	std	Y+8, r25	; 0x08
    1e5c:	a9 87       	std	Y+9, r26	; 0x09
    1e5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	78 85       	ldd	r23, Y+8	; 0x08
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
    1e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e8       	ldi	r20, 0x80	; 128
    1e6e:	5f e3       	ldi	r21, 0x3F	; 63
    1e70:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e74:	88 23       	and	r24, r24
    1e76:	2c f4       	brge	.+10     	; 0x1e82 <LCD_Goto_xy+0x9c>
		__ticks = 1;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
    1e80:	3f c0       	rjmp	.+126    	; 0x1f00 <LCD_Goto_xy+0x11a>
	else if (__tmp > 65535)
    1e82:	6f 81       	ldd	r22, Y+7	; 0x07
    1e84:	78 85       	ldd	r23, Y+8	; 0x08
    1e86:	89 85       	ldd	r24, Y+9	; 0x09
    1e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	3f ef       	ldi	r19, 0xFF	; 255
    1e8e:	4f e7       	ldi	r20, 0x7F	; 127
    1e90:	57 e4       	ldi	r21, 0x47	; 71
    1e92:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1e96:	18 16       	cp	r1, r24
    1e98:	4c f5       	brge	.+82     	; 0x1eec <LCD_Goto_xy+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e2       	ldi	r20, 0x20	; 32
    1ea8:	51 e4       	ldi	r21, 0x41	; 65
    1eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
    1ec2:	0f c0       	rjmp	.+30     	; 0x1ee2 <LCD_Goto_xy+0xfc>
    1ec4:	8c e2       	ldi	r24, 0x2C	; 44
    1ec6:	91 e0       	ldi	r25, 0x01	; 1
    1ec8:	9c 83       	std	Y+4, r25	; 0x04
    1eca:	8b 83       	std	Y+3, r24	; 0x03
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_Goto_xy+0xea>
    1ed4:	9c 83       	std	Y+4, r25	; 0x04
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eda:	9e 81       	ldd	r25, Y+6	; 0x06
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	69 f7       	brne	.-38     	; 0x1ec4 <LCD_Goto_xy+0xde>
    1eea:	14 c0       	rjmp	.+40     	; 0x1f14 <LCD_Goto_xy+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eec:	6f 81       	ldd	r22, Y+7	; 0x07
    1eee:	78 85       	ldd	r23, Y+8	; 0x08
    1ef0:	89 85       	ldd	r24, Y+9	; 0x09
    1ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	9e 81       	ldd	r25, Y+6	; 0x06
    1f04:	9a 83       	std	Y+2, r25	; 0x02
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <LCD_Goto_xy+0x126>
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1f14:	64 96       	adiw	r28, 0x14	; 20
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <LCD_MoveCursorLeft>:

void LCD_MoveCursorLeft (void)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	2e 97       	sbiw	r28, 0x0e	; 14
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_LEFT);
    1f3a:	80 e1       	ldi	r24, 0x10	; 16
    1f3c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e8       	ldi	r26, 0x80	; 128
    1f46:	bf e3       	ldi	r27, 0x3F	; 63
    1f48:	8b 87       	std	Y+11, r24	; 0x0b
    1f4a:	9c 87       	std	Y+12, r25	; 0x0c
    1f4c:	ad 87       	std	Y+13, r26	; 0x0d
    1f4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e8       	ldi	r19, 0x80	; 128
    1f5c:	4b e3       	ldi	r20, 0x3B	; 59
    1f5e:	55 e4       	ldi	r21, 0x45	; 69
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8f 83       	std	Y+7, r24	; 0x07
    1f6a:	98 87       	std	Y+8, r25	; 0x08
    1f6c:	a9 87       	std	Y+9, r26	; 0x09
    1f6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e8       	ldi	r20, 0x80	; 128
    1f7e:	5f e3       	ldi	r21, 0x3F	; 63
    1f80:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1f84:	88 23       	and	r24, r24
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <LCD_MoveCursorLeft+0x6c>
		__ticks = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <LCD_MoveCursorLeft+0xea>
	else if (__tmp > 65535)
    1f92:	6f 81       	ldd	r22, Y+7	; 0x07
    1f94:	78 85       	ldd	r23, Y+8	; 0x08
    1f96:	89 85       	ldd	r24, Y+9	; 0x09
    1f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	4c f5       	brge	.+82     	; 0x1ffc <LCD_MoveCursorLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e2       	ldi	r20, 0x20	; 32
    1fb8:	51 e4       	ldi	r21, 0x41	; 65
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9e 83       	std	Y+6, r25	; 0x06
    1fd0:	8d 83       	std	Y+5, r24	; 0x05
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <LCD_MoveCursorLeft+0xcc>
    1fd4:	8c e2       	ldi	r24, 0x2C	; 44
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	9c 83       	std	Y+4, r25	; 0x04
    1fda:	8b 83       	std	Y+3, r24	; 0x03
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <LCD_MoveCursorLeft+0xba>
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fea:	9e 81       	ldd	r25, Y+6	; 0x06
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f7       	brne	.-38     	; 0x1fd4 <LCD_MoveCursorLeft+0xae>
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <LCD_MoveCursorLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffe:	78 85       	ldd	r23, Y+8	; 0x08
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	9e 81       	ldd	r25, Y+6	; 0x06
    2014:	9a 83       	std	Y+2, r25	; 0x02
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_MoveCursorLeft+0xf6>
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2024:	2e 96       	adiw	r28, 0x0e	; 14
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <LCD_MoveCursorRight>:

//*******************************************************************************
void LCD_MoveCursorRight (void)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	2e 97       	sbiw	r28, 0x0e	; 14
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_RIGHT);
    204a:	84 e1       	ldi	r24, 0x14	; 20
    204c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	a0 e8       	ldi	r26, 0x80	; 128
    2056:	bf e3       	ldi	r27, 0x3F	; 63
    2058:	8b 87       	std	Y+11, r24	; 0x0b
    205a:	9c 87       	std	Y+12, r25	; 0x0c
    205c:	ad 87       	std	Y+13, r26	; 0x0d
    205e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2060:	6b 85       	ldd	r22, Y+11	; 0x0b
    2062:	7c 85       	ldd	r23, Y+12	; 0x0c
    2064:	8d 85       	ldd	r24, Y+13	; 0x0d
    2066:	9e 85       	ldd	r25, Y+14	; 0x0e
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e8       	ldi	r19, 0x80	; 128
    206c:	4b e3       	ldi	r20, 0x3B	; 59
    206e:	55 e4       	ldi	r21, 0x45	; 69
    2070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	8f 83       	std	Y+7, r24	; 0x07
    207a:	98 87       	std	Y+8, r25	; 0x08
    207c:	a9 87       	std	Y+9, r26	; 0x09
    207e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2080:	6f 81       	ldd	r22, Y+7	; 0x07
    2082:	78 85       	ldd	r23, Y+8	; 0x08
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e8       	ldi	r20, 0x80	; 128
    208e:	5f e3       	ldi	r21, 0x3F	; 63
    2090:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2094:	88 23       	and	r24, r24
    2096:	2c f4       	brge	.+10     	; 0x20a2 <LCD_MoveCursorRight+0x6c>
		__ticks = 1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9e 83       	std	Y+6, r25	; 0x06
    209e:	8d 83       	std	Y+5, r24	; 0x05
    20a0:	3f c0       	rjmp	.+126    	; 0x2120 <LCD_MoveCursorRight+0xea>
	else if (__tmp > 65535)
    20a2:	6f 81       	ldd	r22, Y+7	; 0x07
    20a4:	78 85       	ldd	r23, Y+8	; 0x08
    20a6:	89 85       	ldd	r24, Y+9	; 0x09
    20a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	3f ef       	ldi	r19, 0xFF	; 255
    20ae:	4f e7       	ldi	r20, 0x7F	; 127
    20b0:	57 e4       	ldi	r21, 0x47	; 71
    20b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    20b6:	18 16       	cp	r1, r24
    20b8:	4c f5       	brge	.+82     	; 0x210c <LCD_MoveCursorRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    20bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20be:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e2       	ldi	r20, 0x20	; 32
    20c8:	51 e4       	ldi	r21, 0x41	; 65
    20ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
    20e2:	0f c0       	rjmp	.+30     	; 0x2102 <LCD_MoveCursorRight+0xcc>
    20e4:	8c e2       	ldi	r24, 0x2C	; 44
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	9c 83       	std	Y+4, r25	; 0x04
    20ea:	8b 83       	std	Y+3, r24	; 0x03
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <LCD_MoveCursorRight+0xba>
    20f4:	9c 83       	std	Y+4, r25	; 0x04
    20f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f8:	8d 81       	ldd	r24, Y+5	; 0x05
    20fa:	9e 81       	ldd	r25, Y+6	; 0x06
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2102:	8d 81       	ldd	r24, Y+5	; 0x05
    2104:	9e 81       	ldd	r25, Y+6	; 0x06
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	69 f7       	brne	.-38     	; 0x20e4 <LCD_MoveCursorRight+0xae>
    210a:	14 c0       	rjmp	.+40     	; 0x2134 <LCD_MoveCursorRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210c:	6f 81       	ldd	r22, Y+7	; 0x07
    210e:	78 85       	ldd	r23, Y+8	; 0x08
    2110:	89 85       	ldd	r24, Y+9	; 0x09
    2112:	9a 85       	ldd	r25, Y+10	; 0x0a
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9e 83       	std	Y+6, r25	; 0x06
    211e:	8d 83       	std	Y+5, r24	; 0x05
    2120:	8d 81       	ldd	r24, Y+5	; 0x05
    2122:	9e 81       	ldd	r25, Y+6	; 0x06
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	9a 81       	ldd	r25, Y+2	; 0x02
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_MoveCursorRight+0xf6>
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2134:	2e 96       	adiw	r28, 0x0e	; 14
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <LCD_WriteString_xy>:

void LCD_WriteString_xy(u8 x, u8 y, u8* pu8StringCpy)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	00 d0       	rcall	.+0      	; 0x214c <LCD_WriteString_xy+0x6>
    214c:	00 d0       	rcall	.+0      	; 0x214e <LCD_WriteString_xy+0x8>
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	89 83       	std	Y+1, r24	; 0x01
    2154:	6a 83       	std	Y+2, r22	; 0x02
    2156:	5c 83       	std	Y+4, r21	; 0x04
    2158:	4b 83       	std	Y+3, r20	; 0x03
	LCD_Goto_xy(x,y);
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	6a 81       	ldd	r22, Y+2	; 0x02
    215e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <LCD_Goto_xy>
	LCD_WriteString(pu8StringCpy);
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_WriteString>
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <LCD_WriteInteger_xy>:

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    2178:	ef 92       	push	r14
    217a:	ff 92       	push	r15
    217c:	0f 93       	push	r16
    217e:	1f 93       	push	r17
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	29 97       	sbiw	r28, 0x09	; 9
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	8b 83       	std	Y+3, r24	; 0x03
    2196:	6c 83       	std	Y+4, r22	; 0x04
    2198:	5e 83       	std	Y+6, r21	; 0x06
    219a:	4d 83       	std	Y+5, r20	; 0x05
    219c:	2f 83       	std	Y+7, r18	; 0x07
	u8 StringToDisplay[NumberOfDigits];
	itoa (IntegerToDisplay, StringToDisplay, 10);
	LCD_WriteString_xy (x, y, StringToDisplay);
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)

}
    219e:	0d b7       	in	r16, 0x3d	; 61
    21a0:	1e b7       	in	r17, 0x3e	; 62
	LCD_Goto_xy(x,y);
	LCD_WriteString(pu8StringCpy);
}

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    21a2:	8d b7       	in	r24, 0x3d	; 61
    21a4:	9e b7       	in	r25, 0x3e	; 62
    21a6:	7c 01       	movw	r14, r24
	u8 StringToDisplay[NumberOfDigits];
    21a8:	8f 81       	ldd	r24, Y+7	; 0x07
    21aa:	88 2f       	mov	r24, r24
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	2d b7       	in	r18, 0x3d	; 61
    21b0:	3e b7       	in	r19, 0x3e	; 62
    21b2:	28 1b       	sub	r18, r24
    21b4:	39 0b       	sbc	r19, r25
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	3e bf       	out	0x3e, r19	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	2d bf       	out	0x3d, r18	; 61
    21c0:	8d b7       	in	r24, 0x3d	; 61
    21c2:	9e b7       	in	r25, 0x3e	; 62
    21c4:	01 96       	adiw	r24, 0x01	; 1
    21c6:	99 87       	std	Y+9, r25	; 0x09
    21c8:	88 87       	std	Y+8, r24	; 0x08
    21ca:	88 85       	ldd	r24, Y+8	; 0x08
    21cc:	99 85       	ldd	r25, Y+9	; 0x09
    21ce:	00 96       	adiw	r24, 0x00	; 0
    21d0:	99 87       	std	Y+9, r25	; 0x09
    21d2:	88 87       	std	Y+8, r24	; 0x08
    21d4:	28 85       	ldd	r18, Y+8	; 0x08
    21d6:	39 85       	ldd	r19, Y+9	; 0x09
    21d8:	3a 83       	std	Y+2, r19	; 0x02
    21da:	29 83       	std	Y+1, r18	; 0x01
	itoa (IntegerToDisplay, StringToDisplay, 10);
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	29 81       	ldd	r18, Y+1	; 0x01
    21e2:	3a 81       	ldd	r19, Y+2	; 0x02
    21e4:	b9 01       	movw	r22, r18
    21e6:	4a e0       	ldi	r20, 0x0A	; 10
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	0e 94 ca 1a 	call	0x3594	; 0x3594 <itoa>
	LCD_WriteString_xy (x, y, StringToDisplay);
    21ee:	29 81       	ldd	r18, Y+1	; 0x01
    21f0:	3a 81       	ldd	r19, Y+2	; 0x02
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	6c 81       	ldd	r22, Y+4	; 0x04
    21f6:	a9 01       	movw	r20, r18
    21f8:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_WriteString_xy>
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)
    21fc:	80 e6       	ldi	r24, 0x60	; 96
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_WriteString>
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	fe be       	out	0x3e, r15	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	ed be       	out	0x3d, r14	; 61

}
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	1e bf       	out	0x3e, r17	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	0d bf       	out	0x3d, r16	; 61
    2218:	29 96       	adiw	r28, 0x09	; 9
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	ff 90       	pop	r15
    222e:	ef 90       	pop	r14
    2230:	08 95       	ret

00002232 <main>:
void Accelerometor_init(ADX345_PowerModes Mode , ADXL345_Address EFF_Address);
void Accelerometor_ReadAxis(ADXL345_Address EFF_Address , ADXL345_Data * Ptr_Acc);
/*-------------------------------------------------------------*/

int main (void)
{
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	c8 54       	subi	r28, 0x48	; 72
    2240:	d0 40       	sbci	r29, 0x00	; 0
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
		Letter_B,
		Letter_C,
		Letter_D,
	};
//	DDRA=0x00;  "reserved for ADCs"
	DDRC=0xff;
    224c:	e4 e3       	ldi	r30, 0x34	; 52
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	8f ef       	ldi	r24, 0xFF	; 255
    2252:	80 83       	st	Z, r24
//	DDRD=0xff;
	DDRB=0xff;
    2254:	e7 e3       	ldi	r30, 0x37	; 55
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	8f ef       	ldi	r24, 0xFF	; 255
    225a:	80 83       	st	Z, r24

	LCD_Init();
    225c:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_Init>
	LCD_SendCommand(1);
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
	LCD_WriteString("L");
    2266:	82 e6       	ldi	r24, 0x62	; 98
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_WriteString>
    226e:	fe 01       	movw	r30, r28
    2270:	ed 5b       	subi	r30, 0xBD	; 189
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	aa e7       	ldi	r26, 0x7A	; 122
    227a:	b4 e4       	ldi	r27, 0x44	; 68
    227c:	80 83       	st	Z, r24
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	a2 83       	std	Z+2, r26	; 0x02
    2282:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	8e 01       	movw	r16, r28
    2286:	01 5c       	subi	r16, 0xC1	; 193
    2288:	1f 4f       	sbci	r17, 0xFF	; 255
    228a:	fe 01       	movw	r30, r28
    228c:	ed 5b       	subi	r30, 0xBD	; 189
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e8       	ldi	r19, 0x80	; 128
    229c:	4b e3       	ldi	r20, 0x3B	; 59
    229e:	55 e4       	ldi	r21, 0x45	; 69
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	80 83       	st	Z, r24
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	a2 83       	std	Z+2, r26	; 0x02
    22b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b2:	fe 01       	movw	r30, r28
    22b4:	ff 96       	adiw	r30, 0x3f	; 63
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e8       	ldi	r20, 0x80	; 128
    22c4:	5f e3       	ldi	r21, 0x3F	; 63
    22c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    22ca:	88 23       	and	r24, r24
    22cc:	2c f4       	brge	.+10     	; 0x22d8 <main+0xa6>
		__ticks = 1;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9e af       	std	Y+62, r25	; 0x3e
    22d4:	8d af       	std	Y+61, r24	; 0x3d
    22d6:	46 c0       	rjmp	.+140    	; 0x2364 <main+0x132>
	else if (__tmp > 65535)
    22d8:	fe 01       	movw	r30, r28
    22da:	ff 96       	adiw	r30, 0x3f	; 63
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	64 f5       	brge	.+88     	; 0x234c <main+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	fe 01       	movw	r30, r28
    22f6:	ed 5b       	subi	r30, 0xBD	; 189
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e2       	ldi	r20, 0x20	; 32
    2308:	51 e4       	ldi	r21, 0x41	; 65
    230a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9e af       	std	Y+62, r25	; 0x3e
    2320:	8d af       	std	Y+61, r24	; 0x3d
    2322:	0f c0       	rjmp	.+30     	; 0x2342 <main+0x110>
    2324:	8c e2       	ldi	r24, 0x2C	; 44
    2326:	91 e0       	ldi	r25, 0x01	; 1
    2328:	9c af       	std	Y+60, r25	; 0x3c
    232a:	8b af       	std	Y+59, r24	; 0x3b
    232c:	8b ad       	ldd	r24, Y+59	; 0x3b
    232e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <main+0xfe>
    2334:	9c af       	std	Y+60, r25	; 0x3c
    2336:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2338:	8d ad       	ldd	r24, Y+61	; 0x3d
    233a:	9e ad       	ldd	r25, Y+62	; 0x3e
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	9e af       	std	Y+62, r25	; 0x3e
    2340:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2342:	8d ad       	ldd	r24, Y+61	; 0x3d
    2344:	9e ad       	ldd	r25, Y+62	; 0x3e
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	69 f7       	brne	.-38     	; 0x2324 <main+0xf2>
    234a:	16 c0       	rjmp	.+44     	; 0x2378 <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234c:	fe 01       	movw	r30, r28
    234e:	ff 96       	adiw	r30, 0x3f	; 63
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	9e af       	std	Y+62, r25	; 0x3e
    2362:	8d af       	std	Y+61, r24	; 0x3d
    2364:	8d ad       	ldd	r24, Y+61	; 0x3d
    2366:	9e ad       	ldd	r25, Y+62	; 0x3e
    2368:	9a af       	std	Y+58, r25	; 0x3a
    236a:	89 af       	std	Y+57, r24	; 0x39
    236c:	89 ad       	ldd	r24, Y+57	; 0x39
    236e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <main+0x13e>
    2374:	9a af       	std	Y+58, r25	; 0x3a
    2376:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(1000);
	UART_init();
    2378:	0e 94 1a 1a 	call	0x3434	; 0x3434 <UART_init>

	TWI_Init(I2C_PRESCALE1,I2C_intDisable,F_ADXL,0x01);
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	20 e8       	ldi	r18, 0x80	; 128
    2382:	3a e1       	ldi	r19, 0x1A	; 26
    2384:	46 e0       	ldi	r20, 0x06	; 6
    2386:	50 e0       	ldi	r21, 0x00	; 0
    2388:	01 e0       	ldi	r16, 0x01	; 1
    238a:	0e 94 de 08 	call	0x11bc	; 0x11bc <TWI_Init>
	Accelerometor_init(ADXL345_MessureMode,ADXL345_ALTERNATIVE_ADDRESS);
    238e:	88 e0       	ldi	r24, 0x08	; 8
    2390:	63 e5       	ldi	r22, 0x53	; 83
    2392:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <Accelerometor_init>
	DFPlayer_init();
    2396:	0e 94 3e 08 	call	0x107c	; 0x107c <DFPlayer_init>
	ADC_init();
    239a:	0e 94 47 07 	call	0xe8e	; 0xe8e <ADC_init>

	while(1)
	{

		Update_Flexs(&Sensors_Readings);
    239e:	86 e0       	ldi	r24, 0x06	; 6
    23a0:	92 e0       	ldi	r25, 0x02	; 2
    23a2:	0e 94 9b 14 	call	0x2936	; 0x2936 <Update_Flexs>
		Accelerometor_ReadAxis(ADXL345_ALTERNATIVE_ADDRESS,&Accs_Readings);
    23a6:	2c e0       	ldi	r18, 0x0C	; 12
    23a8:	32 e0       	ldi	r19, 0x02	; 2
    23aa:	83 e5       	ldi	r24, 0x53	; 83
    23ac:	b9 01       	movw	r22, r18
    23ae:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <Accelerometor_ReadAxis>
*/
//			_delay_ms(500);

//	goto LABEL_ACC;

		if ( Compare_Accs_Data(&Accs_Readings, &Accs_Stored_Data[Word_index]))
    23b2:	80 91 0b 02 	lds	r24, 0x020B
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	c9 01       	movw	r24, r18
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	82 0f       	add	r24, r18
    23c2:	93 1f       	adc	r25, r19
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	88 0f       	add	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	9c 01       	movw	r18, r24
    23ce:	22 57       	subi	r18, 0x72	; 114
    23d0:	3e 4f       	sbci	r19, 0xFE	; 254
    23d2:	8c e0       	ldi	r24, 0x0C	; 12
    23d4:	92 e0       	ldi	r25, 0x02	; 2
    23d6:	b9 01       	movw	r22, r18
    23d8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <Compare_Accs_Data>
    23dc:	88 23       	and	r24, r24
    23de:	09 f4       	brne	.+2      	; 0x23e2 <main+0x1b0>
    23e0:	44 c2       	rjmp	.+1160   	; 0x286a <main+0x638>
			goto TEST;

			*********************************************************************
*/

			switch(Word_index)
    23e2:	80 91 0b 02 	lds	r24, 0x020B
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	29 96       	adiw	r28, 0x09	; 9
    23ec:	3f af       	std	Y+63, r19	; 0x3f
    23ee:	2e af       	std	Y+62, r18	; 0x3e
    23f0:	29 97       	sbiw	r28, 0x09	; 9
    23f2:	29 96       	adiw	r28, 0x09	; 9
    23f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    23f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    23f8:	29 97       	sbiw	r28, 0x09	; 9
    23fa:	82 30       	cpi	r24, 0x02	; 2
    23fc:	91 05       	cpc	r25, r1
    23fe:	09 f4       	brne	.+2      	; 0x2402 <main+0x1d0>
    2400:	a5 c0       	rjmp	.+330    	; 0x254c <main+0x31a>
    2402:	29 96       	adiw	r28, 0x09	; 9
    2404:	ee ad       	ldd	r30, Y+62	; 0x3e
    2406:	ff ad       	ldd	r31, Y+63	; 0x3f
    2408:	29 97       	sbiw	r28, 0x09	; 9
    240a:	e3 30       	cpi	r30, 0x03	; 3
    240c:	f1 05       	cpc	r31, r1
    240e:	44 f4       	brge	.+16     	; 0x2420 <main+0x1ee>
    2410:	29 96       	adiw	r28, 0x09	; 9
    2412:	2e ad       	ldd	r18, Y+62	; 0x3e
    2414:	3f ad       	ldd	r19, Y+63	; 0x3f
    2416:	29 97       	sbiw	r28, 0x09	; 9
    2418:	21 30       	cpi	r18, 0x01	; 1
    241a:	31 05       	cpc	r19, r1
    241c:	91 f0       	breq	.+36     	; 0x2442 <main+0x210>
    241e:	bf cf       	rjmp	.-130    	; 0x239e <main+0x16c>
    2420:	29 96       	adiw	r28, 0x09	; 9
    2422:	8e ad       	ldd	r24, Y+62	; 0x3e
    2424:	9f ad       	ldd	r25, Y+63	; 0x3f
    2426:	29 97       	sbiw	r28, 0x09	; 9
    2428:	83 30       	cpi	r24, 0x03	; 3
    242a:	91 05       	cpc	r25, r1
    242c:	09 f4       	brne	.+2      	; 0x2430 <main+0x1fe>
    242e:	13 c1       	rjmp	.+550    	; 0x2656 <main+0x424>
    2430:	29 96       	adiw	r28, 0x09	; 9
    2432:	ee ad       	ldd	r30, Y+62	; 0x3e
    2434:	ff ad       	ldd	r31, Y+63	; 0x3f
    2436:	29 97       	sbiw	r28, 0x09	; 9
    2438:	e4 30       	cpi	r30, 0x04	; 4
    243a:	f1 05       	cpc	r31, r1
    243c:	09 f4       	brne	.+2      	; 0x2440 <main+0x20e>
    243e:	90 c1       	rjmp	.+800    	; 0x2760 <main+0x52e>
    2440:	ae cf       	rjmp	.-164    	; 0x239e <main+0x16c>
			{
			case Letter_A:
				PORTC=0x01;
    2442:	e5 e3       	ldi	r30, 0x35	; 53
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	80 83       	st	Z, r24
				LCD_SendCommand(1);
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
				LCD_WriteString("A");
    2450:	84 e6       	ldi	r24, 0x64	; 100
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_WriteString>
				play_sound(Letter_A);
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 c9 08 	call	0x1192	; 0x1192 <play_sound>
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	aa e7       	ldi	r26, 0x7A	; 122
    2466:	b4 e4       	ldi	r27, 0x44	; 68
    2468:	8d ab       	std	Y+53, r24	; 0x35
    246a:	9e ab       	std	Y+54, r25	; 0x36
    246c:	af ab       	std	Y+55, r26	; 0x37
    246e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2470:	6d a9       	ldd	r22, Y+53	; 0x35
    2472:	7e a9       	ldd	r23, Y+54	; 0x36
    2474:	8f a9       	ldd	r24, Y+55	; 0x37
    2476:	98 ad       	ldd	r25, Y+56	; 0x38
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e8       	ldi	r19, 0x80	; 128
    247c:	4b e3       	ldi	r20, 0x3B	; 59
    247e:	55 e4       	ldi	r21, 0x45	; 69
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	89 ab       	std	Y+49, r24	; 0x31
    248a:	9a ab       	std	Y+50, r25	; 0x32
    248c:	ab ab       	std	Y+51, r26	; 0x33
    248e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2490:	69 a9       	ldd	r22, Y+49	; 0x31
    2492:	7a a9       	ldd	r23, Y+50	; 0x32
    2494:	8b a9       	ldd	r24, Y+51	; 0x33
    2496:	9c a9       	ldd	r25, Y+52	; 0x34
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e8       	ldi	r20, 0x80	; 128
    249e:	5f e3       	ldi	r21, 0x3F	; 63
    24a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    24a4:	88 23       	and	r24, r24
    24a6:	2c f4       	brge	.+10     	; 0x24b2 <main+0x280>
		__ticks = 1;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	98 ab       	std	Y+48, r25	; 0x30
    24ae:	8f a7       	std	Y+47, r24	; 0x2f
    24b0:	3f c0       	rjmp	.+126    	; 0x2530 <main+0x2fe>
	else if (__tmp > 65535)
    24b2:	69 a9       	ldd	r22, Y+49	; 0x31
    24b4:	7a a9       	ldd	r23, Y+50	; 0x32
    24b6:	8b a9       	ldd	r24, Y+51	; 0x33
    24b8:	9c a9       	ldd	r25, Y+52	; 0x34
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    24c6:	18 16       	cp	r1, r24
    24c8:	4c f5       	brge	.+82     	; 0x251c <main+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ca:	6d a9       	ldd	r22, Y+53	; 0x35
    24cc:	7e a9       	ldd	r23, Y+54	; 0x36
    24ce:	8f a9       	ldd	r24, Y+55	; 0x37
    24d0:	98 ad       	ldd	r25, Y+56	; 0x38
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	98 ab       	std	Y+48, r25	; 0x30
    24f0:	8f a7       	std	Y+47, r24	; 0x2f
    24f2:	0f c0       	rjmp	.+30     	; 0x2512 <main+0x2e0>
    24f4:	8c e2       	ldi	r24, 0x2C	; 44
    24f6:	91 e0       	ldi	r25, 0x01	; 1
    24f8:	9e a7       	std	Y+46, r25	; 0x2e
    24fa:	8d a7       	std	Y+45, r24	; 0x2d
    24fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    24fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <main+0x2ce>
    2504:	9e a7       	std	Y+46, r25	; 0x2e
    2506:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2508:	8f a5       	ldd	r24, Y+47	; 0x2f
    250a:	98 a9       	ldd	r25, Y+48	; 0x30
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	98 ab       	std	Y+48, r25	; 0x30
    2510:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2512:	8f a5       	ldd	r24, Y+47	; 0x2f
    2514:	98 a9       	ldd	r25, Y+48	; 0x30
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	69 f7       	brne	.-38     	; 0x24f4 <main+0x2c2>
    251a:	14 c0       	rjmp	.+40     	; 0x2544 <main+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251c:	69 a9       	ldd	r22, Y+49	; 0x31
    251e:	7a a9       	ldd	r23, Y+50	; 0x32
    2520:	8b a9       	ldd	r24, Y+51	; 0x33
    2522:	9c a9       	ldd	r25, Y+52	; 0x34
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	98 ab       	std	Y+48, r25	; 0x30
    252e:	8f a7       	std	Y+47, r24	; 0x2f
    2530:	8f a5       	ldd	r24, Y+47	; 0x2f
    2532:	98 a9       	ldd	r25, Y+48	; 0x30
    2534:	9c a7       	std	Y+44, r25	; 0x2c
    2536:	8b a7       	std	Y+43, r24	; 0x2b
    2538:	8b a5       	ldd	r24, Y+43	; 0x2b
    253a:	9c a5       	ldd	r25, Y+44	; 0x2c
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <main+0x30a>
    2540:	9c a7       	std	Y+44, r25	; 0x2c
    2542:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				LCD_SendCommand(1);
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
    254a:	29 cf       	rjmp	.-430    	; 0x239e <main+0x16c>

				break;
			case Letter_B:
				PORTC=0x02;
    254c:	e5 e3       	ldi	r30, 0x35	; 53
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	82 e0       	ldi	r24, 0x02	; 2
    2552:	80 83       	st	Z, r24
				LCD_SendCommand(1);
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
				LCD_WriteString("B");
    255a:	86 e6       	ldi	r24, 0x66	; 102
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_WriteString>
				play_sound(Letter_B);
    2562:	82 e0       	ldi	r24, 0x02	; 2
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 c9 08 	call	0x1192	; 0x1192 <play_sound>
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	aa e7       	ldi	r26, 0x7A	; 122
    2570:	b4 e4       	ldi	r27, 0x44	; 68
    2572:	8f a3       	std	Y+39, r24	; 0x27
    2574:	98 a7       	std	Y+40, r25	; 0x28
    2576:	a9 a7       	std	Y+41, r26	; 0x29
    2578:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257a:	6f a1       	ldd	r22, Y+39	; 0x27
    257c:	78 a5       	ldd	r23, Y+40	; 0x28
    257e:	89 a5       	ldd	r24, Y+41	; 0x29
    2580:	9a a5       	ldd	r25, Y+42	; 0x2a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e8       	ldi	r19, 0x80	; 128
    2586:	4b e3       	ldi	r20, 0x3B	; 59
    2588:	55 e4       	ldi	r21, 0x45	; 69
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	8b a3       	std	Y+35, r24	; 0x23
    2594:	9c a3       	std	Y+36, r25	; 0x24
    2596:	ad a3       	std	Y+37, r26	; 0x25
    2598:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    259a:	6b a1       	ldd	r22, Y+35	; 0x23
    259c:	7c a1       	ldd	r23, Y+36	; 0x24
    259e:	8d a1       	ldd	r24, Y+37	; 0x25
    25a0:	9e a1       	ldd	r25, Y+38	; 0x26
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e8       	ldi	r20, 0x80	; 128
    25a8:	5f e3       	ldi	r21, 0x3F	; 63
    25aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    25ae:	88 23       	and	r24, r24
    25b0:	2c f4       	brge	.+10     	; 0x25bc <main+0x38a>
		__ticks = 1;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9a a3       	std	Y+34, r25	; 0x22
    25b8:	89 a3       	std	Y+33, r24	; 0x21
    25ba:	3f c0       	rjmp	.+126    	; 0x263a <main+0x408>
	else if (__tmp > 65535)
    25bc:	6b a1       	ldd	r22, Y+35	; 0x23
    25be:	7c a1       	ldd	r23, Y+36	; 0x24
    25c0:	8d a1       	ldd	r24, Y+37	; 0x25
    25c2:	9e a1       	ldd	r25, Y+38	; 0x26
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	3f ef       	ldi	r19, 0xFF	; 255
    25c8:	4f e7       	ldi	r20, 0x7F	; 127
    25ca:	57 e4       	ldi	r21, 0x47	; 71
    25cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    25d0:	18 16       	cp	r1, r24
    25d2:	4c f5       	brge	.+82     	; 0x2626 <main+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d4:	6f a1       	ldd	r22, Y+39	; 0x27
    25d6:	78 a5       	ldd	r23, Y+40	; 0x28
    25d8:	89 a5       	ldd	r24, Y+41	; 0x29
    25da:	9a a5       	ldd	r25, Y+42	; 0x2a
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e2       	ldi	r20, 0x20	; 32
    25e2:	51 e4       	ldi	r21, 0x41	; 65
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9a a3       	std	Y+34, r25	; 0x22
    25fa:	89 a3       	std	Y+33, r24	; 0x21
    25fc:	0f c0       	rjmp	.+30     	; 0x261c <main+0x3ea>
    25fe:	8c e2       	ldi	r24, 0x2C	; 44
    2600:	91 e0       	ldi	r25, 0x01	; 1
    2602:	98 a3       	std	Y+32, r25	; 0x20
    2604:	8f 8f       	std	Y+31, r24	; 0x1f
    2606:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2608:	98 a1       	ldd	r25, Y+32	; 0x20
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	f1 f7       	brne	.-4      	; 0x260a <main+0x3d8>
    260e:	98 a3       	std	Y+32, r25	; 0x20
    2610:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2612:	89 a1       	ldd	r24, Y+33	; 0x21
    2614:	9a a1       	ldd	r25, Y+34	; 0x22
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	9a a3       	std	Y+34, r25	; 0x22
    261a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261c:	89 a1       	ldd	r24, Y+33	; 0x21
    261e:	9a a1       	ldd	r25, Y+34	; 0x22
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	69 f7       	brne	.-38     	; 0x25fe <main+0x3cc>
    2624:	14 c0       	rjmp	.+40     	; 0x264e <main+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2626:	6b a1       	ldd	r22, Y+35	; 0x23
    2628:	7c a1       	ldd	r23, Y+36	; 0x24
    262a:	8d a1       	ldd	r24, Y+37	; 0x25
    262c:	9e a1       	ldd	r25, Y+38	; 0x26
    262e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	9a a3       	std	Y+34, r25	; 0x22
    2638:	89 a3       	std	Y+33, r24	; 0x21
    263a:	89 a1       	ldd	r24, Y+33	; 0x21
    263c:	9a a1       	ldd	r25, Y+34	; 0x22
    263e:	9e 8f       	std	Y+30, r25	; 0x1e
    2640:	8d 8f       	std	Y+29, r24	; 0x1d
    2642:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2644:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <main+0x414>
    264a:	9e 8f       	std	Y+30, r25	; 0x1e
    264c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				LCD_SendCommand(1);
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
    2654:	a4 ce       	rjmp	.-696    	; 0x239e <main+0x16c>

				break;
			case Letter_C:
				PORTC=0x04;
    2656:	e5 e3       	ldi	r30, 0x35	; 53
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	84 e0       	ldi	r24, 0x04	; 4
    265c:	80 83       	st	Z, r24
				LCD_SendCommand(1);
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
				LCD_WriteString("C");
    2664:	88 e6       	ldi	r24, 0x68	; 104
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_WriteString>
				play_sound(Letter_C);
    266c:	83 e0       	ldi	r24, 0x03	; 3
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	0e 94 c9 08 	call	0x1192	; 0x1192 <play_sound>
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	aa e7       	ldi	r26, 0x7A	; 122
    267a:	b4 e4       	ldi	r27, 0x44	; 68
    267c:	89 8f       	std	Y+25, r24	; 0x19
    267e:	9a 8f       	std	Y+26, r25	; 0x1a
    2680:	ab 8f       	std	Y+27, r26	; 0x1b
    2682:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2684:	69 8d       	ldd	r22, Y+25	; 0x19
    2686:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e8       	ldi	r19, 0x80	; 128
    2690:	4b e3       	ldi	r20, 0x3B	; 59
    2692:	55 e4       	ldi	r21, 0x45	; 69
    2694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	8d 8b       	std	Y+21, r24	; 0x15
    269e:	9e 8b       	std	Y+22, r25	; 0x16
    26a0:	af 8b       	std	Y+23, r26	; 0x17
    26a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26a4:	6d 89       	ldd	r22, Y+21	; 0x15
    26a6:	7e 89       	ldd	r23, Y+22	; 0x16
    26a8:	8f 89       	ldd	r24, Y+23	; 0x17
    26aa:	98 8d       	ldd	r25, Y+24	; 0x18
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e8       	ldi	r20, 0x80	; 128
    26b2:	5f e3       	ldi	r21, 0x3F	; 63
    26b4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    26b8:	88 23       	and	r24, r24
    26ba:	2c f4       	brge	.+10     	; 0x26c6 <main+0x494>
		__ticks = 1;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	9c 8b       	std	Y+20, r25	; 0x14
    26c2:	8b 8b       	std	Y+19, r24	; 0x13
    26c4:	3f c0       	rjmp	.+126    	; 0x2744 <main+0x512>
	else if (__tmp > 65535)
    26c6:	6d 89       	ldd	r22, Y+21	; 0x15
    26c8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ca:	8f 89       	ldd	r24, Y+23	; 0x17
    26cc:	98 8d       	ldd	r25, Y+24	; 0x18
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	3f ef       	ldi	r19, 0xFF	; 255
    26d2:	4f e7       	ldi	r20, 0x7F	; 127
    26d4:	57 e4       	ldi	r21, 0x47	; 71
    26d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26da:	18 16       	cp	r1, r24
    26dc:	4c f5       	brge	.+82     	; 0x2730 <main+0x4fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26de:	69 8d       	ldd	r22, Y+25	; 0x19
    26e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e2       	ldi	r20, 0x20	; 32
    26ec:	51 e4       	ldi	r21, 0x41	; 65
    26ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	9c 8b       	std	Y+20, r25	; 0x14
    2704:	8b 8b       	std	Y+19, r24	; 0x13
    2706:	0f c0       	rjmp	.+30     	; 0x2726 <main+0x4f4>
    2708:	8c e2       	ldi	r24, 0x2C	; 44
    270a:	91 e0       	ldi	r25, 0x01	; 1
    270c:	9a 8b       	std	Y+18, r25	; 0x12
    270e:	89 8b       	std	Y+17, r24	; 0x11
    2710:	89 89       	ldd	r24, Y+17	; 0x11
    2712:	9a 89       	ldd	r25, Y+18	; 0x12
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <main+0x4e2>
    2718:	9a 8b       	std	Y+18, r25	; 0x12
    271a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271c:	8b 89       	ldd	r24, Y+19	; 0x13
    271e:	9c 89       	ldd	r25, Y+20	; 0x14
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	9c 8b       	std	Y+20, r25	; 0x14
    2724:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2726:	8b 89       	ldd	r24, Y+19	; 0x13
    2728:	9c 89       	ldd	r25, Y+20	; 0x14
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	69 f7       	brne	.-38     	; 0x2708 <main+0x4d6>
    272e:	14 c0       	rjmp	.+40     	; 0x2758 <main+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2730:	6d 89       	ldd	r22, Y+21	; 0x15
    2732:	7e 89       	ldd	r23, Y+22	; 0x16
    2734:	8f 89       	ldd	r24, Y+23	; 0x17
    2736:	98 8d       	ldd	r25, Y+24	; 0x18
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9c 8b       	std	Y+20, r25	; 0x14
    2742:	8b 8b       	std	Y+19, r24	; 0x13
    2744:	8b 89       	ldd	r24, Y+19	; 0x13
    2746:	9c 89       	ldd	r25, Y+20	; 0x14
    2748:	98 8b       	std	Y+16, r25	; 0x10
    274a:	8f 87       	std	Y+15, r24	; 0x0f
    274c:	8f 85       	ldd	r24, Y+15	; 0x0f
    274e:	98 89       	ldd	r25, Y+16	; 0x10
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <main+0x51e>
    2754:	98 8b       	std	Y+16, r25	; 0x10
    2756:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				LCD_SendCommand(1);
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
    275e:	1f ce       	rjmp	.-962    	; 0x239e <main+0x16c>
				break;
			case Letter_D:
				PORTC=0x08;
    2760:	e5 e3       	ldi	r30, 0x35	; 53
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	88 e0       	ldi	r24, 0x08	; 8
    2766:	80 83       	st	Z, r24
				LCD_SendCommand(1);
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
				LCD_WriteString("D");
    276e:	8a e6       	ldi	r24, 0x6A	; 106
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <LCD_WriteString>
				play_sound(Letter_D);
    2776:	84 e0       	ldi	r24, 0x04	; 4
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 c9 08 	call	0x1192	; 0x1192 <play_sound>
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	aa e7       	ldi	r26, 0x7A	; 122
    2784:	b4 e4       	ldi	r27, 0x44	; 68
    2786:	8b 87       	std	Y+11, r24	; 0x0b
    2788:	9c 87       	std	Y+12, r25	; 0x0c
    278a:	ad 87       	std	Y+13, r26	; 0x0d
    278c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2790:	7c 85       	ldd	r23, Y+12	; 0x0c
    2792:	8d 85       	ldd	r24, Y+13	; 0x0d
    2794:	9e 85       	ldd	r25, Y+14	; 0x0e
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e8       	ldi	r19, 0x80	; 128
    279a:	4b e3       	ldi	r20, 0x3B	; 59
    279c:	55 e4       	ldi	r21, 0x45	; 69
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	8f 83       	std	Y+7, r24	; 0x07
    27a8:	98 87       	std	Y+8, r25	; 0x08
    27aa:	a9 87       	std	Y+9, r26	; 0x09
    27ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ae:	6f 81       	ldd	r22, Y+7	; 0x07
    27b0:	78 85       	ldd	r23, Y+8	; 0x08
    27b2:	89 85       	ldd	r24, Y+9	; 0x09
    27b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e8       	ldi	r20, 0x80	; 128
    27bc:	5f e3       	ldi	r21, 0x3F	; 63
    27be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    27c2:	88 23       	and	r24, r24
    27c4:	2c f4       	brge	.+10     	; 0x27d0 <main+0x59e>
		__ticks = 1;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	9e 83       	std	Y+6, r25	; 0x06
    27cc:	8d 83       	std	Y+5, r24	; 0x05
    27ce:	3f c0       	rjmp	.+126    	; 0x284e <main+0x61c>
	else if (__tmp > 65535)
    27d0:	6f 81       	ldd	r22, Y+7	; 0x07
    27d2:	78 85       	ldd	r23, Y+8	; 0x08
    27d4:	89 85       	ldd	r24, Y+9	; 0x09
    27d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	3f ef       	ldi	r19, 0xFF	; 255
    27dc:	4f e7       	ldi	r20, 0x7F	; 127
    27de:	57 e4       	ldi	r21, 0x47	; 71
    27e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    27e4:	18 16       	cp	r1, r24
    27e6:	4c f5       	brge	.+82     	; 0x283a <main+0x608>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e2       	ldi	r20, 0x20	; 32
    27f6:	51 e4       	ldi	r21, 0x41	; 65
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9e 83       	std	Y+6, r25	; 0x06
    280e:	8d 83       	std	Y+5, r24	; 0x05
    2810:	0f c0       	rjmp	.+30     	; 0x2830 <main+0x5fe>
    2812:	8c e2       	ldi	r24, 0x2C	; 44
    2814:	91 e0       	ldi	r25, 0x01	; 1
    2816:	9c 83       	std	Y+4, r25	; 0x04
    2818:	8b 83       	std	Y+3, r24	; 0x03
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	9c 81       	ldd	r25, Y+4	; 0x04
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <main+0x5ec>
    2822:	9c 83       	std	Y+4, r25	; 0x04
    2824:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2826:	8d 81       	ldd	r24, Y+5	; 0x05
    2828:	9e 81       	ldd	r25, Y+6	; 0x06
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2830:	8d 81       	ldd	r24, Y+5	; 0x05
    2832:	9e 81       	ldd	r25, Y+6	; 0x06
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	69 f7       	brne	.-38     	; 0x2812 <main+0x5e0>
    2838:	14 c0       	rjmp	.+40     	; 0x2862 <main+0x630>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283a:	6f 81       	ldd	r22, Y+7	; 0x07
    283c:	78 85       	ldd	r23, Y+8	; 0x08
    283e:	89 85       	ldd	r24, Y+9	; 0x09
    2840:	9a 85       	ldd	r25, Y+10	; 0x0a
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9e 83       	std	Y+6, r25	; 0x06
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	8d 81       	ldd	r24, Y+5	; 0x05
    2850:	9e 81       	ldd	r25, Y+6	; 0x06
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <main+0x628>
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				LCD_SendCommand(1);
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <LCD_SendCommand>
    2868:	9a cd       	rjmp	.-1228   	; 0x239e <main+0x16c>
				break;
			}
		}
		else
		{
			PORTC=0x00;
    286a:	e5 e3       	ldi	r30, 0x35	; 53
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	10 82       	st	Z, r1
    2870:	96 cd       	rjmp	.-1236   	; 0x239e <main+0x16c>

00002872 <Adjust_Flex_Range>:




void Adjust_Flex_Range( u8 Flex_adcChannel_Number, u16 adcDigial_Value)
{
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	00 d0       	rcall	.+0      	; 0x2878 <Adjust_Flex_Range+0x6>
    2878:	0f 92       	push	r0
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	7b 83       	std	Y+3, r23	; 0x03
    2882:	6a 83       	std	Y+2, r22	; 0x02
	if (adcDigial_Value > 60 + 85)
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	9b 81       	ldd	r25, Y+3	; 0x03
    2888:	82 39       	cpi	r24, 0x92	; 146
    288a:	91 05       	cpc	r25, r1
    288c:	40 f0       	brcs	.+16     	; 0x289e <Adjust_Flex_Range+0x2c>
		Flex[Flex_adcChannel_Number]=0;
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	88 2f       	mov	r24, r24
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	fc 01       	movw	r30, r24
    2896:	e9 5f       	subi	r30, 0xF9	; 249
    2898:	fd 4f       	sbci	r31, 0xFD	; 253
    289a:	10 82       	st	Z, r1
    289c:	46 c0       	rjmp	.+140    	; 0x292a <Adjust_Flex_Range+0xb8>
	else if ( (adcDigial_Value <= 60 + 85) && (adcDigial_Value > 30 + 85) )
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	9b 81       	ldd	r25, Y+3	; 0x03
    28a2:	82 39       	cpi	r24, 0x92	; 146
    28a4:	91 05       	cpc	r25, r1
    28a6:	70 f4       	brcc	.+28     	; 0x28c4 <Adjust_Flex_Range+0x52>
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	9b 81       	ldd	r25, Y+3	; 0x03
    28ac:	84 37       	cpi	r24, 0x74	; 116
    28ae:	91 05       	cpc	r25, r1
    28b0:	48 f0       	brcs	.+18     	; 0x28c4 <Adjust_Flex_Range+0x52>
		Flex[Flex_adcChannel_Number]=1;
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	88 2f       	mov	r24, r24
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	fc 01       	movw	r30, r24
    28ba:	e9 5f       	subi	r30, 0xF9	; 249
    28bc:	fd 4f       	sbci	r31, 0xFD	; 253
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	80 83       	st	Z, r24
    28c2:	33 c0       	rjmp	.+102    	; 0x292a <Adjust_Flex_Range+0xb8>
	else if ( (adcDigial_Value <= 30 + 85) && (adcDigial_Value > 15 + 85) )
    28c4:	8a 81       	ldd	r24, Y+2	; 0x02
    28c6:	9b 81       	ldd	r25, Y+3	; 0x03
    28c8:	84 37       	cpi	r24, 0x74	; 116
    28ca:	91 05       	cpc	r25, r1
    28cc:	70 f4       	brcc	.+28     	; 0x28ea <Adjust_Flex_Range+0x78>
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	9b 81       	ldd	r25, Y+3	; 0x03
    28d2:	85 36       	cpi	r24, 0x65	; 101
    28d4:	91 05       	cpc	r25, r1
    28d6:	48 f0       	brcs	.+18     	; 0x28ea <Adjust_Flex_Range+0x78>
		Flex[Flex_adcChannel_Number]=2;
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	fc 01       	movw	r30, r24
    28e0:	e9 5f       	subi	r30, 0xF9	; 249
    28e2:	fd 4f       	sbci	r31, 0xFD	; 253
    28e4:	82 e0       	ldi	r24, 0x02	; 2
    28e6:	80 83       	st	Z, r24
    28e8:	20 c0       	rjmp	.+64     	; 0x292a <Adjust_Flex_Range+0xb8>
	else if ( (adcDigial_Value <= 15 + 85) && (adcDigial_Value > 5 + 85) )
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	9b 81       	ldd	r25, Y+3	; 0x03
    28ee:	85 36       	cpi	r24, 0x65	; 101
    28f0:	91 05       	cpc	r25, r1
    28f2:	70 f4       	brcc	.+28     	; 0x2910 <Adjust_Flex_Range+0x9e>
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	9b 81       	ldd	r25, Y+3	; 0x03
    28f8:	8b 35       	cpi	r24, 0x5B	; 91
    28fa:	91 05       	cpc	r25, r1
    28fc:	48 f0       	brcs	.+18     	; 0x2910 <Adjust_Flex_Range+0x9e>
		Flex[Flex_adcChannel_Number]=3;
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	88 2f       	mov	r24, r24
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	fc 01       	movw	r30, r24
    2906:	e9 5f       	subi	r30, 0xF9	; 249
    2908:	fd 4f       	sbci	r31, 0xFD	; 253
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	80 83       	st	Z, r24
    290e:	0d c0       	rjmp	.+26     	; 0x292a <Adjust_Flex_Range+0xb8>
	else if (adcDigial_Value < 5 + 85)
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	9b 81       	ldd	r25, Y+3	; 0x03
    2914:	8a 35       	cpi	r24, 0x5A	; 90
    2916:	91 05       	cpc	r25, r1
    2918:	40 f4       	brcc	.+16     	; 0x292a <Adjust_Flex_Range+0xb8>
		Flex[Flex_adcChannel_Number]=4;
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	88 2f       	mov	r24, r24
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	fc 01       	movw	r30, r24
    2922:	e9 5f       	subi	r30, 0xF9	; 249
    2924:	fd 4f       	sbci	r31, 0xFD	; 253
    2926:	84 e0       	ldi	r24, 0x04	; 4
    2928:	80 83       	st	Z, r24
}
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <Update_Flexs>:
/*---------------------------------------------------------------*/

void Update_Flexs (Letters_and_Words * PTR_Flex)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	00 d0       	rcall	.+0      	; 0x293c <Update_Flexs+0x6>
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
	Flex[0]= ADC_GetResult(0);
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <ADC_GetResult>
    294a:	80 93 07 02 	sts	0x0207, r24
	Adjust_Flex_Range(0, Flex[0]);
    294e:	80 91 07 02 	lds	r24, 0x0207
    2952:	28 2f       	mov	r18, r24
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	b9 01       	movw	r22, r18
    295a:	0e 94 39 14 	call	0x2872	; 0x2872 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[0]= Flex[0];
    295e:	80 91 07 02 	lds	r24, 0x0207
    2962:	e9 81       	ldd	r30, Y+1	; 0x01
    2964:	fa 81       	ldd	r31, Y+2	; 0x02
    2966:	80 83       	st	Z, r24

	Flex[1]= ADC_GetResult(1);
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <ADC_GetResult>
    296e:	80 93 08 02 	sts	0x0208, r24
	Adjust_Flex_Range(1, Flex[1]);
    2972:	80 91 08 02 	lds	r24, 0x0208
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	b9 01       	movw	r22, r18
    297e:	0e 94 39 14 	call	0x2872	; 0x2872 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[1]= Flex[1];
    2982:	80 91 08 02 	lds	r24, 0x0208
    2986:	e9 81       	ldd	r30, Y+1	; 0x01
    2988:	fa 81       	ldd	r31, Y+2	; 0x02
    298a:	81 83       	std	Z+1, r24	; 0x01

	Flex[2]= ADC_GetResult(2);
    298c:	82 e0       	ldi	r24, 0x02	; 2
    298e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <ADC_GetResult>
    2992:	80 93 09 02 	sts	0x0209, r24
	Adjust_Flex_Range(2, Flex[2]);
    2996:	80 91 09 02 	lds	r24, 0x0209
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	82 e0       	ldi	r24, 0x02	; 2
    29a0:	b9 01       	movw	r22, r18
    29a2:	0e 94 39 14 	call	0x2872	; 0x2872 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[2]= Flex[2];
    29a6:	80 91 09 02 	lds	r24, 0x0209
    29aa:	e9 81       	ldd	r30, Y+1	; 0x01
    29ac:	fa 81       	ldd	r31, Y+2	; 0x02
    29ae:	82 83       	std	Z+2, r24	; 0x02

	Flex[3]= ADC_GetResult(3);
    29b0:	83 e0       	ldi	r24, 0x03	; 3
    29b2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <ADC_GetResult>
    29b6:	80 93 0a 02 	sts	0x020A, r24
	Adjust_Flex_Range(3, Flex[3]);
    29ba:	80 91 0a 02 	lds	r24, 0x020A
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	83 e0       	ldi	r24, 0x03	; 3
    29c4:	b9 01       	movw	r22, r18
    29c6:	0e 94 39 14 	call	0x2872	; 0x2872 <Adjust_Flex_Range>
	PTR_Flex -> Arr_Flex[3]= Flex[3];
    29ca:	80 91 0a 02 	lds	r24, 0x020A
    29ce:	e9 81       	ldd	r30, Y+1	; 0x01
    29d0:	fa 81       	ldd	r31, Y+2	; 0x02
    29d2:	83 83       	std	Z+3, r24	; 0x03
}
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	08 95       	ret

000029de <Compare_Data>:
/*---------------------------------------------------------------*/

u8  Compare_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data)
{
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	27 97       	sbiw	r28, 0x07	; 7
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	9c 83       	std	Y+4, r25	; 0x04
    29f4:	8b 83       	std	Y+3, r24	; 0x03
    29f6:	7e 83       	std	Y+6, r23	; 0x06
    29f8:	6d 83       	std	Y+5, r22	; 0x05
	u8 _2nd_Counter;
	u8 _1st_Counter;
	Word_index=0;
    29fa:	10 92 0b 02 	sts	0x020B, r1

	*********************************************

*/

	for (_1st_Counter=0; _1st_Counter<10; _1st_Counter++)
    29fe:	19 82       	std	Y+1, r1	; 0x01
    2a00:	48 c0       	rjmp	.+144    	; 0x2a92 <Compare_Data+0xb4>
	{
		for (_2nd_Counter=0; _2nd_Counter<NumberOfFlexs; _2nd_Counter++)
    2a02:	1a 82       	std	Y+2, r1	; 0x02
    2a04:	3f c0       	rjmp	.+126    	; 0x2a84 <Compare_Data+0xa6>
			{
				if ( Ptr_Sensor_Readings-> Arr_Flex[_2nd_Counter] != Ptr_Stored_Data[_1st_Counter]. Arr_Flex[_2nd_Counter])
    2a06:	8a 81       	ldd	r24, Y+2	; 0x02
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	fc 01       	movw	r30, r24
    2a12:	e2 0f       	add	r30, r18
    2a14:	f3 1f       	adc	r31, r19
    2a16:	40 81       	ld	r20, Z
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	28 0f       	add	r18, r24
    2a24:	39 1f       	adc	r19, r25
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	88 2f       	mov	r24, r24
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	f9 01       	movw	r30, r18
    2a2e:	e8 0f       	add	r30, r24
    2a30:	f9 1f       	adc	r31, r25
    2a32:	80 81       	ld	r24, Z
    2a34:	48 17       	cp	r20, r24
    2a36:	51 f5       	brne	.+84     	; 0x2a8c <Compare_Data+0xae>
				{
		//			return 0;
				break;
				}
					if (_2nd_Counter == NumberOfFlexs-1)
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	88 23       	and	r24, r24
    2a3c:	01 f5       	brne	.+64     	; 0x2a7e <Compare_Data+0xa0>
					{

						if ( Ptr_Sensor_Readings ->Arr_Flex[_2nd_Counter] == Ptr_Stored_Data[_1st_Counter].Arr_Flex[_2nd_Counter])
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	28 2f       	mov	r18, r24
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	8b 81       	ldd	r24, Y+3	; 0x03
    2a46:	9c 81       	ldd	r25, Y+4	; 0x04
    2a48:	fc 01       	movw	r30, r24
    2a4a:	e2 0f       	add	r30, r18
    2a4c:	f3 1f       	adc	r31, r19
    2a4e:	40 81       	ld	r20, Z
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	28 0f       	add	r18, r24
    2a5c:	39 1f       	adc	r19, r25
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	f9 01       	movw	r30, r18
    2a66:	e8 0f       	add	r30, r24
    2a68:	f9 1f       	adc	r31, r25
    2a6a:	80 81       	ld	r24, Z
    2a6c:	48 17       	cp	r20, r24
    2a6e:	39 f4       	brne	.+14     	; 0x2a7e <Compare_Data+0xa0>
									 && ( (Ptr_Sensor_Readings->Z_Axis - Ptr_Stored_Data[_1st_Counter]->Z_Axis ) >= - Z_Angle_Accuracy )
									 && ( (Ptr_Sensor_Readings->Z_Axis - Ptr_Stored_Data[_1st_Counter]->Z_Axis ) <=   Z_Angle_Accuracy )
								)
*/
									{
										Word_index= _1st_Counter + 1;
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	8f 5f       	subi	r24, 0xFF	; 255
    2a74:	80 93 0b 02 	sts	0x020B, r24
										return 1;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	8f 83       	std	Y+7, r24	; 0x07
    2a7c:	0f c0       	rjmp	.+30     	; 0x2a9c <Compare_Data+0xbe>

*/

	for (_1st_Counter=0; _1st_Counter<10; _1st_Counter++)
	{
		for (_2nd_Counter=0; _2nd_Counter<NumberOfFlexs; _2nd_Counter++)
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	8f 5f       	subi	r24, 0xFF	; 255
    2a82:	8a 83       	std	Y+2, r24	; 0x02
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	88 23       	and	r24, r24
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <Compare_Data+0xae>
    2a8a:	bd cf       	rjmp	.-134    	; 0x2a06 <Compare_Data+0x28>

	*********************************************

*/

	for (_1st_Counter=0; _1st_Counter<10; _1st_Counter++)
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	8f 5f       	subi	r24, 0xFF	; 255
    2a90:	89 83       	std	Y+1, r24	; 0x01
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	8a 30       	cpi	r24, 0x0A	; 10
    2a96:	08 f4       	brcc	.+2      	; 0x2a9a <Compare_Data+0xbc>
    2a98:	b4 cf       	rjmp	.-152    	; 0x2a02 <Compare_Data+0x24>
/*
		if ( Matching_flag == TRUE)
		break;
*/
	}
	return 0;
    2a9a:	1f 82       	std	Y+7, r1	; 0x07
    2a9c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2a9e:	27 96       	adiw	r28, 0x07	; 7
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <Accelerometor_init>:
/*-----------------------------------------------------------------------------*/

void Accelerometor_init(ADX345_PowerModes Mode , ADXL345_Address EFF_Address)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <Accelerometor_init+0x6>
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	89 83       	std	Y+1, r24	; 0x01
    2abc:	6a 83       	std	Y+2, r22	; 0x02
	I2C_ByteWrite(EFF_Address,POWER_CTRL,Mode);
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	6d e2       	ldi	r22, 0x2D	; 45
    2ac2:	49 81       	ldd	r20, Y+1	; 0x01
    2ac4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0x0B);
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	61 e3       	ldi	r22, 0x31	; 49
    2acc:	4b e0       	ldi	r20, 0x0B	; 11
    2ace:	0e 94 77 0a 	call	0x14ee	; 0x14ee <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSX,-1);
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	6e e1       	ldi	r22, 0x1E	; 30
    2ad6:	4f ef       	ldi	r20, 0xFF	; 255
    2ad8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSY,0);
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	6f e1       	ldi	r22, 0x1F	; 31
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSZ,-1);
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	60 e2       	ldi	r22, 0x20	; 32
    2aea:	4f ef       	ldi	r20, 0xFF	; 255
    2aec:	0e 94 77 0a 	call	0x14ee	; 0x14ee <I2C_ByteWrite>
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0);
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,8);
}
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <Compare_Accs_Data>:
/*-----------------------------------------------------------------------------*/

u8  Compare_Accs_Data ( ADXL345_Data * Ptr_Accs_Readings, ADXL345_Data * Ptr_Acss_Stored_Data)
{
    2afa:	ef 92       	push	r14
    2afc:	ff 92       	push	r15
    2afe:	0f 93       	push	r16
    2b00:	1f 93       	push	r17
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <Compare_Accs_Data+0xe>
    2b08:	00 d0       	rcall	.+0      	; 0x2b0a <Compare_Accs_Data+0x10>
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <Compare_Accs_Data+0x12>
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	9b 83       	std	Y+3, r25	; 0x03
    2b12:	8a 83       	std	Y+2, r24	; 0x02
    2b14:	7d 83       	std	Y+5, r23	; 0x05
    2b16:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	Word_index=0;
    2b18:	10 92 0b 02 	sts	0x020B, r1
	for (i=0; i<10; i++)
    2b1c:	19 82       	std	Y+1, r1	; 0x01
    2b1e:	2c c0       	rjmp	.+88     	; 0x2b78 <Compare_Accs_Data+0x7e>
	{
		if  (  		( (Ptr_Accs_Readings->X_Axis == Ptr_Acss_Stored_Data[i].X_Axis ) )
    2b20:	ea 81       	ldd	r30, Y+2	; 0x02
    2b22:	fb 81       	ldd	r31, Y+3	; 0x03
    2b24:	e0 80       	ld	r14, Z
    2b26:	f1 80       	ldd	r15, Z+1	; 0x01
    2b28:	02 81       	ldd	r16, Z+2	; 0x02
    2b2a:	13 81       	ldd	r17, Z+3	; 0x03
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	28 2f       	mov	r18, r24
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	c9 01       	movw	r24, r18
    2b34:	88 0f       	add	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	82 0f       	add	r24, r18
    2b3a:	93 1f       	adc	r25, r19
    2b3c:	88 0f       	add	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	9c 01       	movw	r18, r24
    2b46:	8c 81       	ldd	r24, Y+4	; 0x04
    2b48:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	e2 0f       	add	r30, r18
    2b4e:	f3 1f       	adc	r31, r19
    2b50:	20 81       	ld	r18, Z
    2b52:	31 81       	ldd	r19, Z+1	; 0x01
    2b54:	42 81       	ldd	r20, Z+2	; 0x02
    2b56:	53 81       	ldd	r21, Z+3	; 0x03
    2b58:	c8 01       	movw	r24, r16
    2b5a:	b7 01       	movw	r22, r14
    2b5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2b60:	88 23       	and	r24, r24
    2b62:	39 f4       	brne	.+14     	; 0x2b72 <Compare_Accs_Data+0x78>
				 && ( (Ptr_Accs_Readings->Z_Axis - Ptr_Acss_Stored_Data[i].Z_Axis ) >= - Z_Angle_Accuracy )
				 && ( (Ptr_Accs_Readings->Z_Axis - Ptr_Acss_Stored_Data[i].Z_Axis ) <=   Z_Angle_Accuracy )
*/
			)
		{
			Word_index= i + 1;
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	8f 5f       	subi	r24, 0xFF	; 255
    2b68:	80 93 0b 02 	sts	0x020B, r24
			return 1;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	8e 83       	std	Y+6, r24	; 0x06
    2b70:	07 c0       	rjmp	.+14     	; 0x2b80 <Compare_Accs_Data+0x86>

u8  Compare_Accs_Data ( ADXL345_Data * Ptr_Accs_Readings, ADXL345_Data * Ptr_Acss_Stored_Data)
{
	u8 i;
	Word_index=0;
	for (i=0; i<10; i++)
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	8f 5f       	subi	r24, 0xFF	; 255
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	8a 30       	cpi	r24, 0x0A	; 10
    2b7c:	88 f2       	brcs	.-94     	; 0x2b20 <Compare_Accs_Data+0x26>
			Word_index= i + 1;
			return 1;
		}

	}
	return 0;
    2b7e:	1e 82       	std	Y+6, r1	; 0x06
    2b80:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2b82:	26 96       	adiw	r28, 0x06	; 6
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	f8 94       	cli
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	cd bf       	out	0x3d, r28	; 61
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	1f 91       	pop	r17
    2b94:	0f 91       	pop	r16
    2b96:	ff 90       	pop	r15
    2b98:	ef 90       	pop	r14
    2b9a:	08 95       	ret

00002b9c <Accelerometor_ReadAxis>:



void Accelerometor_ReadAxis(ADXL345_Address EFF_Address , ADXL345_Data * Ptr_Acc)
{
    2b9c:	0f 93       	push	r16
    2b9e:	1f 93       	push	r17
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	cd 55       	subi	r28, 0x5D	; 93
    2baa:	d0 40       	sbci	r29, 0x00	; 0
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	e5 5a       	subi	r30, 0xA5	; 165
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	80 83       	st	Z, r24
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e4 5a       	subi	r30, 0xA4	; 164
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	71 83       	std	Z+1, r23	; 0x01
    2bc6:	60 83       	st	Z, r22
	uint16 X_Axis_Read;
	uint16 Y_Axis_Read;
	uint16 Z_Axis_Read;


	X_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX0);
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e5 5a       	subi	r30, 0xA5	; 165
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	80 81       	ld	r24, Z
    2bd0:	62 e3       	ldi	r22, 0x32	; 50
    2bd2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <I2C_ByteRead>
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e7 5a       	subi	r30, 0xA7	; 167
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
    2be4:	fe 01       	movw	r30, r28
    2be6:	ef 5a       	subi	r30, 0xAF	; 175
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	a0 e8       	ldi	r26, 0x80	; 128
    2bf0:	bf e3       	ldi	r27, 0x3F	; 63
    2bf2:	80 83       	st	Z, r24
    2bf4:	91 83       	std	Z+1, r25	; 0x01
    2bf6:	a2 83       	std	Z+2, r26	; 0x02
    2bf8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	8e 01       	movw	r16, r28
    2bfc:	03 5b       	subi	r16, 0xB3	; 179
    2bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2c00:	fe 01       	movw	r30, r28
    2c02:	ef 5a       	subi	r30, 0xAF	; 175
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	60 81       	ld	r22, Z
    2c08:	71 81       	ldd	r23, Z+1	; 0x01
    2c0a:	82 81       	ldd	r24, Z+2	; 0x02
    2c0c:	93 81       	ldd	r25, Z+3	; 0x03
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e8       	ldi	r19, 0x80	; 128
    2c12:	4b e3       	ldi	r20, 0x3B	; 59
    2c14:	55 e4       	ldi	r21, 0x45	; 69
    2c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	f8 01       	movw	r30, r16
    2c20:	80 83       	st	Z, r24
    2c22:	91 83       	std	Z+1, r25	; 0x01
    2c24:	a2 83       	std	Z+2, r26	; 0x02
    2c26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c28:	fe 01       	movw	r30, r28
    2c2a:	e3 5b       	subi	r30, 0xB3	; 179
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	60 81       	ld	r22, Z
    2c30:	71 81       	ldd	r23, Z+1	; 0x01
    2c32:	82 81       	ldd	r24, Z+2	; 0x02
    2c34:	93 81       	ldd	r25, Z+3	; 0x03
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e8       	ldi	r20, 0x80	; 128
    2c3c:	5f e3       	ldi	r21, 0x3F	; 63
    2c3e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c42:	88 23       	and	r24, r24
    2c44:	44 f4       	brge	.+16     	; 0x2c56 <Accelerometor_ReadAxis+0xba>
		__ticks = 1;
    2c46:	fe 01       	movw	r30, r28
    2c48:	e5 5b       	subi	r30, 0xB5	; 181
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	80 83       	st	Z, r24
    2c54:	64 c0       	rjmp	.+200    	; 0x2d1e <Accelerometor_ReadAxis+0x182>
	else if (__tmp > 65535)
    2c56:	fe 01       	movw	r30, r28
    2c58:	e3 5b       	subi	r30, 0xB3	; 179
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	60 81       	ld	r22, Z
    2c5e:	71 81       	ldd	r23, Z+1	; 0x01
    2c60:	82 81       	ldd	r24, Z+2	; 0x02
    2c62:	93 81       	ldd	r25, Z+3	; 0x03
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	3f ef       	ldi	r19, 0xFF	; 255
    2c68:	4f e7       	ldi	r20, 0x7F	; 127
    2c6a:	57 e4       	ldi	r21, 0x47	; 71
    2c6c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c70:	18 16       	cp	r1, r24
    2c72:	0c f0       	brlt	.+2      	; 0x2c76 <Accelerometor_ReadAxis+0xda>
    2c74:	43 c0       	rjmp	.+134    	; 0x2cfc <Accelerometor_ReadAxis+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c76:	fe 01       	movw	r30, r28
    2c78:	ef 5a       	subi	r30, 0xAF	; 175
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e2       	ldi	r20, 0x20	; 32
    2c8a:	51 e4       	ldi	r21, 0x41	; 65
    2c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	8e 01       	movw	r16, r28
    2c96:	05 5b       	subi	r16, 0xB5	; 181
    2c98:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9a:	bc 01       	movw	r22, r24
    2c9c:	cd 01       	movw	r24, r26
    2c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	f8 01       	movw	r30, r16
    2ca8:	91 83       	std	Z+1, r25	; 0x01
    2caa:	80 83       	st	Z, r24
    2cac:	1f c0       	rjmp	.+62     	; 0x2cec <Accelerometor_ReadAxis+0x150>
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e7 5b       	subi	r30, 0xB7	; 183
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	8c e2       	ldi	r24, 0x2C	; 44
    2cb6:	91 e0       	ldi	r25, 0x01	; 1
    2cb8:	91 83       	std	Z+1, r25	; 0x01
    2cba:	80 83       	st	Z, r24
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e7 5b       	subi	r30, 0xB7	; 183
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <Accelerometor_ReadAxis+0x12a>
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e7 5b       	subi	r30, 0xB7	; 183
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	91 83       	std	Z+1, r25	; 0x01
    2cd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd4:	de 01       	movw	r26, r28
    2cd6:	a5 5b       	subi	r26, 0xB5	; 181
    2cd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e5 5b       	subi	r30, 0xB5	; 181
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	91 81       	ldd	r25, Z+1	; 0x01
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	11 96       	adiw	r26, 0x01	; 1
    2ce8:	9c 93       	st	X, r25
    2cea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cec:	fe 01       	movw	r30, r28
    2cee:	e5 5b       	subi	r30, 0xB5	; 181
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	d1 f6       	brne	.-76     	; 0x2cae <Accelerometor_ReadAxis+0x112>
    2cfa:	27 c0       	rjmp	.+78     	; 0x2d4a <Accelerometor_ReadAxis+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfc:	8e 01       	movw	r16, r28
    2cfe:	05 5b       	subi	r16, 0xB5	; 181
    2d00:	1f 4f       	sbci	r17, 0xFF	; 255
    2d02:	fe 01       	movw	r30, r28
    2d04:	e3 5b       	subi	r30, 0xB3	; 179
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	60 81       	ld	r22, Z
    2d0a:	71 81       	ldd	r23, Z+1	; 0x01
    2d0c:	82 81       	ldd	r24, Z+2	; 0x02
    2d0e:	93 81       	ldd	r25, Z+3	; 0x03
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	f8 01       	movw	r30, r16
    2d1a:	91 83       	std	Z+1, r25	; 0x01
    2d1c:	80 83       	st	Z, r24
    2d1e:	de 01       	movw	r26, r28
    2d20:	a9 5b       	subi	r26, 0xB9	; 185
    2d22:	bf 4f       	sbci	r27, 0xFF	; 255
    2d24:	fe 01       	movw	r30, r28
    2d26:	e5 5b       	subi	r30, 0xB5	; 181
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 81       	ld	r24, Z
    2d2c:	91 81       	ldd	r25, Z+1	; 0x01
    2d2e:	8d 93       	st	X+, r24
    2d30:	9c 93       	st	X, r25
    2d32:	fe 01       	movw	r30, r28
    2d34:	e9 5b       	subi	r30, 0xB9	; 185
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <Accelerometor_ReadAxis+0x1a0>
    2d40:	fe 01       	movw	r30, r28
    2d42:	e9 5b       	subi	r30, 0xB9	; 185
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	80 83       	st	Z, r24
	_delay_ms(1);
	X_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX1))<<8;
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e5 5a       	subi	r30, 0xA5	; 165
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	80 81       	ld	r24, Z
    2d52:	63 e3       	ldi	r22, 0x33	; 51
    2d54:	0e 94 b0 0a 	call	0x1560	; 0x1560 <I2C_ByteRead>
    2d58:	88 2f       	mov	r24, r24
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	98 2f       	mov	r25, r24
    2d5e:	88 27       	eor	r24, r24
    2d60:	9c 01       	movw	r18, r24
    2d62:	de 01       	movw	r26, r28
    2d64:	a7 5a       	subi	r26, 0xA7	; 167
    2d66:	bf 4f       	sbci	r27, 0xFF	; 255
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e7 5a       	subi	r30, 0xA7	; 167
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 81       	ld	r24, Z
    2d70:	91 81       	ldd	r25, Z+1	; 0x01
    2d72:	82 2b       	or	r24, r18
    2d74:	93 2b       	or	r25, r19
    2d76:	8d 93       	st	X+, r24
    2d78:	9c 93       	st	X, r25
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	ed 5b       	subi	r30, 0xBD	; 189
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	a0 e8       	ldi	r26, 0x80	; 128
    2d86:	bf e3       	ldi	r27, 0x3F	; 63
    2d88:	80 83       	st	Z, r24
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	a2 83       	std	Z+2, r26	; 0x02
    2d8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d90:	8e 01       	movw	r16, r28
    2d92:	01 5c       	subi	r16, 0xC1	; 193
    2d94:	1f 4f       	sbci	r17, 0xFF	; 255
    2d96:	fe 01       	movw	r30, r28
    2d98:	ed 5b       	subi	r30, 0xBD	; 189
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	60 81       	ld	r22, Z
    2d9e:	71 81       	ldd	r23, Z+1	; 0x01
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	93 81       	ldd	r25, Z+3	; 0x03
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e8       	ldi	r19, 0x80	; 128
    2da8:	4b e3       	ldi	r20, 0x3B	; 59
    2daa:	55 e4       	ldi	r21, 0x45	; 69
    2dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	f8 01       	movw	r30, r16
    2db6:	80 83       	st	Z, r24
    2db8:	91 83       	std	Z+1, r25	; 0x01
    2dba:	a2 83       	std	Z+2, r26	; 0x02
    2dbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	ff 96       	adiw	r30, 0x3f	; 63
    2dc2:	60 81       	ld	r22, Z
    2dc4:	71 81       	ldd	r23, Z+1	; 0x01
    2dc6:	82 81       	ldd	r24, Z+2	; 0x02
    2dc8:	93 81       	ldd	r25, Z+3	; 0x03
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e8       	ldi	r20, 0x80	; 128
    2dd0:	5f e3       	ldi	r21, 0x3F	; 63
    2dd2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2dd6:	88 23       	and	r24, r24
    2dd8:	2c f4       	brge	.+10     	; 0x2de4 <Accelerometor_ReadAxis+0x248>
		__ticks = 1;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9e af       	std	Y+62, r25	; 0x3e
    2de0:	8d af       	std	Y+61, r24	; 0x3d
    2de2:	46 c0       	rjmp	.+140    	; 0x2e70 <Accelerometor_ReadAxis+0x2d4>
	else if (__tmp > 65535)
    2de4:	fe 01       	movw	r30, r28
    2de6:	ff 96       	adiw	r30, 0x3f	; 63
    2de8:	60 81       	ld	r22, Z
    2dea:	71 81       	ldd	r23, Z+1	; 0x01
    2dec:	82 81       	ldd	r24, Z+2	; 0x02
    2dee:	93 81       	ldd	r25, Z+3	; 0x03
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	3f ef       	ldi	r19, 0xFF	; 255
    2df4:	4f e7       	ldi	r20, 0x7F	; 127
    2df6:	57 e4       	ldi	r21, 0x47	; 71
    2df8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2dfc:	18 16       	cp	r1, r24
    2dfe:	64 f5       	brge	.+88     	; 0x2e58 <Accelerometor_ReadAxis+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e00:	fe 01       	movw	r30, r28
    2e02:	ed 5b       	subi	r30, 0xBD	; 189
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	60 81       	ld	r22, Z
    2e08:	71 81       	ldd	r23, Z+1	; 0x01
    2e0a:	82 81       	ldd	r24, Z+2	; 0x02
    2e0c:	93 81       	ldd	r25, Z+3	; 0x03
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e2       	ldi	r20, 0x20	; 32
    2e14:	51 e4       	ldi	r21, 0x41	; 65
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9e af       	std	Y+62, r25	; 0x3e
    2e2c:	8d af       	std	Y+61, r24	; 0x3d
    2e2e:	0f c0       	rjmp	.+30     	; 0x2e4e <Accelerometor_ReadAxis+0x2b2>
    2e30:	8c e2       	ldi	r24, 0x2C	; 44
    2e32:	91 e0       	ldi	r25, 0x01	; 1
    2e34:	9c af       	std	Y+60, r25	; 0x3c
    2e36:	8b af       	std	Y+59, r24	; 0x3b
    2e38:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e3a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <Accelerometor_ReadAxis+0x2a0>
    2e40:	9c af       	std	Y+60, r25	; 0x3c
    2e42:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e44:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e46:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	9e af       	std	Y+62, r25	; 0x3e
    2e4c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e50:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	69 f7       	brne	.-38     	; 0x2e30 <Accelerometor_ReadAxis+0x294>
    2e56:	16 c0       	rjmp	.+44     	; 0x2e84 <Accelerometor_ReadAxis+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e58:	fe 01       	movw	r30, r28
    2e5a:	ff 96       	adiw	r30, 0x3f	; 63
    2e5c:	60 81       	ld	r22, Z
    2e5e:	71 81       	ldd	r23, Z+1	; 0x01
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	93 81       	ldd	r25, Z+3	; 0x03
    2e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	9e af       	std	Y+62, r25	; 0x3e
    2e6e:	8d af       	std	Y+61, r24	; 0x3d
    2e70:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e72:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e74:	9a af       	std	Y+58, r25	; 0x3a
    2e76:	89 af       	std	Y+57, r24	; 0x39
    2e78:	89 ad       	ldd	r24, Y+57	; 0x39
    2e7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <Accelerometor_ReadAxis+0x2e0>
    2e80:	9a af       	std	Y+58, r25	; 0x3a
    2e82:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	Y_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY0);
    2e84:	fe 01       	movw	r30, r28
    2e86:	e5 5a       	subi	r30, 0xA5	; 165
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	80 81       	ld	r24, Z
    2e8c:	64 e3       	ldi	r22, 0x34	; 52
    2e8e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <I2C_ByteRead>
    2e92:	fe 01       	movw	r30, r28
    2e94:	e9 5a       	subi	r30, 0xA9	; 169
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	88 2f       	mov	r24, r24
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	a0 e8       	ldi	r26, 0x80	; 128
    2ea6:	bf e3       	ldi	r27, 0x3F	; 63
    2ea8:	8d ab       	std	Y+53, r24	; 0x35
    2eaa:	9e ab       	std	Y+54, r25	; 0x36
    2eac:	af ab       	std	Y+55, r26	; 0x37
    2eae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb0:	6d a9       	ldd	r22, Y+53	; 0x35
    2eb2:	7e a9       	ldd	r23, Y+54	; 0x36
    2eb4:	8f a9       	ldd	r24, Y+55	; 0x37
    2eb6:	98 ad       	ldd	r25, Y+56	; 0x38
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e8       	ldi	r19, 0x80	; 128
    2ebc:	4b e3       	ldi	r20, 0x3B	; 59
    2ebe:	55 e4       	ldi	r21, 0x45	; 69
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	89 ab       	std	Y+49, r24	; 0x31
    2eca:	9a ab       	std	Y+50, r25	; 0x32
    2ecc:	ab ab       	std	Y+51, r26	; 0x33
    2ece:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ed0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ed2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ed4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ed6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e8       	ldi	r20, 0x80	; 128
    2ede:	5f e3       	ldi	r21, 0x3F	; 63
    2ee0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ee4:	88 23       	and	r24, r24
    2ee6:	2c f4       	brge	.+10     	; 0x2ef2 <Accelerometor_ReadAxis+0x356>
		__ticks = 1;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	98 ab       	std	Y+48, r25	; 0x30
    2eee:	8f a7       	std	Y+47, r24	; 0x2f
    2ef0:	3f c0       	rjmp	.+126    	; 0x2f70 <Accelerometor_ReadAxis+0x3d4>
	else if (__tmp > 65535)
    2ef2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ef4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ef6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ef8:	9c a9       	ldd	r25, Y+52	; 0x34
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	3f ef       	ldi	r19, 0xFF	; 255
    2efe:	4f e7       	ldi	r20, 0x7F	; 127
    2f00:	57 e4       	ldi	r21, 0x47	; 71
    2f02:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f06:	18 16       	cp	r1, r24
    2f08:	4c f5       	brge	.+82     	; 0x2f5c <Accelerometor_ReadAxis+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f0a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f0c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f0e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f10:	98 ad       	ldd	r25, Y+56	; 0x38
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e2       	ldi	r20, 0x20	; 32
    2f18:	51 e4       	ldi	r21, 0x41	; 65
    2f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	bc 01       	movw	r22, r24
    2f24:	cd 01       	movw	r24, r26
    2f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	98 ab       	std	Y+48, r25	; 0x30
    2f30:	8f a7       	std	Y+47, r24	; 0x2f
    2f32:	0f c0       	rjmp	.+30     	; 0x2f52 <Accelerometor_ReadAxis+0x3b6>
    2f34:	8c e2       	ldi	r24, 0x2C	; 44
    2f36:	91 e0       	ldi	r25, 0x01	; 1
    2f38:	9e a7       	std	Y+46, r25	; 0x2e
    2f3a:	8d a7       	std	Y+45, r24	; 0x2d
    2f3c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f3e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	f1 f7       	brne	.-4      	; 0x2f40 <Accelerometor_ReadAxis+0x3a4>
    2f44:	9e a7       	std	Y+46, r25	; 0x2e
    2f46:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	98 ab       	std	Y+48, r25	; 0x30
    2f50:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f54:	98 a9       	ldd	r25, Y+48	; 0x30
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	69 f7       	brne	.-38     	; 0x2f34 <Accelerometor_ReadAxis+0x398>
    2f5a:	14 c0       	rjmp	.+40     	; 0x2f84 <Accelerometor_ReadAxis+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f5c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f5e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f60:	8b a9       	ldd	r24, Y+51	; 0x33
    2f62:	9c a9       	ldd	r25, Y+52	; 0x34
    2f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	98 ab       	std	Y+48, r25	; 0x30
    2f6e:	8f a7       	std	Y+47, r24	; 0x2f
    2f70:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f72:	98 a9       	ldd	r25, Y+48	; 0x30
    2f74:	9c a7       	std	Y+44, r25	; 0x2c
    2f76:	8b a7       	std	Y+43, r24	; 0x2b
    2f78:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <Accelerometor_ReadAxis+0x3e0>
    2f80:	9c a7       	std	Y+44, r25	; 0x2c
    2f82:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Y_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY1))<<8;
    2f84:	fe 01       	movw	r30, r28
    2f86:	e5 5a       	subi	r30, 0xA5	; 165
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	65 e3       	ldi	r22, 0x35	; 53
    2f8e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <I2C_ByteRead>
    2f92:	88 2f       	mov	r24, r24
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	98 2f       	mov	r25, r24
    2f98:	88 27       	eor	r24, r24
    2f9a:	9c 01       	movw	r18, r24
    2f9c:	de 01       	movw	r26, r28
    2f9e:	a9 5a       	subi	r26, 0xA9	; 169
    2fa0:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e9 5a       	subi	r30, 0xA9	; 169
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 81       	ld	r24, Z
    2faa:	91 81       	ldd	r25, Z+1	; 0x01
    2fac:	82 2b       	or	r24, r18
    2fae:	93 2b       	or	r25, r19
    2fb0:	8d 93       	st	X+, r24
    2fb2:	9c 93       	st	X, r25
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	a0 e8       	ldi	r26, 0x80	; 128
    2fba:	bf e3       	ldi	r27, 0x3F	; 63
    2fbc:	8f a3       	std	Y+39, r24	; 0x27
    2fbe:	98 a7       	std	Y+40, r25	; 0x28
    2fc0:	a9 a7       	std	Y+41, r26	; 0x29
    2fc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc4:	6f a1       	ldd	r22, Y+39	; 0x27
    2fc6:	78 a5       	ldd	r23, Y+40	; 0x28
    2fc8:	89 a5       	ldd	r24, Y+41	; 0x29
    2fca:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e8       	ldi	r19, 0x80	; 128
    2fd0:	4b e3       	ldi	r20, 0x3B	; 59
    2fd2:	55 e4       	ldi	r21, 0x45	; 69
    2fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	8b a3       	std	Y+35, r24	; 0x23
    2fde:	9c a3       	std	Y+36, r25	; 0x24
    2fe0:	ad a3       	std	Y+37, r26	; 0x25
    2fe2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fe4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fe6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fe8:	8d a1       	ldd	r24, Y+37	; 0x25
    2fea:	9e a1       	ldd	r25, Y+38	; 0x26
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e8       	ldi	r20, 0x80	; 128
    2ff2:	5f e3       	ldi	r21, 0x3F	; 63
    2ff4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ff8:	88 23       	and	r24, r24
    2ffa:	2c f4       	brge	.+10     	; 0x3006 <Accelerometor_ReadAxis+0x46a>
		__ticks = 1;
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	9a a3       	std	Y+34, r25	; 0x22
    3002:	89 a3       	std	Y+33, r24	; 0x21
    3004:	3f c0       	rjmp	.+126    	; 0x3084 <Accelerometor_ReadAxis+0x4e8>
	else if (__tmp > 65535)
    3006:	6b a1       	ldd	r22, Y+35	; 0x23
    3008:	7c a1       	ldd	r23, Y+36	; 0x24
    300a:	8d a1       	ldd	r24, Y+37	; 0x25
    300c:	9e a1       	ldd	r25, Y+38	; 0x26
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	3f ef       	ldi	r19, 0xFF	; 255
    3012:	4f e7       	ldi	r20, 0x7F	; 127
    3014:	57 e4       	ldi	r21, 0x47	; 71
    3016:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    301a:	18 16       	cp	r1, r24
    301c:	4c f5       	brge	.+82     	; 0x3070 <Accelerometor_ReadAxis+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301e:	6f a1       	ldd	r22, Y+39	; 0x27
    3020:	78 a5       	ldd	r23, Y+40	; 0x28
    3022:	89 a5       	ldd	r24, Y+41	; 0x29
    3024:	9a a5       	ldd	r25, Y+42	; 0x2a
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e2       	ldi	r20, 0x20	; 32
    302c:	51 e4       	ldi	r21, 0x41	; 65
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	bc 01       	movw	r22, r24
    3038:	cd 01       	movw	r24, r26
    303a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	9a a3       	std	Y+34, r25	; 0x22
    3044:	89 a3       	std	Y+33, r24	; 0x21
    3046:	0f c0       	rjmp	.+30     	; 0x3066 <Accelerometor_ReadAxis+0x4ca>
    3048:	8c e2       	ldi	r24, 0x2C	; 44
    304a:	91 e0       	ldi	r25, 0x01	; 1
    304c:	98 a3       	std	Y+32, r25	; 0x20
    304e:	8f 8f       	std	Y+31, r24	; 0x1f
    3050:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3052:	98 a1       	ldd	r25, Y+32	; 0x20
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <Accelerometor_ReadAxis+0x4b8>
    3058:	98 a3       	std	Y+32, r25	; 0x20
    305a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305c:	89 a1       	ldd	r24, Y+33	; 0x21
    305e:	9a a1       	ldd	r25, Y+34	; 0x22
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	9a a3       	std	Y+34, r25	; 0x22
    3064:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3066:	89 a1       	ldd	r24, Y+33	; 0x21
    3068:	9a a1       	ldd	r25, Y+34	; 0x22
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	69 f7       	brne	.-38     	; 0x3048 <Accelerometor_ReadAxis+0x4ac>
    306e:	14 c0       	rjmp	.+40     	; 0x3098 <Accelerometor_ReadAxis+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3070:	6b a1       	ldd	r22, Y+35	; 0x23
    3072:	7c a1       	ldd	r23, Y+36	; 0x24
    3074:	8d a1       	ldd	r24, Y+37	; 0x25
    3076:	9e a1       	ldd	r25, Y+38	; 0x26
    3078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	9a a3       	std	Y+34, r25	; 0x22
    3082:	89 a3       	std	Y+33, r24	; 0x21
    3084:	89 a1       	ldd	r24, Y+33	; 0x21
    3086:	9a a1       	ldd	r25, Y+34	; 0x22
    3088:	9e 8f       	std	Y+30, r25	; 0x1e
    308a:	8d 8f       	std	Y+29, r24	; 0x1d
    308c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    308e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <Accelerometor_ReadAxis+0x4f4>
    3094:	9e 8f       	std	Y+30, r25	; 0x1e
    3096:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Z_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ0);
    3098:	fe 01       	movw	r30, r28
    309a:	e5 5a       	subi	r30, 0xA5	; 165
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 81       	ld	r24, Z
    30a0:	66 e3       	ldi	r22, 0x36	; 54
    30a2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <I2C_ByteRead>
    30a6:	fe 01       	movw	r30, r28
    30a8:	eb 5a       	subi	r30, 0xAB	; 171
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	88 2f       	mov	r24, r24
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	91 83       	std	Z+1, r25	; 0x01
    30b2:	80 83       	st	Z, r24
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	a0 e8       	ldi	r26, 0x80	; 128
    30ba:	bf e3       	ldi	r27, 0x3F	; 63
    30bc:	89 8f       	std	Y+25, r24	; 0x19
    30be:	9a 8f       	std	Y+26, r25	; 0x1a
    30c0:	ab 8f       	std	Y+27, r26	; 0x1b
    30c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c4:	69 8d       	ldd	r22, Y+25	; 0x19
    30c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e8       	ldi	r19, 0x80	; 128
    30d0:	4b e3       	ldi	r20, 0x3B	; 59
    30d2:	55 e4       	ldi	r21, 0x45	; 69
    30d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	8d 8b       	std	Y+21, r24	; 0x15
    30de:	9e 8b       	std	Y+22, r25	; 0x16
    30e0:	af 8b       	std	Y+23, r26	; 0x17
    30e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30e4:	6d 89       	ldd	r22, Y+21	; 0x15
    30e6:	7e 89       	ldd	r23, Y+22	; 0x16
    30e8:	8f 89       	ldd	r24, Y+23	; 0x17
    30ea:	98 8d       	ldd	r25, Y+24	; 0x18
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e8       	ldi	r20, 0x80	; 128
    30f2:	5f e3       	ldi	r21, 0x3F	; 63
    30f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    30f8:	88 23       	and	r24, r24
    30fa:	2c f4       	brge	.+10     	; 0x3106 <Accelerometor_ReadAxis+0x56a>
		__ticks = 1;
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	9c 8b       	std	Y+20, r25	; 0x14
    3102:	8b 8b       	std	Y+19, r24	; 0x13
    3104:	3f c0       	rjmp	.+126    	; 0x3184 <Accelerometor_ReadAxis+0x5e8>
	else if (__tmp > 65535)
    3106:	6d 89       	ldd	r22, Y+21	; 0x15
    3108:	7e 89       	ldd	r23, Y+22	; 0x16
    310a:	8f 89       	ldd	r24, Y+23	; 0x17
    310c:	98 8d       	ldd	r25, Y+24	; 0x18
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	3f ef       	ldi	r19, 0xFF	; 255
    3112:	4f e7       	ldi	r20, 0x7F	; 127
    3114:	57 e4       	ldi	r21, 0x47	; 71
    3116:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    311a:	18 16       	cp	r1, r24
    311c:	4c f5       	brge	.+82     	; 0x3170 <Accelerometor_ReadAxis+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311e:	69 8d       	ldd	r22, Y+25	; 0x19
    3120:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3122:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3124:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e2       	ldi	r20, 0x20	; 32
    312c:	51 e4       	ldi	r21, 0x41	; 65
    312e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	bc 01       	movw	r22, r24
    3138:	cd 01       	movw	r24, r26
    313a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9c 8b       	std	Y+20, r25	; 0x14
    3144:	8b 8b       	std	Y+19, r24	; 0x13
    3146:	0f c0       	rjmp	.+30     	; 0x3166 <Accelerometor_ReadAxis+0x5ca>
    3148:	8c e2       	ldi	r24, 0x2C	; 44
    314a:	91 e0       	ldi	r25, 0x01	; 1
    314c:	9a 8b       	std	Y+18, r25	; 0x12
    314e:	89 8b       	std	Y+17, r24	; 0x11
    3150:	89 89       	ldd	r24, Y+17	; 0x11
    3152:	9a 89       	ldd	r25, Y+18	; 0x12
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <Accelerometor_ReadAxis+0x5b8>
    3158:	9a 8b       	std	Y+18, r25	; 0x12
    315a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315c:	8b 89       	ldd	r24, Y+19	; 0x13
    315e:	9c 89       	ldd	r25, Y+20	; 0x14
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	9c 8b       	std	Y+20, r25	; 0x14
    3164:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3166:	8b 89       	ldd	r24, Y+19	; 0x13
    3168:	9c 89       	ldd	r25, Y+20	; 0x14
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	69 f7       	brne	.-38     	; 0x3148 <Accelerometor_ReadAxis+0x5ac>
    316e:	14 c0       	rjmp	.+40     	; 0x3198 <Accelerometor_ReadAxis+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3170:	6d 89       	ldd	r22, Y+21	; 0x15
    3172:	7e 89       	ldd	r23, Y+22	; 0x16
    3174:	8f 89       	ldd	r24, Y+23	; 0x17
    3176:	98 8d       	ldd	r25, Y+24	; 0x18
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	9c 8b       	std	Y+20, r25	; 0x14
    3182:	8b 8b       	std	Y+19, r24	; 0x13
    3184:	8b 89       	ldd	r24, Y+19	; 0x13
    3186:	9c 89       	ldd	r25, Y+20	; 0x14
    3188:	98 8b       	std	Y+16, r25	; 0x10
    318a:	8f 87       	std	Y+15, r24	; 0x0f
    318c:	8f 85       	ldd	r24, Y+15	; 0x0f
    318e:	98 89       	ldd	r25, Y+16	; 0x10
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 f7       	brne	.-4      	; 0x3190 <Accelerometor_ReadAxis+0x5f4>
    3194:	98 8b       	std	Y+16, r25	; 0x10
    3196:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Z_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ1))<<8;
    3198:	fe 01       	movw	r30, r28
    319a:	e5 5a       	subi	r30, 0xA5	; 165
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	80 81       	ld	r24, Z
    31a0:	67 e3       	ldi	r22, 0x37	; 55
    31a2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <I2C_ByteRead>
    31a6:	88 2f       	mov	r24, r24
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	98 2f       	mov	r25, r24
    31ac:	88 27       	eor	r24, r24
    31ae:	9c 01       	movw	r18, r24
    31b0:	de 01       	movw	r26, r28
    31b2:	ab 5a       	subi	r26, 0xAB	; 171
    31b4:	bf 4f       	sbci	r27, 0xFF	; 255
    31b6:	fe 01       	movw	r30, r28
    31b8:	eb 5a       	subi	r30, 0xAB	; 171
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 81       	ld	r24, Z
    31be:	91 81       	ldd	r25, Z+1	; 0x01
    31c0:	82 2b       	or	r24, r18
    31c2:	93 2b       	or	r25, r19
    31c4:	8d 93       	st	X+, r24
    31c6:	9c 93       	st	X, r25
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	a0 e8       	ldi	r26, 0x80	; 128
    31ce:	bf e3       	ldi	r27, 0x3F	; 63
    31d0:	8b 87       	std	Y+11, r24	; 0x0b
    31d2:	9c 87       	std	Y+12, r25	; 0x0c
    31d4:	ad 87       	std	Y+13, r26	; 0x0d
    31d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31da:	7c 85       	ldd	r23, Y+12	; 0x0c
    31dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31de:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e8       	ldi	r19, 0x80	; 128
    31e4:	4b e3       	ldi	r20, 0x3B	; 59
    31e6:	55 e4       	ldi	r21, 0x45	; 69
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	8f 83       	std	Y+7, r24	; 0x07
    31f2:	98 87       	std	Y+8, r25	; 0x08
    31f4:	a9 87       	std	Y+9, r26	; 0x09
    31f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	40 e8       	ldi	r20, 0x80	; 128
    3206:	5f e3       	ldi	r21, 0x3F	; 63
    3208:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    320c:	88 23       	and	r24, r24
    320e:	2c f4       	brge	.+10     	; 0x321a <Accelerometor_ReadAxis+0x67e>
		__ticks = 1;
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	9e 83       	std	Y+6, r25	; 0x06
    3216:	8d 83       	std	Y+5, r24	; 0x05
    3218:	3f c0       	rjmp	.+126    	; 0x3298 <Accelerometor_ReadAxis+0x6fc>
	else if (__tmp > 65535)
    321a:	6f 81       	ldd	r22, Y+7	; 0x07
    321c:	78 85       	ldd	r23, Y+8	; 0x08
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	3f ef       	ldi	r19, 0xFF	; 255
    3226:	4f e7       	ldi	r20, 0x7F	; 127
    3228:	57 e4       	ldi	r21, 0x47	; 71
    322a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    322e:	18 16       	cp	r1, r24
    3230:	4c f5       	brge	.+82     	; 0x3284 <Accelerometor_ReadAxis+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3232:	6b 85       	ldd	r22, Y+11	; 0x0b
    3234:	7c 85       	ldd	r23, Y+12	; 0x0c
    3236:	8d 85       	ldd	r24, Y+13	; 0x0d
    3238:	9e 85       	ldd	r25, Y+14	; 0x0e
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e2       	ldi	r20, 0x20	; 32
    3240:	51 e4       	ldi	r21, 0x41	; 65
    3242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	bc 01       	movw	r22, r24
    324c:	cd 01       	movw	r24, r26
    324e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	9e 83       	std	Y+6, r25	; 0x06
    3258:	8d 83       	std	Y+5, r24	; 0x05
    325a:	0f c0       	rjmp	.+30     	; 0x327a <Accelerometor_ReadAxis+0x6de>
    325c:	8c e2       	ldi	r24, 0x2C	; 44
    325e:	91 e0       	ldi	r25, 0x01	; 1
    3260:	9c 83       	std	Y+4, r25	; 0x04
    3262:	8b 83       	std	Y+3, r24	; 0x03
    3264:	8b 81       	ldd	r24, Y+3	; 0x03
    3266:	9c 81       	ldd	r25, Y+4	; 0x04
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	f1 f7       	brne	.-4      	; 0x3268 <Accelerometor_ReadAxis+0x6cc>
    326c:	9c 83       	std	Y+4, r25	; 0x04
    326e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3270:	8d 81       	ldd	r24, Y+5	; 0x05
    3272:	9e 81       	ldd	r25, Y+6	; 0x06
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	9e 83       	std	Y+6, r25	; 0x06
    3278:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327a:	8d 81       	ldd	r24, Y+5	; 0x05
    327c:	9e 81       	ldd	r25, Y+6	; 0x06
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	69 f7       	brne	.-38     	; 0x325c <Accelerometor_ReadAxis+0x6c0>
    3282:	14 c0       	rjmp	.+40     	; 0x32ac <Accelerometor_ReadAxis+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3284:	6f 81       	ldd	r22, Y+7	; 0x07
    3286:	78 85       	ldd	r23, Y+8	; 0x08
    3288:	89 85       	ldd	r24, Y+9	; 0x09
    328a:	9a 85       	ldd	r25, Y+10	; 0x0a
    328c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	9e 83       	std	Y+6, r25	; 0x06
    3296:	8d 83       	std	Y+5, r24	; 0x05
    3298:	8d 81       	ldd	r24, Y+5	; 0x05
    329a:	9e 81       	ldd	r25, Y+6	; 0x06
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <Accelerometor_ReadAxis+0x708>
    32a8:	9a 83       	std	Y+2, r25	; 0x02
    32aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	if ( (X_Axis_Read < 300) && (X_Axis_Read > 200) )
    32ac:	fe 01       	movw	r30, r28
    32ae:	e7 5a       	subi	r30, 0xA7	; 167
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
    32b6:	f1 e0       	ldi	r31, 0x01	; 1
    32b8:	8c 32       	cpi	r24, 0x2C	; 44
    32ba:	9f 07       	cpc	r25, r31
    32bc:	b0 f4       	brcc	.+44     	; 0x32ea <Accelerometor_ReadAxis+0x74e>
    32be:	fe 01       	movw	r30, r28
    32c0:	e7 5a       	subi	r30, 0xA7	; 167
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	89 3c       	cpi	r24, 0xC9	; 201
    32ca:	91 05       	cpc	r25, r1
    32cc:	70 f0       	brcs	.+28     	; 0x32ea <Accelerometor_ReadAxis+0x74e>
	{
		Ptr_Acc -> X_Axis= 1;
    32ce:	fe 01       	movw	r30, r28
    32d0:	e4 5a       	subi	r30, 0xA4	; 164
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	01 90       	ld	r0, Z+
    32d6:	f0 81       	ld	r31, Z
    32d8:	e0 2d       	mov	r30, r0
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	a0 e8       	ldi	r26, 0x80	; 128
    32e0:	bf e3       	ldi	r27, 0x3F	; 63
    32e2:	80 83       	st	Z, r24
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	a2 83       	std	Z+2, r26	; 0x02
    32e8:	b3 83       	std	Z+3, r27	; 0x03
	}
	Ptr_Acc -> Y_Axis= (Y_Axis_Read);
    32ea:	fe 01       	movw	r30, r28
    32ec:	e9 5a       	subi	r30, 0xA9	; 169
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 81       	ld	r24, Z
    32f2:	91 81       	ldd	r25, Z+1	; 0x01
    32f4:	cc 01       	movw	r24, r24
    32f6:	a0 e0       	ldi	r26, 0x00	; 0
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	bc 01       	movw	r22, r24
    32fc:	cd 01       	movw	r24, r26
    32fe:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	fe 01       	movw	r30, r28
    3308:	e4 5a       	subi	r30, 0xA4	; 164
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	01 90       	ld	r0, Z+
    330e:	f0 81       	ld	r31, Z
    3310:	e0 2d       	mov	r30, r0
    3312:	84 83       	std	Z+4, r24	; 0x04
    3314:	95 83       	std	Z+5, r25	; 0x05
    3316:	a6 83       	std	Z+6, r26	; 0x06
    3318:	b7 83       	std	Z+7, r27	; 0x07
	Ptr_Acc -> Z_Axis= (Z_Axis_Read);
    331a:	fe 01       	movw	r30, r28
    331c:	eb 5a       	subi	r30, 0xAB	; 171
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	80 81       	ld	r24, Z
    3322:	91 81       	ldd	r25, Z+1	; 0x01
    3324:	cc 01       	movw	r24, r24
    3326:	a0 e0       	ldi	r26, 0x00	; 0
    3328:	b0 e0       	ldi	r27, 0x00	; 0
    332a:	bc 01       	movw	r22, r24
    332c:	cd 01       	movw	r24, r26
    332e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	fe 01       	movw	r30, r28
    3338:	e4 5a       	subi	r30, 0xA4	; 164
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	01 90       	ld	r0, Z+
    333e:	f0 81       	ld	r31, Z
    3340:	e0 2d       	mov	r30, r0
    3342:	80 87       	std	Z+8, r24	; 0x08
    3344:	91 87       	std	Z+9, r25	; 0x09
    3346:	a2 87       	std	Z+10, r26	; 0x0a
    3348:	b3 87       	std	Z+11, r27	; 0x0b
}
    334a:	c3 5a       	subi	r28, 0xA3	; 163
    334c:	df 4f       	sbci	r29, 0xFF	; 255
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	cf 91       	pop	r28
    335a:	df 91       	pop	r29
    335c:	1f 91       	pop	r17
    335e:	0f 91       	pop	r16
    3360:	08 95       	ret

00003362 <Compare_Flex_Data>:

/**********************************************************************************/

u8  Compare_Flex_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data)
{
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	27 97       	sbiw	r28, 0x07	; 7
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	9c 83       	std	Y+4, r25	; 0x04
    3378:	8b 83       	std	Y+3, r24	; 0x03
    337a:	7e 83       	std	Y+6, r23	; 0x06
    337c:	6d 83       	std	Y+5, r22	; 0x05
	u8 Counter;
	u8 Counter1;
/*	u8 Matching_flag=FALSE;*/
	Word_index=0;
    337e:	10 92 0b 02 	sts	0x020B, r1
	for (Counter1=0; Counter1<10; Counter1++)
    3382:	19 82       	std	Y+1, r1	; 0x01
    3384:	48 c0       	rjmp	.+144    	; 0x3416 <Compare_Flex_Data+0xb4>
	{
/*			Matching_flag= FALSE;*/

		for (Counter=0; Counter<NumberOfFlexs; Counter++)
    3386:	1a 82       	std	Y+2, r1	; 0x02
    3388:	3f c0       	rjmp	.+126    	; 0x3408 <Compare_Flex_Data+0xa6>
			{
				if ( Ptr_Sensor_Readings ->Arr_Flex[Counter] != Ptr_Stored_Data[Counter1].Arr_Flex[Counter])
    338a:	8a 81       	ldd	r24, Y+2	; 0x02
    338c:	28 2f       	mov	r18, r24
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	8b 81       	ldd	r24, Y+3	; 0x03
    3392:	9c 81       	ldd	r25, Y+4	; 0x04
    3394:	fc 01       	movw	r30, r24
    3396:	e2 0f       	add	r30, r18
    3398:	f3 1f       	adc	r31, r19
    339a:	40 81       	ld	r20, Z
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	28 2f       	mov	r18, r24
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	8d 81       	ldd	r24, Y+5	; 0x05
    33a4:	9e 81       	ldd	r25, Y+6	; 0x06
    33a6:	28 0f       	add	r18, r24
    33a8:	39 1f       	adc	r19, r25
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	88 2f       	mov	r24, r24
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	f9 01       	movw	r30, r18
    33b2:	e8 0f       	add	r30, r24
    33b4:	f9 1f       	adc	r31, r25
    33b6:	80 81       	ld	r24, Z
    33b8:	48 17       	cp	r20, r24
    33ba:	51 f5       	brne	.+84     	; 0x3410 <Compare_Flex_Data+0xae>
				{
//					PORTC=0x00;
	//				return 0;
					break;
				}
					if (Counter == NumberOfFlexs-1)
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	88 23       	and	r24, r24
    33c0:	01 f5       	brne	.+64     	; 0x3402 <Compare_Flex_Data+0xa0>
					{
						if ( Ptr_Sensor_Readings ->Arr_Flex[Counter] == Ptr_Stored_Data[Counter1].Arr_Flex[Counter])
    33c2:	8a 81       	ldd	r24, Y+2	; 0x02
    33c4:	28 2f       	mov	r18, r24
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ca:	9c 81       	ldd	r25, Y+4	; 0x04
    33cc:	fc 01       	movw	r30, r24
    33ce:	e2 0f       	add	r30, r18
    33d0:	f3 1f       	adc	r31, r19
    33d2:	40 81       	ld	r20, Z
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
    33d6:	28 2f       	mov	r18, r24
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	8d 81       	ldd	r24, Y+5	; 0x05
    33dc:	9e 81       	ldd	r25, Y+6	; 0x06
    33de:	28 0f       	add	r18, r24
    33e0:	39 1f       	adc	r19, r25
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	88 2f       	mov	r24, r24
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	f9 01       	movw	r30, r18
    33ea:	e8 0f       	add	r30, r24
    33ec:	f9 1f       	adc	r31, r25
    33ee:	80 81       	ld	r24, Z
    33f0:	48 17       	cp	r20, r24
    33f2:	39 f4       	brne	.+14     	; 0x3402 <Compare_Flex_Data+0xa0>
							{
//								PORTC=0x01;
//							Matching_flag= TRUE;
							Word_index= Counter1 + 1;
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
    33f6:	8f 5f       	subi	r24, 0xFF	; 255
    33f8:	80 93 0b 02 	sts	0x020B, r24
							return 1;
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	8f 83       	std	Y+7, r24	; 0x07
    3400:	0f c0       	rjmp	.+30     	; 0x3420 <Compare_Flex_Data+0xbe>
	Word_index=0;
	for (Counter1=0; Counter1<10; Counter1++)
	{
/*			Matching_flag= FALSE;*/

		for (Counter=0; Counter<NumberOfFlexs; Counter++)
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	8f 5f       	subi	r24, 0xFF	; 255
    3406:	8a 83       	std	Y+2, r24	; 0x02
    3408:	8a 81       	ldd	r24, Y+2	; 0x02
    340a:	88 23       	and	r24, r24
    340c:	09 f4       	brne	.+2      	; 0x3410 <Compare_Flex_Data+0xae>
    340e:	bd cf       	rjmp	.-134    	; 0x338a <Compare_Flex_Data+0x28>
{
	u8 Counter;
	u8 Counter1;
/*	u8 Matching_flag=FALSE;*/
	Word_index=0;
	for (Counter1=0; Counter1<10; Counter1++)
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	8f 5f       	subi	r24, 0xFF	; 255
    3414:	89 83       	std	Y+1, r24	; 0x01
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	8a 30       	cpi	r24, 0x0A	; 10
    341a:	08 f4       	brcc	.+2      	; 0x341e <Compare_Flex_Data+0xbc>
    341c:	b4 cf       	rjmp	.-152    	; 0x3386 <Compare_Flex_Data+0x24>
/*
		if ( Matching_flag == TRUE)
		break;
*/
	}
	return 0;
    341e:	1f 82       	std	Y+7, r1	; 0x07
    3420:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3422:	27 96       	adiw	r28, 0x07	; 7
    3424:	0f b6       	in	r0, 0x3f	; 63
    3426:	f8 94       	cli
    3428:	de bf       	out	0x3e, r29	; 62
    342a:	0f be       	out	0x3f, r0	; 63
    342c:	cd bf       	out	0x3d, r28	; 61
    342e:	cf 91       	pop	r28
    3430:	df 91       	pop	r29
    3432:	08 95       	ret

00003434 <UART_init>:

#include "uart.h"
#define  BAUD_RATE (9600.0)

	void UART_init(void)
	{
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	00 d0       	rcall	.+0      	; 0x343a <UART_init+0x6>
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
		
		uint16 UBRR_Value= ((F_CPU /(8.0 *BAUD_RATE ) ) - 1) +0.5; 
    343e:	8b e9       	ldi	r24, 0x9B	; 155
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	9a 83       	std	Y+2, r25	; 0x02
    3444:	89 83       	std	Y+1, r24	; 0x01
		/* Set U2x " Double Speed Mode " */
		SET_BIT(UCSRA,U2X);
    3446:	ab e2       	ldi	r26, 0x2B	; 43
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	eb e2       	ldi	r30, 0x2B	; 43
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	82 60       	ori	r24, 0x02	; 2
    3452:	8c 93       	st	X, r24
		
		/* Enable Rx , Tx */
		UCSRB |= (1<<TXEN) | (1<<RXEN);
    3454:	aa e2       	ldi	r26, 0x2A	; 42
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	ea e2       	ldi	r30, 0x2A	; 42
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	88 61       	ori	r24, 0x18	; 24
    3460:	8c 93       	st	X, r24
		
		UCSRC |= (1<<URSEL) |(1<<UCSZ0) | (1<<UCSZ1);
    3462:	a0 e4       	ldi	r26, 0x40	; 64
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	e0 e4       	ldi	r30, 0x40	; 64
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	86 68       	ori	r24, 0x86	; 134
    346e:	8c 93       	st	X, r24
		
		UBRRL = UBRR_Value & 0x00FF;
    3470:	e9 e2       	ldi	r30, 0x29	; 41
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	80 83       	st	Z, r24
		UBRRH = UBRR_Value >>8;
    3478:	e0 e4       	ldi	r30, 0x40	; 64
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	9a 81       	ldd	r25, Y+2	; 0x02
    3480:	89 2f       	mov	r24, r25
    3482:	99 27       	eor	r25, r25
    3484:	80 83       	st	Z, r24
	}
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <UART_SendByte>:
	
	void UART_SendByte(uint8 Data)
	{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	0f 92       	push	r0
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
    349a:	89 83       	std	Y+1, r24	; 0x01
		/* if Send Buffer is not empty wait until it being  empty */
		while (BIT_IS_CLEAR(UCSRA,UDRE))
    349c:	eb e2       	ldi	r30, 0x2B	; 43
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	88 2f       	mov	r24, r24
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	80 72       	andi	r24, 0x20	; 32
    34a8:	90 70       	andi	r25, 0x00	; 0
    34aa:	00 97       	sbiw	r24, 0x00	; 0
    34ac:	b9 f3       	breq	.-18     	; 0x349c <UART_SendByte+0xc>
		{
			
		}	
		UDR = Data;
    34ae:	ec e2       	ldi	r30, 0x2C	; 44
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	89 81       	ldd	r24, Y+1	; 0x01
    34b4:	80 83       	st	Z, r24
		
	}
    34b6:	0f 90       	pop	r0
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <UART_SendArray>:
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	00 d0       	rcall	.+0      	; 0x34c4 <UART_SendArray+0x6>
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <UART_SendArray+0x8>
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	9b 83       	std	Y+3, r25	; 0x03
    34cc:	8a 83       	std	Y+2, r24	; 0x02
    34ce:	6c 83       	std	Y+4, r22	; 0x04
		uint8 i = 0;
    34d0:	19 82       	std	Y+1, r1	; 0x01
		
		for(i=0;i<size;i++)
    34d2:	19 82       	std	Y+1, r1	; 0x01
    34d4:	0e c0       	rjmp	.+28     	; 0x34f2 <UART_SendArray+0x34>
		{
			UART_SendByte(Data[i]);
    34d6:	89 81       	ldd	r24, Y+1	; 0x01
    34d8:	28 2f       	mov	r18, r24
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	8a 81       	ldd	r24, Y+2	; 0x02
    34de:	9b 81       	ldd	r25, Y+3	; 0x03
    34e0:	fc 01       	movw	r30, r24
    34e2:	e2 0f       	add	r30, r18
    34e4:	f3 1f       	adc	r31, r19
    34e6:	80 81       	ld	r24, Z
    34e8:	0e 94 48 1a 	call	0x3490	; 0x3490 <UART_SendByte>
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
		uint8 i = 0;
		
		for(i=0;i<size;i++)
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	8f 5f       	subi	r24, 0xFF	; 255
    34f0:	89 83       	std	Y+1, r24	; 0x01
    34f2:	99 81       	ldd	r25, Y+1	; 0x01
    34f4:	8c 81       	ldd	r24, Y+4	; 0x04
    34f6:	98 17       	cp	r25, r24
    34f8:	70 f3       	brcs	.-36     	; 0x34d6 <UART_SendArray+0x18>
		{
			UART_SendByte(Data[i]);
		}
	}
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	0f 90       	pop	r0
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	08 95       	ret

00003508 <UART_recieveByte>:



uint8 UART_recieveByte(void)
{
    3508:	df 93       	push	r29
    350a:	cf 93       	push	r28
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3510:	eb e2       	ldi	r30, 0x2B	; 43
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	80 81       	ld	r24, Z
    3516:	88 23       	and	r24, r24
    3518:	dc f7       	brge	.-10     	; 0x3510 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    351a:	ec e2       	ldi	r30, 0x2C	; 44
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
}
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	08 95       	ret

00003526 <__prologue_saves__>:
    3526:	2f 92       	push	r2
    3528:	3f 92       	push	r3
    352a:	4f 92       	push	r4
    352c:	5f 92       	push	r5
    352e:	6f 92       	push	r6
    3530:	7f 92       	push	r7
    3532:	8f 92       	push	r8
    3534:	9f 92       	push	r9
    3536:	af 92       	push	r10
    3538:	bf 92       	push	r11
    353a:	cf 92       	push	r12
    353c:	df 92       	push	r13
    353e:	ef 92       	push	r14
    3540:	ff 92       	push	r15
    3542:	0f 93       	push	r16
    3544:	1f 93       	push	r17
    3546:	cf 93       	push	r28
    3548:	df 93       	push	r29
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    354e:	ca 1b       	sub	r28, r26
    3550:	db 0b       	sbc	r29, r27
    3552:	0f b6       	in	r0, 0x3f	; 63
    3554:	f8 94       	cli
    3556:	de bf       	out	0x3e, r29	; 62
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	cd bf       	out	0x3d, r28	; 61
    355c:	09 94       	ijmp

0000355e <__epilogue_restores__>:
    355e:	2a 88       	ldd	r2, Y+18	; 0x12
    3560:	39 88       	ldd	r3, Y+17	; 0x11
    3562:	48 88       	ldd	r4, Y+16	; 0x10
    3564:	5f 84       	ldd	r5, Y+15	; 0x0f
    3566:	6e 84       	ldd	r6, Y+14	; 0x0e
    3568:	7d 84       	ldd	r7, Y+13	; 0x0d
    356a:	8c 84       	ldd	r8, Y+12	; 0x0c
    356c:	9b 84       	ldd	r9, Y+11	; 0x0b
    356e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3570:	b9 84       	ldd	r11, Y+9	; 0x09
    3572:	c8 84       	ldd	r12, Y+8	; 0x08
    3574:	df 80       	ldd	r13, Y+7	; 0x07
    3576:	ee 80       	ldd	r14, Y+6	; 0x06
    3578:	fd 80       	ldd	r15, Y+5	; 0x05
    357a:	0c 81       	ldd	r16, Y+4	; 0x04
    357c:	1b 81       	ldd	r17, Y+3	; 0x03
    357e:	aa 81       	ldd	r26, Y+2	; 0x02
    3580:	b9 81       	ldd	r27, Y+1	; 0x01
    3582:	ce 0f       	add	r28, r30
    3584:	d1 1d       	adc	r29, r1
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	ed 01       	movw	r28, r26
    3592:	08 95       	ret

00003594 <itoa>:
    3594:	fb 01       	movw	r30, r22
    3596:	9f 01       	movw	r18, r30
    3598:	e8 94       	clt
    359a:	42 30       	cpi	r20, 0x02	; 2
    359c:	c4 f0       	brlt	.+48     	; 0x35ce <itoa+0x3a>
    359e:	45 32       	cpi	r20, 0x25	; 37
    35a0:	b4 f4       	brge	.+44     	; 0x35ce <itoa+0x3a>
    35a2:	4a 30       	cpi	r20, 0x0A	; 10
    35a4:	29 f4       	brne	.+10     	; 0x35b0 <itoa+0x1c>
    35a6:	97 fb       	bst	r25, 7
    35a8:	1e f4       	brtc	.+6      	; 0x35b0 <itoa+0x1c>
    35aa:	90 95       	com	r25
    35ac:	81 95       	neg	r24
    35ae:	9f 4f       	sbci	r25, 0xFF	; 255
    35b0:	64 2f       	mov	r22, r20
    35b2:	77 27       	eor	r23, r23
    35b4:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <__udivmodhi4>
    35b8:	80 5d       	subi	r24, 0xD0	; 208
    35ba:	8a 33       	cpi	r24, 0x3A	; 58
    35bc:	0c f0       	brlt	.+2      	; 0x35c0 <itoa+0x2c>
    35be:	89 5d       	subi	r24, 0xD9	; 217
    35c0:	81 93       	st	Z+, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	00 97       	sbiw	r24, 0x00	; 0
    35c6:	a1 f7       	brne	.-24     	; 0x35b0 <itoa+0x1c>
    35c8:	16 f4       	brtc	.+4      	; 0x35ce <itoa+0x3a>
    35ca:	5d e2       	ldi	r21, 0x2D	; 45
    35cc:	51 93       	st	Z+, r21
    35ce:	10 82       	st	Z, r1
    35d0:	c9 01       	movw	r24, r18
    35d2:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <strrev>

000035d6 <strrev>:
    35d6:	dc 01       	movw	r26, r24
    35d8:	fc 01       	movw	r30, r24
    35da:	67 2f       	mov	r22, r23
    35dc:	71 91       	ld	r23, Z+
    35de:	77 23       	and	r23, r23
    35e0:	e1 f7       	brne	.-8      	; 0x35da <strrev+0x4>
    35e2:	32 97       	sbiw	r30, 0x02	; 2
    35e4:	04 c0       	rjmp	.+8      	; 0x35ee <strrev+0x18>
    35e6:	7c 91       	ld	r23, X
    35e8:	6d 93       	st	X+, r22
    35ea:	70 83       	st	Z, r23
    35ec:	62 91       	ld	r22, -Z
    35ee:	ae 17       	cp	r26, r30
    35f0:	bf 07       	cpc	r27, r31
    35f2:	c8 f3       	brcs	.-14     	; 0x35e6 <strrev+0x10>
    35f4:	08 95       	ret

000035f6 <__udivmodhi4>:
    35f6:	aa 1b       	sub	r26, r26
    35f8:	bb 1b       	sub	r27, r27
    35fa:	51 e1       	ldi	r21, 0x11	; 17
    35fc:	07 c0       	rjmp	.+14     	; 0x360c <__udivmodhi4_ep>

000035fe <__udivmodhi4_loop>:
    35fe:	aa 1f       	adc	r26, r26
    3600:	bb 1f       	adc	r27, r27
    3602:	a6 17       	cp	r26, r22
    3604:	b7 07       	cpc	r27, r23
    3606:	10 f0       	brcs	.+4      	; 0x360c <__udivmodhi4_ep>
    3608:	a6 1b       	sub	r26, r22
    360a:	b7 0b       	sbc	r27, r23

0000360c <__udivmodhi4_ep>:
    360c:	88 1f       	adc	r24, r24
    360e:	99 1f       	adc	r25, r25
    3610:	5a 95       	dec	r21
    3612:	a9 f7       	brne	.-22     	; 0x35fe <__udivmodhi4_loop>
    3614:	80 95       	com	r24
    3616:	90 95       	com	r25
    3618:	bc 01       	movw	r22, r24
    361a:	cd 01       	movw	r24, r26
    361c:	08 95       	ret

0000361e <_exit>:
    361e:	f8 94       	cli

00003620 <__stop_program>:
    3620:	ff cf       	rjmp	.-2      	; 0x3620 <__stop_program>
