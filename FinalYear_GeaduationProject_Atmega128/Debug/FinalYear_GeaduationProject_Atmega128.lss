
FinalYear_GeaduationProject_Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000224  00800100  00003ef2  00003f86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ef2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800324  00800324  000041aa  2**0
                  ALLOC
  3 .stab         00003228  00000000  00000000  000041ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001766  00000000  00000000  000073d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b2d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c65d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d834  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f7  00000000  00000000  0000d9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000dceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e659  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ef       	ldi	r30, 0xF2	; 242
      a0:	fe e3       	ldi	r31, 0x3E	; 62
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 32       	cpi	r26, 0x24	; 36
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a4 e2       	ldi	r26, 0x24	; 36
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 33       	cpi	r26, 0x38	; 56
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <main>
      c6:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__fixunssfsi>:
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	7b 01       	movw	r14, r22
      d8:	8c 01       	movw	r16, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	5f e4       	ldi	r21, 0x4F	; 79
      e2:	0e 94 13 04 	call	0x826	; 0x826 <__gesf2>
      e6:	88 23       	and	r24, r24
      e8:	8c f0       	brlt	.+34     	; 0x10c <__fixunssfsi+0x3e>
      ea:	c8 01       	movw	r24, r16
      ec:	b7 01       	movw	r22, r14
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	5f e4       	ldi	r21, 0x4F	; 79
      f6:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
      fa:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixsfsi>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	20 50       	subi	r18, 0x00	; 0
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	50 48       	sbci	r21, 0x80	; 128
     10a:	06 c0       	rjmp	.+12     	; 0x118 <__fixunssfsi+0x4a>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixsfsi>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
     118:	b9 01       	movw	r22, r18
     11a:	ca 01       	movw	r24, r20
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <_fpadd_parts>:
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__prologue_saves__>
     132:	dc 01       	movw	r26, r24
     134:	2b 01       	movw	r4, r22
     136:	fa 01       	movw	r30, r20
     138:	9c 91       	ld	r25, X
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	08 f4       	brcc	.+2      	; 0x140 <_fpadd_parts+0x1a>
     13e:	39 c1       	rjmp	.+626    	; 0x3b2 <_fpadd_parts+0x28c>
     140:	eb 01       	movw	r28, r22
     142:	88 81       	ld	r24, Y
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	08 f4       	brcc	.+2      	; 0x14a <_fpadd_parts+0x24>
     148:	33 c1       	rjmp	.+614    	; 0x3b0 <_fpadd_parts+0x28a>
     14a:	94 30       	cpi	r25, 0x04	; 4
     14c:	69 f4       	brne	.+26     	; 0x168 <_fpadd_parts+0x42>
     14e:	84 30       	cpi	r24, 0x04	; 4
     150:	09 f0       	breq	.+2      	; 0x154 <_fpadd_parts+0x2e>
     152:	2f c1       	rjmp	.+606    	; 0x3b2 <_fpadd_parts+0x28c>
     154:	11 96       	adiw	r26, 0x01	; 1
     156:	9c 91       	ld	r25, X
     158:	11 97       	sbiw	r26, 0x01	; 1
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	98 17       	cp	r25, r24
     15e:	09 f4       	brne	.+2      	; 0x162 <_fpadd_parts+0x3c>
     160:	28 c1       	rjmp	.+592    	; 0x3b2 <_fpadd_parts+0x28c>
     162:	ad e4       	ldi	r26, 0x4D	; 77
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	25 c1       	rjmp	.+586    	; 0x3b2 <_fpadd_parts+0x28c>
     168:	84 30       	cpi	r24, 0x04	; 4
     16a:	09 f4       	brne	.+2      	; 0x16e <_fpadd_parts+0x48>
     16c:	21 c1       	rjmp	.+578    	; 0x3b0 <_fpadd_parts+0x28a>
     16e:	82 30       	cpi	r24, 0x02	; 2
     170:	a9 f4       	brne	.+42     	; 0x19c <_fpadd_parts+0x76>
     172:	92 30       	cpi	r25, 0x02	; 2
     174:	09 f0       	breq	.+2      	; 0x178 <_fpadd_parts+0x52>
     176:	1d c1       	rjmp	.+570    	; 0x3b2 <_fpadd_parts+0x28c>
     178:	9a 01       	movw	r18, r20
     17a:	ad 01       	movw	r20, r26
     17c:	88 e0       	ldi	r24, 0x08	; 8
     17e:	ea 01       	movw	r28, r20
     180:	09 90       	ld	r0, Y+
     182:	ae 01       	movw	r20, r28
     184:	e9 01       	movw	r28, r18
     186:	09 92       	st	Y+, r0
     188:	9e 01       	movw	r18, r28
     18a:	81 50       	subi	r24, 0x01	; 1
     18c:	c1 f7       	brne	.-16     	; 0x17e <_fpadd_parts+0x58>
     18e:	e2 01       	movw	r28, r4
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	11 96       	adiw	r26, 0x01	; 1
     194:	9c 91       	ld	r25, X
     196:	89 23       	and	r24, r25
     198:	81 83       	std	Z+1, r24	; 0x01
     19a:	08 c1       	rjmp	.+528    	; 0x3ac <_fpadd_parts+0x286>
     19c:	92 30       	cpi	r25, 0x02	; 2
     19e:	09 f4       	brne	.+2      	; 0x1a2 <_fpadd_parts+0x7c>
     1a0:	07 c1       	rjmp	.+526    	; 0x3b0 <_fpadd_parts+0x28a>
     1a2:	12 96       	adiw	r26, 0x02	; 2
     1a4:	2d 90       	ld	r2, X+
     1a6:	3c 90       	ld	r3, X
     1a8:	13 97       	sbiw	r26, 0x03	; 3
     1aa:	eb 01       	movw	r28, r22
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	9b 81       	ldd	r25, Y+3	; 0x03
     1b0:	14 96       	adiw	r26, 0x04	; 4
     1b2:	ad 90       	ld	r10, X+
     1b4:	bd 90       	ld	r11, X+
     1b6:	cd 90       	ld	r12, X+
     1b8:	dc 90       	ld	r13, X
     1ba:	17 97       	sbiw	r26, 0x07	; 7
     1bc:	ec 80       	ldd	r14, Y+4	; 0x04
     1be:	fd 80       	ldd	r15, Y+5	; 0x05
     1c0:	0e 81       	ldd	r16, Y+6	; 0x06
     1c2:	1f 81       	ldd	r17, Y+7	; 0x07
     1c4:	91 01       	movw	r18, r2
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	b9 01       	movw	r22, r18
     1cc:	37 ff       	sbrs	r19, 7
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <_fpadd_parts+0xb2>
     1d0:	66 27       	eor	r22, r22
     1d2:	77 27       	eor	r23, r23
     1d4:	62 1b       	sub	r22, r18
     1d6:	73 0b       	sbc	r23, r19
     1d8:	60 32       	cpi	r22, 0x20	; 32
     1da:	71 05       	cpc	r23, r1
     1dc:	0c f0       	brlt	.+2      	; 0x1e0 <_fpadd_parts+0xba>
     1de:	61 c0       	rjmp	.+194    	; 0x2a2 <_fpadd_parts+0x17c>
     1e0:	12 16       	cp	r1, r18
     1e2:	13 06       	cpc	r1, r19
     1e4:	6c f5       	brge	.+90     	; 0x240 <_fpadd_parts+0x11a>
     1e6:	37 01       	movw	r6, r14
     1e8:	48 01       	movw	r8, r16
     1ea:	06 2e       	mov	r0, r22
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <_fpadd_parts+0xd0>
     1ee:	96 94       	lsr	r9
     1f0:	87 94       	ror	r8
     1f2:	77 94       	ror	r7
     1f4:	67 94       	ror	r6
     1f6:	0a 94       	dec	r0
     1f8:	d2 f7       	brpl	.-12     	; 0x1ee <_fpadd_parts+0xc8>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0xe6>
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	44 1f       	adc	r20, r20
     20a:	55 1f       	adc	r21, r21
     20c:	6a 95       	dec	r22
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0xde>
     210:	21 50       	subi	r18, 0x01	; 1
     212:	30 40       	sbci	r19, 0x00	; 0
     214:	40 40       	sbci	r20, 0x00	; 0
     216:	50 40       	sbci	r21, 0x00	; 0
     218:	2e 21       	and	r18, r14
     21a:	3f 21       	and	r19, r15
     21c:	40 23       	and	r20, r16
     21e:	51 23       	and	r21, r17
     220:	21 15       	cp	r18, r1
     222:	31 05       	cpc	r19, r1
     224:	41 05       	cpc	r20, r1
     226:	51 05       	cpc	r21, r1
     228:	21 f0       	breq	.+8      	; 0x232 <_fpadd_parts+0x10c>
     22a:	21 e0       	ldi	r18, 0x01	; 1
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	79 01       	movw	r14, r18
     234:	8a 01       	movw	r16, r20
     236:	e6 28       	or	r14, r6
     238:	f7 28       	or	r15, r7
     23a:	08 29       	or	r16, r8
     23c:	19 29       	or	r17, r9
     23e:	3c c0       	rjmp	.+120    	; 0x2b8 <_fpadd_parts+0x192>
     240:	23 2b       	or	r18, r19
     242:	d1 f1       	breq	.+116    	; 0x2b8 <_fpadd_parts+0x192>
     244:	26 0e       	add	r2, r22
     246:	37 1e       	adc	r3, r23
     248:	35 01       	movw	r6, r10
     24a:	46 01       	movw	r8, r12
     24c:	06 2e       	mov	r0, r22
     24e:	04 c0       	rjmp	.+8      	; 0x258 <_fpadd_parts+0x132>
     250:	96 94       	lsr	r9
     252:	87 94       	ror	r8
     254:	77 94       	ror	r7
     256:	67 94       	ror	r6
     258:	0a 94       	dec	r0
     25a:	d2 f7       	brpl	.-12     	; 0x250 <_fpadd_parts+0x12a>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	04 c0       	rjmp	.+8      	; 0x26e <_fpadd_parts+0x148>
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	44 1f       	adc	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	6a 95       	dec	r22
     270:	d2 f7       	brpl	.-12     	; 0x266 <_fpadd_parts+0x140>
     272:	21 50       	subi	r18, 0x01	; 1
     274:	30 40       	sbci	r19, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	50 40       	sbci	r21, 0x00	; 0
     27a:	2a 21       	and	r18, r10
     27c:	3b 21       	and	r19, r11
     27e:	4c 21       	and	r20, r12
     280:	5d 21       	and	r21, r13
     282:	21 15       	cp	r18, r1
     284:	31 05       	cpc	r19, r1
     286:	41 05       	cpc	r20, r1
     288:	51 05       	cpc	r21, r1
     28a:	21 f0       	breq	.+8      	; 0x294 <_fpadd_parts+0x16e>
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	59 01       	movw	r10, r18
     296:	6a 01       	movw	r12, r20
     298:	a6 28       	or	r10, r6
     29a:	b7 28       	or	r11, r7
     29c:	c8 28       	or	r12, r8
     29e:	d9 28       	or	r13, r9
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <_fpadd_parts+0x192>
     2a2:	82 15       	cp	r24, r2
     2a4:	93 05       	cpc	r25, r3
     2a6:	2c f0       	brlt	.+10     	; 0x2b2 <_fpadd_parts+0x18c>
     2a8:	1c 01       	movw	r2, r24
     2aa:	aa 24       	eor	r10, r10
     2ac:	bb 24       	eor	r11, r11
     2ae:	65 01       	movw	r12, r10
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <_fpadd_parts+0x192>
     2b2:	ee 24       	eor	r14, r14
     2b4:	ff 24       	eor	r15, r15
     2b6:	87 01       	movw	r16, r14
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 91       	ld	r25, X
     2bc:	d2 01       	movw	r26, r4
     2be:	11 96       	adiw	r26, 0x01	; 1
     2c0:	8c 91       	ld	r24, X
     2c2:	98 17       	cp	r25, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <_fpadd_parts+0x1a2>
     2c6:	45 c0       	rjmp	.+138    	; 0x352 <_fpadd_parts+0x22c>
     2c8:	99 23       	and	r25, r25
     2ca:	39 f0       	breq	.+14     	; 0x2da <_fpadd_parts+0x1b4>
     2cc:	a8 01       	movw	r20, r16
     2ce:	97 01       	movw	r18, r14
     2d0:	2a 19       	sub	r18, r10
     2d2:	3b 09       	sbc	r19, r11
     2d4:	4c 09       	sbc	r20, r12
     2d6:	5d 09       	sbc	r21, r13
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <_fpadd_parts+0x1c0>
     2da:	a6 01       	movw	r20, r12
     2dc:	95 01       	movw	r18, r10
     2de:	2e 19       	sub	r18, r14
     2e0:	3f 09       	sbc	r19, r15
     2e2:	40 0b       	sbc	r20, r16
     2e4:	51 0b       	sbc	r21, r17
     2e6:	57 fd       	sbrc	r21, 7
     2e8:	08 c0       	rjmp	.+16     	; 0x2fa <_fpadd_parts+0x1d4>
     2ea:	11 82       	std	Z+1, r1	; 0x01
     2ec:	33 82       	std	Z+3, r3	; 0x03
     2ee:	22 82       	std	Z+2, r2	; 0x02
     2f0:	24 83       	std	Z+4, r18	; 0x04
     2f2:	35 83       	std	Z+5, r19	; 0x05
     2f4:	46 83       	std	Z+6, r20	; 0x06
     2f6:	57 83       	std	Z+7, r21	; 0x07
     2f8:	1d c0       	rjmp	.+58     	; 0x334 <_fpadd_parts+0x20e>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	81 83       	std	Z+1, r24	; 0x01
     2fe:	33 82       	std	Z+3, r3	; 0x03
     300:	22 82       	std	Z+2, r2	; 0x02
     302:	88 27       	eor	r24, r24
     304:	99 27       	eor	r25, r25
     306:	dc 01       	movw	r26, r24
     308:	82 1b       	sub	r24, r18
     30a:	93 0b       	sbc	r25, r19
     30c:	a4 0b       	sbc	r26, r20
     30e:	b5 0b       	sbc	r27, r21
     310:	84 83       	std	Z+4, r24	; 0x04
     312:	95 83       	std	Z+5, r25	; 0x05
     314:	a6 83       	std	Z+6, r26	; 0x06
     316:	b7 83       	std	Z+7, r27	; 0x07
     318:	0d c0       	rjmp	.+26     	; 0x334 <_fpadd_parts+0x20e>
     31a:	22 0f       	add	r18, r18
     31c:	33 1f       	adc	r19, r19
     31e:	44 1f       	adc	r20, r20
     320:	55 1f       	adc	r21, r21
     322:	24 83       	std	Z+4, r18	; 0x04
     324:	35 83       	std	Z+5, r19	; 0x05
     326:	46 83       	std	Z+6, r20	; 0x06
     328:	57 83       	std	Z+7, r21	; 0x07
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	93 83       	std	Z+3, r25	; 0x03
     332:	82 83       	std	Z+2, r24	; 0x02
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	da 01       	movw	r26, r20
     33e:	c9 01       	movw	r24, r18
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	a1 09       	sbc	r26, r1
     344:	b1 09       	sbc	r27, r1
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	af 4f       	sbci	r26, 0xFF	; 255
     34c:	bf 43       	sbci	r27, 0x3F	; 63
     34e:	28 f3       	brcs	.-54     	; 0x31a <_fpadd_parts+0x1f4>
     350:	0b c0       	rjmp	.+22     	; 0x368 <_fpadd_parts+0x242>
     352:	91 83       	std	Z+1, r25	; 0x01
     354:	33 82       	std	Z+3, r3	; 0x03
     356:	22 82       	std	Z+2, r2	; 0x02
     358:	ea 0c       	add	r14, r10
     35a:	fb 1c       	adc	r15, r11
     35c:	0c 1d       	adc	r16, r12
     35e:	1d 1d       	adc	r17, r13
     360:	e4 82       	std	Z+4, r14	; 0x04
     362:	f5 82       	std	Z+5, r15	; 0x05
     364:	06 83       	std	Z+6, r16	; 0x06
     366:	17 83       	std	Z+7, r17	; 0x07
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	80 83       	st	Z, r24
     36c:	24 81       	ldd	r18, Z+4	; 0x04
     36e:	35 81       	ldd	r19, Z+5	; 0x05
     370:	46 81       	ldd	r20, Z+6	; 0x06
     372:	57 81       	ldd	r21, Z+7	; 0x07
     374:	57 ff       	sbrs	r21, 7
     376:	1a c0       	rjmp	.+52     	; 0x3ac <_fpadd_parts+0x286>
     378:	c9 01       	movw	r24, r18
     37a:	aa 27       	eor	r26, r26
     37c:	97 fd       	sbrc	r25, 7
     37e:	a0 95       	com	r26
     380:	ba 2f       	mov	r27, r26
     382:	81 70       	andi	r24, 0x01	; 1
     384:	90 70       	andi	r25, 0x00	; 0
     386:	a0 70       	andi	r26, 0x00	; 0
     388:	b0 70       	andi	r27, 0x00	; 0
     38a:	56 95       	lsr	r21
     38c:	47 95       	ror	r20
     38e:	37 95       	ror	r19
     390:	27 95       	ror	r18
     392:	82 2b       	or	r24, r18
     394:	93 2b       	or	r25, r19
     396:	a4 2b       	or	r26, r20
     398:	b5 2b       	or	r27, r21
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	95 83       	std	Z+5, r25	; 0x05
     39e:	a6 83       	std	Z+6, r26	; 0x06
     3a0:	b7 83       	std	Z+7, r27	; 0x07
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	93 83       	std	Z+3, r25	; 0x03
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	df 01       	movw	r26, r30
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <_fpadd_parts+0x28c>
     3b0:	d2 01       	movw	r26, r4
     3b2:	cd 01       	movw	r24, r26
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	e2 e1       	ldi	r30, 0x12	; 18
     3ba:	0c 94 17 1f 	jmp	0x3e2e	; 0x3e2e <__epilogue_restores__>

000003be <__subsf3>:
     3be:	a0 e2       	ldi	r26, 0x20	; 32
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e5 ee       	ldi	r30, 0xE5	; 229
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x18>
     3ca:	69 83       	std	Y+1, r22	; 0x01
     3cc:	7a 83       	std	Y+2, r23	; 0x02
     3ce:	8b 83       	std	Y+3, r24	; 0x03
     3d0:	9c 83       	std	Y+4, r25	; 0x04
     3d2:	2d 83       	std	Y+5, r18	; 0x05
     3d4:	3e 83       	std	Y+6, r19	; 0x06
     3d6:	4f 83       	std	Y+7, r20	; 0x07
     3d8:	58 87       	std	Y+8, r21	; 0x08
     3da:	e9 e0       	ldi	r30, 0x09	; 9
     3dc:	ee 2e       	mov	r14, r30
     3de:	f1 2c       	mov	r15, r1
     3e0:	ec 0e       	add	r14, r28
     3e2:	fd 1e       	adc	r15, r29
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     3ee:	8e 01       	movw	r16, r28
     3f0:	0f 5e       	subi	r16, 0xEF	; 239
     3f2:	1f 4f       	sbci	r17, 0xFF	; 255
     3f4:	ce 01       	movw	r24, r28
     3f6:	05 96       	adiw	r24, 0x05	; 5
     3f8:	b8 01       	movw	r22, r16
     3fa:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     3fe:	8a 89       	ldd	r24, Y+18	; 0x12
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	89 27       	eor	r24, r25
     404:	8a 8b       	std	Y+18, r24	; 0x12
     406:	c7 01       	movw	r24, r14
     408:	b8 01       	movw	r22, r16
     40a:	ae 01       	movw	r20, r28
     40c:	47 5e       	subi	r20, 0xE7	; 231
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     414:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__pack_f>
     418:	a0 96       	adiw	r28, 0x20	; 32
     41a:	e6 e0       	ldi	r30, 0x06	; 6
     41c:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x18>

00000420 <__addsf3>:
     420:	a0 e2       	ldi	r26, 0x20	; 32
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x18>
     42c:	69 83       	std	Y+1, r22	; 0x01
     42e:	7a 83       	std	Y+2, r23	; 0x02
     430:	8b 83       	std	Y+3, r24	; 0x03
     432:	9c 83       	std	Y+4, r25	; 0x04
     434:	2d 83       	std	Y+5, r18	; 0x05
     436:	3e 83       	std	Y+6, r19	; 0x06
     438:	4f 83       	std	Y+7, r20	; 0x07
     43a:	58 87       	std	Y+8, r21	; 0x08
     43c:	f9 e0       	ldi	r31, 0x09	; 9
     43e:	ef 2e       	mov	r14, r31
     440:	f1 2c       	mov	r15, r1
     442:	ec 0e       	add	r14, r28
     444:	fd 1e       	adc	r15, r29
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	b7 01       	movw	r22, r14
     44c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     450:	8e 01       	movw	r16, r28
     452:	0f 5e       	subi	r16, 0xEF	; 239
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	ce 01       	movw	r24, r28
     458:	05 96       	adiw	r24, 0x05	; 5
     45a:	b8 01       	movw	r22, r16
     45c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     460:	c7 01       	movw	r24, r14
     462:	b8 01       	movw	r22, r16
     464:	ae 01       	movw	r20, r28
     466:	47 5e       	subi	r20, 0xE7	; 231
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     46e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__pack_f>
     472:	a0 96       	adiw	r28, 0x20	; 32
     474:	e6 e0       	ldi	r30, 0x06	; 6
     476:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x18>

0000047a <__mulsf3>:
     47a:	a0 e2       	ldi	r26, 0x20	; 32
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e3 e4       	ldi	r30, 0x43	; 67
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__prologue_saves__>
     486:	69 83       	std	Y+1, r22	; 0x01
     488:	7a 83       	std	Y+2, r23	; 0x02
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	9c 83       	std	Y+4, r25	; 0x04
     48e:	2d 83       	std	Y+5, r18	; 0x05
     490:	3e 83       	std	Y+6, r19	; 0x06
     492:	4f 83       	std	Y+7, r20	; 0x07
     494:	58 87       	std	Y+8, r21	; 0x08
     496:	ce 01       	movw	r24, r28
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	be 01       	movw	r22, r28
     49c:	67 5f       	subi	r22, 0xF7	; 247
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     4a4:	ce 01       	movw	r24, r28
     4a6:	05 96       	adiw	r24, 0x05	; 5
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5e       	subi	r22, 0xEF	; 239
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     4b2:	99 85       	ldd	r25, Y+9	; 0x09
     4b4:	92 30       	cpi	r25, 0x02	; 2
     4b6:	88 f0       	brcs	.+34     	; 0x4da <__mulsf3+0x60>
     4b8:	89 89       	ldd	r24, Y+17	; 0x11
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	c8 f0       	brcs	.+50     	; 0x4f0 <__mulsf3+0x76>
     4be:	94 30       	cpi	r25, 0x04	; 4
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <__mulsf3+0x4e>
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	51 f4       	brne	.+20     	; 0x4da <__mulsf3+0x60>
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__mulsf3+0x56>
     4c8:	84 30       	cpi	r24, 0x04	; 4
     4ca:	29 f4       	brne	.+10     	; 0x4d6 <__mulsf3+0x5c>
     4cc:	92 30       	cpi	r25, 0x02	; 2
     4ce:	81 f4       	brne	.+32     	; 0x4f0 <__mulsf3+0x76>
     4d0:	8d e4       	ldi	r24, 0x4D	; 77
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	c6 c0       	rjmp	.+396    	; 0x662 <__mulsf3+0x1e8>
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	49 f4       	brne	.+18     	; 0x4ec <__mulsf3+0x72>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4de:	8a 89       	ldd	r24, Y+18	; 0x12
     4e0:	98 13       	cpse	r25, r24
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	2a 87       	std	Y+10, r18	; 0x0a
     4e6:	ce 01       	movw	r24, r28
     4e8:	09 96       	adiw	r24, 0x09	; 9
     4ea:	bb c0       	rjmp	.+374    	; 0x662 <__mulsf3+0x1e8>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	49 f4       	brne	.+18     	; 0x502 <__mulsf3+0x88>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	98 13       	cpse	r25, r24
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	2a 8b       	std	Y+18, r18	; 0x12
     4fc:	ce 01       	movw	r24, r28
     4fe:	41 96       	adiw	r24, 0x11	; 17
     500:	b0 c0       	rjmp	.+352    	; 0x662 <__mulsf3+0x1e8>
     502:	2d 84       	ldd	r2, Y+13	; 0x0d
     504:	3e 84       	ldd	r3, Y+14	; 0x0e
     506:	4f 84       	ldd	r4, Y+15	; 0x0f
     508:	58 88       	ldd	r5, Y+16	; 0x10
     50a:	6d 88       	ldd	r6, Y+21	; 0x15
     50c:	7e 88       	ldd	r7, Y+22	; 0x16
     50e:	8f 88       	ldd	r8, Y+23	; 0x17
     510:	98 8c       	ldd	r9, Y+24	; 0x18
     512:	ee 24       	eor	r14, r14
     514:	ff 24       	eor	r15, r15
     516:	87 01       	movw	r16, r14
     518:	aa 24       	eor	r10, r10
     51a:	bb 24       	eor	r11, r11
     51c:	65 01       	movw	r12, r10
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	e0 e0       	ldi	r30, 0x00	; 0
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	c1 01       	movw	r24, r2
     52c:	81 70       	andi	r24, 0x01	; 1
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	89 2b       	or	r24, r25
     532:	e9 f0       	breq	.+58     	; 0x56e <__mulsf3+0xf4>
     534:	e6 0c       	add	r14, r6
     536:	f7 1c       	adc	r15, r7
     538:	08 1d       	adc	r16, r8
     53a:	19 1d       	adc	r17, r9
     53c:	9a 01       	movw	r18, r20
     53e:	ab 01       	movw	r20, r22
     540:	2a 0d       	add	r18, r10
     542:	3b 1d       	adc	r19, r11
     544:	4c 1d       	adc	r20, r12
     546:	5d 1d       	adc	r21, r13
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	e6 14       	cp	r14, r6
     552:	f7 04       	cpc	r15, r7
     554:	08 05       	cpc	r16, r8
     556:	19 05       	cpc	r17, r9
     558:	20 f4       	brcc	.+8      	; 0x562 <__mulsf3+0xe8>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	ba 01       	movw	r22, r20
     564:	a9 01       	movw	r20, r18
     566:	48 0f       	add	r20, r24
     568:	59 1f       	adc	r21, r25
     56a:	6a 1f       	adc	r22, r26
     56c:	7b 1f       	adc	r23, r27
     56e:	aa 0c       	add	r10, r10
     570:	bb 1c       	adc	r11, r11
     572:	cc 1c       	adc	r12, r12
     574:	dd 1c       	adc	r13, r13
     576:	97 fe       	sbrs	r9, 7
     578:	08 c0       	rjmp	.+16     	; 0x58a <__mulsf3+0x110>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	a8 2a       	or	r10, r24
     584:	b9 2a       	or	r11, r25
     586:	ca 2a       	or	r12, r26
     588:	db 2a       	or	r13, r27
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	e0 32       	cpi	r30, 0x20	; 32
     58e:	f1 05       	cpc	r31, r1
     590:	49 f0       	breq	.+18     	; 0x5a4 <__mulsf3+0x12a>
     592:	66 0c       	add	r6, r6
     594:	77 1c       	adc	r7, r7
     596:	88 1c       	adc	r8, r8
     598:	99 1c       	adc	r9, r9
     59a:	56 94       	lsr	r5
     59c:	47 94       	ror	r4
     59e:	37 94       	ror	r3
     5a0:	27 94       	ror	r2
     5a2:	c3 cf       	rjmp	.-122    	; 0x52a <__mulsf3+0xb0>
     5a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a6:	ea 89       	ldd	r30, Y+18	; 0x12
     5a8:	2b 89       	ldd	r18, Y+19	; 0x13
     5aa:	3c 89       	ldd	r19, Y+20	; 0x14
     5ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b0:	28 0f       	add	r18, r24
     5b2:	39 1f       	adc	r19, r25
     5b4:	2e 5f       	subi	r18, 0xFE	; 254
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	17 c0       	rjmp	.+46     	; 0x5e8 <__mulsf3+0x16e>
     5ba:	ca 01       	movw	r24, r20
     5bc:	81 70       	andi	r24, 0x01	; 1
     5be:	90 70       	andi	r25, 0x00	; 0
     5c0:	89 2b       	or	r24, r25
     5c2:	61 f0       	breq	.+24     	; 0x5dc <__mulsf3+0x162>
     5c4:	16 95       	lsr	r17
     5c6:	07 95       	ror	r16
     5c8:	f7 94       	ror	r15
     5ca:	e7 94       	ror	r14
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	a0 e0       	ldi	r26, 0x00	; 0
     5d2:	b0 e8       	ldi	r27, 0x80	; 128
     5d4:	e8 2a       	or	r14, r24
     5d6:	f9 2a       	or	r15, r25
     5d8:	0a 2b       	or	r16, r26
     5da:	1b 2b       	or	r17, r27
     5dc:	76 95       	lsr	r23
     5de:	67 95       	ror	r22
     5e0:	57 95       	ror	r21
     5e2:	47 95       	ror	r20
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	77 fd       	sbrc	r23, 7
     5ea:	e7 cf       	rjmp	.-50     	; 0x5ba <__mulsf3+0x140>
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <__mulsf3+0x18c>
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	66 1f       	adc	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	17 fd       	sbrc	r17, 7
     5f8:	41 60       	ori	r20, 0x01	; 1
     5fa:	ee 0c       	add	r14, r14
     5fc:	ff 1c       	adc	r15, r15
     5fe:	00 1f       	adc	r16, r16
     600:	11 1f       	adc	r17, r17
     602:	21 50       	subi	r18, 0x01	; 1
     604:	30 40       	sbci	r19, 0x00	; 0
     606:	40 30       	cpi	r20, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	59 07       	cpc	r21, r25
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	69 07       	cpc	r22, r25
     610:	90 e4       	ldi	r25, 0x40	; 64
     612:	79 07       	cpc	r23, r25
     614:	60 f3       	brcs	.-40     	; 0x5ee <__mulsf3+0x174>
     616:	2b 8f       	std	Y+27, r18	; 0x1b
     618:	3c 8f       	std	Y+28, r19	; 0x1c
     61a:	db 01       	movw	r26, r22
     61c:	ca 01       	movw	r24, r20
     61e:	8f 77       	andi	r24, 0x7F	; 127
     620:	90 70       	andi	r25, 0x00	; 0
     622:	a0 70       	andi	r26, 0x00	; 0
     624:	b0 70       	andi	r27, 0x00	; 0
     626:	80 34       	cpi	r24, 0x40	; 64
     628:	91 05       	cpc	r25, r1
     62a:	a1 05       	cpc	r26, r1
     62c:	b1 05       	cpc	r27, r1
     62e:	61 f4       	brne	.+24     	; 0x648 <__mulsf3+0x1ce>
     630:	47 fd       	sbrc	r20, 7
     632:	0a c0       	rjmp	.+20     	; 0x648 <__mulsf3+0x1ce>
     634:	e1 14       	cp	r14, r1
     636:	f1 04       	cpc	r15, r1
     638:	01 05       	cpc	r16, r1
     63a:	11 05       	cpc	r17, r1
     63c:	29 f0       	breq	.+10     	; 0x648 <__mulsf3+0x1ce>
     63e:	40 5c       	subi	r20, 0xC0	; 192
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	6f 4f       	sbci	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	40 78       	andi	r20, 0x80	; 128
     648:	1a 8e       	std	Y+26, r1	; 0x1a
     64a:	fe 17       	cp	r31, r30
     64c:	11 f0       	breq	.+4      	; 0x652 <__mulsf3+0x1d8>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8a 8f       	std	Y+26, r24	; 0x1a
     652:	4d 8f       	std	Y+29, r20	; 0x1d
     654:	5e 8f       	std	Y+30, r21	; 0x1e
     656:	6f 8f       	std	Y+31, r22	; 0x1f
     658:	78 a3       	std	Y+32, r23	; 0x20
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	89 8f       	std	Y+25, r24	; 0x19
     65e:	ce 01       	movw	r24, r28
     660:	49 96       	adiw	r24, 0x19	; 25
     662:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__pack_f>
     666:	a0 96       	adiw	r28, 0x20	; 32
     668:	e2 e1       	ldi	r30, 0x12	; 18
     66a:	0c 94 17 1f 	jmp	0x3e2e	; 0x3e2e <__epilogue_restores__>

0000066e <__divsf3>:
     66e:	a8 e1       	ldi	r26, 0x18	; 24
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	ed e3       	ldi	r30, 0x3D	; 61
     674:	f3 e0       	ldi	r31, 0x03	; 3
     676:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <__prologue_saves__+0x10>
     67a:	69 83       	std	Y+1, r22	; 0x01
     67c:	7a 83       	std	Y+2, r23	; 0x02
     67e:	8b 83       	std	Y+3, r24	; 0x03
     680:	9c 83       	std	Y+4, r25	; 0x04
     682:	2d 83       	std	Y+5, r18	; 0x05
     684:	3e 83       	std	Y+6, r19	; 0x06
     686:	4f 83       	std	Y+7, r20	; 0x07
     688:	58 87       	std	Y+8, r21	; 0x08
     68a:	b9 e0       	ldi	r27, 0x09	; 9
     68c:	eb 2e       	mov	r14, r27
     68e:	f1 2c       	mov	r15, r1
     690:	ec 0e       	add	r14, r28
     692:	fd 1e       	adc	r15, r29
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     69e:	8e 01       	movw	r16, r28
     6a0:	0f 5e       	subi	r16, 0xEF	; 239
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	ce 01       	movw	r24, r28
     6a6:	05 96       	adiw	r24, 0x05	; 5
     6a8:	b8 01       	movw	r22, r16
     6aa:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     6ae:	29 85       	ldd	r18, Y+9	; 0x09
     6b0:	22 30       	cpi	r18, 0x02	; 2
     6b2:	08 f4       	brcc	.+2      	; 0x6b6 <__divsf3+0x48>
     6b4:	7e c0       	rjmp	.+252    	; 0x7b2 <__divsf3+0x144>
     6b6:	39 89       	ldd	r19, Y+17	; 0x11
     6b8:	32 30       	cpi	r19, 0x02	; 2
     6ba:	10 f4       	brcc	.+4      	; 0x6c0 <__divsf3+0x52>
     6bc:	b8 01       	movw	r22, r16
     6be:	7c c0       	rjmp	.+248    	; 0x7b8 <__divsf3+0x14a>
     6c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c2:	9a 89       	ldd	r25, Y+18	; 0x12
     6c4:	89 27       	eor	r24, r25
     6c6:	8a 87       	std	Y+10, r24	; 0x0a
     6c8:	24 30       	cpi	r18, 0x04	; 4
     6ca:	11 f0       	breq	.+4      	; 0x6d0 <__divsf3+0x62>
     6cc:	22 30       	cpi	r18, 0x02	; 2
     6ce:	31 f4       	brne	.+12     	; 0x6dc <__divsf3+0x6e>
     6d0:	23 17       	cp	r18, r19
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <__divsf3+0x68>
     6d4:	6e c0       	rjmp	.+220    	; 0x7b2 <__divsf3+0x144>
     6d6:	6d e4       	ldi	r22, 0x4D	; 77
     6d8:	71 e0       	ldi	r23, 0x01	; 1
     6da:	6e c0       	rjmp	.+220    	; 0x7b8 <__divsf3+0x14a>
     6dc:	34 30       	cpi	r19, 0x04	; 4
     6de:	39 f4       	brne	.+14     	; 0x6ee <__divsf3+0x80>
     6e0:	1d 86       	std	Y+13, r1	; 0x0d
     6e2:	1e 86       	std	Y+14, r1	; 0x0e
     6e4:	1f 86       	std	Y+15, r1	; 0x0f
     6e6:	18 8a       	std	Y+16, r1	; 0x10
     6e8:	1c 86       	std	Y+12, r1	; 0x0c
     6ea:	1b 86       	std	Y+11, r1	; 0x0b
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__divsf3+0x88>
     6ee:	32 30       	cpi	r19, 0x02	; 2
     6f0:	21 f4       	brne	.+8      	; 0x6fa <__divsf3+0x8c>
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	89 87       	std	Y+9, r24	; 0x09
     6f6:	b7 01       	movw	r22, r14
     6f8:	5f c0       	rjmp	.+190    	; 0x7b8 <__divsf3+0x14a>
     6fa:	2b 85       	ldd	r18, Y+11	; 0x0b
     6fc:	3c 85       	ldd	r19, Y+12	; 0x0c
     6fe:	8b 89       	ldd	r24, Y+19	; 0x13
     700:	9c 89       	ldd	r25, Y+20	; 0x14
     702:	28 1b       	sub	r18, r24
     704:	39 0b       	sbc	r19, r25
     706:	3c 87       	std	Y+12, r19	; 0x0c
     708:	2b 87       	std	Y+11, r18	; 0x0b
     70a:	ed 84       	ldd	r14, Y+13	; 0x0d
     70c:	fe 84       	ldd	r15, Y+14	; 0x0e
     70e:	0f 85       	ldd	r16, Y+15	; 0x0f
     710:	18 89       	ldd	r17, Y+16	; 0x10
     712:	ad 88       	ldd	r10, Y+21	; 0x15
     714:	be 88       	ldd	r11, Y+22	; 0x16
     716:	cf 88       	ldd	r12, Y+23	; 0x17
     718:	d8 8c       	ldd	r13, Y+24	; 0x18
     71a:	ea 14       	cp	r14, r10
     71c:	fb 04       	cpc	r15, r11
     71e:	0c 05       	cpc	r16, r12
     720:	1d 05       	cpc	r17, r13
     722:	40 f4       	brcc	.+16     	; 0x734 <__divsf3+0xc6>
     724:	ee 0c       	add	r14, r14
     726:	ff 1c       	adc	r15, r15
     728:	00 1f       	adc	r16, r16
     72a:	11 1f       	adc	r17, r17
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	30 40       	sbci	r19, 0x00	; 0
     730:	3c 87       	std	Y+12, r19	; 0x0c
     732:	2b 87       	std	Y+11, r18	; 0x0b
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e0       	ldi	r26, 0x00	; 0
     742:	b0 e4       	ldi	r27, 0x40	; 64
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	ea 14       	cp	r14, r10
     74a:	fb 04       	cpc	r15, r11
     74c:	0c 05       	cpc	r16, r12
     74e:	1d 05       	cpc	r17, r13
     750:	40 f0       	brcs	.+16     	; 0x762 <__divsf3+0xf4>
     752:	28 2b       	or	r18, r24
     754:	39 2b       	or	r19, r25
     756:	4a 2b       	or	r20, r26
     758:	5b 2b       	or	r21, r27
     75a:	ea 18       	sub	r14, r10
     75c:	fb 08       	sbc	r15, r11
     75e:	0c 09       	sbc	r16, r12
     760:	1d 09       	sbc	r17, r13
     762:	b6 95       	lsr	r27
     764:	a7 95       	ror	r26
     766:	97 95       	ror	r25
     768:	87 95       	ror	r24
     76a:	ee 0c       	add	r14, r14
     76c:	ff 1c       	adc	r15, r15
     76e:	00 1f       	adc	r16, r16
     770:	11 1f       	adc	r17, r17
     772:	6f 5f       	subi	r22, 0xFF	; 255
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	6f 31       	cpi	r22, 0x1F	; 31
     778:	71 05       	cpc	r23, r1
     77a:	31 f7       	brne	.-52     	; 0x748 <__divsf3+0xda>
     77c:	da 01       	movw	r26, r20
     77e:	c9 01       	movw	r24, r18
     780:	8f 77       	andi	r24, 0x7F	; 127
     782:	90 70       	andi	r25, 0x00	; 0
     784:	a0 70       	andi	r26, 0x00	; 0
     786:	b0 70       	andi	r27, 0x00	; 0
     788:	80 34       	cpi	r24, 0x40	; 64
     78a:	91 05       	cpc	r25, r1
     78c:	a1 05       	cpc	r26, r1
     78e:	b1 05       	cpc	r27, r1
     790:	61 f4       	brne	.+24     	; 0x7aa <__divsf3+0x13c>
     792:	27 fd       	sbrc	r18, 7
     794:	0a c0       	rjmp	.+20     	; 0x7aa <__divsf3+0x13c>
     796:	e1 14       	cp	r14, r1
     798:	f1 04       	cpc	r15, r1
     79a:	01 05       	cpc	r16, r1
     79c:	11 05       	cpc	r17, r1
     79e:	29 f0       	breq	.+10     	; 0x7aa <__divsf3+0x13c>
     7a0:	20 5c       	subi	r18, 0xC0	; 192
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	4f 4f       	sbci	r20, 0xFF	; 255
     7a6:	5f 4f       	sbci	r21, 0xFF	; 255
     7a8:	20 78       	andi	r18, 0x80	; 128
     7aa:	2d 87       	std	Y+13, r18	; 0x0d
     7ac:	3e 87       	std	Y+14, r19	; 0x0e
     7ae:	4f 87       	std	Y+15, r20	; 0x0f
     7b0:	58 8b       	std	Y+16, r21	; 0x10
     7b2:	be 01       	movw	r22, r28
     7b4:	67 5f       	subi	r22, 0xF7	; 247
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	cb 01       	movw	r24, r22
     7ba:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__pack_f>
     7be:	68 96       	adiw	r28, 0x18	; 24
     7c0:	ea e0       	ldi	r30, 0x0A	; 10
     7c2:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__epilogue_restores__+0x10>

000007c6 <__gtsf2>:
     7c6:	a8 e1       	ldi	r26, 0x18	; 24
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e9 ee       	ldi	r30, 0xE9	; 233
     7cc:	f3 e0       	ldi	r31, 0x03	; 3
     7ce:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x18>
     7d2:	69 83       	std	Y+1, r22	; 0x01
     7d4:	7a 83       	std	Y+2, r23	; 0x02
     7d6:	8b 83       	std	Y+3, r24	; 0x03
     7d8:	9c 83       	std	Y+4, r25	; 0x04
     7da:	2d 83       	std	Y+5, r18	; 0x05
     7dc:	3e 83       	std	Y+6, r19	; 0x06
     7de:	4f 83       	std	Y+7, r20	; 0x07
     7e0:	58 87       	std	Y+8, r21	; 0x08
     7e2:	89 e0       	ldi	r24, 0x09	; 9
     7e4:	e8 2e       	mov	r14, r24
     7e6:	f1 2c       	mov	r15, r1
     7e8:	ec 0e       	add	r14, r28
     7ea:	fd 1e       	adc	r15, r29
     7ec:	ce 01       	movw	r24, r28
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	b7 01       	movw	r22, r14
     7f2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     7f6:	8e 01       	movw	r16, r28
     7f8:	0f 5e       	subi	r16, 0xEF	; 239
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	ce 01       	movw	r24, r28
     7fe:	05 96       	adiw	r24, 0x05	; 5
     800:	b8 01       	movw	r22, r16
     802:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     806:	89 85       	ldd	r24, Y+9	; 0x09
     808:	82 30       	cpi	r24, 0x02	; 2
     80a:	40 f0       	brcs	.+16     	; 0x81c <__gtsf2+0x56>
     80c:	89 89       	ldd	r24, Y+17	; 0x11
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	28 f0       	brcs	.+10     	; 0x81c <__gtsf2+0x56>
     812:	c7 01       	movw	r24, r14
     814:	b8 01       	movw	r22, r16
     816:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fpcmp_parts_f>
     81a:	01 c0       	rjmp	.+2      	; 0x81e <__gtsf2+0x58>
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	68 96       	adiw	r28, 0x18	; 24
     820:	e6 e0       	ldi	r30, 0x06	; 6
     822:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x18>

00000826 <__gesf2>:
     826:	a8 e1       	ldi	r26, 0x18	; 24
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	e9 e1       	ldi	r30, 0x19	; 25
     82c:	f4 e0       	ldi	r31, 0x04	; 4
     82e:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x18>
     832:	69 83       	std	Y+1, r22	; 0x01
     834:	7a 83       	std	Y+2, r23	; 0x02
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	2d 83       	std	Y+5, r18	; 0x05
     83c:	3e 83       	std	Y+6, r19	; 0x06
     83e:	4f 83       	std	Y+7, r20	; 0x07
     840:	58 87       	std	Y+8, r21	; 0x08
     842:	89 e0       	ldi	r24, 0x09	; 9
     844:	e8 2e       	mov	r14, r24
     846:	f1 2c       	mov	r15, r1
     848:	ec 0e       	add	r14, r28
     84a:	fd 1e       	adc	r15, r29
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	b7 01       	movw	r22, r14
     852:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     856:	8e 01       	movw	r16, r28
     858:	0f 5e       	subi	r16, 0xEF	; 239
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
     85c:	ce 01       	movw	r24, r28
     85e:	05 96       	adiw	r24, 0x05	; 5
     860:	b8 01       	movw	r22, r16
     862:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     866:	89 85       	ldd	r24, Y+9	; 0x09
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	40 f0       	brcs	.+16     	; 0x87c <__gesf2+0x56>
     86c:	89 89       	ldd	r24, Y+17	; 0x11
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	28 f0       	brcs	.+10     	; 0x87c <__gesf2+0x56>
     872:	c7 01       	movw	r24, r14
     874:	b8 01       	movw	r22, r16
     876:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fpcmp_parts_f>
     87a:	01 c0       	rjmp	.+2      	; 0x87e <__gesf2+0x58>
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	68 96       	adiw	r28, 0x18	; 24
     880:	e6 e0       	ldi	r30, 0x06	; 6
     882:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x18>

00000886 <__ltsf2>:
     886:	a8 e1       	ldi	r26, 0x18	; 24
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	e9 e4       	ldi	r30, 0x49	; 73
     88c:	f4 e0       	ldi	r31, 0x04	; 4
     88e:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__prologue_saves__+0x18>
     892:	69 83       	std	Y+1, r22	; 0x01
     894:	7a 83       	std	Y+2, r23	; 0x02
     896:	8b 83       	std	Y+3, r24	; 0x03
     898:	9c 83       	std	Y+4, r25	; 0x04
     89a:	2d 83       	std	Y+5, r18	; 0x05
     89c:	3e 83       	std	Y+6, r19	; 0x06
     89e:	4f 83       	std	Y+7, r20	; 0x07
     8a0:	58 87       	std	Y+8, r21	; 0x08
     8a2:	89 e0       	ldi	r24, 0x09	; 9
     8a4:	e8 2e       	mov	r14, r24
     8a6:	f1 2c       	mov	r15, r1
     8a8:	ec 0e       	add	r14, r28
     8aa:	fd 1e       	adc	r15, r29
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	b7 01       	movw	r22, r14
     8b2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     8b6:	8e 01       	movw	r16, r28
     8b8:	0f 5e       	subi	r16, 0xEF	; 239
     8ba:	1f 4f       	sbci	r17, 0xFF	; 255
     8bc:	ce 01       	movw	r24, r28
     8be:	05 96       	adiw	r24, 0x05	; 5
     8c0:	b8 01       	movw	r22, r16
     8c2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     8c6:	89 85       	ldd	r24, Y+9	; 0x09
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	40 f0       	brcs	.+16     	; 0x8dc <__ltsf2+0x56>
     8cc:	89 89       	ldd	r24, Y+17	; 0x11
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__ltsf2+0x56>
     8d2:	c7 01       	movw	r24, r14
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fpcmp_parts_f>
     8da:	01 c0       	rjmp	.+2      	; 0x8de <__ltsf2+0x58>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	68 96       	adiw	r28, 0x18	; 24
     8e0:	e6 e0       	ldi	r30, 0x06	; 6
     8e2:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x18>

000008e6 <__fixsfsi>:
     8e6:	ac e0       	ldi	r26, 0x0C	; 12
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e9 e7       	ldi	r30, 0x79	; 121
     8ec:	f4 e0       	ldi	r31, 0x04	; 4
     8ee:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__prologue_saves__+0x20>
     8f2:	69 83       	std	Y+1, r22	; 0x01
     8f4:	7a 83       	std	Y+2, r23	; 0x02
     8f6:	8b 83       	std	Y+3, r24	; 0x03
     8f8:	9c 83       	std	Y+4, r25	; 0x04
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	be 01       	movw	r22, r28
     900:	6b 5f       	subi	r22, 0xFB	; 251
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     908:	8d 81       	ldd	r24, Y+5	; 0x05
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	61 f1       	breq	.+88     	; 0x966 <__fixsfsi+0x80>
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	50 f1       	brcs	.+84     	; 0x966 <__fixsfsi+0x80>
     912:	84 30       	cpi	r24, 0x04	; 4
     914:	21 f4       	brne	.+8      	; 0x91e <__fixsfsi+0x38>
     916:	8e 81       	ldd	r24, Y+6	; 0x06
     918:	88 23       	and	r24, r24
     91a:	51 f1       	breq	.+84     	; 0x970 <__fixsfsi+0x8a>
     91c:	2e c0       	rjmp	.+92     	; 0x97a <__fixsfsi+0x94>
     91e:	2f 81       	ldd	r18, Y+7	; 0x07
     920:	38 85       	ldd	r19, Y+8	; 0x08
     922:	37 fd       	sbrc	r19, 7
     924:	20 c0       	rjmp	.+64     	; 0x966 <__fixsfsi+0x80>
     926:	6e 81       	ldd	r22, Y+6	; 0x06
     928:	2f 31       	cpi	r18, 0x1F	; 31
     92a:	31 05       	cpc	r19, r1
     92c:	1c f0       	brlt	.+6      	; 0x934 <__fixsfsi+0x4e>
     92e:	66 23       	and	r22, r22
     930:	f9 f0       	breq	.+62     	; 0x970 <__fixsfsi+0x8a>
     932:	23 c0       	rjmp	.+70     	; 0x97a <__fixsfsi+0x94>
     934:	8e e1       	ldi	r24, 0x1E	; 30
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	82 1b       	sub	r24, r18
     93a:	93 0b       	sbc	r25, r19
     93c:	29 85       	ldd	r18, Y+9	; 0x09
     93e:	3a 85       	ldd	r19, Y+10	; 0x0a
     940:	4b 85       	ldd	r20, Y+11	; 0x0b
     942:	5c 85       	ldd	r21, Y+12	; 0x0c
     944:	04 c0       	rjmp	.+8      	; 0x94e <__fixsfsi+0x68>
     946:	56 95       	lsr	r21
     948:	47 95       	ror	r20
     94a:	37 95       	ror	r19
     94c:	27 95       	ror	r18
     94e:	8a 95       	dec	r24
     950:	d2 f7       	brpl	.-12     	; 0x946 <__fixsfsi+0x60>
     952:	66 23       	and	r22, r22
     954:	b1 f0       	breq	.+44     	; 0x982 <__fixsfsi+0x9c>
     956:	50 95       	com	r21
     958:	40 95       	com	r20
     95a:	30 95       	com	r19
     95c:	21 95       	neg	r18
     95e:	3f 4f       	sbci	r19, 0xFF	; 255
     960:	4f 4f       	sbci	r20, 0xFF	; 255
     962:	5f 4f       	sbci	r21, 0xFF	; 255
     964:	0e c0       	rjmp	.+28     	; 0x982 <__fixsfsi+0x9c>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	09 c0       	rjmp	.+18     	; 0x982 <__fixsfsi+0x9c>
     970:	2f ef       	ldi	r18, 0xFF	; 255
     972:	3f ef       	ldi	r19, 0xFF	; 255
     974:	4f ef       	ldi	r20, 0xFF	; 255
     976:	5f e7       	ldi	r21, 0x7F	; 127
     978:	04 c0       	rjmp	.+8      	; 0x982 <__fixsfsi+0x9c>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e8       	ldi	r21, 0x80	; 128
     982:	b9 01       	movw	r22, r18
     984:	ca 01       	movw	r24, r20
     986:	2c 96       	adiw	r28, 0x0c	; 12
     988:	e2 e0       	ldi	r30, 0x02	; 2
     98a:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <__epilogue_restores__+0x20>

0000098e <__floatunsisf>:
     98e:	a8 e0       	ldi	r26, 0x08	; 8
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	ed ec       	ldi	r30, 0xCD	; 205
     994:	f4 e0       	ldi	r31, 0x04	; 4
     996:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <__prologue_saves__+0x10>
     99a:	7b 01       	movw	r14, r22
     99c:	8c 01       	movw	r16, r24
     99e:	61 15       	cp	r22, r1
     9a0:	71 05       	cpc	r23, r1
     9a2:	81 05       	cpc	r24, r1
     9a4:	91 05       	cpc	r25, r1
     9a6:	19 f4       	brne	.+6      	; 0x9ae <__floatunsisf+0x20>
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	89 83       	std	Y+1, r24	; 0x01
     9ac:	60 c0       	rjmp	.+192    	; 0xa6e <__floatunsisf+0xe0>
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	8e e1       	ldi	r24, 0x1E	; 30
     9b4:	c8 2e       	mov	r12, r24
     9b6:	d1 2c       	mov	r13, r1
     9b8:	dc 82       	std	Y+4, r13	; 0x04
     9ba:	cb 82       	std	Y+3, r12	; 0x03
     9bc:	ed 82       	std	Y+5, r14	; 0x05
     9be:	fe 82       	std	Y+6, r15	; 0x06
     9c0:	0f 83       	std	Y+7, r16	; 0x07
     9c2:	18 87       	std	Y+8, r17	; 0x08
     9c4:	c8 01       	movw	r24, r16
     9c6:	b7 01       	movw	r22, r14
     9c8:	0e 94 40 05 	call	0xa80	; 0xa80 <__clzsi2>
     9cc:	fc 01       	movw	r30, r24
     9ce:	31 97       	sbiw	r30, 0x01	; 1
     9d0:	f7 ff       	sbrs	r31, 7
     9d2:	3b c0       	rjmp	.+118    	; 0xa4a <__floatunsisf+0xbc>
     9d4:	22 27       	eor	r18, r18
     9d6:	33 27       	eor	r19, r19
     9d8:	2e 1b       	sub	r18, r30
     9da:	3f 0b       	sbc	r19, r31
     9dc:	57 01       	movw	r10, r14
     9de:	68 01       	movw	r12, r16
     9e0:	02 2e       	mov	r0, r18
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <__floatunsisf+0x5e>
     9e4:	d6 94       	lsr	r13
     9e6:	c7 94       	ror	r12
     9e8:	b7 94       	ror	r11
     9ea:	a7 94       	ror	r10
     9ec:	0a 94       	dec	r0
     9ee:	d2 f7       	brpl	.-12     	; 0x9e4 <__floatunsisf+0x56>
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__floatunsisf+0x7c>
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	aa 1f       	adc	r26, r26
     a08:	bb 1f       	adc	r27, r27
     a0a:	2a 95       	dec	r18
     a0c:	d2 f7       	brpl	.-12     	; 0xa02 <__floatunsisf+0x74>
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	a1 09       	sbc	r26, r1
     a12:	b1 09       	sbc	r27, r1
     a14:	8e 21       	and	r24, r14
     a16:	9f 21       	and	r25, r15
     a18:	a0 23       	and	r26, r16
     a1a:	b1 23       	and	r27, r17
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	21 f0       	breq	.+8      	; 0xa2c <__floatunsisf+0x9e>
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	4a 29       	or	r20, r10
     a2e:	5b 29       	or	r21, r11
     a30:	6c 29       	or	r22, r12
     a32:	7d 29       	or	r23, r13
     a34:	4d 83       	std	Y+5, r20	; 0x05
     a36:	5e 83       	std	Y+6, r21	; 0x06
     a38:	6f 83       	std	Y+7, r22	; 0x07
     a3a:	78 87       	std	Y+8, r23	; 0x08
     a3c:	8e e1       	ldi	r24, 0x1E	; 30
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	8e 1b       	sub	r24, r30
     a42:	9f 0b       	sbc	r25, r31
     a44:	9c 83       	std	Y+4, r25	; 0x04
     a46:	8b 83       	std	Y+3, r24	; 0x03
     a48:	12 c0       	rjmp	.+36     	; 0xa6e <__floatunsisf+0xe0>
     a4a:	30 97       	sbiw	r30, 0x00	; 0
     a4c:	81 f0       	breq	.+32     	; 0xa6e <__floatunsisf+0xe0>
     a4e:	0e 2e       	mov	r0, r30
     a50:	04 c0       	rjmp	.+8      	; 0xa5a <__floatunsisf+0xcc>
     a52:	ee 0c       	add	r14, r14
     a54:	ff 1c       	adc	r15, r15
     a56:	00 1f       	adc	r16, r16
     a58:	11 1f       	adc	r17, r17
     a5a:	0a 94       	dec	r0
     a5c:	d2 f7       	brpl	.-12     	; 0xa52 <__floatunsisf+0xc4>
     a5e:	ed 82       	std	Y+5, r14	; 0x05
     a60:	fe 82       	std	Y+6, r15	; 0x06
     a62:	0f 83       	std	Y+7, r16	; 0x07
     a64:	18 87       	std	Y+8, r17	; 0x08
     a66:	ce 1a       	sub	r12, r30
     a68:	df 0a       	sbc	r13, r31
     a6a:	dc 82       	std	Y+4, r13	; 0x04
     a6c:	cb 82       	std	Y+3, r12	; 0x03
     a6e:	1a 82       	std	Y+2, r1	; 0x02
     a70:	ce 01       	movw	r24, r28
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__pack_f>
     a78:	28 96       	adiw	r28, 0x08	; 8
     a7a:	ea e0       	ldi	r30, 0x0A	; 10
     a7c:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__epilogue_restores__+0x10>

00000a80 <__clzsi2>:
     a80:	ef 92       	push	r14
     a82:	ff 92       	push	r15
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	7b 01       	movw	r14, r22
     a8a:	8c 01       	movw	r16, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	e8 16       	cp	r14, r24
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	f8 06       	cpc	r15, r24
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	08 07       	cpc	r16, r24
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	18 07       	cpc	r17, r24
     a9c:	88 f4       	brcc	.+34     	; 0xac0 <__clzsi2+0x40>
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	e8 16       	cp	r14, r24
     aa2:	f1 04       	cpc	r15, r1
     aa4:	01 05       	cpc	r16, r1
     aa6:	11 05       	cpc	r17, r1
     aa8:	31 f0       	breq	.+12     	; 0xab6 <__clzsi2+0x36>
     aaa:	28 f0       	brcs	.+10     	; 0xab6 <__clzsi2+0x36>
     aac:	88 e0       	ldi	r24, 0x08	; 8
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	17 c0       	rjmp	.+46     	; 0xae4 <__clzsi2+0x64>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	12 c0       	rjmp	.+36     	; 0xae4 <__clzsi2+0x64>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	e8 16       	cp	r14, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	f8 06       	cpc	r15, r24
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	08 07       	cpc	r16, r24
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	18 07       	cpc	r17, r24
     ad0:	28 f0       	brcs	.+10     	; 0xadc <__clzsi2+0x5c>
     ad2:	88 e1       	ldi	r24, 0x18	; 24
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a0 e0       	ldi	r26, 0x00	; 0
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <__clzsi2+0x64>
     adc:	80 e1       	ldi	r24, 0x10	; 16
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e0       	ldi	r26, 0x00	; 0
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	20 e2       	ldi	r18, 0x20	; 32
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	28 1b       	sub	r18, r24
     aee:	39 0b       	sbc	r19, r25
     af0:	4a 0b       	sbc	r20, r26
     af2:	5b 0b       	sbc	r21, r27
     af4:	04 c0       	rjmp	.+8      	; 0xafe <__clzsi2+0x7e>
     af6:	16 95       	lsr	r17
     af8:	07 95       	ror	r16
     afa:	f7 94       	ror	r15
     afc:	e7 94       	ror	r14
     afe:	8a 95       	dec	r24
     b00:	d2 f7       	brpl	.-12     	; 0xaf6 <__clzsi2+0x76>
     b02:	f7 01       	movw	r30, r14
     b04:	eb 5a       	subi	r30, 0xAB	; 171
     b06:	fe 4f       	sbci	r31, 0xFE	; 254
     b08:	80 81       	ld	r24, Z
     b0a:	28 1b       	sub	r18, r24
     b0c:	31 09       	sbc	r19, r1
     b0e:	41 09       	sbc	r20, r1
     b10:	51 09       	sbc	r21, r1
     b12:	c9 01       	movw	r24, r18
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	08 95       	ret

00000b1e <__pack_f>:
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	fc 01       	movw	r30, r24
     b2a:	e4 80       	ldd	r14, Z+4	; 0x04
     b2c:	f5 80       	ldd	r15, Z+5	; 0x05
     b2e:	06 81       	ldd	r16, Z+6	; 0x06
     b30:	17 81       	ldd	r17, Z+7	; 0x07
     b32:	d1 80       	ldd	r13, Z+1	; 0x01
     b34:	80 81       	ld	r24, Z
     b36:	82 30       	cpi	r24, 0x02	; 2
     b38:	48 f4       	brcc	.+18     	; 0xb4c <__pack_f+0x2e>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e1       	ldi	r26, 0x10	; 16
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e8 2a       	or	r14, r24
     b44:	f9 2a       	or	r15, r25
     b46:	0a 2b       	or	r16, r26
     b48:	1b 2b       	or	r17, r27
     b4a:	a5 c0       	rjmp	.+330    	; 0xc96 <__pack_f+0x178>
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	09 f4       	brne	.+2      	; 0xb52 <__pack_f+0x34>
     b50:	9f c0       	rjmp	.+318    	; 0xc90 <__pack_f+0x172>
     b52:	82 30       	cpi	r24, 0x02	; 2
     b54:	21 f4       	brne	.+8      	; 0xb5e <__pack_f+0x40>
     b56:	ee 24       	eor	r14, r14
     b58:	ff 24       	eor	r15, r15
     b5a:	87 01       	movw	r16, r14
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <__pack_f+0x4a>
     b5e:	e1 14       	cp	r14, r1
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	19 f4       	brne	.+6      	; 0xb6e <__pack_f+0x50>
     b68:	e0 e0       	ldi	r30, 0x00	; 0
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	96 c0       	rjmp	.+300    	; 0xc9a <__pack_f+0x17c>
     b6e:	62 81       	ldd	r22, Z+2	; 0x02
     b70:	73 81       	ldd	r23, Z+3	; 0x03
     b72:	9f ef       	ldi	r25, 0xFF	; 255
     b74:	62 38       	cpi	r22, 0x82	; 130
     b76:	79 07       	cpc	r23, r25
     b78:	0c f0       	brlt	.+2      	; 0xb7c <__pack_f+0x5e>
     b7a:	5b c0       	rjmp	.+182    	; 0xc32 <__pack_f+0x114>
     b7c:	22 e8       	ldi	r18, 0x82	; 130
     b7e:	3f ef       	ldi	r19, 0xFF	; 255
     b80:	26 1b       	sub	r18, r22
     b82:	37 0b       	sbc	r19, r23
     b84:	2a 31       	cpi	r18, 0x1A	; 26
     b86:	31 05       	cpc	r19, r1
     b88:	2c f0       	brlt	.+10     	; 0xb94 <__pack_f+0x76>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	2a c0       	rjmp	.+84     	; 0xbe8 <__pack_f+0xca>
     b94:	b8 01       	movw	r22, r16
     b96:	a7 01       	movw	r20, r14
     b98:	02 2e       	mov	r0, r18
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <__pack_f+0x86>
     b9c:	76 95       	lsr	r23
     b9e:	67 95       	ror	r22
     ba0:	57 95       	ror	r21
     ba2:	47 95       	ror	r20
     ba4:	0a 94       	dec	r0
     ba6:	d2 f7       	brpl	.-12     	; 0xb9c <__pack_f+0x7e>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <__pack_f+0x9c>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	aa 1f       	adc	r26, r26
     bb8:	bb 1f       	adc	r27, r27
     bba:	2a 95       	dec	r18
     bbc:	d2 f7       	brpl	.-12     	; 0xbb2 <__pack_f+0x94>
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	a1 09       	sbc	r26, r1
     bc2:	b1 09       	sbc	r27, r1
     bc4:	8e 21       	and	r24, r14
     bc6:	9f 21       	and	r25, r15
     bc8:	a0 23       	and	r26, r16
     bca:	b1 23       	and	r27, r17
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	a1 05       	cpc	r26, r1
     bd0:	b1 05       	cpc	r27, r1
     bd2:	21 f0       	breq	.+8      	; 0xbdc <__pack_f+0xbe>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	9a 01       	movw	r18, r20
     bde:	ab 01       	movw	r20, r22
     be0:	28 2b       	or	r18, r24
     be2:	39 2b       	or	r19, r25
     be4:	4a 2b       	or	r20, r26
     be6:	5b 2b       	or	r21, r27
     be8:	da 01       	movw	r26, r20
     bea:	c9 01       	movw	r24, r18
     bec:	8f 77       	andi	r24, 0x7F	; 127
     bee:	90 70       	andi	r25, 0x00	; 0
     bf0:	a0 70       	andi	r26, 0x00	; 0
     bf2:	b0 70       	andi	r27, 0x00	; 0
     bf4:	80 34       	cpi	r24, 0x40	; 64
     bf6:	91 05       	cpc	r25, r1
     bf8:	a1 05       	cpc	r26, r1
     bfa:	b1 05       	cpc	r27, r1
     bfc:	39 f4       	brne	.+14     	; 0xc0c <__pack_f+0xee>
     bfe:	27 ff       	sbrs	r18, 7
     c00:	09 c0       	rjmp	.+18     	; 0xc14 <__pack_f+0xf6>
     c02:	20 5c       	subi	r18, 0xC0	; 192
     c04:	3f 4f       	sbci	r19, 0xFF	; 255
     c06:	4f 4f       	sbci	r20, 0xFF	; 255
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0xf6>
     c0c:	21 5c       	subi	r18, 0xC1	; 193
     c0e:	3f 4f       	sbci	r19, 0xFF	; 255
     c10:	4f 4f       	sbci	r20, 0xFF	; 255
     c12:	5f 4f       	sbci	r21, 0xFF	; 255
     c14:	e0 e0       	ldi	r30, 0x00	; 0
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	20 30       	cpi	r18, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	3a 07       	cpc	r19, r26
     c1e:	a0 e0       	ldi	r26, 0x00	; 0
     c20:	4a 07       	cpc	r20, r26
     c22:	a0 e4       	ldi	r26, 0x40	; 64
     c24:	5a 07       	cpc	r21, r26
     c26:	10 f0       	brcs	.+4      	; 0xc2c <__pack_f+0x10e>
     c28:	e1 e0       	ldi	r30, 0x01	; 1
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	79 01       	movw	r14, r18
     c2e:	8a 01       	movw	r16, r20
     c30:	27 c0       	rjmp	.+78     	; 0xc80 <__pack_f+0x162>
     c32:	60 38       	cpi	r22, 0x80	; 128
     c34:	71 05       	cpc	r23, r1
     c36:	64 f5       	brge	.+88     	; 0xc90 <__pack_f+0x172>
     c38:	fb 01       	movw	r30, r22
     c3a:	e1 58       	subi	r30, 0x81	; 129
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	d8 01       	movw	r26, r16
     c40:	c7 01       	movw	r24, r14
     c42:	8f 77       	andi	r24, 0x7F	; 127
     c44:	90 70       	andi	r25, 0x00	; 0
     c46:	a0 70       	andi	r26, 0x00	; 0
     c48:	b0 70       	andi	r27, 0x00	; 0
     c4a:	80 34       	cpi	r24, 0x40	; 64
     c4c:	91 05       	cpc	r25, r1
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	39 f4       	brne	.+14     	; 0xc62 <__pack_f+0x144>
     c54:	e7 fe       	sbrs	r14, 7
     c56:	0d c0       	rjmp	.+26     	; 0xc72 <__pack_f+0x154>
     c58:	80 e4       	ldi	r24, 0x40	; 64
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <__pack_f+0x14c>
     c62:	8f e3       	ldi	r24, 0x3F	; 63
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	a0 e0       	ldi	r26, 0x00	; 0
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e8 0e       	add	r14, r24
     c6c:	f9 1e       	adc	r15, r25
     c6e:	0a 1f       	adc	r16, r26
     c70:	1b 1f       	adc	r17, r27
     c72:	17 ff       	sbrs	r17, 7
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <__pack_f+0x162>
     c76:	16 95       	lsr	r17
     c78:	07 95       	ror	r16
     c7a:	f7 94       	ror	r15
     c7c:	e7 94       	ror	r14
     c7e:	31 96       	adiw	r30, 0x01	; 1
     c80:	87 e0       	ldi	r24, 0x07	; 7
     c82:	16 95       	lsr	r17
     c84:	07 95       	ror	r16
     c86:	f7 94       	ror	r15
     c88:	e7 94       	ror	r14
     c8a:	8a 95       	dec	r24
     c8c:	d1 f7       	brne	.-12     	; 0xc82 <__pack_f+0x164>
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__pack_f+0x17c>
     c90:	ee 24       	eor	r14, r14
     c92:	ff 24       	eor	r15, r15
     c94:	87 01       	movw	r16, r14
     c96:	ef ef       	ldi	r30, 0xFF	; 255
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	6e 2f       	mov	r22, r30
     c9c:	67 95       	ror	r22
     c9e:	66 27       	eor	r22, r22
     ca0:	67 95       	ror	r22
     ca2:	90 2f       	mov	r25, r16
     ca4:	9f 77       	andi	r25, 0x7F	; 127
     ca6:	d7 94       	ror	r13
     ca8:	dd 24       	eor	r13, r13
     caa:	d7 94       	ror	r13
     cac:	8e 2f       	mov	r24, r30
     cae:	86 95       	lsr	r24
     cb0:	49 2f       	mov	r20, r25
     cb2:	46 2b       	or	r20, r22
     cb4:	58 2f       	mov	r21, r24
     cb6:	5d 29       	or	r21, r13
     cb8:	b7 01       	movw	r22, r14
     cba:	ca 01       	movw	r24, r20
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	08 95       	ret

00000cc8 <__unpack_f>:
     cc8:	fc 01       	movw	r30, r24
     cca:	db 01       	movw	r26, r22
     ccc:	40 81       	ld	r20, Z
     cce:	51 81       	ldd	r21, Z+1	; 0x01
     cd0:	22 81       	ldd	r18, Z+2	; 0x02
     cd2:	62 2f       	mov	r22, r18
     cd4:	6f 77       	andi	r22, 0x7F	; 127
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	22 1f       	adc	r18, r18
     cda:	22 27       	eor	r18, r18
     cdc:	22 1f       	adc	r18, r18
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	89 2f       	mov	r24, r25
     ce2:	88 0f       	add	r24, r24
     ce4:	82 2b       	or	r24, r18
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	99 1f       	adc	r25, r25
     cec:	99 27       	eor	r25, r25
     cee:	99 1f       	adc	r25, r25
     cf0:	11 96       	adiw	r26, 0x01	; 1
     cf2:	9c 93       	st	X, r25
     cf4:	11 97       	sbiw	r26, 0x01	; 1
     cf6:	21 15       	cp	r18, r1
     cf8:	31 05       	cpc	r19, r1
     cfa:	a9 f5       	brne	.+106    	; 0xd66 <__unpack_f+0x9e>
     cfc:	41 15       	cp	r20, r1
     cfe:	51 05       	cpc	r21, r1
     d00:	61 05       	cpc	r22, r1
     d02:	71 05       	cpc	r23, r1
     d04:	11 f4       	brne	.+4      	; 0xd0a <__unpack_f+0x42>
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	37 c0       	rjmp	.+110    	; 0xd78 <__unpack_f+0xb0>
     d0a:	82 e8       	ldi	r24, 0x82	; 130
     d0c:	9f ef       	ldi	r25, 0xFF	; 255
     d0e:	13 96       	adiw	r26, 0x03	; 3
     d10:	9c 93       	st	X, r25
     d12:	8e 93       	st	-X, r24
     d14:	12 97       	sbiw	r26, 0x02	; 2
     d16:	9a 01       	movw	r18, r20
     d18:	ab 01       	movw	r20, r22
     d1a:	67 e0       	ldi	r22, 0x07	; 7
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	6a 95       	dec	r22
     d26:	d1 f7       	brne	.-12     	; 0xd1c <__unpack_f+0x54>
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	8c 93       	st	X, r24
     d2c:	0d c0       	rjmp	.+26     	; 0xd48 <__unpack_f+0x80>
     d2e:	22 0f       	add	r18, r18
     d30:	33 1f       	adc	r19, r19
     d32:	44 1f       	adc	r20, r20
     d34:	55 1f       	adc	r21, r21
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	8d 91       	ld	r24, X+
     d3a:	9c 91       	ld	r25, X
     d3c:	13 97       	sbiw	r26, 0x03	; 3
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	13 96       	adiw	r26, 0x03	; 3
     d42:	9c 93       	st	X, r25
     d44:	8e 93       	st	-X, r24
     d46:	12 97       	sbiw	r26, 0x02	; 2
     d48:	20 30       	cpi	r18, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	38 07       	cpc	r19, r24
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	48 07       	cpc	r20, r24
     d52:	80 e4       	ldi	r24, 0x40	; 64
     d54:	58 07       	cpc	r21, r24
     d56:	58 f3       	brcs	.-42     	; 0xd2e <__unpack_f+0x66>
     d58:	14 96       	adiw	r26, 0x04	; 4
     d5a:	2d 93       	st	X+, r18
     d5c:	3d 93       	st	X+, r19
     d5e:	4d 93       	st	X+, r20
     d60:	5c 93       	st	X, r21
     d62:	17 97       	sbiw	r26, 0x07	; 7
     d64:	08 95       	ret
     d66:	2f 3f       	cpi	r18, 0xFF	; 255
     d68:	31 05       	cpc	r19, r1
     d6a:	79 f4       	brne	.+30     	; 0xd8a <__unpack_f+0xc2>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	19 f4       	brne	.+6      	; 0xd7c <__unpack_f+0xb4>
     d76:	84 e0       	ldi	r24, 0x04	; 4
     d78:	8c 93       	st	X, r24
     d7a:	08 95       	ret
     d7c:	64 ff       	sbrs	r22, 4
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <__unpack_f+0xbe>
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	8c 93       	st	X, r24
     d84:	12 c0       	rjmp	.+36     	; 0xdaa <__unpack_f+0xe2>
     d86:	1c 92       	st	X, r1
     d88:	10 c0       	rjmp	.+32     	; 0xdaa <__unpack_f+0xe2>
     d8a:	2f 57       	subi	r18, 0x7F	; 127
     d8c:	30 40       	sbci	r19, 0x00	; 0
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	3c 93       	st	X, r19
     d92:	2e 93       	st	-X, r18
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	8c 93       	st	X, r24
     d9a:	87 e0       	ldi	r24, 0x07	; 7
     d9c:	44 0f       	add	r20, r20
     d9e:	55 1f       	adc	r21, r21
     da0:	66 1f       	adc	r22, r22
     da2:	77 1f       	adc	r23, r23
     da4:	8a 95       	dec	r24
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0xd4>
     da8:	70 64       	ori	r23, 0x40	; 64
     daa:	14 96       	adiw	r26, 0x04	; 4
     dac:	4d 93       	st	X+, r20
     dae:	5d 93       	st	X+, r21
     db0:	6d 93       	st	X+, r22
     db2:	7c 93       	st	X, r23
     db4:	17 97       	sbiw	r26, 0x07	; 7
     db6:	08 95       	ret

00000db8 <__fpcmp_parts_f>:
     db8:	1f 93       	push	r17
     dba:	dc 01       	movw	r26, r24
     dbc:	fb 01       	movw	r30, r22
     dbe:	9c 91       	ld	r25, X
     dc0:	92 30       	cpi	r25, 0x02	; 2
     dc2:	08 f4       	brcc	.+2      	; 0xdc6 <__fpcmp_parts_f+0xe>
     dc4:	47 c0       	rjmp	.+142    	; 0xe54 <__fpcmp_parts_f+0x9c>
     dc6:	80 81       	ld	r24, Z
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	08 f4       	brcc	.+2      	; 0xdce <__fpcmp_parts_f+0x16>
     dcc:	43 c0       	rjmp	.+134    	; 0xe54 <__fpcmp_parts_f+0x9c>
     dce:	94 30       	cpi	r25, 0x04	; 4
     dd0:	51 f4       	brne	.+20     	; 0xde6 <__fpcmp_parts_f+0x2e>
     dd2:	11 96       	adiw	r26, 0x01	; 1
     dd4:	1c 91       	ld	r17, X
     dd6:	84 30       	cpi	r24, 0x04	; 4
     dd8:	99 f5       	brne	.+102    	; 0xe40 <__fpcmp_parts_f+0x88>
     dda:	81 81       	ldd	r24, Z+1	; 0x01
     ddc:	68 2f       	mov	r22, r24
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	61 1b       	sub	r22, r17
     de2:	71 09       	sbc	r23, r1
     de4:	3f c0       	rjmp	.+126    	; 0xe64 <__fpcmp_parts_f+0xac>
     de6:	84 30       	cpi	r24, 0x04	; 4
     de8:	21 f0       	breq	.+8      	; 0xdf2 <__fpcmp_parts_f+0x3a>
     dea:	92 30       	cpi	r25, 0x02	; 2
     dec:	31 f4       	brne	.+12     	; 0xdfa <__fpcmp_parts_f+0x42>
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	b9 f1       	breq	.+110    	; 0xe60 <__fpcmp_parts_f+0xa8>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	88 23       	and	r24, r24
     df6:	89 f1       	breq	.+98     	; 0xe5a <__fpcmp_parts_f+0xa2>
     df8:	2d c0       	rjmp	.+90     	; 0xe54 <__fpcmp_parts_f+0x9c>
     dfa:	11 96       	adiw	r26, 0x01	; 1
     dfc:	1c 91       	ld	r17, X
     dfe:	11 97       	sbiw	r26, 0x01	; 1
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	f1 f0       	breq	.+60     	; 0xe40 <__fpcmp_parts_f+0x88>
     e04:	81 81       	ldd	r24, Z+1	; 0x01
     e06:	18 17       	cp	r17, r24
     e08:	d9 f4       	brne	.+54     	; 0xe40 <__fpcmp_parts_f+0x88>
     e0a:	12 96       	adiw	r26, 0x02	; 2
     e0c:	2d 91       	ld	r18, X+
     e0e:	3c 91       	ld	r19, X
     e10:	13 97       	sbiw	r26, 0x03	; 3
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	82 17       	cp	r24, r18
     e18:	93 07       	cpc	r25, r19
     e1a:	94 f0       	brlt	.+36     	; 0xe40 <__fpcmp_parts_f+0x88>
     e1c:	28 17       	cp	r18, r24
     e1e:	39 07       	cpc	r19, r25
     e20:	bc f0       	brlt	.+46     	; 0xe50 <__fpcmp_parts_f+0x98>
     e22:	14 96       	adiw	r26, 0x04	; 4
     e24:	8d 91       	ld	r24, X+
     e26:	9d 91       	ld	r25, X+
     e28:	0d 90       	ld	r0, X+
     e2a:	bc 91       	ld	r27, X
     e2c:	a0 2d       	mov	r26, r0
     e2e:	24 81       	ldd	r18, Z+4	; 0x04
     e30:	35 81       	ldd	r19, Z+5	; 0x05
     e32:	46 81       	ldd	r20, Z+6	; 0x06
     e34:	57 81       	ldd	r21, Z+7	; 0x07
     e36:	28 17       	cp	r18, r24
     e38:	39 07       	cpc	r19, r25
     e3a:	4a 07       	cpc	r20, r26
     e3c:	5b 07       	cpc	r21, r27
     e3e:	18 f4       	brcc	.+6      	; 0xe46 <__fpcmp_parts_f+0x8e>
     e40:	11 23       	and	r17, r17
     e42:	41 f0       	breq	.+16     	; 0xe54 <__fpcmp_parts_f+0x9c>
     e44:	0a c0       	rjmp	.+20     	; 0xe5a <__fpcmp_parts_f+0xa2>
     e46:	82 17       	cp	r24, r18
     e48:	93 07       	cpc	r25, r19
     e4a:	a4 07       	cpc	r26, r20
     e4c:	b5 07       	cpc	r27, r21
     e4e:	40 f4       	brcc	.+16     	; 0xe60 <__fpcmp_parts_f+0xa8>
     e50:	11 23       	and	r17, r17
     e52:	19 f0       	breq	.+6      	; 0xe5a <__fpcmp_parts_f+0xa2>
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <__fpcmp_parts_f+0xac>
     e5a:	6f ef       	ldi	r22, 0xFF	; 255
     e5c:	7f ef       	ldi	r23, 0xFF	; 255
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <__fpcmp_parts_f+0xac>
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	cb 01       	movw	r24, r22
     e66:	1f 91       	pop	r17
     e68:	08 95       	ret

00000e6a <ADC_init>:
#include<avr/io.h>
#include"std_types.h"
#include "ADC.h"

void ADC_init(void)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e72:	a6 e2       	ldi	r26, 0x26	; 38
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e6 e2       	ldi	r30, 0x26	; 38
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	87 68       	ori	r24, 0x87	; 135
     e7e:	8c 93       	st	X, r24
//	ADMUX|=(1<<REFS0)|(1<<REFS1)|(1<<ADLAR);
	ADMUX|=(1<<REFS0)|(1<<ADLAR);
     e80:	a7 e2       	ldi	r26, 0x27	; 39
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e7 e2       	ldi	r30, 0x27	; 39
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	80 66       	ori	r24, 0x60	; 96
     e8c:	8c 93       	st	X, r24
}
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <ADC_GetResult>:

int ADC_GetResult(u8 channel)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <ADC_GetResult+0x6>
     e9a:	0f 92       	push	r0
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	8b 83       	std	Y+3, r24	; 0x03
	int value;
	ADMUX &= 0b01111000;
     ea2:	a7 e2       	ldi	r26, 0x27	; 39
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e7 e2       	ldi	r30, 0x27	; 39
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	88 77       	andi	r24, 0x78	; 120
     eae:	8c 93       	st	X, r24
	ADMUX |= (channel & (0b00000111) );
     eb0:	a7 e2       	ldi	r26, 0x27	; 39
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e7 e2       	ldi	r30, 0x27	; 39
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	98 2f       	mov	r25, r24
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	87 70       	andi	r24, 0x07	; 7
     ec0:	89 2b       	or	r24, r25
     ec2:	8c 93       	st	X, r24
	ADCSRA|= (1<<ADSC);
     ec4:	a6 e2       	ldi	r26, 0x26	; 38
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 64       	ori	r24, 0x40	; 64
     ed0:	8c 93       	st	X, r24
	while((ADCSRA & (1<<ADSC))!=0);
     ed2:	e6 e2       	ldi	r30, 0x26	; 38
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	80 74       	andi	r24, 0x40	; 64
     ede:	90 70       	andi	r25, 0x00	; 0
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	b9 f7       	brne	.-18     	; 0xed2 <ADC_GetResult+0x3e>
	value=ADCH;
     ee4:	e5 e2       	ldi	r30, 0x25	; 37
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	88 2f       	mov	r24, r24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|= 0x10;
     ef2:	a6 e2       	ldi	r26, 0x26	; 38
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e6 e2       	ldi	r30, 0x26	; 38
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 61       	ori	r24, 0x10	; 16
     efe:	8c 93       	st	X, r24
	return value;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <sendData>:

uint8 defaultBuffer[]={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	2f 97       	sbiw	r28, 0x0f	; 15
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
     f24:	1f 86       	std	Y+15, r1	; 0x0f
     f26:	1a c0       	rjmp	.+52     	; 0xf5c <sendData+0x4c>
	{
		UART_SendByte(dataBuffer[counter]);
     f28:	8f 85       	ldd	r24, Y+15	; 0x0f
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	fc 01       	movw	r30, r24
     f30:	e3 5a       	subi	r30, 0xA3	; 163
     f32:	fd 4f       	sbci	r31, 0xFD	; 253
     f34:	80 81       	ld	r24, Z
     f36:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <UART_SendByte>
		dataBuffer[counter] = defaultBuffer[counter];
     f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	8f 85       	ldd	r24, Y+15	; 0x0f
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	fc 01       	movw	r30, r24
     f48:	eb 5a       	subi	r30, 0xAB	; 171
     f4a:	fd 4f       	sbci	r31, 0xFD	; 253
     f4c:	80 81       	ld	r24, Z
     f4e:	f9 01       	movw	r30, r18
     f50:	e3 5a       	subi	r30, 0xA3	; 163
     f52:	fd 4f       	sbci	r31, 0xFD	; 253
     f54:	80 83       	st	Z, r24
	
uint8 dataBuffer[] ={START_BYTE , VER_INFO , SPE_VOL , DummyData , DummyData , DummyData , DummyData , END_BYTE};
void sendData()
{
	uint8 counter ;
	for(counter = 0 ; counter <8 ; counter ++ )
     f56:	8f 85       	ldd	r24, Y+15	; 0x0f
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	8f 87       	std	Y+15, r24	; 0x0f
     f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5e:	88 30       	cpi	r24, 0x08	; 8
     f60:	18 f3       	brcs	.-58     	; 0xf28 <sendData+0x18>
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a8 ec       	ldi	r26, 0xC8	; 200
     f68:	b2 e4       	ldi	r27, 0x42	; 66
     f6a:	8b 87       	std	Y+11, r24	; 0x0b
     f6c:	9c 87       	std	Y+12, r25	; 0x0c
     f6e:	ad 87       	std	Y+13, r26	; 0x0d
     f70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f72:	6b 85       	ldd	r22, Y+11	; 0x0b
     f74:	7c 85       	ldd	r23, Y+12	; 0x0c
     f76:	8d 85       	ldd	r24, Y+13	; 0x0d
     f78:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	4a e7       	ldi	r20, 0x7A	; 122
     f80:	55 e4       	ldi	r21, 0x45	; 69
     f82:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	8f 83       	std	Y+7, r24	; 0x07
     f8c:	98 87       	std	Y+8, r25	; 0x08
     f8e:	a9 87       	std	Y+9, r26	; 0x09
     f90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f92:	6f 81       	ldd	r22, Y+7	; 0x07
     f94:	78 85       	ldd	r23, Y+8	; 0x08
     f96:	89 85       	ldd	r24, Y+9	; 0x09
     f98:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e8       	ldi	r20, 0x80	; 128
     fa0:	5f e3       	ldi	r21, 0x3F	; 63
     fa2:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
     fa6:	88 23       	and	r24, r24
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <sendData+0xa4>
		__ticks = 1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
     fb2:	3f c0       	rjmp	.+126    	; 0x1032 <sendData+0x122>
	else if (__tmp > 65535)
     fb4:	6f 81       	ldd	r22, Y+7	; 0x07
     fb6:	78 85       	ldd	r23, Y+8	; 0x08
     fb8:	89 85       	ldd	r24, Y+9	; 0x09
     fba:	9a 85       	ldd	r25, Y+10	; 0x0a
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	3f ef       	ldi	r19, 0xFF	; 255
     fc0:	4f e7       	ldi	r20, 0x7F	; 127
     fc2:	57 e4       	ldi	r21, 0x47	; 71
     fc4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
     fc8:	18 16       	cp	r1, r24
     fca:	4c f5       	brge	.+82     	; 0x101e <sendData+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
     fce:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e2       	ldi	r20, 0x20	; 32
     fda:	51 e4       	ldi	r21, 0x41	; 65
     fdc:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	bc 01       	movw	r22, r24
     fe6:	cd 01       	movw	r24, r26
     fe8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
     ff4:	0f c0       	rjmp	.+30     	; 0x1014 <sendData+0x104>
     ff6:	80 e9       	ldi	r24, 0x90	; 144
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	9c 83       	std	Y+4, r25	; 0x04
     ffc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <sendData+0xf2>
    1006:	9c 83       	std	Y+4, r25	; 0x04
    1008:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	9e 81       	ldd	r25, Y+6	; 0x06
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	9e 83       	std	Y+6, r25	; 0x06
    1012:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	9e 81       	ldd	r25, Y+6	; 0x06
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	69 f7       	brne	.-38     	; 0xff6 <sendData+0xe6>
    101c:	14 c0       	rjmp	.+40     	; 0x1046 <sendData+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101e:	6f 81       	ldd	r22, Y+7	; 0x07
    1020:	78 85       	ldd	r23, Y+8	; 0x08
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <sendData+0x12e>
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_SendByte(dataBuffer[counter]);
		dataBuffer[counter] = defaultBuffer[counter];
	}
	_delay_ms(100);
}
    1046:	2f 96       	adiw	r28, 0x0f	; 15
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <DFPlayer_init>:

void DFPlayer_init(void)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	/* set Digital to Analog converter (DAC) online */
	dataBuffer[3] = DAC_ONLINE ; /*command to set DAC online */
    1060:	8a e1       	ldi	r24, 0x1A	; 26
    1062:	80 93 60 02 	sts	0x0260, r24
	sendData(); /* send this command through uart to DFPlayer module*/
    1066:	0e 94 88 07 	call	0xf10	; 0xf10 <sendData>
}
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <DFPlayer_CMD_play>:
void DFPlayer_CMD_play(uint16 songNumber)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <DFPlayer_CMD_play+0x6>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SELECTSONG ; /* command to play song */
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	80 93 60 02 	sts	0x0260, r24
	if(songNumber < 256)
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	8f 3f       	cpi	r24, 0xFF	; 255
    108a:	91 05       	cpc	r25, r1
    108c:	09 f0       	breq	.+2      	; 0x1090 <DFPlayer_CMD_play+0x20>
    108e:	20 f4       	brcc	.+8      	; 0x1098 <DFPlayer_CMD_play+0x28>
	{
		dataBuffer[6] = songNumber ;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	80 93 63 02 	sts	0x0263, r24
    1096:	0b c0       	rjmp	.+22     	; 0x10ae <DFPlayer_CMD_play+0x3e>
	}
	else
	{
		dataBuffer[6] = (uint8)songNumber;
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	80 93 63 02 	sts	0x0263, r24
		dataBuffer[5] = (uint8)songNumber >> 8 ;
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	89 2f       	mov	r24, r25
    10a6:	99 0f       	add	r25, r25
    10a8:	99 0b       	sbc	r25, r25
    10aa:	80 93 62 02 	sts	0x0262, r24
	}
	sendData();
    10ae:	0e 94 88 07 	call	0xf10	; 0xf10 <sendData>
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <DFPlayer_CMD_setVolume>:


void DFPlayer_CMD_setVolume(uint8 volume)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	0f 92       	push	r0
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	89 83       	std	Y+1, r24	; 0x01
	if(volume > 30)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	8f 31       	cpi	r24, 0x1F	; 31
    10cc:	10 f0       	brcs	.+4      	; 0x10d2 <DFPlayer_CMD_setVolume+0x16>
	{
		volume = 30;
    10ce:	8e e1       	ldi	r24, 0x1E	; 30
    10d0:	89 83       	std	Y+1, r24	; 0x01
	}
	dataBuffer[3] = SPE_VOL ;
    10d2:	86 e0       	ldi	r24, 0x06	; 6
    10d4:	80 93 60 02 	sts	0x0260, r24
	dataBuffer[6] = volume;
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	80 93 63 02 	sts	0x0263, r24
	sendData();
    10de:	0e 94 88 07 	call	0xf10	; 0xf10 <sendData>
}
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <DFPlayer_CMD_playContinues>:
void DFPlayer_CMD_playContinues(uint8 songNumber)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	0f 92       	push	r0
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	89 83       	std	Y+1, r24	; 0x01
	dataBuffer[3] = SPPLAYBACKMODE ; /* command to play song continue sly */
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	80 93 60 02 	sts	0x0260, r24
	if(songNumber < 256)
	{
		dataBuffer[6] = songNumber ;
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	80 93 63 02 	sts	0x0263, r24
	else
	{
		dataBuffer[6] = (uint8)songNumber;
		dataBuffer[5] = (uint8)songNumber >> 8 ;
	}
	sendData();
    1102:	0e 94 88 07 	call	0xf10	; 0xf10 <sendData>
}
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <DFPlayer_CMD_pause>:

void DFPlayer_CMD_pause(void)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PAUSE ;
    1116:	8e e0       	ldi	r24, 0x0E	; 14
    1118:	80 93 60 02 	sts	0x0260, r24
	sendData();
    111c:	0e 94 88 07 	call	0xf10	; 0xf10 <sendData>
}
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <DFPlayer_CMD_stop>:

void DFPlayer_CMD_stop(void)
{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = STOP;
    112e:	86 e1       	ldi	r24, 0x16	; 22
    1130:	80 93 60 02 	sts	0x0260, r24
	sendData();
    1134:	0e 94 88 07 	call	0xf10	; 0xf10 <sendData>
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <DFPlayer_CMD_continue>:
void DFPlayer_CMD_continue(void)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = PLAYBACK;
    1146:	8d e0       	ldi	r24, 0x0D	; 13
    1148:	80 93 60 02 	sts	0x0260, r24
	sendData();
    114c:	0e 94 88 07 	call	0xf10	; 0xf10 <sendData>
}
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <DFPlayer_CMD_Reset>:
void DFPlayer_CMD_Reset(void)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
	dataBuffer[3] = RESET;
    115e:	8c e0       	ldi	r24, 0x0C	; 12
    1160:	80 93 60 02 	sts	0x0260, r24
	sendData();
    1164:	0e 94 88 07 	call	0xf10	; 0xf10 <sendData>
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <play_sound>:

void play_sound(uint16 Sound)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <play_sound+0x6>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
	DFPlayer_CMD_pause();
    117c:	0e 94 87 08 	call	0x110e	; 0x110e <DFPlayer_CMD_pause>
	DFPlayer_CMD_setVolume(30);
    1180:	8e e1       	ldi	r24, 0x1E	; 30
    1182:	0e 94 5e 08 	call	0x10bc	; 0x10bc <DFPlayer_CMD_setVolume>
	DFPlayer_CMD_play(Sound);
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	0e 94 38 08 	call	0x1070	; 0x1070 <DFPlayer_CMD_play>
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <TWI_Init>:

#include "i2c.h"
#include "lcd.h"

void TWI_Init(I2C_Prescaler Prescale , I2C_interruptState int_state , uint32 F_SCL , uint8 Address)
{
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	29 97       	sbiw	r28, 0x09	; 9
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	6a 83       	std	Y+2, r22	; 0x02
    11b4:	2b 83       	std	Y+3, r18	; 0x03
    11b6:	3c 83       	std	Y+4, r19	; 0x04
    11b8:	4d 83       	std	Y+5, r20	; 0x05
    11ba:	5e 83       	std	Y+6, r21	; 0x06
    11bc:	0f 83       	std	Y+7, r16	; 0x07
	TWAR = Address<<1;
    11be:	e2 e7       	ldi	r30, 0x72	; 114
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	8f 81       	ldd	r24, Y+7	; 0x07
    11c4:	88 0f       	add	r24, r24
    11c6:	80 83       	st	Z, r24
	 /*  Calculating Bit Rate: */
	switch (Prescale)
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	39 87       	std	Y+9, r19	; 0x09
    11d0:	28 87       	std	Y+8, r18	; 0x08
    11d2:	88 85       	ldd	r24, Y+8	; 0x08
    11d4:	99 85       	ldd	r25, Y+9	; 0x09
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	91 05       	cpc	r25, r1
    11da:	09 f4       	brne	.+2      	; 0x11de <TWI_Init+0x46>
    11dc:	45 c0       	rjmp	.+138    	; 0x1268 <TWI_Init+0xd0>
    11de:	e8 85       	ldd	r30, Y+8	; 0x08
    11e0:	f9 85       	ldd	r31, Y+9	; 0x09
    11e2:	e2 30       	cpi	r30, 0x02	; 2
    11e4:	f1 05       	cpc	r31, r1
    11e6:	34 f4       	brge	.+12     	; 0x11f4 <TWI_Init+0x5c>
    11e8:	28 85       	ldd	r18, Y+8	; 0x08
    11ea:	39 85       	ldd	r19, Y+9	; 0x09
    11ec:	21 15       	cp	r18, r1
    11ee:	31 05       	cpc	r19, r1
    11f0:	71 f0       	breq	.+28     	; 0x120e <TWI_Init+0x76>
    11f2:	e8 c0       	rjmp	.+464    	; 0x13c4 <TWI_Init+0x22c>
    11f4:	88 85       	ldd	r24, Y+8	; 0x08
    11f6:	99 85       	ldd	r25, Y+9	; 0x09
    11f8:	82 30       	cpi	r24, 0x02	; 2
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <TWI_Init+0x68>
    11fe:	65 c0       	rjmp	.+202    	; 0x12ca <TWI_Init+0x132>
    1200:	e8 85       	ldd	r30, Y+8	; 0x08
    1202:	f9 85       	ldd	r31, Y+9	; 0x09
    1204:	e3 30       	cpi	r30, 0x03	; 3
    1206:	f1 05       	cpc	r31, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <TWI_Init+0x74>
    120a:	9a c0       	rjmp	.+308    	; 0x1340 <TWI_Init+0x1a8>
    120c:	db c0       	rjmp	.+438    	; 0x13c4 <TWI_Init+0x22c>
	{
		case I2C_PRESCALE1:
								TWBR = (uint8) (((float)F_CPU/(2.0*F_SCL)) -8);
    120e:	00 e7       	ldi	r16, 0x70	; 112
    1210:	10 e0       	ldi	r17, 0x00	; 0
    1212:	6b 81       	ldd	r22, Y+3	; 0x03
    1214:	7c 81       	ldd	r23, Y+4	; 0x04
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    121e:	9b 01       	movw	r18, r22
    1220:	ac 01       	movw	r20, r24
    1222:	ca 01       	movw	r24, r20
    1224:	b9 01       	movw	r22, r18
    1226:	0e 94 10 02 	call	0x420	; 0x420 <__addsf3>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	9c 01       	movw	r18, r24
    1230:	ad 01       	movw	r20, r26
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	74 e2       	ldi	r23, 0x24	; 36
    1236:	84 e7       	ldi	r24, 0x74	; 116
    1238:	9b e4       	ldi	r25, 0x4B	; 75
    123a:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	bc 01       	movw	r22, r24
    1244:	cd 01       	movw	r24, r26
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	51 e4       	ldi	r21, 0x41	; 65
    124e:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	bc 01       	movw	r22, r24
    1258:	cd 01       	movw	r24, r26
    125a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	f8 01       	movw	r30, r16
    1264:	80 83       	st	Z, r24
    1266:	ae c0       	rjmp	.+348    	; 0x13c4 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE4:
								TWBR = (uint8) (((float)F_CPU/(8.0*F_SCL)) -2);
    1268:	00 e7       	ldi	r16, 0x70	; 112
    126a:	10 e0       	ldi	r17, 0x00	; 0
    126c:	6b 81       	ldd	r22, Y+3	; 0x03
    126e:	7c 81       	ldd	r23, Y+4	; 0x04
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	9e 81       	ldd	r25, Y+6	; 0x06
    1274:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	bc 01       	movw	r22, r24
    127e:	cd 01       	movw	r24, r26
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9c 01       	movw	r18, r24
    1292:	ad 01       	movw	r20, r26
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	74 e2       	ldi	r23, 0x24	; 36
    1298:	84 e7       	ldi	r24, 0x74	; 116
    129a:	9b e4       	ldi	r25, 0x4B	; 75
    129c:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	50 e4       	ldi	r21, 0x40	; 64
    12b0:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	f8 01       	movw	r30, r16
    12c6:	80 83       	st	Z, r24
    12c8:	7d c0       	rjmp	.+250    	; 0x13c4 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE16:
								TWBR = (uint8) (((float)F_CPU/(32*F_SCL)) -0.5);
    12ca:	00 e7       	ldi	r16, 0x70	; 112
    12cc:	10 e0       	ldi	r17, 0x00	; 0
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	ad 81       	ldd	r26, Y+5	; 0x05
    12d4:	be 81       	ldd	r27, Y+6	; 0x06
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	aa 1f       	adc	r26, r26
    12dc:	bb 1f       	adc	r27, r27
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	aa 1f       	adc	r26, r26
    12e4:	bb 1f       	adc	r27, r27
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	aa 1f       	adc	r26, r26
    12ec:	bb 1f       	adc	r27, r27
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	aa 1f       	adc	r26, r26
    12f4:	bb 1f       	adc	r27, r27
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	aa 1f       	adc	r26, r26
    12fc:	bb 1f       	adc	r27, r27
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    1306:	9b 01       	movw	r18, r22
    1308:	ac 01       	movw	r20, r24
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	74 e2       	ldi	r23, 0x24	; 36
    130e:	84 e7       	ldi	r24, 0x74	; 116
    1310:	9b e4       	ldi	r25, 0x4B	; 75
    1312:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	5f e3       	ldi	r21, 0x3F	; 63
    1326:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	f8 01       	movw	r30, r16
    133c:	80 83       	st	Z, r24
    133e:	42 c0       	rjmp	.+132    	; 0x13c4 <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE64:
								TWBR = (uint8) (((float)F_CPU/(128*F_SCL)) -0.125);
    1340:	00 e7       	ldi	r16, 0x70	; 112
    1342:	10 e0       	ldi	r17, 0x00	; 0
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	ad 81       	ldd	r26, Y+5	; 0x05
    134a:	be 81       	ldd	r27, Y+6	; 0x06
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	aa 1f       	adc	r26, r26
    1352:	bb 1f       	adc	r27, r27
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	aa 1f       	adc	r26, r26
    135a:	bb 1f       	adc	r27, r27
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	aa 1f       	adc	r26, r26
    1362:	bb 1f       	adc	r27, r27
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	aa 1f       	adc	r26, r26
    136a:	bb 1f       	adc	r27, r27
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	aa 1f       	adc	r26, r26
    1372:	bb 1f       	adc	r27, r27
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	aa 1f       	adc	r26, r26
    137a:	bb 1f       	adc	r27, r27
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	aa 1f       	adc	r26, r26
    1382:	bb 1f       	adc	r27, r27
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    138c:	9b 01       	movw	r18, r22
    138e:	ac 01       	movw	r20, r24
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	74 e2       	ldi	r23, 0x24	; 36
    1394:	84 e7       	ldi	r24, 0x74	; 116
    1396:	9b e4       	ldi	r25, 0x4B	; 75
    1398:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	5e e3       	ldi	r21, 0x3E	; 62
    13ac:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	f8 01       	movw	r30, r16
    13c2:	80 83       	st	Z, r24
		default:
					break;
	}
   
	
	TWSR |= (Prescale & 0x03);
    13c4:	a1 e7       	ldi	r26, 0x71	; 113
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e1 e7       	ldi	r30, 0x71	; 113
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	98 2f       	mov	r25, r24
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	83 70       	andi	r24, 0x03	; 3
    13d4:	89 2b       	or	r24, r25
    13d6:	8c 93       	st	X, r24
	TWCR |= (1<<TWEN) | (int_state & 0x01) ;
    13d8:	a4 e7       	ldi	r26, 0x74	; 116
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e4 e7       	ldi	r30, 0x74	; 116
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	98 2f       	mov	r25, r24
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	81 70       	andi	r24, 0x01	; 1
    13e8:	84 60       	ori	r24, 0x04	; 4
    13ea:	89 2b       	or	r24, r25
    13ec:	8c 93       	st	X, r24
}
    13ee:	29 96       	adiw	r28, 0x09	; 9
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	08 95       	ret

00001404 <TWI_Start>:

void TWI_Start(void)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
    140c:	e4 e7       	ldi	r30, 0x74	; 116
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	84 ea       	ldi	r24, 0xA4	; 164
    1412:	80 83       	st	Z, r24
 
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    1414:	e4 e7       	ldi	r30, 0x74	; 116
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	88 23       	and	r24, r24
    141c:	dc f7       	brge	.-10     	; 0x1414 <TWI_Start+0x10>
}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <TWI_Stop>:

void TWI_Stop(void)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
    142c:	e4 e7       	ldi	r30, 0x74	; 116
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	84 e9       	ldi	r24, 0x94	; 148
    1432:	80 83       	st	Z, r24
 
}
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <TWI_Write>:

void TWI_Write(uint8 data)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1446:	e3 e7       	ldi	r30, 0x73	; 115
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
   TWCR = (1<<TWEN) | (1<<TWINT);
    144e:	e4 e7       	ldi	r30, 0x74	; 116
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	84 e8       	ldi	r24, 0x84	; 132
    1454:	80 83       	st	Z, r24
   
   /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    1456:	e4 e7       	ldi	r30, 0x74	; 116
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	88 23       	and	r24, r24
    145e:	dc f7       	brge	.-10     	; 0x1456 <TWI_Write+0x1c>
}
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 

    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);    
    1470:	e4 e7       	ldi	r30, 0x74	; 116
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	84 ec       	ldi	r24, 0xC4	; 196
    1476:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1478:	e4 e7       	ldi	r30, 0x74	; 116
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	88 23       	and	r24, r24
    1480:	dc f7       	brge	.-10     	; 0x1478 <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    1482:	e3 e7       	ldi	r30, 0x73	; 115
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
}
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62



		TWCR =(1<<TWEN) | (1<<TWINT);
    1496:	e4 e7       	ldi	r30, 0x74	; 116
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	84 e8       	ldi	r24, 0x84	; 132
    149c:	80 83       	st	Z, r24
/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
while(BIT_IS_CLEAR(TWCR,TWINT));
    149e:	e4 e7       	ldi	r30, 0x74	; 116
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	88 23       	and	r24, r24
    14a6:	dc f7       	brge	.-10     	; 0x149e <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    14a8:	e3 e7       	ldi	r30, 0x73	; 115
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
}
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    14bc:	e1 e7       	ldi	r30, 0x71	; 113
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	88 7f       	andi	r24, 0xF8	; 248
}
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <I2C_ByteWrite>:




void I2C_ByteWrite(uint8 SL_Address,uint8 Reg_Address ,uint8 Data )
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <I2C_ByteWrite+0x6>
    14d0:	0f 92       	push	r0
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	6a 83       	std	Y+2, r22	; 0x02
    14da:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();
    14dc:	0e 94 02 0a 	call	0x1404	; 0x1404 <TWI_Start>
		TWI_Stop();
		return ;
	}
*/
	
	TWI_Write((SL_Address<<1));
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	88 0f       	add	r24, r24
    14e4:	0e 94 1d 0a 	call	0x143a	; 0x143a <TWI_Write>
		TWI_Stop();
		return ;
	}
*/
	
	TWI_Write(Reg_Address);
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	0e 94 1d 0a 	call	0x143a	; 0x143a <TWI_Write>
		TWI_Stop();
		return ;
	}
*/
	
TWI_Write(Data);
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	0e 94 1d 0a 	call	0x143a	; 0x143a <TWI_Write>
		TWI_Stop();
		return ;
	}
*/
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
    14f4:	0e 94 12 0a 	call	0x1424	; 0x1424 <TWI_Stop>
	return ;

}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <I2C_ByteRead>:

 

 
uint8 I2C_ByteRead(uint8 SL_Address , uint8 Reg_Address)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <I2C_ByteRead+0x6>
    150a:	00 d0       	rcall	.+0      	; 0x150c <I2C_ByteRead+0x8>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	8a 83       	std	Y+2, r24	; 0x02
    1512:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Data=0;
    1514:	19 82       	std	Y+1, r1	; 0x01
	
	
	TWI_Start();
    1516:	0e 94 02 0a 	call	0x1404	; 0x1404 <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    151a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <TWI_Get_Status>
    151e:	88 30       	cpi	r24, 0x08	; 8
    1520:	29 f0       	breq	.+10     	; 0x152c <I2C_ByteRead+0x28>
	{
		TWI_Stop();
    1522:	0e 94 12 0a 	call	0x1424	; 0x1424 <TWI_Stop>
		return 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	8c 83       	std	Y+4, r24	; 0x04
    152a:	3c c0       	rjmp	.+120    	; 0x15a4 <I2C_ByteRead+0xa0>
	}
	
	
	TWI_Write((SL_Address<<1));
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	88 0f       	add	r24, r24
    1530:	0e 94 1d 0a 	call	0x143a	; 0x143a <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    1534:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <TWI_Get_Status>
    1538:	88 31       	cpi	r24, 0x18	; 24
    153a:	29 f0       	breq	.+10     	; 0x1546 <I2C_ByteRead+0x42>
	{

		TWI_Stop();
    153c:	0e 94 12 0a 	call	0x1424	; 0x1424 <TWI_Stop>
		return 2;
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	8c 83       	std	Y+4, r24	; 0x04
    1544:	2f c0       	rjmp	.+94     	; 0x15a4 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write(Reg_Address);
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	0e 94 1d 0a 	call	0x143a	; 0x143a <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    154c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <TWI_Get_Status>
    1550:	88 32       	cpi	r24, 0x28	; 40
    1552:	29 f0       	breq	.+10     	; 0x155e <I2C_ByteRead+0x5a>
	{
		TWI_Stop();
    1554:	0e 94 12 0a 	call	0x1424	; 0x1424 <TWI_Stop>
		return 3;
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	8c 83       	std	Y+4, r24	; 0x04
    155c:	23 c0       	rjmp	.+70     	; 0x15a4 <I2C_ByteRead+0xa0>
	}
	
	TWI_Start();
    155e:	0e 94 02 0a 	call	0x1404	; 0x1404 <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    1562:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <TWI_Get_Status>
    1566:	80 31       	cpi	r24, 0x10	; 16
    1568:	29 f0       	breq	.+10     	; 0x1574 <I2C_ByteRead+0x70>
	{
		TWI_Stop();
    156a:	0e 94 12 0a 	call	0x1424	; 0x1424 <TWI_Stop>
		return 4;
    156e:	84 e0       	ldi	r24, 0x04	; 4
    1570:	8c 83       	std	Y+4, r24	; 0x04
    1572:	18 c0       	rjmp	.+48     	; 0x15a4 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write((SL_Address<<1) | READ);
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	81 60       	ori	r24, 0x01	; 1
    1580:	0e 94 1d 0a 	call	0x143a	; 0x143a <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    1584:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <TWI_Get_Status>
    1588:	80 34       	cpi	r24, 0x40	; 64
    158a:	29 f0       	breq	.+10     	; 0x1596 <I2C_ByteRead+0x92>
	{

		TWI_Stop();
    158c:	0e 94 12 0a 	call	0x1424	; 0x1424 <TWI_Stop>
		return 5;
    1590:	85 e0       	ldi	r24, 0x05	; 5
    1592:	8c 83       	std	Y+4, r24	; 0x04
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <I2C_ByteRead+0xa0>
	}
	Data=TWI_Read_With_NACK();
    1596:	0e 94 47 0a 	call	0x148e	; 0x148e <TWI_Read_With_NACK>
    159a:	89 83       	std	Y+1, r24	; 0x01
	TWI_Stop();
    159c:	0e 94 12 0a 	call	0x1424	; 0x1424 <TWI_Stop>
	
	return Data;		
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	8c 83       	std	Y+4, r24	; 0x04
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <LCD_Init>:

//LCD_DataDirection = 0xff;


void LCD_Init(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	e8 97       	sbiw	r28, 0x38	; 56
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	a0 e2       	ldi	r26, 0x20	; 32
    15ce:	b2 e4       	ldi	r27, 0x42	; 66
    15d0:	8d ab       	std	Y+53, r24	; 0x35
    15d2:	9e ab       	std	Y+54, r25	; 0x36
    15d4:	af ab       	std	Y+55, r26	; 0x37
    15d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d8:	6d a9       	ldd	r22, Y+53	; 0x35
    15da:	7e a9       	ldd	r23, Y+54	; 0x36
    15dc:	8f a9       	ldd	r24, Y+55	; 0x37
    15de:	98 ad       	ldd	r25, Y+56	; 0x38
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	4a e7       	ldi	r20, 0x7A	; 122
    15e6:	55 e4       	ldi	r21, 0x45	; 69
    15e8:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	89 ab       	std	Y+49, r24	; 0x31
    15f2:	9a ab       	std	Y+50, r25	; 0x32
    15f4:	ab ab       	std	Y+51, r26	; 0x33
    15f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15f8:	69 a9       	ldd	r22, Y+49	; 0x31
    15fa:	7a a9       	ldd	r23, Y+50	; 0x32
    15fc:	8b a9       	ldd	r24, Y+51	; 0x33
    15fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e8       	ldi	r20, 0x80	; 128
    1606:	5f e3       	ldi	r21, 0x3F	; 63
    1608:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    160c:	88 23       	and	r24, r24
    160e:	2c f4       	brge	.+10     	; 0x161a <LCD_Init+0x66>
		__ticks = 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	98 ab       	std	Y+48, r25	; 0x30
    1616:	8f a7       	std	Y+47, r24	; 0x2f
    1618:	3f c0       	rjmp	.+126    	; 0x1698 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    161a:	69 a9       	ldd	r22, Y+49	; 0x31
    161c:	7a a9       	ldd	r23, Y+50	; 0x32
    161e:	8b a9       	ldd	r24, Y+51	; 0x33
    1620:	9c a9       	ldd	r25, Y+52	; 0x34
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	3f ef       	ldi	r19, 0xFF	; 255
    1626:	4f e7       	ldi	r20, 0x7F	; 127
    1628:	57 e4       	ldi	r21, 0x47	; 71
    162a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    162e:	18 16       	cp	r1, r24
    1630:	4c f5       	brge	.+82     	; 0x1684 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1632:	6d a9       	ldd	r22, Y+53	; 0x35
    1634:	7e a9       	ldd	r23, Y+54	; 0x36
    1636:	8f a9       	ldd	r24, Y+55	; 0x37
    1638:	98 ad       	ldd	r25, Y+56	; 0x38
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e2       	ldi	r20, 0x20	; 32
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	98 ab       	std	Y+48, r25	; 0x30
    1658:	8f a7       	std	Y+47, r24	; 0x2f
    165a:	0f c0       	rjmp	.+30     	; 0x167a <LCD_Init+0xc6>
    165c:	80 e9       	ldi	r24, 0x90	; 144
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	9e a7       	std	Y+46, r25	; 0x2e
    1662:	8d a7       	std	Y+45, r24	; 0x2d
    1664:	8d a5       	ldd	r24, Y+45	; 0x2d
    1666:	9e a5       	ldd	r25, Y+46	; 0x2e
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <LCD_Init+0xb4>
    166c:	9e a7       	std	Y+46, r25	; 0x2e
    166e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1670:	8f a5       	ldd	r24, Y+47	; 0x2f
    1672:	98 a9       	ldd	r25, Y+48	; 0x30
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	98 ab       	std	Y+48, r25	; 0x30
    1678:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167a:	8f a5       	ldd	r24, Y+47	; 0x2f
    167c:	98 a9       	ldd	r25, Y+48	; 0x30
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	69 f7       	brne	.-38     	; 0x165c <LCD_Init+0xa8>
    1682:	14 c0       	rjmp	.+40     	; 0x16ac <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1684:	69 a9       	ldd	r22, Y+49	; 0x31
    1686:	7a a9       	ldd	r23, Y+50	; 0x32
    1688:	8b a9       	ldd	r24, Y+51	; 0x33
    168a:	9c a9       	ldd	r25, Y+52	; 0x34
    168c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	98 ab       	std	Y+48, r25	; 0x30
    1696:	8f a7       	std	Y+47, r24	; 0x2f
    1698:	8f a5       	ldd	r24, Y+47	; 0x2f
    169a:	98 a9       	ldd	r25, Y+48	; 0x30
    169c:	9c a7       	std	Y+44, r25	; 0x2c
    169e:	8b a7       	std	Y+43, r24	; 0x2b
    16a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <LCD_Init+0xf0>
    16a8:	9c a7       	std	Y+44, r25	; 0x2c
    16aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_SendCommand (0b00111100);
    16ac:	8c e3       	ldi	r24, 0x3C	; 60
    16ae:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a0 e4       	ldi	r26, 0x40	; 64
    16b8:	b0 e4       	ldi	r27, 0x40	; 64
    16ba:	8f a3       	std	Y+39, r24	; 0x27
    16bc:	98 a7       	std	Y+40, r25	; 0x28
    16be:	a9 a7       	std	Y+41, r26	; 0x29
    16c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c2:	6f a1       	ldd	r22, Y+39	; 0x27
    16c4:	78 a5       	ldd	r23, Y+40	; 0x28
    16c6:	89 a5       	ldd	r24, Y+41	; 0x29
    16c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4a e7       	ldi	r20, 0x7A	; 122
    16d0:	55 e4       	ldi	r21, 0x45	; 69
    16d2:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	8b a3       	std	Y+35, r24	; 0x23
    16dc:	9c a3       	std	Y+36, r25	; 0x24
    16de:	ad a3       	std	Y+37, r26	; 0x25
    16e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16e2:	6b a1       	ldd	r22, Y+35	; 0x23
    16e4:	7c a1       	ldd	r23, Y+36	; 0x24
    16e6:	8d a1       	ldd	r24, Y+37	; 0x25
    16e8:	9e a1       	ldd	r25, Y+38	; 0x26
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e8       	ldi	r20, 0x80	; 128
    16f0:	5f e3       	ldi	r21, 0x3F	; 63
    16f2:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	2c f4       	brge	.+10     	; 0x1704 <LCD_Init+0x150>
		__ticks = 1;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9a a3       	std	Y+34, r25	; 0x22
    1700:	89 a3       	std	Y+33, r24	; 0x21
    1702:	3f c0       	rjmp	.+126    	; 0x1782 <LCD_Init+0x1ce>
	else if (__tmp > 65535)
    1704:	6b a1       	ldd	r22, Y+35	; 0x23
    1706:	7c a1       	ldd	r23, Y+36	; 0x24
    1708:	8d a1       	ldd	r24, Y+37	; 0x25
    170a:	9e a1       	ldd	r25, Y+38	; 0x26
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	3f ef       	ldi	r19, 0xFF	; 255
    1710:	4f e7       	ldi	r20, 0x7F	; 127
    1712:	57 e4       	ldi	r21, 0x47	; 71
    1714:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1718:	18 16       	cp	r1, r24
    171a:	4c f5       	brge	.+82     	; 0x176e <LCD_Init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171c:	6f a1       	ldd	r22, Y+39	; 0x27
    171e:	78 a5       	ldd	r23, Y+40	; 0x28
    1720:	89 a5       	ldd	r24, Y+41	; 0x29
    1722:	9a a5       	ldd	r25, Y+42	; 0x2a
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e2       	ldi	r20, 0x20	; 32
    172a:	51 e4       	ldi	r21, 0x41	; 65
    172c:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9a a3       	std	Y+34, r25	; 0x22
    1742:	89 a3       	std	Y+33, r24	; 0x21
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <LCD_Init+0x1b0>
    1746:	80 e9       	ldi	r24, 0x90	; 144
    1748:	91 e0       	ldi	r25, 0x01	; 1
    174a:	98 a3       	std	Y+32, r25	; 0x20
    174c:	8f 8f       	std	Y+31, r24	; 0x1f
    174e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1750:	98 a1       	ldd	r25, Y+32	; 0x20
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <LCD_Init+0x19e>
    1756:	98 a3       	std	Y+32, r25	; 0x20
    1758:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175a:	89 a1       	ldd	r24, Y+33	; 0x21
    175c:	9a a1       	ldd	r25, Y+34	; 0x22
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	9a a3       	std	Y+34, r25	; 0x22
    1762:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1764:	89 a1       	ldd	r24, Y+33	; 0x21
    1766:	9a a1       	ldd	r25, Y+34	; 0x22
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	69 f7       	brne	.-38     	; 0x1746 <LCD_Init+0x192>
    176c:	14 c0       	rjmp	.+40     	; 0x1796 <LCD_Init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176e:	6b a1       	ldd	r22, Y+35	; 0x23
    1770:	7c a1       	ldd	r23, Y+36	; 0x24
    1772:	8d a1       	ldd	r24, Y+37	; 0x25
    1774:	9e a1       	ldd	r25, Y+38	; 0x26
    1776:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9a a3       	std	Y+34, r25	; 0x22
    1780:	89 a3       	std	Y+33, r24	; 0x21
    1782:	89 a1       	ldd	r24, Y+33	; 0x21
    1784:	9a a1       	ldd	r25, Y+34	; 0x22
    1786:	9e 8f       	std	Y+30, r25	; 0x1e
    1788:	8d 8f       	std	Y+29, r24	; 0x1d
    178a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    178c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_Init+0x1da>
    1792:	9e 8f       	std	Y+30, r25	; 0x1e
    1794:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);
	LCD_SendCommand(0b00001100);
    1796:	8c e0       	ldi	r24, 0x0C	; 12
    1798:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a0 e4       	ldi	r26, 0x40	; 64
    17a2:	b0 e4       	ldi	r27, 0x40	; 64
    17a4:	89 8f       	std	Y+25, r24	; 0x19
    17a6:	9a 8f       	std	Y+26, r25	; 0x1a
    17a8:	ab 8f       	std	Y+27, r26	; 0x1b
    17aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ac:	69 8d       	ldd	r22, Y+25	; 0x19
    17ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	4a e7       	ldi	r20, 0x7A	; 122
    17ba:	55 e4       	ldi	r21, 0x45	; 69
    17bc:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	8d 8b       	std	Y+21, r24	; 0x15
    17c6:	9e 8b       	std	Y+22, r25	; 0x16
    17c8:	af 8b       	std	Y+23, r26	; 0x17
    17ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17cc:	6d 89       	ldd	r22, Y+21	; 0x15
    17ce:	7e 89       	ldd	r23, Y+22	; 0x16
    17d0:	8f 89       	ldd	r24, Y+23	; 0x17
    17d2:	98 8d       	ldd	r25, Y+24	; 0x18
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e8       	ldi	r20, 0x80	; 128
    17da:	5f e3       	ldi	r21, 0x3F	; 63
    17dc:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    17e0:	88 23       	and	r24, r24
    17e2:	2c f4       	brge	.+10     	; 0x17ee <LCD_Init+0x23a>
		__ticks = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9c 8b       	std	Y+20, r25	; 0x14
    17ea:	8b 8b       	std	Y+19, r24	; 0x13
    17ec:	3f c0       	rjmp	.+126    	; 0x186c <LCD_Init+0x2b8>
	else if (__tmp > 65535)
    17ee:	6d 89       	ldd	r22, Y+21	; 0x15
    17f0:	7e 89       	ldd	r23, Y+22	; 0x16
    17f2:	8f 89       	ldd	r24, Y+23	; 0x17
    17f4:	98 8d       	ldd	r25, Y+24	; 0x18
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	3f ef       	ldi	r19, 0xFF	; 255
    17fa:	4f e7       	ldi	r20, 0x7F	; 127
    17fc:	57 e4       	ldi	r21, 0x47	; 71
    17fe:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1802:	18 16       	cp	r1, r24
    1804:	4c f5       	brge	.+82     	; 0x1858 <LCD_Init+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1806:	69 8d       	ldd	r22, Y+25	; 0x19
    1808:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e2       	ldi	r20, 0x20	; 32
    1814:	51 e4       	ldi	r21, 0x41	; 65
    1816:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9c 8b       	std	Y+20, r25	; 0x14
    182c:	8b 8b       	std	Y+19, r24	; 0x13
    182e:	0f c0       	rjmp	.+30     	; 0x184e <LCD_Init+0x29a>
    1830:	80 e9       	ldi	r24, 0x90	; 144
    1832:	91 e0       	ldi	r25, 0x01	; 1
    1834:	9a 8b       	std	Y+18, r25	; 0x12
    1836:	89 8b       	std	Y+17, r24	; 0x11
    1838:	89 89       	ldd	r24, Y+17	; 0x11
    183a:	9a 89       	ldd	r25, Y+18	; 0x12
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_Init+0x288>
    1840:	9a 8b       	std	Y+18, r25	; 0x12
    1842:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1844:	8b 89       	ldd	r24, Y+19	; 0x13
    1846:	9c 89       	ldd	r25, Y+20	; 0x14
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	9c 8b       	std	Y+20, r25	; 0x14
    184c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184e:	8b 89       	ldd	r24, Y+19	; 0x13
    1850:	9c 89       	ldd	r25, Y+20	; 0x14
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	69 f7       	brne	.-38     	; 0x1830 <LCD_Init+0x27c>
    1856:	14 c0       	rjmp	.+40     	; 0x1880 <LCD_Init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1858:	6d 89       	ldd	r22, Y+21	; 0x15
    185a:	7e 89       	ldd	r23, Y+22	; 0x16
    185c:	8f 89       	ldd	r24, Y+23	; 0x17
    185e:	98 8d       	ldd	r25, Y+24	; 0x18
    1860:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9c 8b       	std	Y+20, r25	; 0x14
    186a:	8b 8b       	std	Y+19, r24	; 0x13
    186c:	8b 89       	ldd	r24, Y+19	; 0x13
    186e:	9c 89       	ldd	r25, Y+20	; 0x14
    1870:	98 8b       	std	Y+16, r25	; 0x10
    1872:	8f 87       	std	Y+15, r24	; 0x0f
    1874:	8f 85       	ldd	r24, Y+15	; 0x0f
    1876:	98 89       	ldd	r25, Y+16	; 0x10
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <LCD_Init+0x2c4>
    187c:	98 8b       	std	Y+16, r25	; 0x10
    187e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	LCD_SendCommand (0b00000001);
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a0 e4       	ldi	r26, 0x40	; 64
    188c:	b0 e4       	ldi	r27, 0x40	; 64
    188e:	8b 87       	std	Y+11, r24	; 0x0b
    1890:	9c 87       	std	Y+12, r25	; 0x0c
    1892:	ad 87       	std	Y+13, r26	; 0x0d
    1894:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	6b 85       	ldd	r22, Y+11	; 0x0b
    1898:	7c 85       	ldd	r23, Y+12	; 0x0c
    189a:	8d 85       	ldd	r24, Y+13	; 0x0d
    189c:	9e 85       	ldd	r25, Y+14	; 0x0e
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a e7       	ldi	r20, 0x7A	; 122
    18a4:	55 e4       	ldi	r21, 0x45	; 69
    18a6:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8f 83       	std	Y+7, r24	; 0x07
    18b0:	98 87       	std	Y+8, r25	; 0x08
    18b2:	a9 87       	std	Y+9, r26	; 0x09
    18b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18b6:	6f 81       	ldd	r22, Y+7	; 0x07
    18b8:	78 85       	ldd	r23, Y+8	; 0x08
    18ba:	89 85       	ldd	r24, Y+9	; 0x09
    18bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <LCD_Init+0x324>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9e 83       	std	Y+6, r25	; 0x06
    18d4:	8d 83       	std	Y+5, r24	; 0x05
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <LCD_Init+0x3a2>
	else if (__tmp > 65535)
    18d8:	6f 81       	ldd	r22, Y+7	; 0x07
    18da:	78 85       	ldd	r23, Y+8	; 0x08
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <LCD_Init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9e 83       	std	Y+6, r25	; 0x06
    1916:	8d 83       	std	Y+5, r24	; 0x05
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <LCD_Init+0x384>
    191a:	80 e9       	ldi	r24, 0x90	; 144
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	9c 83       	std	Y+4, r25	; 0x04
    1920:	8b 83       	std	Y+3, r24	; 0x03
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <LCD_Init+0x372>
    192a:	9c 83       	std	Y+4, r25	; 0x04
    192c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	9e 81       	ldd	r25, Y+6	; 0x06
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9e 83       	std	Y+6, r25	; 0x06
    1936:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	8d 81       	ldd	r24, Y+5	; 0x05
    193a:	9e 81       	ldd	r25, Y+6	; 0x06
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <LCD_Init+0x366>
    1940:	14 c0       	rjmp	.+40     	; 0x196a <LCD_Init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	9a 83       	std	Y+2, r25	; 0x02
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_Init+0x3ae>
    1966:	9a 83       	std	Y+2, r25	; 0x02
    1968:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    196a:	e8 96       	adiw	r28, 0x38	; 56
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <LCD_SendCommand>:

 void LCD_SendCommand(u8 command)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	2f 97       	sbiw	r28, 0x0f	; 15
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1992:	a5 e3       	ldi	r26, 0x35	; 53
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e5 e3       	ldi	r30, 0x35	; 53
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	8f 77       	andi	r24, 0x7F	; 127
    199e:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    19a0:	a5 e3       	ldi	r26, 0x35	; 53
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e5 e3       	ldi	r30, 0x35	; 53
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	8f 7b       	andi	r24, 0xBF	; 191
    19ac:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RS_Pin);
    19ae:	a5 e3       	ldi	r26, 0x35	; 53
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e5 e3       	ldi	r30, 0x35	; 53
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8f 7d       	andi	r24, 0xDF	; 223
    19ba:	8c 93       	st	X, r24

	LCD_DataPORT= command;
    19bc:	eb e3       	ldi	r30, 0x3B	; 59
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c2:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    19c4:	a5 e3       	ldi	r26, 0x35	; 53
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e5 e3       	ldi	r30, 0x35	; 53
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	80 68       	ori	r24, 0x80	; 128
    19d0:	8c 93       	st	X, r24
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e0       	ldi	r26, 0x00	; 0
    19d8:	b0 e4       	ldi	r27, 0x40	; 64
    19da:	8b 87       	std	Y+11, r24	; 0x0b
    19dc:	9c 87       	std	Y+12, r25	; 0x0c
    19de:	ad 87       	std	Y+13, r26	; 0x0d
    19e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	55 e4       	ldi	r21, 0x45	; 69
    19f2:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	8f 83       	std	Y+7, r24	; 0x07
    19fc:	98 87       	std	Y+8, r25	; 0x08
    19fe:	a9 87       	std	Y+9, r26	; 0x09
    1a00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e8       	ldi	r20, 0x80	; 128
    1a10:	5f e3       	ldi	r21, 0x3F	; 63
    1a12:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1a16:	88 23       	and	r24, r24
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <LCD_SendCommand+0xa8>
		__ticks = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
    1a22:	3f c0       	rjmp	.+126    	; 0x1aa2 <LCD_SendCommand+0x126>
	else if (__tmp > 65535)
    1a24:	6f 81       	ldd	r22, Y+7	; 0x07
    1a26:	78 85       	ldd	r23, Y+8	; 0x08
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	3f ef       	ldi	r19, 0xFF	; 255
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	57 e4       	ldi	r21, 0x47	; 71
    1a34:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	4c f5       	brge	.+82     	; 0x1a8e <LCD_SendCommand+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <LCD_SendCommand+0x108>
    1a66:	80 e9       	ldi	r24, 0x90	; 144
    1a68:	91 e0       	ldi	r25, 0x01	; 1
    1a6a:	9c 83       	std	Y+4, r25	; 0x04
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LCD_SendCommand+0xf6>
    1a76:	9c 83       	std	Y+4, r25	; 0x04
    1a78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	69 f7       	brne	.-38     	; 0x1a66 <LCD_SendCommand+0xea>
    1a8c:	14 c0       	rjmp	.+40     	; 0x1ab6 <LCD_SendCommand+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a90:	78 85       	ldd	r23, Y+8	; 0x08
    1a92:	89 85       	ldd	r24, Y+9	; 0x09
    1a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a96:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_SendCommand+0x132>
    1ab2:	9a 83       	std	Y+2, r25	; 0x02
    1ab4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1ab6:	a5 e3       	ldi	r26, 0x35	; 53
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e5 e3       	ldi	r30, 0x35	; 53
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	8f 77       	andi	r24, 0x7F	; 127
    1ac2:	8c 93       	st	X, r24
}
    1ac4:	2f 96       	adiw	r28, 0x0f	; 15
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <LCD_Clear>:

 void LCD_Clear (void)
 {
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
	 LCD_SendCommand(1);
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
 }
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <LCD_WriteData>:

 void LCD_WriteData(u8 data)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	2f 97       	sbiw	r28, 0x0f	; 15
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1b00:	a5 e3       	ldi	r26, 0x35	; 53
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e5 e3       	ldi	r30, 0x35	; 53
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	8f 77       	andi	r24, 0x7F	; 127
    1b0c:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    1b0e:	a5 e3       	ldi	r26, 0x35	; 53
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e5 e3       	ldi	r30, 0x35	; 53
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	8f 7b       	andi	r24, 0xBF	; 191
    1b1a:	8c 93       	st	X, r24
	SETBIT (LCD_ControlPORT, RS_Pin);
    1b1c:	a5 e3       	ldi	r26, 0x35	; 53
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e5 e3       	ldi	r30, 0x35	; 53
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	80 62       	ori	r24, 0x20	; 32
    1b28:	8c 93       	st	X, r24

	LCD_DataPORT= data;
    1b2a:	eb e3       	ldi	r30, 0x3B	; 59
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    1b32:	a5 e3       	ldi	r26, 0x35	; 53
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e5 e3       	ldi	r30, 0x35	; 53
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	80 68       	ori	r24, 0x80	; 128
    1b3e:	8c 93       	st	X, r24
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e0       	ldi	r26, 0x00	; 0
    1b46:	b0 e4       	ldi	r27, 0x40	; 64
    1b48:	8b 87       	std	Y+11, r24	; 0x0b
    1b4a:	9c 87       	std	Y+12, r25	; 0x0c
    1b4c:	ad 87       	std	Y+13, r26	; 0x0d
    1b4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4a e7       	ldi	r20, 0x7A	; 122
    1b5e:	55 e4       	ldi	r21, 0x45	; 69
    1b60:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8f 83       	std	Y+7, r24	; 0x07
    1b6a:	98 87       	std	Y+8, r25	; 0x08
    1b6c:	a9 87       	std	Y+9, r26	; 0x09
    1b6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b70:	6f 81       	ldd	r22, Y+7	; 0x07
    1b72:	78 85       	ldd	r23, Y+8	; 0x08
    1b74:	89 85       	ldd	r24, Y+9	; 0x09
    1b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <LCD_WriteData+0xa8>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <LCD_WriteData+0x126>
	else if (__tmp > 65535)
    1b92:	6f 81       	ldd	r22, Y+7	; 0x07
    1b94:	78 85       	ldd	r23, Y+8	; 0x08
    1b96:	89 85       	ldd	r24, Y+9	; 0x09
    1b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	57 e4       	ldi	r21, 0x47	; 71
    1ba2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	4c f5       	brge	.+82     	; 0x1bfc <LCD_WriteData+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <LCD_WriteData+0x108>
    1bd4:	80 e9       	ldi	r24, 0x90	; 144
    1bd6:	91 e0       	ldi	r25, 0x01	; 1
    1bd8:	9c 83       	std	Y+4, r25	; 0x04
    1bda:	8b 83       	std	Y+3, r24	; 0x03
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_WriteData+0xf6>
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <LCD_WriteData+0xea>
    1bfa:	14 c0       	rjmp	.+40     	; 0x1c24 <LCD_WriteData+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfe:	78 85       	ldd	r23, Y+8	; 0x08
    1c00:	89 85       	ldd	r24, Y+9	; 0x09
    1c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c04:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	9e 81       	ldd	r25, Y+6	; 0x06
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_WriteData+0x132>
    1c20:	9a 83       	std	Y+2, r25	; 0x02
    1c22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1c24:	a5 e3       	ldi	r26, 0x35	; 53
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e5 e3       	ldi	r30, 0x35	; 53
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8f 77       	andi	r24, 0x7F	; 127
    1c30:	8c 93       	st	X, r24
}
    1c32:	2f 96       	adiw	r28, 0x0f	; 15
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <LCD_WriteString>:

void LCD_WriteString(u8* pu8StringCpy)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	61 97       	sbiw	r28, 0x11	; 17
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	99 8b       	std	Y+17, r25	; 0x11
    1c5a:	88 8b       	std	Y+16, r24	; 0x10

  /* Local loop index */
  u8 u8Index = 0;
    1c5c:	1f 86       	std	Y+15, r1	; 0x0f
    1c5e:	80 c0       	rjmp	.+256    	; 0x1d60 <LCD_WriteString+0x11c>

  while (pu8StringCpy [u8Index] != 0)
  {
    /* Write Character on LCD */
    LCD_WriteData (pu8StringCpy [u8Index]);
    1c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	88 89       	ldd	r24, Y+16	; 0x10
    1c68:	99 89       	ldd	r25, Y+17	; 0x11
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	e2 0f       	add	r30, r18
    1c6e:	f3 1f       	adc	r31, r19
    1c70:	80 81       	ld	r24, Z
    1c72:	0e 94 75 0d 	call	0x1aea	; 0x1aea <LCD_WriteData>

    /* Increment local loop index */
    u8Index++;
    1c76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	8f 87       	std	Y+15, r24	; 0x0f
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e0       	ldi	r26, 0x00	; 0
    1c82:	b0 e4       	ldi	r27, 0x40	; 64
    1c84:	8b 87       	std	Y+11, r24	; 0x0b
    1c86:	9c 87       	std	Y+12, r25	; 0x0c
    1c88:	ad 87       	std	Y+13, r26	; 0x0d
    1c8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a e7       	ldi	r20, 0x7A	; 122
    1c9a:	55 e4       	ldi	r21, 0x45	; 69
    1c9c:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8f 83       	std	Y+7, r24	; 0x07
    1ca6:	98 87       	std	Y+8, r25	; 0x08
    1ca8:	a9 87       	std	Y+9, r26	; 0x09
    1caa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <LCD_WriteString+0x8a>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <LCD_WriteString+0x108>
	else if (__tmp > 65535)
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <LCD_WriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_WriteString+0xea>
    1d10:	80 e9       	ldi	r24, 0x90	; 144
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	9c 83       	std	Y+4, r25	; 0x04
    1d16:	8b 83       	std	Y+3, r24	; 0x03
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_WriteString+0xd8>
    1d20:	9c 83       	std	Y+4, r25	; 0x04
    1d22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	9e 81       	ldd	r25, Y+6	; 0x06
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <LCD_WriteString+0xcc>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <LCD_WriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3a:	78 85       	ldd	r23, Y+8	; 0x08
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d40:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_WriteString+0x114>
    1d5c:	9a 83       	std	Y+2, r25	; 0x02
    1d5e:	89 83       	std	Y+1, r24	; 0x01
{

  /* Local loop index */
  u8 u8Index = 0;

  while (pu8StringCpy [u8Index] != 0)
    1d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	88 89       	ldd	r24, Y+16	; 0x10
    1d68:	99 89       	ldd	r25, Y+17	; 0x11
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	e2 0f       	add	r30, r18
    1d6e:	f3 1f       	adc	r31, r19
    1d70:	80 81       	ld	r24, Z
    1d72:	88 23       	and	r24, r24
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <LCD_WriteString+0x134>
    1d76:	74 cf       	rjmp	.-280    	; 0x1c60 <LCD_WriteString+0x1c>

    /* Delay to let the LCD show the character */
    _delay_ms(2);
  }

}
    1d78:	61 96       	adiw	r28, 0x11	; 17
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <LCD_Goto_xy>:

void LCD_Goto_xy(u8 x, u8 y)
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	64 97       	sbiw	r28, 0x14	; 20
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	8b 8b       	std	Y+19, r24	; 0x13
    1da0:	6c 8b       	std	Y+20, r22	; 0x14
	u8 firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
    1da2:	80 e8       	ldi	r24, 0x80	; 128
    1da4:	8f 87       	std	Y+15, r24	; 0x0f
    1da6:	80 ec       	ldi	r24, 0xC0	; 192
    1da8:	88 8b       	std	Y+16, r24	; 0x10
    1daa:	84 e9       	ldi	r24, 0x94	; 148
    1dac:	89 8b       	std	Y+17, r24	; 0x11
    1dae:	84 ed       	ldi	r24, 0xD4	; 212
    1db0:	8a 8b       	std	Y+18, r24	; 0x12
	LCD_SendCommand (firstcharAdr[y-1] + x - 1);
    1db2:	8c 89       	ldd	r24, Y+20	; 0x14
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9c 01       	movw	r18, r24
    1dba:	21 50       	subi	r18, 0x01	; 1
    1dbc:	30 40       	sbci	r19, 0x00	; 0
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	0f 96       	adiw	r24, 0x0f	; 15
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	e2 0f       	add	r30, r18
    1dc6:	f3 1f       	adc	r31, r19
    1dc8:	90 81       	ld	r25, Z
    1dca:	8b 89       	ldd	r24, Y+19	; 0x13
    1dcc:	89 0f       	add	r24, r25
    1dce:	81 50       	subi	r24, 0x01	; 1
    1dd0:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	a0 e8       	ldi	r26, 0x80	; 128
    1dda:	bf e3       	ldi	r27, 0x3F	; 63
    1ddc:	8b 87       	std	Y+11, r24	; 0x0b
    1dde:	9c 87       	std	Y+12, r25	; 0x0c
    1de0:	ad 87       	std	Y+13, r26	; 0x0d
    1de2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4a e7       	ldi	r20, 0x7A	; 122
    1df2:	55 e4       	ldi	r21, 0x45	; 69
    1df4:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	8f 83       	std	Y+7, r24	; 0x07
    1dfe:	98 87       	std	Y+8, r25	; 0x08
    1e00:	a9 87       	std	Y+9, r26	; 0x09
    1e02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e04:	6f 81       	ldd	r22, Y+7	; 0x07
    1e06:	78 85       	ldd	r23, Y+8	; 0x08
    1e08:	89 85       	ldd	r24, Y+9	; 0x09
    1e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e8       	ldi	r20, 0x80	; 128
    1e12:	5f e3       	ldi	r21, 0x3F	; 63
    1e14:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1e18:	88 23       	and	r24, r24
    1e1a:	2c f4       	brge	.+10     	; 0x1e26 <LCD_Goto_xy+0x9c>
		__ticks = 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
    1e24:	3f c0       	rjmp	.+126    	; 0x1ea4 <LCD_Goto_xy+0x11a>
	else if (__tmp > 65535)
    1e26:	6f 81       	ldd	r22, Y+7	; 0x07
    1e28:	78 85       	ldd	r23, Y+8	; 0x08
    1e2a:	89 85       	ldd	r24, Y+9	; 0x09
    1e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	3f ef       	ldi	r19, 0xFF	; 255
    1e32:	4f e7       	ldi	r20, 0x7F	; 127
    1e34:	57 e4       	ldi	r21, 0x47	; 71
    1e36:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1e3a:	18 16       	cp	r1, r24
    1e3c:	4c f5       	brge	.+82     	; 0x1e90 <LCD_Goto_xy+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e2       	ldi	r20, 0x20	; 32
    1e4c:	51 e4       	ldi	r21, 0x41	; 65
    1e4e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	0f c0       	rjmp	.+30     	; 0x1e86 <LCD_Goto_xy+0xfc>
    1e68:	80 e9       	ldi	r24, 0x90	; 144
    1e6a:	91 e0       	ldi	r25, 0x01	; 1
    1e6c:	9c 83       	std	Y+4, r25	; 0x04
    1e6e:	8b 83       	std	Y+3, r24	; 0x03
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_Goto_xy+0xea>
    1e78:	9c 83       	std	Y+4, r25	; 0x04
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05
    1e88:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	69 f7       	brne	.-38     	; 0x1e68 <LCD_Goto_xy+0xde>
    1e8e:	14 c0       	rjmp	.+40     	; 0x1eb8 <LCD_Goto_xy+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e90:	6f 81       	ldd	r22, Y+7	; 0x07
    1e92:	78 85       	ldd	r23, Y+8	; 0x08
    1e94:	89 85       	ldd	r24, Y+9	; 0x09
    1e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e98:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	9e 83       	std	Y+6, r25	; 0x06
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_Goto_xy+0x126>
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1eb8:	64 96       	adiw	r28, 0x14	; 20
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <LCD_MoveCursorLeft>:

void LCD_MoveCursorLeft (void)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	2e 97       	sbiw	r28, 0x0e	; 14
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_LEFT);
    1ede:	80 e1       	ldi	r24, 0x10	; 16
    1ee0:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a0 e8       	ldi	r26, 0x80	; 128
    1eea:	bf e3       	ldi	r27, 0x3F	; 63
    1eec:	8b 87       	std	Y+11, r24	; 0x0b
    1eee:	9c 87       	std	Y+12, r25	; 0x0c
    1ef0:	ad 87       	std	Y+13, r26	; 0x0d
    1ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	4a e7       	ldi	r20, 0x7A	; 122
    1f02:	55 e4       	ldi	r21, 0x45	; 69
    1f04:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	8f 83       	std	Y+7, r24	; 0x07
    1f0e:	98 87       	std	Y+8, r25	; 0x08
    1f10:	a9 87       	std	Y+9, r26	; 0x09
    1f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f14:	6f 81       	ldd	r22, Y+7	; 0x07
    1f16:	78 85       	ldd	r23, Y+8	; 0x08
    1f18:	89 85       	ldd	r24, Y+9	; 0x09
    1f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <LCD_MoveCursorLeft+0x6c>
		__ticks = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	3f c0       	rjmp	.+126    	; 0x1fb4 <LCD_MoveCursorLeft+0xea>
	else if (__tmp > 65535)
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	3f ef       	ldi	r19, 0xFF	; 255
    1f42:	4f e7       	ldi	r20, 0x7F	; 127
    1f44:	57 e4       	ldi	r21, 0x47	; 71
    1f46:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1f4a:	18 16       	cp	r1, r24
    1f4c:	4c f5       	brge	.+82     	; 0x1fa0 <LCD_MoveCursorLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e2       	ldi	r20, 0x20	; 32
    1f5c:	51 e4       	ldi	r21, 0x41	; 65
    1f5e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <LCD_MoveCursorLeft+0xcc>
    1f78:	80 e9       	ldi	r24, 0x90	; 144
    1f7a:	91 e0       	ldi	r25, 0x01	; 1
    1f7c:	9c 83       	std	Y+4, r25	; 0x04
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <LCD_MoveCursorLeft+0xba>
    1f88:	9c 83       	std	Y+4, r25	; 0x04
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	69 f7       	brne	.-38     	; 0x1f78 <LCD_MoveCursorLeft+0xae>
    1f9e:	14 c0       	rjmp	.+40     	; 0x1fc8 <LCD_MoveCursorLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa2:	78 85       	ldd	r23, Y+8	; 0x08
    1fa4:	89 85       	ldd	r24, Y+9	; 0x09
    1fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9e 83       	std	Y+6, r25	; 0x06
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
    1fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb8:	9a 83       	std	Y+2, r25	; 0x02
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <LCD_MoveCursorLeft+0xf6>
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1fc8:	2e 96       	adiw	r28, 0x0e	; 14
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <LCD_MoveCursorRight>:

//*******************************************************************************
void LCD_MoveCursorRight (void)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	2e 97       	sbiw	r28, 0x0e	; 14
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_RIGHT);
    1fee:	84 e1       	ldi	r24, 0x14	; 20
    1ff0:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a0 e8       	ldi	r26, 0x80	; 128
    1ffa:	bf e3       	ldi	r27, 0x3F	; 63
    1ffc:	8b 87       	std	Y+11, r24	; 0x0b
    1ffe:	9c 87       	std	Y+12, r25	; 0x0c
    2000:	ad 87       	std	Y+13, r26	; 0x0d
    2002:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2004:	6b 85       	ldd	r22, Y+11	; 0x0b
    2006:	7c 85       	ldd	r23, Y+12	; 0x0c
    2008:	8d 85       	ldd	r24, Y+13	; 0x0d
    200a:	9e 85       	ldd	r25, Y+14	; 0x0e
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	4a e7       	ldi	r20, 0x7A	; 122
    2012:	55 e4       	ldi	r21, 0x45	; 69
    2014:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	8f 83       	std	Y+7, r24	; 0x07
    201e:	98 87       	std	Y+8, r25	; 0x08
    2020:	a9 87       	std	Y+9, r26	; 0x09
    2022:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2024:	6f 81       	ldd	r22, Y+7	; 0x07
    2026:	78 85       	ldd	r23, Y+8	; 0x08
    2028:	89 85       	ldd	r24, Y+9	; 0x09
    202a:	9a 85       	ldd	r25, Y+10	; 0x0a
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e8       	ldi	r20, 0x80	; 128
    2032:	5f e3       	ldi	r21, 0x3F	; 63
    2034:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2038:	88 23       	and	r24, r24
    203a:	2c f4       	brge	.+10     	; 0x2046 <LCD_MoveCursorRight+0x6c>
		__ticks = 1;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9e 83       	std	Y+6, r25	; 0x06
    2042:	8d 83       	std	Y+5, r24	; 0x05
    2044:	3f c0       	rjmp	.+126    	; 0x20c4 <LCD_MoveCursorRight+0xea>
	else if (__tmp > 65535)
    2046:	6f 81       	ldd	r22, Y+7	; 0x07
    2048:	78 85       	ldd	r23, Y+8	; 0x08
    204a:	89 85       	ldd	r24, Y+9	; 0x09
    204c:	9a 85       	ldd	r25, Y+10	; 0x0a
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	3f ef       	ldi	r19, 0xFF	; 255
    2052:	4f e7       	ldi	r20, 0x7F	; 127
    2054:	57 e4       	ldi	r21, 0x47	; 71
    2056:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    205a:	18 16       	cp	r1, r24
    205c:	4c f5       	brge	.+82     	; 0x20b0 <LCD_MoveCursorRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2060:	7c 85       	ldd	r23, Y+12	; 0x0c
    2062:	8d 85       	ldd	r24, Y+13	; 0x0d
    2064:	9e 85       	ldd	r25, Y+14	; 0x0e
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e2       	ldi	r20, 0x20	; 32
    206c:	51 e4       	ldi	r21, 0x41	; 65
    206e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	bc 01       	movw	r22, r24
    2078:	cd 01       	movw	r24, r26
    207a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	0f c0       	rjmp	.+30     	; 0x20a6 <LCD_MoveCursorRight+0xcc>
    2088:	80 e9       	ldi	r24, 0x90	; 144
    208a:	91 e0       	ldi	r25, 0x01	; 1
    208c:	9c 83       	std	Y+4, r25	; 0x04
    208e:	8b 83       	std	Y+3, r24	; 0x03
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <LCD_MoveCursorRight+0xba>
    2098:	9c 83       	std	Y+4, r25	; 0x04
    209a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	9e 83       	std	Y+6, r25	; 0x06
    20a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	9e 81       	ldd	r25, Y+6	; 0x06
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	69 f7       	brne	.-38     	; 0x2088 <LCD_MoveCursorRight+0xae>
    20ae:	14 c0       	rjmp	.+40     	; 0x20d8 <LCD_MoveCursorRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b0:	6f 81       	ldd	r22, Y+7	; 0x07
    20b2:	78 85       	ldd	r23, Y+8	; 0x08
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	9e 83       	std	Y+6, r25	; 0x06
    20c2:	8d 83       	std	Y+5, r24	; 0x05
    20c4:	8d 81       	ldd	r24, Y+5	; 0x05
    20c6:	9e 81       	ldd	r25, Y+6	; 0x06
    20c8:	9a 83       	std	Y+2, r25	; 0x02
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <LCD_MoveCursorRight+0xf6>
    20d4:	9a 83       	std	Y+2, r25	; 0x02
    20d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    20d8:	2e 96       	adiw	r28, 0x0e	; 14
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <LCD_WriteString_xy>:

void LCD_WriteString_xy(u8 x, u8 y, u8* pu8StringCpy)
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <LCD_WriteString_xy+0x6>
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <LCD_WriteString_xy+0x8>
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	6a 83       	std	Y+2, r22	; 0x02
    20fa:	5c 83       	std	Y+4, r21	; 0x04
    20fc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_Goto_xy(x,y);
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	6a 81       	ldd	r22, Y+2	; 0x02
    2102:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_Goto_xy>
	LCD_WriteString(pu8StringCpy);
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_WriteString>
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <LCD_WriteInteger_xy>:

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    211c:	ef 92       	push	r14
    211e:	ff 92       	push	r15
    2120:	0f 93       	push	r16
    2122:	1f 93       	push	r17
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	29 97       	sbiw	r28, 0x09	; 9
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	8b 83       	std	Y+3, r24	; 0x03
    213a:	6c 83       	std	Y+4, r22	; 0x04
    213c:	5e 83       	std	Y+6, r21	; 0x06
    213e:	4d 83       	std	Y+5, r20	; 0x05
    2140:	2f 83       	std	Y+7, r18	; 0x07
	u8 StringToDisplay[NumberOfDigits];
	itoa (IntegerToDisplay, StringToDisplay, 10);
	LCD_WriteString_xy (x, y, StringToDisplay);
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)

}
    2142:	0d b7       	in	r16, 0x3d	; 61
    2144:	1e b7       	in	r17, 0x3e	; 62
	LCD_Goto_xy(x,y);
	LCD_WriteString(pu8StringCpy);
}

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    2146:	8d b7       	in	r24, 0x3d	; 61
    2148:	9e b7       	in	r25, 0x3e	; 62
    214a:	7c 01       	movw	r14, r24
	u8 StringToDisplay[NumberOfDigits];
    214c:	8f 81       	ldd	r24, Y+7	; 0x07
    214e:	88 2f       	mov	r24, r24
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	2d b7       	in	r18, 0x3d	; 61
    2154:	3e b7       	in	r19, 0x3e	; 62
    2156:	28 1b       	sub	r18, r24
    2158:	39 0b       	sbc	r19, r25
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	3e bf       	out	0x3e, r19	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	2d bf       	out	0x3d, r18	; 61
    2164:	8d b7       	in	r24, 0x3d	; 61
    2166:	9e b7       	in	r25, 0x3e	; 62
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	99 87       	std	Y+9, r25	; 0x09
    216c:	88 87       	std	Y+8, r24	; 0x08
    216e:	88 85       	ldd	r24, Y+8	; 0x08
    2170:	99 85       	ldd	r25, Y+9	; 0x09
    2172:	00 96       	adiw	r24, 0x00	; 0
    2174:	99 87       	std	Y+9, r25	; 0x09
    2176:	88 87       	std	Y+8, r24	; 0x08
    2178:	28 85       	ldd	r18, Y+8	; 0x08
    217a:	39 85       	ldd	r19, Y+9	; 0x09
    217c:	3a 83       	std	Y+2, r19	; 0x02
    217e:	29 83       	std	Y+1, r18	; 0x01
	itoa (IntegerToDisplay, StringToDisplay, 10);
    2180:	8d 81       	ldd	r24, Y+5	; 0x05
    2182:	9e 81       	ldd	r25, Y+6	; 0x06
    2184:	29 81       	ldd	r18, Y+1	; 0x01
    2186:	3a 81       	ldd	r19, Y+2	; 0x02
    2188:	b9 01       	movw	r22, r18
    218a:	4a e0       	ldi	r20, 0x0A	; 10
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <itoa>
	LCD_WriteString_xy (x, y, StringToDisplay);
    2192:	29 81       	ldd	r18, Y+1	; 0x01
    2194:	3a 81       	ldd	r19, Y+2	; 0x02
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	6c 81       	ldd	r22, Y+4	; 0x04
    219a:	a9 01       	movw	r20, r18
    219c:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_WriteString_xy>
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	91 e0       	ldi	r25, 0x01	; 1
    21a4:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_WriteString>
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	fe be       	out	0x3e, r15	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	ed be       	out	0x3d, r14	; 61

}
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	1e bf       	out	0x3e, r17	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	0d bf       	out	0x3d, r16	; 61
    21bc:	29 96       	adiw	r28, 0x09	; 9
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
    21d4:	08 95       	ret

000021d6 <main>:
u8 Compare_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data);

/*-------------------------------------------------------------*/

int main(void)
{
    21d6:	0f 93       	push	r16
    21d8:	1f 93       	push	r17
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	ce 58       	subi	r28, 0x8E	; 142
    21e4:	d0 40       	sbci	r29, 0x00	; 0
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
//	DDRF=0x00;  	"Reserved for ADCs (Flex Sensors)"
	DDRA=0xFF;						 // LCD Data
    21f0:	ea e3       	ldi	r30, 0x3A	; 58
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	8f ef       	ldi	r24, 0xFF	; 255
    21f6:	80 83       	st	Z, r24
	DDRC|= (1<<5) | (1<<6) | (1<<7); // LCD Control
    21f8:	a4 e3       	ldi	r26, 0x34	; 52
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e4 e3       	ldi	r30, 0x34	; 52
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	80 6e       	ori	r24, 0xE0	; 224
    2204:	8c 93       	st	X, r24
	LCD_Init();
    2206:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <LCD_Init>
	UART_init();
    220a:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <UART_init>
	TWI_Init(I2C_PRESCALE1,I2C_intDisable,F_ADXL,0x01);
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	20 e8       	ldi	r18, 0x80	; 128
    2214:	3a e1       	ldi	r19, 0x1A	; 26
    2216:	46 e0       	ldi	r20, 0x06	; 6
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	01 e0       	ldi	r16, 0x01	; 1
    221c:	0e 94 cc 08 	call	0x1198	; 0x1198 <TWI_Init>
	Accelerometor_init(ADXL345_MessureMode,ADXL345_ALTERNATIVE_ADDRESS);
    2220:	88 e0       	ldi	r24, 0x08	; 8
    2222:	63 e5       	ldi	r22, 0x53	; 83
    2224:	0e 94 53 18 	call	0x30a6	; 0x30a6 <Accelerometor_init>
	DFPlayer_init();
    2228:	0e 94 2c 08 	call	0x1058	; 0x1058 <DFPlayer_init>
	LCD_WriteString("Testing LCD");
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	91 e0       	ldi	r25, 0x01	; 1
    2230:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <LCD_WriteString>
    2234:	fe 01       	movw	r30, r28
    2236:	e7 57       	subi	r30, 0x77	; 119
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	aa e7       	ldi	r26, 0x7A	; 122
    2240:	b4 e4       	ldi	r27, 0x44	; 68
    2242:	80 83       	st	Z, r24
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	a2 83       	std	Z+2, r26	; 0x02
    2248:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	8e 01       	movw	r16, r28
    224c:	0b 57       	subi	r16, 0x7B	; 123
    224e:	1f 4f       	sbci	r17, 0xFF	; 255
    2250:	fe 01       	movw	r30, r28
    2252:	e7 57       	subi	r30, 0x77	; 119
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	60 81       	ld	r22, Z
    2258:	71 81       	ldd	r23, Z+1	; 0x01
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	93 81       	ldd	r25, Z+3	; 0x03
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	4a e7       	ldi	r20, 0x7A	; 122
    2264:	55 e4       	ldi	r21, 0x45	; 69
    2266:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	f8 01       	movw	r30, r16
    2270:	80 83       	st	Z, r24
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	a2 83       	std	Z+2, r26	; 0x02
    2276:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2278:	fe 01       	movw	r30, r28
    227a:	eb 57       	subi	r30, 0x7B	; 123
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e8       	ldi	r20, 0x80	; 128
    228c:	5f e3       	ldi	r21, 0x3F	; 63
    228e:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2292:	88 23       	and	r24, r24
    2294:	44 f4       	brge	.+16     	; 0x22a6 <main+0xd0>
		__ticks = 1;
    2296:	fe 01       	movw	r30, r28
    2298:	ed 57       	subi	r30, 0x7D	; 125
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	80 83       	st	Z, r24
    22a4:	64 c0       	rjmp	.+200    	; 0x236e <main+0x198>
	else if (__tmp > 65535)
    22a6:	fe 01       	movw	r30, r28
    22a8:	eb 57       	subi	r30, 0x7B	; 123
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	0c f0       	brlt	.+2      	; 0x22c6 <main+0xf0>
    22c4:	43 c0       	rjmp	.+134    	; 0x234c <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	fe 01       	movw	r30, r28
    22c8:	e7 57       	subi	r30, 0x77	; 119
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e2       	ldi	r20, 0x20	; 32
    22da:	51 e4       	ldi	r21, 0x41	; 65
    22dc:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	8e 01       	movw	r16, r28
    22e6:	0d 57       	subi	r16, 0x7D	; 125
    22e8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	f8 01       	movw	r30, r16
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
    22fc:	1f c0       	rjmp	.+62     	; 0x233c <main+0x166>
    22fe:	fe 01       	movw	r30, r28
    2300:	ef 57       	subi	r30, 0x7F	; 127
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	80 e9       	ldi	r24, 0x90	; 144
    2306:	91 e0       	ldi	r25, 0x01	; 1
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	80 83       	st	Z, r24
    230c:	fe 01       	movw	r30, r28
    230e:	ef 57       	subi	r30, 0x7F	; 127
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <main+0x140>
    231a:	fe 01       	movw	r30, r28
    231c:	ef 57       	subi	r30, 0x7F	; 127
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	91 83       	std	Z+1, r25	; 0x01
    2322:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	de 01       	movw	r26, r28
    2326:	ad 57       	subi	r26, 0x7D	; 125
    2328:	bf 4f       	sbci	r27, 0xFF	; 255
    232a:	fe 01       	movw	r30, r28
    232c:	ed 57       	subi	r30, 0x7D	; 125
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	80 81       	ld	r24, Z
    2332:	91 81       	ldd	r25, Z+1	; 0x01
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	11 96       	adiw	r26, 0x01	; 1
    2338:	9c 93       	st	X, r25
    233a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	fe 01       	movw	r30, r28
    233e:	ed 57       	subi	r30, 0x7D	; 125
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	80 81       	ld	r24, Z
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	d1 f6       	brne	.-76     	; 0x22fe <main+0x128>
    234a:	27 c0       	rjmp	.+78     	; 0x239a <main+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234c:	8e 01       	movw	r16, r28
    234e:	0d 57       	subi	r16, 0x7D	; 125
    2350:	1f 4f       	sbci	r17, 0xFF	; 255
    2352:	fe 01       	movw	r30, r28
    2354:	eb 57       	subi	r30, 0x7B	; 123
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	f8 01       	movw	r30, r16
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	80 83       	st	Z, r24
    236e:	de 01       	movw	r26, r28
    2370:	a1 58       	subi	r26, 0x81	; 129
    2372:	bf 4f       	sbci	r27, 0xFF	; 255
    2374:	fe 01       	movw	r30, r28
    2376:	ed 57       	subi	r30, 0x7D	; 125
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	8d 93       	st	X+, r24
    2380:	9c 93       	st	X, r25
    2382:	fe 01       	movw	r30, r28
    2384:	e1 58       	subi	r30, 0x81	; 129
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <main+0x1b6>
    2390:	fe 01       	movw	r30, r28
    2392:	e1 58       	subi	r30, 0x81	; 129
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	80 83       	st	Z, r24
	_delay_ms(1000);
	ADC_init();
    239a:	0e 94 35 07 	call	0xe6a	; 0xe6a <ADC_init>
		LCD_WriteString_xy(1,2,"Z=");
		LCD_WriteInteger_xy(3,2, (Sensors_Readings.Z_Axis), 6);
		_delay_ms(500);
#endif

		Update_Flexs(&Sensors_Readings);
    239e:	84 e2       	ldi	r24, 0x24	; 36
    23a0:	93 e0       	ldi	r25, 0x03	; 3
    23a2:	0e 94 1d 18 	call	0x303a	; 0x303a <Update_Flexs>
		Update_Accelerometor_Axis(ADXL345_ALTERNATIVE_ADDRESS,&Sensors_Readings);
    23a6:	24 e2       	ldi	r18, 0x24	; 36
    23a8:	33 e0       	ldi	r19, 0x03	; 3
    23aa:	83 e5       	ldi	r24, 0x53	; 83
    23ac:	b9 01       	movw	r22, r18
    23ae:	0e 94 78 18 	call	0x30f0	; 0x30f0 <Update_Accelerometor_Axis>

		if ( Compare_Data(&Sensors_Readings, &Stored_Data))
    23b2:	84 e2       	ldi	r24, 0x24	; 36
    23b4:	93 e0       	ldi	r25, 0x03	; 3
    23b6:	25 e6       	ldi	r18, 0x65	; 101
    23b8:	32 e0       	ldi	r19, 0x02	; 2
    23ba:	b9 01       	movw	r22, r18
    23bc:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <Compare_Data>
    23c0:	88 23       	and	r24, r24
    23c2:	69 f3       	breq	.-38     	; 0x239e <main+0x1c8>
		{
    			switch(Word_index)
    23c4:	80 91 37 03 	lds	r24, 0x0337
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	c3 57       	subi	r28, 0x73	; 115
    23ce:	df 4f       	sbci	r29, 0xFF	; 255
    23d0:	39 83       	std	Y+1, r19	; 0x01
    23d2:	28 83       	st	Y, r18
    23d4:	cd 58       	subi	r28, 0x8D	; 141
    23d6:	d0 40       	sbci	r29, 0x00	; 0
    23d8:	c3 57       	subi	r28, 0x73	; 115
    23da:	df 4f       	sbci	r29, 0xFF	; 255
    23dc:	88 81       	ld	r24, Y
    23de:	99 81       	ldd	r25, Y+1	; 0x01
    23e0:	cd 58       	subi	r28, 0x8D	; 141
    23e2:	d0 40       	sbci	r29, 0x00	; 0
    23e4:	85 30       	cpi	r24, 0x05	; 5
    23e6:	91 05       	cpc	r25, r1
    23e8:	09 f4       	brne	.+2      	; 0x23ec <main+0x216>
    23ea:	79 c3       	rjmp	.+1778   	; 0x2ade <main+0x908>
    23ec:	c3 57       	subi	r28, 0x73	; 115
    23ee:	df 4f       	sbci	r29, 0xFF	; 255
    23f0:	e8 81       	ld	r30, Y
    23f2:	f9 81       	ldd	r31, Y+1	; 0x01
    23f4:	cd 58       	subi	r28, 0x8D	; 141
    23f6:	d0 40       	sbci	r29, 0x00	; 0
    23f8:	e6 30       	cpi	r30, 0x06	; 6
    23fa:	f1 05       	cpc	r31, r1
    23fc:	9c f5       	brge	.+102    	; 0x2464 <main+0x28e>
    23fe:	c3 57       	subi	r28, 0x73	; 115
    2400:	df 4f       	sbci	r29, 0xFF	; 255
    2402:	28 81       	ld	r18, Y
    2404:	39 81       	ldd	r19, Y+1	; 0x01
    2406:	cd 58       	subi	r28, 0x8D	; 141
    2408:	d0 40       	sbci	r29, 0x00	; 0
    240a:	22 30       	cpi	r18, 0x02	; 2
    240c:	31 05       	cpc	r19, r1
    240e:	09 f4       	brne	.+2      	; 0x2412 <main+0x23c>
    2410:	17 c1       	rjmp	.+558    	; 0x2640 <main+0x46a>
    2412:	c3 57       	subi	r28, 0x73	; 115
    2414:	df 4f       	sbci	r29, 0xFF	; 255
    2416:	88 81       	ld	r24, Y
    2418:	99 81       	ldd	r25, Y+1	; 0x01
    241a:	cd 58       	subi	r28, 0x8D	; 141
    241c:	d0 40       	sbci	r29, 0x00	; 0
    241e:	83 30       	cpi	r24, 0x03	; 3
    2420:	91 05       	cpc	r25, r1
    2422:	5c f4       	brge	.+22     	; 0x243a <main+0x264>
    2424:	c3 57       	subi	r28, 0x73	; 115
    2426:	df 4f       	sbci	r29, 0xFF	; 255
    2428:	e8 81       	ld	r30, Y
    242a:	f9 81       	ldd	r31, Y+1	; 0x01
    242c:	cd 58       	subi	r28, 0x8D	; 141
    242e:	d0 40       	sbci	r29, 0x00	; 0
    2430:	e1 30       	cpi	r30, 0x01	; 1
    2432:	f1 05       	cpc	r31, r1
    2434:	09 f4       	brne	.+2      	; 0x2438 <main+0x262>
    2436:	3f c0       	rjmp	.+126    	; 0x24b6 <main+0x2e0>
    2438:	b2 cf       	rjmp	.-156    	; 0x239e <main+0x1c8>
    243a:	c3 57       	subi	r28, 0x73	; 115
    243c:	df 4f       	sbci	r29, 0xFF	; 255
    243e:	28 81       	ld	r18, Y
    2440:	39 81       	ldd	r19, Y+1	; 0x01
    2442:	cd 58       	subi	r28, 0x8D	; 141
    2444:	d0 40       	sbci	r29, 0x00	; 0
    2446:	23 30       	cpi	r18, 0x03	; 3
    2448:	31 05       	cpc	r19, r1
    244a:	09 f4       	brne	.+2      	; 0x244e <main+0x278>
    244c:	be c1       	rjmp	.+892    	; 0x27ca <main+0x5f4>
    244e:	c3 57       	subi	r28, 0x73	; 115
    2450:	df 4f       	sbci	r29, 0xFF	; 255
    2452:	88 81       	ld	r24, Y
    2454:	99 81       	ldd	r25, Y+1	; 0x01
    2456:	cd 58       	subi	r28, 0x8D	; 141
    2458:	d0 40       	sbci	r29, 0x00	; 0
    245a:	84 30       	cpi	r24, 0x04	; 4
    245c:	91 05       	cpc	r25, r1
    245e:	09 f4       	brne	.+2      	; 0x2462 <main+0x28c>
    2460:	79 c2       	rjmp	.+1266   	; 0x2954 <main+0x77e>
    2462:	9d cf       	rjmp	.-198    	; 0x239e <main+0x1c8>
    2464:	c3 57       	subi	r28, 0x73	; 115
    2466:	df 4f       	sbci	r29, 0xFF	; 255
    2468:	e8 81       	ld	r30, Y
    246a:	f9 81       	ldd	r31, Y+1	; 0x01
    246c:	cd 58       	subi	r28, 0x8D	; 141
    246e:	d0 40       	sbci	r29, 0x00	; 0
    2470:	e7 30       	cpi	r30, 0x07	; 7
    2472:	f1 05       	cpc	r31, r1
    2474:	09 f4       	brne	.+2      	; 0x2478 <main+0x2a2>
    2476:	55 c4       	rjmp	.+2218   	; 0x2d22 <main+0xb4c>
    2478:	c3 57       	subi	r28, 0x73	; 115
    247a:	df 4f       	sbci	r29, 0xFF	; 255
    247c:	28 81       	ld	r18, Y
    247e:	39 81       	ldd	r19, Y+1	; 0x01
    2480:	cd 58       	subi	r28, 0x8D	; 141
    2482:	d0 40       	sbci	r29, 0x00	; 0
    2484:	27 30       	cpi	r18, 0x07	; 7
    2486:	31 05       	cpc	r19, r1
    2488:	0c f4       	brge	.+2      	; 0x248c <main+0x2b6>
    248a:	c7 c3       	rjmp	.+1934   	; 0x2c1a <main+0xa44>
    248c:	c3 57       	subi	r28, 0x73	; 115
    248e:	df 4f       	sbci	r29, 0xFF	; 255
    2490:	88 81       	ld	r24, Y
    2492:	99 81       	ldd	r25, Y+1	; 0x01
    2494:	cd 58       	subi	r28, 0x8D	; 141
    2496:	d0 40       	sbci	r29, 0x00	; 0
    2498:	88 30       	cpi	r24, 0x08	; 8
    249a:	91 05       	cpc	r25, r1
    249c:	09 f4       	brne	.+2      	; 0x24a0 <main+0x2ca>
    249e:	c5 c4       	rjmp	.+2442   	; 0x2e2a <main+0xc54>
    24a0:	c3 57       	subi	r28, 0x73	; 115
    24a2:	df 4f       	sbci	r29, 0xFF	; 255
    24a4:	e8 81       	ld	r30, Y
    24a6:	f9 81       	ldd	r31, Y+1	; 0x01
    24a8:	cd 58       	subi	r28, 0x8D	; 141
    24aa:	d0 40       	sbci	r29, 0x00	; 0
    24ac:	e9 30       	cpi	r30, 0x09	; 9
    24ae:	f1 05       	cpc	r31, r1
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <main+0x2de>
    24b2:	3f c5       	rjmp	.+2686   	; 0x2f32 <main+0xd5c>
    24b4:	74 cf       	rjmp	.-280    	; 0x239e <main+0x1c8>
			{
			case Letter_C:
				LCD_SendCommand(1);
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
				LCD_WriteString_xy(1, 1, "C");
    24bc:	2e e0       	ldi	r18, 0x0E	; 14
    24be:	31 e0       	ldi	r19, 0x01	; 1
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	61 e0       	ldi	r22, 0x01	; 1
    24c4:	a9 01       	movw	r20, r18
    24c6:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_WriteString_xy>
				play_sound(Letter_C);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	0e 94 b7 08 	call	0x116e	; 0x116e <play_sound>
    24d2:	fe 01       	movw	r30, r28
    24d4:	e5 58       	subi	r30, 0x85	; 133
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	aa ef       	ldi	r26, 0xFA	; 250
    24de:	b4 e4       	ldi	r27, 0x44	; 68
    24e0:	80 83       	st	Z, r24
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	a2 83       	std	Z+2, r26	; 0x02
    24e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e8:	8e 01       	movw	r16, r28
    24ea:	09 58       	subi	r16, 0x89	; 137
    24ec:	1f 4f       	sbci	r17, 0xFF	; 255
    24ee:	fe 01       	movw	r30, r28
    24f0:	e5 58       	subi	r30, 0x85	; 133
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a e7       	ldi	r20, 0x7A	; 122
    2502:	55 e4       	ldi	r21, 0x45	; 69
    2504:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	f8 01       	movw	r30, r16
    250e:	80 83       	st	Z, r24
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	a2 83       	std	Z+2, r26	; 0x02
    2514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2516:	fe 01       	movw	r30, r28
    2518:	e9 58       	subi	r30, 0x89	; 137
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	60 81       	ld	r22, Z
    251e:	71 81       	ldd	r23, Z+1	; 0x01
    2520:	82 81       	ldd	r24, Z+2	; 0x02
    2522:	93 81       	ldd	r25, Z+3	; 0x03
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e8       	ldi	r20, 0x80	; 128
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2530:	88 23       	and	r24, r24
    2532:	44 f4       	brge	.+16     	; 0x2544 <main+0x36e>
		__ticks = 1;
    2534:	fe 01       	movw	r30, r28
    2536:	eb 58       	subi	r30, 0x8B	; 139
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
    2542:	64 c0       	rjmp	.+200    	; 0x260c <main+0x436>
	else if (__tmp > 65535)
    2544:	fe 01       	movw	r30, r28
    2546:	e9 58       	subi	r30, 0x89	; 137
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	60 81       	ld	r22, Z
    254c:	71 81       	ldd	r23, Z+1	; 0x01
    254e:	82 81       	ldd	r24, Z+2	; 0x02
    2550:	93 81       	ldd	r25, Z+3	; 0x03
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	57 e4       	ldi	r21, 0x47	; 71
    255a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    255e:	18 16       	cp	r1, r24
    2560:	0c f0       	brlt	.+2      	; 0x2564 <main+0x38e>
    2562:	43 c0       	rjmp	.+134    	; 0x25ea <main+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2564:	fe 01       	movw	r30, r28
    2566:	e5 58       	subi	r30, 0x85	; 133
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	60 81       	ld	r22, Z
    256c:	71 81       	ldd	r23, Z+1	; 0x01
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e2       	ldi	r20, 0x20	; 32
    2578:	51 e4       	ldi	r21, 0x41	; 65
    257a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	8e 01       	movw	r16, r28
    2584:	0b 58       	subi	r16, 0x8B	; 139
    2586:	1f 4f       	sbci	r17, 0xFF	; 255
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	f8 01       	movw	r30, r16
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	80 83       	st	Z, r24
    259a:	1f c0       	rjmp	.+62     	; 0x25da <main+0x404>
    259c:	fe 01       	movw	r30, r28
    259e:	ed 58       	subi	r30, 0x8D	; 141
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 e9       	ldi	r24, 0x90	; 144
    25a4:	91 e0       	ldi	r25, 0x01	; 1
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	80 83       	st	Z, r24
    25aa:	fe 01       	movw	r30, r28
    25ac:	ed 58       	subi	r30, 0x8D	; 141
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <main+0x3de>
    25b8:	fe 01       	movw	r30, r28
    25ba:	ed 58       	subi	r30, 0x8D	; 141
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c2:	de 01       	movw	r26, r28
    25c4:	ab 58       	subi	r26, 0x8B	; 139
    25c6:	bf 4f       	sbci	r27, 0xFF	; 255
    25c8:	fe 01       	movw	r30, r28
    25ca:	eb 58       	subi	r30, 0x8B	; 139
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	11 96       	adiw	r26, 0x01	; 1
    25d6:	9c 93       	st	X, r25
    25d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	fe 01       	movw	r30, r28
    25dc:	eb 58       	subi	r30, 0x8B	; 139
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	80 81       	ld	r24, Z
    25e2:	91 81       	ldd	r25, Z+1	; 0x01
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	d1 f6       	brne	.-76     	; 0x259c <main+0x3c6>
    25e8:	27 c0       	rjmp	.+78     	; 0x2638 <main+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ea:	8e 01       	movw	r16, r28
    25ec:	0b 58       	subi	r16, 0x8B	; 139
    25ee:	1f 4f       	sbci	r17, 0xFF	; 255
    25f0:	fe 01       	movw	r30, r28
    25f2:	e9 58       	subi	r30, 0x89	; 137
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	60 81       	ld	r22, Z
    25f8:	71 81       	ldd	r23, Z+1	; 0x01
    25fa:	82 81       	ldd	r24, Z+2	; 0x02
    25fc:	93 81       	ldd	r25, Z+3	; 0x03
    25fe:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	f8 01       	movw	r30, r16
    2608:	91 83       	std	Z+1, r25	; 0x01
    260a:	80 83       	st	Z, r24
    260c:	de 01       	movw	r26, r28
    260e:	af 58       	subi	r26, 0x8F	; 143
    2610:	bf 4f       	sbci	r27, 0xFF	; 255
    2612:	fe 01       	movw	r30, r28
    2614:	eb 58       	subi	r30, 0x8B	; 139
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	8d 93       	st	X+, r24
    261e:	9c 93       	st	X, r25
    2620:	fe 01       	movw	r30, r28
    2622:	ef 58       	subi	r30, 0x8F	; 143
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	91 81       	ldd	r25, Z+1	; 0x01
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <main+0x454>
    262e:	fe 01       	movw	r30, r28
    2630:	ef 58       	subi	r30, 0x8F	; 143
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
				_delay_ms(2000);
				LCD_SendCommand(1);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    263e:	af ce       	rjmp	.-674    	; 0x239e <main+0x1c8>
				break;

			case Letter_J:
				LCD_SendCommand(1);
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
				LCD_WriteString_xy(1, 1, "J");
    2646:	20 e1       	ldi	r18, 0x10	; 16
    2648:	31 e0       	ldi	r19, 0x01	; 1
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	61 e0       	ldi	r22, 0x01	; 1
    264e:	a9 01       	movw	r20, r18
    2650:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_WriteString_xy>
				play_sound(Letter_J);
    2654:	82 e0       	ldi	r24, 0x02	; 2
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	0e 94 b7 08 	call	0x116e	; 0x116e <play_sound>
    265c:	fe 01       	movw	r30, r28
    265e:	e3 59       	subi	r30, 0x93	; 147
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	aa ef       	ldi	r26, 0xFA	; 250
    2668:	b4 e4       	ldi	r27, 0x44	; 68
    266a:	80 83       	st	Z, r24
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	a2 83       	std	Z+2, r26	; 0x02
    2670:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2672:	8e 01       	movw	r16, r28
    2674:	07 59       	subi	r16, 0x97	; 151
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	fe 01       	movw	r30, r28
    267a:	e3 59       	subi	r30, 0x93	; 147
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a e7       	ldi	r20, 0x7A	; 122
    268c:	55 e4       	ldi	r21, 0x45	; 69
    268e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	f8 01       	movw	r30, r16
    2698:	80 83       	st	Z, r24
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	a2 83       	std	Z+2, r26	; 0x02
    269e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26a0:	fe 01       	movw	r30, r28
    26a2:	e7 59       	subi	r30, 0x97	; 151
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	60 81       	ld	r22, Z
    26a8:	71 81       	ldd	r23, Z+1	; 0x01
    26aa:	82 81       	ldd	r24, Z+2	; 0x02
    26ac:	93 81       	ldd	r25, Z+3	; 0x03
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e8       	ldi	r20, 0x80	; 128
    26b4:	5f e3       	ldi	r21, 0x3F	; 63
    26b6:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    26ba:	88 23       	and	r24, r24
    26bc:	44 f4       	brge	.+16     	; 0x26ce <main+0x4f8>
		__ticks = 1;
    26be:	fe 01       	movw	r30, r28
    26c0:	e9 59       	subi	r30, 0x99	; 153
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	80 83       	st	Z, r24
    26cc:	64 c0       	rjmp	.+200    	; 0x2796 <main+0x5c0>
	else if (__tmp > 65535)
    26ce:	fe 01       	movw	r30, r28
    26d0:	e7 59       	subi	r30, 0x97	; 151
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	3f ef       	ldi	r19, 0xFF	; 255
    26e0:	4f e7       	ldi	r20, 0x7F	; 127
    26e2:	57 e4       	ldi	r21, 0x47	; 71
    26e4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    26e8:	18 16       	cp	r1, r24
    26ea:	0c f0       	brlt	.+2      	; 0x26ee <main+0x518>
    26ec:	43 c0       	rjmp	.+134    	; 0x2774 <main+0x59e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ee:	fe 01       	movw	r30, r28
    26f0:	e3 59       	subi	r30, 0x93	; 147
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	60 81       	ld	r22, Z
    26f6:	71 81       	ldd	r23, Z+1	; 0x01
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e2       	ldi	r20, 0x20	; 32
    2702:	51 e4       	ldi	r21, 0x41	; 65
    2704:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8e 01       	movw	r16, r28
    270e:	09 59       	subi	r16, 0x99	; 153
    2710:	1f 4f       	sbci	r17, 0xFF	; 255
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	f8 01       	movw	r30, r16
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
    2724:	1f c0       	rjmp	.+62     	; 0x2764 <main+0x58e>
    2726:	fe 01       	movw	r30, r28
    2728:	eb 59       	subi	r30, 0x9B	; 155
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 e9       	ldi	r24, 0x90	; 144
    272e:	91 e0       	ldi	r25, 0x01	; 1
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	fe 01       	movw	r30, r28
    2736:	eb 59       	subi	r30, 0x9B	; 155
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	91 81       	ldd	r25, Z+1	; 0x01
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <main+0x568>
    2742:	fe 01       	movw	r30, r28
    2744:	eb 59       	subi	r30, 0x9B	; 155
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274c:	de 01       	movw	r26, r28
    274e:	a9 59       	subi	r26, 0x99	; 153
    2750:	bf 4f       	sbci	r27, 0xFF	; 255
    2752:	fe 01       	movw	r30, r28
    2754:	e9 59       	subi	r30, 0x99	; 153
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	11 96       	adiw	r26, 0x01	; 1
    2760:	9c 93       	st	X, r25
    2762:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	fe 01       	movw	r30, r28
    2766:	e9 59       	subi	r30, 0x99	; 153
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 81       	ld	r24, Z
    276c:	91 81       	ldd	r25, Z+1	; 0x01
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	d1 f6       	brne	.-76     	; 0x2726 <main+0x550>
    2772:	27 c0       	rjmp	.+78     	; 0x27c2 <main+0x5ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2774:	8e 01       	movw	r16, r28
    2776:	09 59       	subi	r16, 0x99	; 153
    2778:	1f 4f       	sbci	r17, 0xFF	; 255
    277a:	fe 01       	movw	r30, r28
    277c:	e7 59       	subi	r30, 0x97	; 151
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	82 81       	ldd	r24, Z+2	; 0x02
    2786:	93 81       	ldd	r25, Z+3	; 0x03
    2788:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	f8 01       	movw	r30, r16
    2792:	91 83       	std	Z+1, r25	; 0x01
    2794:	80 83       	st	Z, r24
    2796:	de 01       	movw	r26, r28
    2798:	ad 59       	subi	r26, 0x9D	; 157
    279a:	bf 4f       	sbci	r27, 0xFF	; 255
    279c:	fe 01       	movw	r30, r28
    279e:	e9 59       	subi	r30, 0x99	; 153
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	8d 93       	st	X+, r24
    27a8:	9c 93       	st	X, r25
    27aa:	fe 01       	movw	r30, r28
    27ac:	ed 59       	subi	r30, 0x9D	; 157
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <main+0x5de>
    27b8:	fe 01       	movw	r30, r28
    27ba:	ed 59       	subi	r30, 0x9D	; 157
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24
				_delay_ms(2000);
				LCD_SendCommand(1);
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    27c8:	ea cd       	rjmp	.-1068   	; 0x239e <main+0x1c8>
				break;
			case Number_0:
				LCD_SendCommand(1);
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
				LCD_WriteString_xy(1, 1, "0");
    27d0:	22 e1       	ldi	r18, 0x12	; 18
    27d2:	31 e0       	ldi	r19, 0x01	; 1
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	61 e0       	ldi	r22, 0x01	; 1
    27d8:	a9 01       	movw	r20, r18
    27da:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_WriteString_xy>
				play_sound(Number_0);
    27de:	83 e0       	ldi	r24, 0x03	; 3
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 b7 08 	call	0x116e	; 0x116e <play_sound>
    27e6:	fe 01       	movw	r30, r28
    27e8:	e1 5a       	subi	r30, 0xA1	; 161
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	aa ef       	ldi	r26, 0xFA	; 250
    27f2:	b4 e4       	ldi	r27, 0x44	; 68
    27f4:	80 83       	st	Z, r24
    27f6:	91 83       	std	Z+1, r25	; 0x01
    27f8:	a2 83       	std	Z+2, r26	; 0x02
    27fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fc:	8e 01       	movw	r16, r28
    27fe:	05 5a       	subi	r16, 0xA5	; 165
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	fe 01       	movw	r30, r28
    2804:	e1 5a       	subi	r30, 0xA1	; 161
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	60 81       	ld	r22, Z
    280a:	71 81       	ldd	r23, Z+1	; 0x01
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	93 81       	ldd	r25, Z+3	; 0x03
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a e7       	ldi	r20, 0x7A	; 122
    2816:	55 e4       	ldi	r21, 0x45	; 69
    2818:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	f8 01       	movw	r30, r16
    2822:	80 83       	st	Z, r24
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	a2 83       	std	Z+2, r26	; 0x02
    2828:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    282a:	fe 01       	movw	r30, r28
    282c:	e5 5a       	subi	r30, 0xA5	; 165
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	60 81       	ld	r22, Z
    2832:	71 81       	ldd	r23, Z+1	; 0x01
    2834:	82 81       	ldd	r24, Z+2	; 0x02
    2836:	93 81       	ldd	r25, Z+3	; 0x03
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	44 f4       	brge	.+16     	; 0x2858 <main+0x682>
		__ticks = 1;
    2848:	fe 01       	movw	r30, r28
    284a:	e7 5a       	subi	r30, 0xA7	; 167
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	80 83       	st	Z, r24
    2856:	64 c0       	rjmp	.+200    	; 0x2920 <main+0x74a>
	else if (__tmp > 65535)
    2858:	fe 01       	movw	r30, r28
    285a:	e5 5a       	subi	r30, 0xA5	; 165
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	60 81       	ld	r22, Z
    2860:	71 81       	ldd	r23, Z+1	; 0x01
    2862:	82 81       	ldd	r24, Z+2	; 0x02
    2864:	93 81       	ldd	r25, Z+3	; 0x03
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	3f ef       	ldi	r19, 0xFF	; 255
    286a:	4f e7       	ldi	r20, 0x7F	; 127
    286c:	57 e4       	ldi	r21, 0x47	; 71
    286e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2872:	18 16       	cp	r1, r24
    2874:	0c f0       	brlt	.+2      	; 0x2878 <main+0x6a2>
    2876:	43 c0       	rjmp	.+134    	; 0x28fe <main+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2878:	fe 01       	movw	r30, r28
    287a:	e1 5a       	subi	r30, 0xA1	; 161
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	60 81       	ld	r22, Z
    2880:	71 81       	ldd	r23, Z+1	; 0x01
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	8e 01       	movw	r16, r28
    2898:	07 5a       	subi	r16, 0xA7	; 167
    289a:	1f 4f       	sbci	r17, 0xFF	; 255
    289c:	bc 01       	movw	r22, r24
    289e:	cd 01       	movw	r24, r26
    28a0:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	f8 01       	movw	r30, r16
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	80 83       	st	Z, r24
    28ae:	1f c0       	rjmp	.+62     	; 0x28ee <main+0x718>
    28b0:	fe 01       	movw	r30, r28
    28b2:	e9 5a       	subi	r30, 0xA9	; 169
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 e9       	ldi	r24, 0x90	; 144
    28b8:	91 e0       	ldi	r25, 0x01	; 1
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	80 83       	st	Z, r24
    28be:	fe 01       	movw	r30, r28
    28c0:	e9 5a       	subi	r30, 0xA9	; 169
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	80 81       	ld	r24, Z
    28c6:	91 81       	ldd	r25, Z+1	; 0x01
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <main+0x6f2>
    28cc:	fe 01       	movw	r30, r28
    28ce:	e9 5a       	subi	r30, 0xA9	; 169
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	91 83       	std	Z+1, r25	; 0x01
    28d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d6:	de 01       	movw	r26, r28
    28d8:	a7 5a       	subi	r26, 0xA7	; 167
    28da:	bf 4f       	sbci	r27, 0xFF	; 255
    28dc:	fe 01       	movw	r30, r28
    28de:	e7 5a       	subi	r30, 0xA7	; 167
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 81       	ld	r24, Z
    28e4:	91 81       	ldd	r25, Z+1	; 0x01
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	11 96       	adiw	r26, 0x01	; 1
    28ea:	9c 93       	st	X, r25
    28ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ee:	fe 01       	movw	r30, r28
    28f0:	e7 5a       	subi	r30, 0xA7	; 167
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 81       	ld	r24, Z
    28f6:	91 81       	ldd	r25, Z+1	; 0x01
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	d1 f6       	brne	.-76     	; 0x28b0 <main+0x6da>
    28fc:	27 c0       	rjmp	.+78     	; 0x294c <main+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fe:	8e 01       	movw	r16, r28
    2900:	07 5a       	subi	r16, 0xA7	; 167
    2902:	1f 4f       	sbci	r17, 0xFF	; 255
    2904:	fe 01       	movw	r30, r28
    2906:	e5 5a       	subi	r30, 0xA5	; 165
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	f8 01       	movw	r30, r16
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	80 83       	st	Z, r24
    2920:	de 01       	movw	r26, r28
    2922:	ab 5a       	subi	r26, 0xAB	; 171
    2924:	bf 4f       	sbci	r27, 0xFF	; 255
    2926:	fe 01       	movw	r30, r28
    2928:	e7 5a       	subi	r30, 0xA7	; 167
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	8d 93       	st	X+, r24
    2932:	9c 93       	st	X, r25
    2934:	fe 01       	movw	r30, r28
    2936:	eb 5a       	subi	r30, 0xAB	; 171
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 81       	ld	r24, Z
    293c:	91 81       	ldd	r25, Z+1	; 0x01
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	f1 f7       	brne	.-4      	; 0x293e <main+0x768>
    2942:	fe 01       	movw	r30, r28
    2944:	eb 5a       	subi	r30, 0xAB	; 171
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	91 83       	std	Z+1, r25	; 0x01
    294a:	80 83       	st	Z, r24
				_delay_ms(2000);
				LCD_SendCommand(1);
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    2952:	25 cd       	rjmp	.-1462   	; 0x239e <main+0x1c8>
				break;
			case Number_5:
				LCD_SendCommand(1);
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
				LCD_WriteString_xy(1, 1, "5");
    295a:	24 e1       	ldi	r18, 0x14	; 20
    295c:	31 e0       	ldi	r19, 0x01	; 1
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	61 e0       	ldi	r22, 0x01	; 1
    2962:	a9 01       	movw	r20, r18
    2964:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_WriteString_xy>
				play_sound(Number_5);
    2968:	84 e0       	ldi	r24, 0x04	; 4
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0e 94 b7 08 	call	0x116e	; 0x116e <play_sound>
    2970:	fe 01       	movw	r30, r28
    2972:	ef 5a       	subi	r30, 0xAF	; 175
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	aa ef       	ldi	r26, 0xFA	; 250
    297c:	b4 e4       	ldi	r27, 0x44	; 68
    297e:	80 83       	st	Z, r24
    2980:	91 83       	std	Z+1, r25	; 0x01
    2982:	a2 83       	std	Z+2, r26	; 0x02
    2984:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2986:	8e 01       	movw	r16, r28
    2988:	03 5b       	subi	r16, 0xB3	; 179
    298a:	1f 4f       	sbci	r17, 0xFF	; 255
    298c:	fe 01       	movw	r30, r28
    298e:	ef 5a       	subi	r30, 0xAF	; 175
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	82 81       	ldd	r24, Z+2	; 0x02
    2998:	93 81       	ldd	r25, Z+3	; 0x03
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	4a e7       	ldi	r20, 0x7A	; 122
    29a0:	55 e4       	ldi	r21, 0x45	; 69
    29a2:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	f8 01       	movw	r30, r16
    29ac:	80 83       	st	Z, r24
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	a2 83       	std	Z+2, r26	; 0x02
    29b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b4:	fe 01       	movw	r30, r28
    29b6:	e3 5b       	subi	r30, 0xB3	; 179
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e8       	ldi	r20, 0x80	; 128
    29c8:	5f e3       	ldi	r21, 0x3F	; 63
    29ca:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    29ce:	88 23       	and	r24, r24
    29d0:	44 f4       	brge	.+16     	; 0x29e2 <main+0x80c>
		__ticks = 1;
    29d2:	fe 01       	movw	r30, r28
    29d4:	e5 5b       	subi	r30, 0xB5	; 181
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	91 83       	std	Z+1, r25	; 0x01
    29de:	80 83       	st	Z, r24
    29e0:	64 c0       	rjmp	.+200    	; 0x2aaa <main+0x8d4>
	else if (__tmp > 65535)
    29e2:	fe 01       	movw	r30, r28
    29e4:	e3 5b       	subi	r30, 0xB3	; 179
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	3f ef       	ldi	r19, 0xFF	; 255
    29f4:	4f e7       	ldi	r20, 0x7F	; 127
    29f6:	57 e4       	ldi	r21, 0x47	; 71
    29f8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    29fc:	18 16       	cp	r1, r24
    29fe:	0c f0       	brlt	.+2      	; 0x2a02 <main+0x82c>
    2a00:	43 c0       	rjmp	.+134    	; 0x2a88 <main+0x8b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a02:	fe 01       	movw	r30, r28
    2a04:	ef 5a       	subi	r30, 0xAF	; 175
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	60 81       	ld	r22, Z
    2a0a:	71 81       	ldd	r23, Z+1	; 0x01
    2a0c:	82 81       	ldd	r24, Z+2	; 0x02
    2a0e:	93 81       	ldd	r25, Z+3	; 0x03
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e2       	ldi	r20, 0x20	; 32
    2a16:	51 e4       	ldi	r21, 0x41	; 65
    2a18:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	8e 01       	movw	r16, r28
    2a22:	05 5b       	subi	r16, 0xB5	; 181
    2a24:	1f 4f       	sbci	r17, 0xFF	; 255
    2a26:	bc 01       	movw	r22, r24
    2a28:	cd 01       	movw	r24, r26
    2a2a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	f8 01       	movw	r30, r16
    2a34:	91 83       	std	Z+1, r25	; 0x01
    2a36:	80 83       	st	Z, r24
    2a38:	1f c0       	rjmp	.+62     	; 0x2a78 <main+0x8a2>
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e7 5b       	subi	r30, 0xB7	; 183
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 e9       	ldi	r24, 0x90	; 144
    2a42:	91 e0       	ldi	r25, 0x01	; 1
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	80 83       	st	Z, r24
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e7 5b       	subi	r30, 0xB7	; 183
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	80 81       	ld	r24, Z
    2a50:	91 81       	ldd	r25, Z+1	; 0x01
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <main+0x87c>
    2a56:	fe 01       	movw	r30, r28
    2a58:	e7 5b       	subi	r30, 0xB7	; 183
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	91 83       	std	Z+1, r25	; 0x01
    2a5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a60:	de 01       	movw	r26, r28
    2a62:	a5 5b       	subi	r26, 0xB5	; 181
    2a64:	bf 4f       	sbci	r27, 0xFF	; 255
    2a66:	fe 01       	movw	r30, r28
    2a68:	e5 5b       	subi	r30, 0xB5	; 181
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	80 81       	ld	r24, Z
    2a6e:	91 81       	ldd	r25, Z+1	; 0x01
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	11 96       	adiw	r26, 0x01	; 1
    2a74:	9c 93       	st	X, r25
    2a76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e5 5b       	subi	r30, 0xB5	; 181
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 81       	ld	r24, Z
    2a80:	91 81       	ldd	r25, Z+1	; 0x01
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	d1 f6       	brne	.-76     	; 0x2a3a <main+0x864>
    2a86:	27 c0       	rjmp	.+78     	; 0x2ad6 <main+0x900>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a88:	8e 01       	movw	r16, r28
    2a8a:	05 5b       	subi	r16, 0xB5	; 181
    2a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e3 5b       	subi	r30, 0xB3	; 179
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	f8 01       	movw	r30, r16
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
    2aaa:	de 01       	movw	r26, r28
    2aac:	a9 5b       	subi	r26, 0xB9	; 185
    2aae:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	e5 5b       	subi	r30, 0xB5	; 181
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	80 81       	ld	r24, Z
    2ab8:	91 81       	ldd	r25, Z+1	; 0x01
    2aba:	8d 93       	st	X+, r24
    2abc:	9c 93       	st	X, r25
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e9 5b       	subi	r30, 0xB9	; 185
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	80 81       	ld	r24, Z
    2ac6:	91 81       	ldd	r25, Z+1	; 0x01
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <main+0x8f2>
    2acc:	fe 01       	movw	r30, r28
    2ace:	e9 5b       	subi	r30, 0xB9	; 185
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	91 83       	std	Z+1, r25	; 0x01
    2ad4:	80 83       	st	Z, r24
				_delay_ms(2000);
				LCD_SendCommand(1);
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    2adc:	60 cc       	rjmp	.-1856   	; 0x239e <main+0x1c8>
				break;
			case Good_afternoon_professors:
				LCD_SendCommand(1);
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
				LCD_WriteString_xy(3, 1, "Good afternoon");
    2ae4:	26 e1       	ldi	r18, 0x16	; 22
    2ae6:	31 e0       	ldi	r19, 0x01	; 1
    2ae8:	83 e0       	ldi	r24, 0x03	; 3
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	a9 01       	movw	r20, r18
    2aee:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_WriteString_xy>
				LCD_WriteString_xy(5, 2, "professors");
    2af2:	25 e2       	ldi	r18, 0x25	; 37
    2af4:	31 e0       	ldi	r19, 0x01	; 1
    2af6:	85 e0       	ldi	r24, 0x05	; 5
    2af8:	62 e0       	ldi	r22, 0x02	; 2
    2afa:	a9 01       	movw	r20, r18
    2afc:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_WriteString_xy>
				play_sound(Good_afternoon_professors);
    2b00:	85 e0       	ldi	r24, 0x05	; 5
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 b7 08 	call	0x116e	; 0x116e <play_sound>
    2b08:	fe 01       	movw	r30, r28
    2b0a:	ed 5b       	subi	r30, 0xBD	; 189
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	aa ef       	ldi	r26, 0xFA	; 250
    2b14:	b4 e4       	ldi	r27, 0x44	; 68
    2b16:	80 83       	st	Z, r24
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	a2 83       	std	Z+2, r26	; 0x02
    2b1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1e:	8e 01       	movw	r16, r28
    2b20:	01 5c       	subi	r16, 0xC1	; 193
    2b22:	1f 4f       	sbci	r17, 0xFF	; 255
    2b24:	fe 01       	movw	r30, r28
    2b26:	ed 5b       	subi	r30, 0xBD	; 189
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	60 81       	ld	r22, Z
    2b2c:	71 81       	ldd	r23, Z+1	; 0x01
    2b2e:	82 81       	ldd	r24, Z+2	; 0x02
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	4a e7       	ldi	r20, 0x7A	; 122
    2b38:	55 e4       	ldi	r21, 0x45	; 69
    2b3a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	f8 01       	movw	r30, r16
    2b44:	80 83       	st	Z, r24
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	a2 83       	std	Z+2, r26	; 0x02
    2b4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ff 96       	adiw	r30, 0x3f	; 63
    2b50:	60 81       	ld	r22, Z
    2b52:	71 81       	ldd	r23, Z+1	; 0x01
    2b54:	82 81       	ldd	r24, Z+2	; 0x02
    2b56:	93 81       	ldd	r25, Z+3	; 0x03
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e8       	ldi	r20, 0x80	; 128
    2b5e:	5f e3       	ldi	r21, 0x3F	; 63
    2b60:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2b64:	88 23       	and	r24, r24
    2b66:	2c f4       	brge	.+10     	; 0x2b72 <main+0x99c>
		__ticks = 1;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9e af       	std	Y+62, r25	; 0x3e
    2b6e:	8d af       	std	Y+61, r24	; 0x3d
    2b70:	46 c0       	rjmp	.+140    	; 0x2bfe <main+0xa28>
	else if (__tmp > 65535)
    2b72:	fe 01       	movw	r30, r28
    2b74:	ff 96       	adiw	r30, 0x3f	; 63
    2b76:	60 81       	ld	r22, Z
    2b78:	71 81       	ldd	r23, Z+1	; 0x01
    2b7a:	82 81       	ldd	r24, Z+2	; 0x02
    2b7c:	93 81       	ldd	r25, Z+3	; 0x03
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	3f ef       	ldi	r19, 0xFF	; 255
    2b82:	4f e7       	ldi	r20, 0x7F	; 127
    2b84:	57 e4       	ldi	r21, 0x47	; 71
    2b86:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2b8a:	18 16       	cp	r1, r24
    2b8c:	64 f5       	brge	.+88     	; 0x2be6 <main+0xa10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8e:	fe 01       	movw	r30, r28
    2b90:	ed 5b       	subi	r30, 0xBD	; 189
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	60 81       	ld	r22, Z
    2b96:	71 81       	ldd	r23, Z+1	; 0x01
    2b98:	82 81       	ldd	r24, Z+2	; 0x02
    2b9a:	93 81       	ldd	r25, Z+3	; 0x03
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e2       	ldi	r20, 0x20	; 32
    2ba2:	51 e4       	ldi	r21, 0x41	; 65
    2ba4:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	bc 01       	movw	r22, r24
    2bae:	cd 01       	movw	r24, r26
    2bb0:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	9e af       	std	Y+62, r25	; 0x3e
    2bba:	8d af       	std	Y+61, r24	; 0x3d
    2bbc:	0f c0       	rjmp	.+30     	; 0x2bdc <main+0xa06>
    2bbe:	80 e9       	ldi	r24, 0x90	; 144
    2bc0:	91 e0       	ldi	r25, 0x01	; 1
    2bc2:	9c af       	std	Y+60, r25	; 0x3c
    2bc4:	8b af       	std	Y+59, r24	; 0x3b
    2bc6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2bc8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <main+0x9f4>
    2bce:	9c af       	std	Y+60, r25	; 0x3c
    2bd0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bd4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	9e af       	std	Y+62, r25	; 0x3e
    2bda:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bde:	9e ad       	ldd	r25, Y+62	; 0x3e
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	69 f7       	brne	.-38     	; 0x2bbe <main+0x9e8>
    2be4:	16 c0       	rjmp	.+44     	; 0x2c12 <main+0xa3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be6:	fe 01       	movw	r30, r28
    2be8:	ff 96       	adiw	r30, 0x3f	; 63
    2bea:	60 81       	ld	r22, Z
    2bec:	71 81       	ldd	r23, Z+1	; 0x01
    2bee:	82 81       	ldd	r24, Z+2	; 0x02
    2bf0:	93 81       	ldd	r25, Z+3	; 0x03
    2bf2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	9e af       	std	Y+62, r25	; 0x3e
    2bfc:	8d af       	std	Y+61, r24	; 0x3d
    2bfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c00:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c02:	9a af       	std	Y+58, r25	; 0x3a
    2c04:	89 af       	std	Y+57, r24	; 0x39
    2c06:	89 ad       	ldd	r24, Y+57	; 0x39
    2c08:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <main+0xa34>
    2c0e:	9a af       	std	Y+58, r25	; 0x3a
    2c10:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(2000);
				LCD_SendCommand(1);
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    2c18:	c2 cb       	rjmp	.-2172   	; 0x239e <main+0x1c8>
				break;
			case Hope:
				LCD_SendCommand(1);
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
				LCD_WriteString_xy(1, 1, "Hope");
    2c20:	20 e3       	ldi	r18, 0x30	; 48
    2c22:	31 e0       	ldi	r19, 0x01	; 1
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	61 e0       	ldi	r22, 0x01	; 1
    2c28:	a9 01       	movw	r20, r18
    2c2a:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_WriteString_xy>
				play_sound(Hope);
    2c2e:	86 e0       	ldi	r24, 0x06	; 6
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	0e 94 b7 08 	call	0x116e	; 0x116e <play_sound>
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	aa ef       	ldi	r26, 0xFA	; 250
    2c3c:	b4 e4       	ldi	r27, 0x44	; 68
    2c3e:	8d ab       	std	Y+53, r24	; 0x35
    2c40:	9e ab       	std	Y+54, r25	; 0x36
    2c42:	af ab       	std	Y+55, r26	; 0x37
    2c44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c46:	6d a9       	ldd	r22, Y+53	; 0x35
    2c48:	7e a9       	ldd	r23, Y+54	; 0x36
    2c4a:	8f a9       	ldd	r24, Y+55	; 0x37
    2c4c:	98 ad       	ldd	r25, Y+56	; 0x38
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	4a e7       	ldi	r20, 0x7A	; 122
    2c54:	55 e4       	ldi	r21, 0x45	; 69
    2c56:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	89 ab       	std	Y+49, r24	; 0x31
    2c60:	9a ab       	std	Y+50, r25	; 0x32
    2c62:	ab ab       	std	Y+51, r26	; 0x33
    2c64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c66:	69 a9       	ldd	r22, Y+49	; 0x31
    2c68:	7a a9       	ldd	r23, Y+50	; 0x32
    2c6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e8       	ldi	r20, 0x80	; 128
    2c74:	5f e3       	ldi	r21, 0x3F	; 63
    2c76:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2c7a:	88 23       	and	r24, r24
    2c7c:	2c f4       	brge	.+10     	; 0x2c88 <main+0xab2>
		__ticks = 1;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	98 ab       	std	Y+48, r25	; 0x30
    2c84:	8f a7       	std	Y+47, r24	; 0x2f
    2c86:	3f c0       	rjmp	.+126    	; 0x2d06 <main+0xb30>
	else if (__tmp > 65535)
    2c88:	69 a9       	ldd	r22, Y+49	; 0x31
    2c8a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c8c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c8e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	3f ef       	ldi	r19, 0xFF	; 255
    2c94:	4f e7       	ldi	r20, 0x7F	; 127
    2c96:	57 e4       	ldi	r21, 0x47	; 71
    2c98:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2c9c:	18 16       	cp	r1, r24
    2c9e:	4c f5       	brge	.+82     	; 0x2cf2 <main+0xb1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ca2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ca4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ca6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e2       	ldi	r20, 0x20	; 32
    2cae:	51 e4       	ldi	r21, 0x41	; 65
    2cb0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	98 ab       	std	Y+48, r25	; 0x30
    2cc6:	8f a7       	std	Y+47, r24	; 0x2f
    2cc8:	0f c0       	rjmp	.+30     	; 0x2ce8 <main+0xb12>
    2cca:	80 e9       	ldi	r24, 0x90	; 144
    2ccc:	91 e0       	ldi	r25, 0x01	; 1
    2cce:	9e a7       	std	Y+46, r25	; 0x2e
    2cd0:	8d a7       	std	Y+45, r24	; 0x2d
    2cd2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cd4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <main+0xb00>
    2cda:	9e a7       	std	Y+46, r25	; 0x2e
    2cdc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cde:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	98 ab       	std	Y+48, r25	; 0x30
    2ce6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cea:	98 a9       	ldd	r25, Y+48	; 0x30
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	69 f7       	brne	.-38     	; 0x2cca <main+0xaf4>
    2cf0:	14 c0       	rjmp	.+40     	; 0x2d1a <main+0xb44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf2:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf4:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf6:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf8:	9c a9       	ldd	r25, Y+52	; 0x34
    2cfa:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	98 ab       	std	Y+48, r25	; 0x30
    2d04:	8f a7       	std	Y+47, r24	; 0x2f
    2d06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d08:	98 a9       	ldd	r25, Y+48	; 0x30
    2d0a:	9c a7       	std	Y+44, r25	; 0x2c
    2d0c:	8b a7       	std	Y+43, r24	; 0x2b
    2d0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d10:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <main+0xb3c>
    2d16:	9c a7       	std	Y+44, r25	; 0x2c
    2d18:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2000);
				LCD_SendCommand(1);
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    2d20:	3e cb       	rjmp	.-2436   	; 0x239e <main+0x1c8>
				break;
			case That_you:
				LCD_SendCommand(1);
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
				LCD_WriteString_xy(1, 1, "That you");
    2d28:	25 e3       	ldi	r18, 0x35	; 53
    2d2a:	31 e0       	ldi	r19, 0x01	; 1
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	61 e0       	ldi	r22, 0x01	; 1
    2d30:	a9 01       	movw	r20, r18
    2d32:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_WriteString_xy>
				play_sound(That_you);
    2d36:	87 e0       	ldi	r24, 0x07	; 7
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0e 94 b7 08 	call	0x116e	; 0x116e <play_sound>
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	aa ef       	ldi	r26, 0xFA	; 250
    2d44:	b4 e4       	ldi	r27, 0x44	; 68
    2d46:	8f a3       	std	Y+39, r24	; 0x27
    2d48:	98 a7       	std	Y+40, r25	; 0x28
    2d4a:	a9 a7       	std	Y+41, r26	; 0x29
    2d4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d4e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d50:	78 a5       	ldd	r23, Y+40	; 0x28
    2d52:	89 a5       	ldd	r24, Y+41	; 0x29
    2d54:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	4a e7       	ldi	r20, 0x7A	; 122
    2d5c:	55 e4       	ldi	r21, 0x45	; 69
    2d5e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	8b a3       	std	Y+35, r24	; 0x23
    2d68:	9c a3       	std	Y+36, r25	; 0x24
    2d6a:	ad a3       	std	Y+37, r26	; 0x25
    2d6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d70:	7c a1       	ldd	r23, Y+36	; 0x24
    2d72:	8d a1       	ldd	r24, Y+37	; 0x25
    2d74:	9e a1       	ldd	r25, Y+38	; 0x26
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e8       	ldi	r20, 0x80	; 128
    2d7c:	5f e3       	ldi	r21, 0x3F	; 63
    2d7e:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2d82:	88 23       	and	r24, r24
    2d84:	2c f4       	brge	.+10     	; 0x2d90 <main+0xbba>
		__ticks = 1;
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	9a a3       	std	Y+34, r25	; 0x22
    2d8c:	89 a3       	std	Y+33, r24	; 0x21
    2d8e:	3f c0       	rjmp	.+126    	; 0x2e0e <main+0xc38>
	else if (__tmp > 65535)
    2d90:	6b a1       	ldd	r22, Y+35	; 0x23
    2d92:	7c a1       	ldd	r23, Y+36	; 0x24
    2d94:	8d a1       	ldd	r24, Y+37	; 0x25
    2d96:	9e a1       	ldd	r25, Y+38	; 0x26
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	3f ef       	ldi	r19, 0xFF	; 255
    2d9c:	4f e7       	ldi	r20, 0x7F	; 127
    2d9e:	57 e4       	ldi	r21, 0x47	; 71
    2da0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2da4:	18 16       	cp	r1, r24
    2da6:	4c f5       	brge	.+82     	; 0x2dfa <main+0xc24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da8:	6f a1       	ldd	r22, Y+39	; 0x27
    2daa:	78 a5       	ldd	r23, Y+40	; 0x28
    2dac:	89 a5       	ldd	r24, Y+41	; 0x29
    2dae:	9a a5       	ldd	r25, Y+42	; 0x2a
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	40 e2       	ldi	r20, 0x20	; 32
    2db6:	51 e4       	ldi	r21, 0x41	; 65
    2db8:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	bc 01       	movw	r22, r24
    2dc2:	cd 01       	movw	r24, r26
    2dc4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	9a a3       	std	Y+34, r25	; 0x22
    2dce:	89 a3       	std	Y+33, r24	; 0x21
    2dd0:	0f c0       	rjmp	.+30     	; 0x2df0 <main+0xc1a>
    2dd2:	80 e9       	ldi	r24, 0x90	; 144
    2dd4:	91 e0       	ldi	r25, 0x01	; 1
    2dd6:	98 a3       	std	Y+32, r25	; 0x20
    2dd8:	8f 8f       	std	Y+31, r24	; 0x1f
    2dda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ddc:	98 a1       	ldd	r25, Y+32	; 0x20
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <main+0xc08>
    2de2:	98 a3       	std	Y+32, r25	; 0x20
    2de4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de6:	89 a1       	ldd	r24, Y+33	; 0x21
    2de8:	9a a1       	ldd	r25, Y+34	; 0x22
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	9a a3       	std	Y+34, r25	; 0x22
    2dee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df0:	89 a1       	ldd	r24, Y+33	; 0x21
    2df2:	9a a1       	ldd	r25, Y+34	; 0x22
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	69 f7       	brne	.-38     	; 0x2dd2 <main+0xbfc>
    2df8:	14 c0       	rjmp	.+40     	; 0x2e22 <main+0xc4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dfa:	6b a1       	ldd	r22, Y+35	; 0x23
    2dfc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dfe:	8d a1       	ldd	r24, Y+37	; 0x25
    2e00:	9e a1       	ldd	r25, Y+38	; 0x26
    2e02:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	9a a3       	std	Y+34, r25	; 0x22
    2e0c:	89 a3       	std	Y+33, r24	; 0x21
    2e0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e10:	9a a1       	ldd	r25, Y+34	; 0x22
    2e12:	9e 8f       	std	Y+30, r25	; 0x1e
    2e14:	8d 8f       	std	Y+29, r24	; 0x1d
    2e16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <main+0xc44>
    2e1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e20:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2000);
				LCD_SendCommand(1);
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    2e28:	ba ca       	rjmp	.-2700   	; 0x239e <main+0x1c8>
				break;
			case Enjoy:
				LCD_SendCommand(1);
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
				LCD_WriteString_xy(1, 1, "Enjoy");
    2e30:	2e e3       	ldi	r18, 0x3E	; 62
    2e32:	31 e0       	ldi	r19, 0x01	; 1
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	61 e0       	ldi	r22, 0x01	; 1
    2e38:	a9 01       	movw	r20, r18
    2e3a:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_WriteString_xy>
				play_sound(Enjoy);
    2e3e:	88 e0       	ldi	r24, 0x08	; 8
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0e 94 b7 08 	call	0x116e	; 0x116e <play_sound>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	aa ef       	ldi	r26, 0xFA	; 250
    2e4c:	b4 e4       	ldi	r27, 0x44	; 68
    2e4e:	89 8f       	std	Y+25, r24	; 0x19
    2e50:	9a 8f       	std	Y+26, r25	; 0x1a
    2e52:	ab 8f       	std	Y+27, r26	; 0x1b
    2e54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e56:	69 8d       	ldd	r22, Y+25	; 0x19
    2e58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	4a e7       	ldi	r20, 0x7A	; 122
    2e64:	55 e4       	ldi	r21, 0x45	; 69
    2e66:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	8d 8b       	std	Y+21, r24	; 0x15
    2e70:	9e 8b       	std	Y+22, r25	; 0x16
    2e72:	af 8b       	std	Y+23, r26	; 0x17
    2e74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e76:	6d 89       	ldd	r22, Y+21	; 0x15
    2e78:	7e 89       	ldd	r23, Y+22	; 0x16
    2e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e8       	ldi	r20, 0x80	; 128
    2e84:	5f e3       	ldi	r21, 0x3F	; 63
    2e86:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2e8a:	88 23       	and	r24, r24
    2e8c:	2c f4       	brge	.+10     	; 0x2e98 <main+0xcc2>
		__ticks = 1;
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	9c 8b       	std	Y+20, r25	; 0x14
    2e94:	8b 8b       	std	Y+19, r24	; 0x13
    2e96:	3f c0       	rjmp	.+126    	; 0x2f16 <main+0xd40>
	else if (__tmp > 65535)
    2e98:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	3f ef       	ldi	r19, 0xFF	; 255
    2ea4:	4f e7       	ldi	r20, 0x7F	; 127
    2ea6:	57 e4       	ldi	r21, 0x47	; 71
    2ea8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2eac:	18 16       	cp	r1, r24
    2eae:	4c f5       	brge	.+82     	; 0x2f02 <main+0xd2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb0:	69 8d       	ldd	r22, Y+25	; 0x19
    2eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e2       	ldi	r20, 0x20	; 32
    2ebe:	51 e4       	ldi	r21, 0x41	; 65
    2ec0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9c 8b       	std	Y+20, r25	; 0x14
    2ed6:	8b 8b       	std	Y+19, r24	; 0x13
    2ed8:	0f c0       	rjmp	.+30     	; 0x2ef8 <main+0xd22>
    2eda:	80 e9       	ldi	r24, 0x90	; 144
    2edc:	91 e0       	ldi	r25, 0x01	; 1
    2ede:	9a 8b       	std	Y+18, r25	; 0x12
    2ee0:	89 8b       	std	Y+17, r24	; 0x11
    2ee2:	89 89       	ldd	r24, Y+17	; 0x11
    2ee4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <main+0xd10>
    2eea:	9a 8b       	std	Y+18, r25	; 0x12
    2eec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	9c 8b       	std	Y+20, r25	; 0x14
    2ef6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    2efa:	9c 89       	ldd	r25, Y+20	; 0x14
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	69 f7       	brne	.-38     	; 0x2eda <main+0xd04>
    2f00:	14 c0       	rjmp	.+40     	; 0x2f2a <main+0xd54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f02:	6d 89       	ldd	r22, Y+21	; 0x15
    2f04:	7e 89       	ldd	r23, Y+22	; 0x16
    2f06:	8f 89       	ldd	r24, Y+23	; 0x17
    2f08:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	9c 8b       	std	Y+20, r25	; 0x14
    2f14:	8b 8b       	std	Y+19, r24	; 0x13
    2f16:	8b 89       	ldd	r24, Y+19	; 0x13
    2f18:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1a:	98 8b       	std	Y+16, r25	; 0x10
    2f1c:	8f 87       	std	Y+15, r24	; 0x0f
    2f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f20:	98 89       	ldd	r25, Y+16	; 0x10
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <main+0xd4c>
    2f26:	98 8b       	std	Y+16, r25	; 0x10
    2f28:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2000);
				LCD_SendCommand(1);
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    2f30:	36 ca       	rjmp	.-2964   	; 0x239e <main+0x1c8>
				break;
			case Our_show:
				LCD_SendCommand(1);
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
				LCD_WriteString_xy(1, 1, "Our show");
    2f38:	24 e4       	ldi	r18, 0x44	; 68
    2f3a:	31 e0       	ldi	r19, 0x01	; 1
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	61 e0       	ldi	r22, 0x01	; 1
    2f40:	a9 01       	movw	r20, r18
    2f42:	0e 94 75 10 	call	0x20ea	; 0x20ea <LCD_WriteString_xy>
				play_sound(Our_show);
    2f46:	89 e0       	ldi	r24, 0x09	; 9
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 b7 08 	call	0x116e	; 0x116e <play_sound>
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	aa ef       	ldi	r26, 0xFA	; 250
    2f54:	b4 e4       	ldi	r27, 0x44	; 68
    2f56:	8b 87       	std	Y+11, r24	; 0x0b
    2f58:	9c 87       	std	Y+12, r25	; 0x0c
    2f5a:	ad 87       	std	Y+13, r26	; 0x0d
    2f5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	4a e7       	ldi	r20, 0x7A	; 122
    2f6c:	55 e4       	ldi	r21, 0x45	; 69
    2f6e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	8f 83       	std	Y+7, r24	; 0x07
    2f78:	98 87       	std	Y+8, r25	; 0x08
    2f7a:	a9 87       	std	Y+9, r26	; 0x09
    2f7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f80:	78 85       	ldd	r23, Y+8	; 0x08
    2f82:	89 85       	ldd	r24, Y+9	; 0x09
    2f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e8       	ldi	r20, 0x80	; 128
    2f8c:	5f e3       	ldi	r21, 0x3F	; 63
    2f8e:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2f92:	88 23       	and	r24, r24
    2f94:	2c f4       	brge	.+10     	; 0x2fa0 <main+0xdca>
		__ticks = 1;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	9e 83       	std	Y+6, r25	; 0x06
    2f9c:	8d 83       	std	Y+5, r24	; 0x05
    2f9e:	3f c0       	rjmp	.+126    	; 0x301e <main+0xe48>
	else if (__tmp > 65535)
    2fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa2:	78 85       	ldd	r23, Y+8	; 0x08
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	3f ef       	ldi	r19, 0xFF	; 255
    2fac:	4f e7       	ldi	r20, 0x7F	; 127
    2fae:	57 e4       	ldi	r21, 0x47	; 71
    2fb0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2fb4:	18 16       	cp	r1, r24
    2fb6:	4c f5       	brge	.+82     	; 0x300a <main+0xe34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e2       	ldi	r20, 0x20	; 32
    2fc6:	51 e4       	ldi	r21, 0x41	; 65
    2fc8:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9e 83       	std	Y+6, r25	; 0x06
    2fde:	8d 83       	std	Y+5, r24	; 0x05
    2fe0:	0f c0       	rjmp	.+30     	; 0x3000 <main+0xe2a>
    2fe2:	80 e9       	ldi	r24, 0x90	; 144
    2fe4:	91 e0       	ldi	r25, 0x01	; 1
    2fe6:	9c 83       	std	Y+4, r25	; 0x04
    2fe8:	8b 83       	std	Y+3, r24	; 0x03
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	9c 81       	ldd	r25, Y+4	; 0x04
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <main+0xe18>
    2ff2:	9c 83       	std	Y+4, r25	; 0x04
    2ff4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	9e 83       	std	Y+6, r25	; 0x06
    2ffe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3000:	8d 81       	ldd	r24, Y+5	; 0x05
    3002:	9e 81       	ldd	r25, Y+6	; 0x06
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	69 f7       	brne	.-38     	; 0x2fe2 <main+0xe0c>
    3008:	14 c0       	rjmp	.+40     	; 0x3032 <main+0xe5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300a:	6f 81       	ldd	r22, Y+7	; 0x07
    300c:	78 85       	ldd	r23, Y+8	; 0x08
    300e:	89 85       	ldd	r24, Y+9	; 0x09
    3010:	9a 85       	ldd	r25, Y+10	; 0x0a
    3012:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	9e 83       	std	Y+6, r25	; 0x06
    301c:	8d 83       	std	Y+5, r24	; 0x05
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	9e 81       	ldd	r25, Y+6	; 0x06
    3022:	9a 83       	std	Y+2, r25	; 0x02
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <main+0xe54>
    302e:	9a 83       	std	Y+2, r25	; 0x02
    3030:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2000);
				LCD_SendCommand(1);
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_SendCommand>
    3038:	b2 c9       	rjmp	.-3228   	; 0x239e <main+0x1c8>

0000303a <Update_Flexs>:
	return 0;
}
/*-----------------------------------------------------------------------------------------------*/

void Update_Flexs (Letters_and_Words * PTR_Flex)
{
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	00 d0       	rcall	.+0      	; 0x3040 <Update_Flexs+0x6>
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01
	PTR_Flex -> Arr_Flex[0]= ADC_GetResult(0);
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	0e 94 4a 07 	call	0xe94	; 0xe94 <ADC_GetResult>
    304e:	e9 81       	ldd	r30, Y+1	; 0x01
    3050:	fa 81       	ldd	r31, Y+2	; 0x02
    3052:	80 83       	st	Z, r24
	PTR_Flex -> Arr_Flex[1]= ADC_GetResult(1);
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	0e 94 4a 07 	call	0xe94	; 0xe94 <ADC_GetResult>
    305a:	e9 81       	ldd	r30, Y+1	; 0x01
    305c:	fa 81       	ldd	r31, Y+2	; 0x02
    305e:	81 83       	std	Z+1, r24	; 0x01
	PTR_Flex -> Arr_Flex[2]= ADC_GetResult(2);
    3060:	82 e0       	ldi	r24, 0x02	; 2
    3062:	0e 94 4a 07 	call	0xe94	; 0xe94 <ADC_GetResult>
    3066:	e9 81       	ldd	r30, Y+1	; 0x01
    3068:	fa 81       	ldd	r31, Y+2	; 0x02
    306a:	82 83       	std	Z+2, r24	; 0x02
	PTR_Flex -> Arr_Flex[3]= ADC_GetResult(3);
    306c:	83 e0       	ldi	r24, 0x03	; 3
    306e:	0e 94 4a 07 	call	0xe94	; 0xe94 <ADC_GetResult>
    3072:	e9 81       	ldd	r30, Y+1	; 0x01
    3074:	fa 81       	ldd	r31, Y+2	; 0x02
    3076:	83 83       	std	Z+3, r24	; 0x03
	PTR_Flex -> Arr_Flex[4]= ADC_GetResult(4);
    3078:	84 e0       	ldi	r24, 0x04	; 4
    307a:	0e 94 4a 07 	call	0xe94	; 0xe94 <ADC_GetResult>
    307e:	e9 81       	ldd	r30, Y+1	; 0x01
    3080:	fa 81       	ldd	r31, Y+2	; 0x02
    3082:	84 83       	std	Z+4, r24	; 0x04
	PTR_Flex -> Arr_Flex[5]= ADC_GetResult(5);
    3084:	85 e0       	ldi	r24, 0x05	; 5
    3086:	0e 94 4a 07 	call	0xe94	; 0xe94 <ADC_GetResult>
    308a:	e9 81       	ldd	r30, Y+1	; 0x01
    308c:	fa 81       	ldd	r31, Y+2	; 0x02
    308e:	85 83       	std	Z+5, r24	; 0x05
	PTR_Flex -> Arr_Flex[6]= ADC_GetResult(6);
    3090:	86 e0       	ldi	r24, 0x06	; 6
    3092:	0e 94 4a 07 	call	0xe94	; 0xe94 <ADC_GetResult>
    3096:	e9 81       	ldd	r30, Y+1	; 0x01
    3098:	fa 81       	ldd	r31, Y+2	; 0x02
    309a:	86 83       	std	Z+6, r24	; 0x06
}
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <Accelerometor_init>:
/*---------------------------------------------------------------*/
void Accelerometor_init(ADX345_PowerModes Mode , ADXL345_Address EFF_Address)
{
    30a6:	df 93       	push	r29
    30a8:	cf 93       	push	r28
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <Accelerometor_init+0x6>
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	89 83       	std	Y+1, r24	; 0x01
    30b2:	6a 83       	std	Y+2, r22	; 0x02
	I2C_ByteWrite(EFF_Address,POWER_CTRL,Mode);
    30b4:	8a 81       	ldd	r24, Y+2	; 0x02
    30b6:	6d e2       	ldi	r22, 0x2D	; 45
    30b8:	49 81       	ldd	r20, Y+1	; 0x01
    30ba:	0e 94 65 0a 	call	0x14ca	; 0x14ca <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0x0B);
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	61 e3       	ldi	r22, 0x31	; 49
    30c2:	4b e0       	ldi	r20, 0x0B	; 11
    30c4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSX,-1);
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	6e e1       	ldi	r22, 0x1E	; 30
    30cc:	4f ef       	ldi	r20, 0xFF	; 255
    30ce:	0e 94 65 0a 	call	0x14ca	; 0x14ca <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSY,0);
    30d2:	8a 81       	ldd	r24, Y+2	; 0x02
    30d4:	6f e1       	ldi	r22, 0x1F	; 31
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	0e 94 65 0a 	call	0x14ca	; 0x14ca <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSZ,-1);
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	60 e2       	ldi	r22, 0x20	; 32
    30e0:	4f ef       	ldi	r20, 0xFF	; 255
    30e2:	0e 94 65 0a 	call	0x14ca	; 0x14ca <I2C_ByteWrite>
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0);
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,8);
}
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <Update_Accelerometor_Axis>:
/*---------------------------------------------------------------------------------------*/

void Update_Accelerometor_Axis(ADXL345_Address EFF_Address , Letters_and_Words * Data_ptr)
{
    30f0:	0f 93       	push	r16
    30f2:	1f 93       	push	r17
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	cd 55       	subi	r28, 0x5D	; 93
    30fe:	d0 40       	sbci	r29, 0x00	; 0
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	fe 01       	movw	r30, r28
    310c:	e5 5a       	subi	r30, 0xA5	; 165
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	80 83       	st	Z, r24
    3112:	fe 01       	movw	r30, r28
    3114:	e4 5a       	subi	r30, 0xA4	; 164
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	71 83       	std	Z+1, r23	; 0x01
    311a:	60 83       	st	Z, r22

	uint16 X_Axis_Read;
	uint16 Y_Axis_Read;
	uint16 Z_Axis_Read;

	X_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX0);
    311c:	fe 01       	movw	r30, r28
    311e:	e5 5a       	subi	r30, 0xA5	; 165
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	62 e3       	ldi	r22, 0x32	; 50
    3126:	0e 94 82 0a 	call	0x1504	; 0x1504 <I2C_ByteRead>
    312a:	fe 01       	movw	r30, r28
    312c:	e7 5a       	subi	r30, 0xA7	; 167
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	88 2f       	mov	r24, r24
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	80 83       	st	Z, r24
    3138:	fe 01       	movw	r30, r28
    313a:	ef 5a       	subi	r30, 0xAF	; 175
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	a0 e8       	ldi	r26, 0x80	; 128
    3144:	bf e3       	ldi	r27, 0x3F	; 63
    3146:	80 83       	st	Z, r24
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	a2 83       	std	Z+2, r26	; 0x02
    314c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314e:	8e 01       	movw	r16, r28
    3150:	03 5b       	subi	r16, 0xB3	; 179
    3152:	1f 4f       	sbci	r17, 0xFF	; 255
    3154:	fe 01       	movw	r30, r28
    3156:	ef 5a       	subi	r30, 0xAF	; 175
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	60 81       	ld	r22, Z
    315c:	71 81       	ldd	r23, Z+1	; 0x01
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	93 81       	ldd	r25, Z+3	; 0x03
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	4a e7       	ldi	r20, 0x7A	; 122
    3168:	55 e4       	ldi	r21, 0x45	; 69
    316a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	f8 01       	movw	r30, r16
    3174:	80 83       	st	Z, r24
    3176:	91 83       	std	Z+1, r25	; 0x01
    3178:	a2 83       	std	Z+2, r26	; 0x02
    317a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    317c:	fe 01       	movw	r30, r28
    317e:	e3 5b       	subi	r30, 0xB3	; 179
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	60 81       	ld	r22, Z
    3184:	71 81       	ldd	r23, Z+1	; 0x01
    3186:	82 81       	ldd	r24, Z+2	; 0x02
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e8       	ldi	r20, 0x80	; 128
    3190:	5f e3       	ldi	r21, 0x3F	; 63
    3192:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    3196:	88 23       	and	r24, r24
    3198:	44 f4       	brge	.+16     	; 0x31aa <Update_Accelerometor_Axis+0xba>
		__ticks = 1;
    319a:	fe 01       	movw	r30, r28
    319c:	e5 5b       	subi	r30, 0xB5	; 181
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	80 83       	st	Z, r24
    31a8:	64 c0       	rjmp	.+200    	; 0x3272 <Update_Accelerometor_Axis+0x182>
	else if (__tmp > 65535)
    31aa:	fe 01       	movw	r30, r28
    31ac:	e3 5b       	subi	r30, 0xB3	; 179
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	60 81       	ld	r22, Z
    31b2:	71 81       	ldd	r23, Z+1	; 0x01
    31b4:	82 81       	ldd	r24, Z+2	; 0x02
    31b6:	93 81       	ldd	r25, Z+3	; 0x03
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	3f ef       	ldi	r19, 0xFF	; 255
    31bc:	4f e7       	ldi	r20, 0x7F	; 127
    31be:	57 e4       	ldi	r21, 0x47	; 71
    31c0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    31c4:	18 16       	cp	r1, r24
    31c6:	0c f0       	brlt	.+2      	; 0x31ca <Update_Accelerometor_Axis+0xda>
    31c8:	43 c0       	rjmp	.+134    	; 0x3250 <Update_Accelerometor_Axis+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ca:	fe 01       	movw	r30, r28
    31cc:	ef 5a       	subi	r30, 0xAF	; 175
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	60 81       	ld	r22, Z
    31d2:	71 81       	ldd	r23, Z+1	; 0x01
    31d4:	82 81       	ldd	r24, Z+2	; 0x02
    31d6:	93 81       	ldd	r25, Z+3	; 0x03
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	40 e2       	ldi	r20, 0x20	; 32
    31de:	51 e4       	ldi	r21, 0x41	; 65
    31e0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	8e 01       	movw	r16, r28
    31ea:	05 5b       	subi	r16, 0xB5	; 181
    31ec:	1f 4f       	sbci	r17, 0xFF	; 255
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	f8 01       	movw	r30, r16
    31fc:	91 83       	std	Z+1, r25	; 0x01
    31fe:	80 83       	st	Z, r24
    3200:	1f c0       	rjmp	.+62     	; 0x3240 <Update_Accelerometor_Axis+0x150>
    3202:	fe 01       	movw	r30, r28
    3204:	e7 5b       	subi	r30, 0xB7	; 183
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	80 e9       	ldi	r24, 0x90	; 144
    320a:	91 e0       	ldi	r25, 0x01	; 1
    320c:	91 83       	std	Z+1, r25	; 0x01
    320e:	80 83       	st	Z, r24
    3210:	fe 01       	movw	r30, r28
    3212:	e7 5b       	subi	r30, 0xB7	; 183
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	80 81       	ld	r24, Z
    3218:	91 81       	ldd	r25, Z+1	; 0x01
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	f1 f7       	brne	.-4      	; 0x321a <Update_Accelerometor_Axis+0x12a>
    321e:	fe 01       	movw	r30, r28
    3220:	e7 5b       	subi	r30, 0xB7	; 183
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	91 83       	std	Z+1, r25	; 0x01
    3226:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3228:	de 01       	movw	r26, r28
    322a:	a5 5b       	subi	r26, 0xB5	; 181
    322c:	bf 4f       	sbci	r27, 0xFF	; 255
    322e:	fe 01       	movw	r30, r28
    3230:	e5 5b       	subi	r30, 0xB5	; 181
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 81       	ld	r24, Z
    3236:	91 81       	ldd	r25, Z+1	; 0x01
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	11 96       	adiw	r26, 0x01	; 1
    323c:	9c 93       	st	X, r25
    323e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3240:	fe 01       	movw	r30, r28
    3242:	e5 5b       	subi	r30, 0xB5	; 181
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	80 81       	ld	r24, Z
    3248:	91 81       	ldd	r25, Z+1	; 0x01
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	d1 f6       	brne	.-76     	; 0x3202 <Update_Accelerometor_Axis+0x112>
    324e:	27 c0       	rjmp	.+78     	; 0x329e <Update_Accelerometor_Axis+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3250:	8e 01       	movw	r16, r28
    3252:	05 5b       	subi	r16, 0xB5	; 181
    3254:	1f 4f       	sbci	r17, 0xFF	; 255
    3256:	fe 01       	movw	r30, r28
    3258:	e3 5b       	subi	r30, 0xB3	; 179
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	60 81       	ld	r22, Z
    325e:	71 81       	ldd	r23, Z+1	; 0x01
    3260:	82 81       	ldd	r24, Z+2	; 0x02
    3262:	93 81       	ldd	r25, Z+3	; 0x03
    3264:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	f8 01       	movw	r30, r16
    326e:	91 83       	std	Z+1, r25	; 0x01
    3270:	80 83       	st	Z, r24
    3272:	de 01       	movw	r26, r28
    3274:	a9 5b       	subi	r26, 0xB9	; 185
    3276:	bf 4f       	sbci	r27, 0xFF	; 255
    3278:	fe 01       	movw	r30, r28
    327a:	e5 5b       	subi	r30, 0xB5	; 181
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	80 81       	ld	r24, Z
    3280:	91 81       	ldd	r25, Z+1	; 0x01
    3282:	8d 93       	st	X+, r24
    3284:	9c 93       	st	X, r25
    3286:	fe 01       	movw	r30, r28
    3288:	e9 5b       	subi	r30, 0xB9	; 185
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	80 81       	ld	r24, Z
    328e:	91 81       	ldd	r25, Z+1	; 0x01
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	f1 f7       	brne	.-4      	; 0x3290 <Update_Accelerometor_Axis+0x1a0>
    3294:	fe 01       	movw	r30, r28
    3296:	e9 5b       	subi	r30, 0xB9	; 185
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	91 83       	std	Z+1, r25	; 0x01
    329c:	80 83       	st	Z, r24
	_delay_ms(1);
	X_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX1))<<8;
    329e:	fe 01       	movw	r30, r28
    32a0:	e5 5a       	subi	r30, 0xA5	; 165
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	80 81       	ld	r24, Z
    32a6:	63 e3       	ldi	r22, 0x33	; 51
    32a8:	0e 94 82 0a 	call	0x1504	; 0x1504 <I2C_ByteRead>
    32ac:	88 2f       	mov	r24, r24
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	98 2f       	mov	r25, r24
    32b2:	88 27       	eor	r24, r24
    32b4:	9c 01       	movw	r18, r24
    32b6:	de 01       	movw	r26, r28
    32b8:	a7 5a       	subi	r26, 0xA7	; 167
    32ba:	bf 4f       	sbci	r27, 0xFF	; 255
    32bc:	fe 01       	movw	r30, r28
    32be:	e7 5a       	subi	r30, 0xA7	; 167
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	80 81       	ld	r24, Z
    32c4:	91 81       	ldd	r25, Z+1	; 0x01
    32c6:	82 2b       	or	r24, r18
    32c8:	93 2b       	or	r25, r19
    32ca:	8d 93       	st	X+, r24
    32cc:	9c 93       	st	X, r25
    32ce:	fe 01       	movw	r30, r28
    32d0:	ed 5b       	subi	r30, 0xBD	; 189
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	a0 e8       	ldi	r26, 0x80	; 128
    32da:	bf e3       	ldi	r27, 0x3F	; 63
    32dc:	80 83       	st	Z, r24
    32de:	91 83       	std	Z+1, r25	; 0x01
    32e0:	a2 83       	std	Z+2, r26	; 0x02
    32e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e4:	8e 01       	movw	r16, r28
    32e6:	01 5c       	subi	r16, 0xC1	; 193
    32e8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ea:	fe 01       	movw	r30, r28
    32ec:	ed 5b       	subi	r30, 0xBD	; 189
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	4a e7       	ldi	r20, 0x7A	; 122
    32fe:	55 e4       	ldi	r21, 0x45	; 69
    3300:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	f8 01       	movw	r30, r16
    330a:	80 83       	st	Z, r24
    330c:	91 83       	std	Z+1, r25	; 0x01
    330e:	a2 83       	std	Z+2, r26	; 0x02
    3310:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3312:	fe 01       	movw	r30, r28
    3314:	ff 96       	adiw	r30, 0x3f	; 63
    3316:	60 81       	ld	r22, Z
    3318:	71 81       	ldd	r23, Z+1	; 0x01
    331a:	82 81       	ldd	r24, Z+2	; 0x02
    331c:	93 81       	ldd	r25, Z+3	; 0x03
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	40 e8       	ldi	r20, 0x80	; 128
    3324:	5f e3       	ldi	r21, 0x3F	; 63
    3326:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    332a:	88 23       	and	r24, r24
    332c:	2c f4       	brge	.+10     	; 0x3338 <Update_Accelerometor_Axis+0x248>
		__ticks = 1;
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	9e af       	std	Y+62, r25	; 0x3e
    3334:	8d af       	std	Y+61, r24	; 0x3d
    3336:	46 c0       	rjmp	.+140    	; 0x33c4 <Update_Accelerometor_Axis+0x2d4>
	else if (__tmp > 65535)
    3338:	fe 01       	movw	r30, r28
    333a:	ff 96       	adiw	r30, 0x3f	; 63
    333c:	60 81       	ld	r22, Z
    333e:	71 81       	ldd	r23, Z+1	; 0x01
    3340:	82 81       	ldd	r24, Z+2	; 0x02
    3342:	93 81       	ldd	r25, Z+3	; 0x03
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	64 f5       	brge	.+88     	; 0x33ac <Update_Accelerometor_Axis+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3354:	fe 01       	movw	r30, r28
    3356:	ed 5b       	subi	r30, 0xBD	; 189
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	60 81       	ld	r22, Z
    335c:	71 81       	ldd	r23, Z+1	; 0x01
    335e:	82 81       	ldd	r24, Z+2	; 0x02
    3360:	93 81       	ldd	r25, Z+3	; 0x03
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e2       	ldi	r20, 0x20	; 32
    3368:	51 e4       	ldi	r21, 0x41	; 65
    336a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	bc 01       	movw	r22, r24
    3374:	cd 01       	movw	r24, r26
    3376:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	9e af       	std	Y+62, r25	; 0x3e
    3380:	8d af       	std	Y+61, r24	; 0x3d
    3382:	0f c0       	rjmp	.+30     	; 0x33a2 <Update_Accelerometor_Axis+0x2b2>
    3384:	80 e9       	ldi	r24, 0x90	; 144
    3386:	91 e0       	ldi	r25, 0x01	; 1
    3388:	9c af       	std	Y+60, r25	; 0x3c
    338a:	8b af       	std	Y+59, r24	; 0x3b
    338c:	8b ad       	ldd	r24, Y+59	; 0x3b
    338e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <Update_Accelerometor_Axis+0x2a0>
    3394:	9c af       	std	Y+60, r25	; 0x3c
    3396:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3398:	8d ad       	ldd	r24, Y+61	; 0x3d
    339a:	9e ad       	ldd	r25, Y+62	; 0x3e
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	9e af       	std	Y+62, r25	; 0x3e
    33a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    33a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    33a6:	00 97       	sbiw	r24, 0x00	; 0
    33a8:	69 f7       	brne	.-38     	; 0x3384 <Update_Accelerometor_Axis+0x294>
    33aa:	16 c0       	rjmp	.+44     	; 0x33d8 <Update_Accelerometor_Axis+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ac:	fe 01       	movw	r30, r28
    33ae:	ff 96       	adiw	r30, 0x3f	; 63
    33b0:	60 81       	ld	r22, Z
    33b2:	71 81       	ldd	r23, Z+1	; 0x01
    33b4:	82 81       	ldd	r24, Z+2	; 0x02
    33b6:	93 81       	ldd	r25, Z+3	; 0x03
    33b8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	9e af       	std	Y+62, r25	; 0x3e
    33c2:	8d af       	std	Y+61, r24	; 0x3d
    33c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    33c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    33c8:	9a af       	std	Y+58, r25	; 0x3a
    33ca:	89 af       	std	Y+57, r24	; 0x39
    33cc:	89 ad       	ldd	r24, Y+57	; 0x39
    33ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <Update_Accelerometor_Axis+0x2e0>
    33d4:	9a af       	std	Y+58, r25	; 0x3a
    33d6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	Y_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY0);
    33d8:	fe 01       	movw	r30, r28
    33da:	e5 5a       	subi	r30, 0xA5	; 165
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	80 81       	ld	r24, Z
    33e0:	64 e3       	ldi	r22, 0x34	; 52
    33e2:	0e 94 82 0a 	call	0x1504	; 0x1504 <I2C_ByteRead>
    33e6:	fe 01       	movw	r30, r28
    33e8:	e9 5a       	subi	r30, 0xA9	; 169
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	88 2f       	mov	r24, r24
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	91 83       	std	Z+1, r25	; 0x01
    33f2:	80 83       	st	Z, r24
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	a0 e8       	ldi	r26, 0x80	; 128
    33fa:	bf e3       	ldi	r27, 0x3F	; 63
    33fc:	8d ab       	std	Y+53, r24	; 0x35
    33fe:	9e ab       	std	Y+54, r25	; 0x36
    3400:	af ab       	std	Y+55, r26	; 0x37
    3402:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3404:	6d a9       	ldd	r22, Y+53	; 0x35
    3406:	7e a9       	ldd	r23, Y+54	; 0x36
    3408:	8f a9       	ldd	r24, Y+55	; 0x37
    340a:	98 ad       	ldd	r25, Y+56	; 0x38
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	4a e7       	ldi	r20, 0x7A	; 122
    3412:	55 e4       	ldi	r21, 0x45	; 69
    3414:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	89 ab       	std	Y+49, r24	; 0x31
    341e:	9a ab       	std	Y+50, r25	; 0x32
    3420:	ab ab       	std	Y+51, r26	; 0x33
    3422:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3424:	69 a9       	ldd	r22, Y+49	; 0x31
    3426:	7a a9       	ldd	r23, Y+50	; 0x32
    3428:	8b a9       	ldd	r24, Y+51	; 0x33
    342a:	9c a9       	ldd	r25, Y+52	; 0x34
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	40 e8       	ldi	r20, 0x80	; 128
    3432:	5f e3       	ldi	r21, 0x3F	; 63
    3434:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    3438:	88 23       	and	r24, r24
    343a:	2c f4       	brge	.+10     	; 0x3446 <Update_Accelerometor_Axis+0x356>
		__ticks = 1;
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	98 ab       	std	Y+48, r25	; 0x30
    3442:	8f a7       	std	Y+47, r24	; 0x2f
    3444:	3f c0       	rjmp	.+126    	; 0x34c4 <Update_Accelerometor_Axis+0x3d4>
	else if (__tmp > 65535)
    3446:	69 a9       	ldd	r22, Y+49	; 0x31
    3448:	7a a9       	ldd	r23, Y+50	; 0x32
    344a:	8b a9       	ldd	r24, Y+51	; 0x33
    344c:	9c a9       	ldd	r25, Y+52	; 0x34
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	3f ef       	ldi	r19, 0xFF	; 255
    3452:	4f e7       	ldi	r20, 0x7F	; 127
    3454:	57 e4       	ldi	r21, 0x47	; 71
    3456:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    345a:	18 16       	cp	r1, r24
    345c:	4c f5       	brge	.+82     	; 0x34b0 <Update_Accelerometor_Axis+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345e:	6d a9       	ldd	r22, Y+53	; 0x35
    3460:	7e a9       	ldd	r23, Y+54	; 0x36
    3462:	8f a9       	ldd	r24, Y+55	; 0x37
    3464:	98 ad       	ldd	r25, Y+56	; 0x38
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	40 e2       	ldi	r20, 0x20	; 32
    346c:	51 e4       	ldi	r21, 0x41	; 65
    346e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	bc 01       	movw	r22, r24
    3478:	cd 01       	movw	r24, r26
    347a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	98 ab       	std	Y+48, r25	; 0x30
    3484:	8f a7       	std	Y+47, r24	; 0x2f
    3486:	0f c0       	rjmp	.+30     	; 0x34a6 <Update_Accelerometor_Axis+0x3b6>
    3488:	80 e9       	ldi	r24, 0x90	; 144
    348a:	91 e0       	ldi	r25, 0x01	; 1
    348c:	9e a7       	std	Y+46, r25	; 0x2e
    348e:	8d a7       	std	Y+45, r24	; 0x2d
    3490:	8d a5       	ldd	r24, Y+45	; 0x2d
    3492:	9e a5       	ldd	r25, Y+46	; 0x2e
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	f1 f7       	brne	.-4      	; 0x3494 <Update_Accelerometor_Axis+0x3a4>
    3498:	9e a7       	std	Y+46, r25	; 0x2e
    349a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349c:	8f a5       	ldd	r24, Y+47	; 0x2f
    349e:	98 a9       	ldd	r25, Y+48	; 0x30
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	98 ab       	std	Y+48, r25	; 0x30
    34a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a8:	98 a9       	ldd	r25, Y+48	; 0x30
    34aa:	00 97       	sbiw	r24, 0x00	; 0
    34ac:	69 f7       	brne	.-38     	; 0x3488 <Update_Accelerometor_Axis+0x398>
    34ae:	14 c0       	rjmp	.+40     	; 0x34d8 <Update_Accelerometor_Axis+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b0:	69 a9       	ldd	r22, Y+49	; 0x31
    34b2:	7a a9       	ldd	r23, Y+50	; 0x32
    34b4:	8b a9       	ldd	r24, Y+51	; 0x33
    34b6:	9c a9       	ldd	r25, Y+52	; 0x34
    34b8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	98 ab       	std	Y+48, r25	; 0x30
    34c2:	8f a7       	std	Y+47, r24	; 0x2f
    34c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    34c6:	98 a9       	ldd	r25, Y+48	; 0x30
    34c8:	9c a7       	std	Y+44, r25	; 0x2c
    34ca:	8b a7       	std	Y+43, r24	; 0x2b
    34cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    34ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    34d0:	01 97       	sbiw	r24, 0x01	; 1
    34d2:	f1 f7       	brne	.-4      	; 0x34d0 <Update_Accelerometor_Axis+0x3e0>
    34d4:	9c a7       	std	Y+44, r25	; 0x2c
    34d6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Y_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY1))<<8;
    34d8:	fe 01       	movw	r30, r28
    34da:	e5 5a       	subi	r30, 0xA5	; 165
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	80 81       	ld	r24, Z
    34e0:	65 e3       	ldi	r22, 0x35	; 53
    34e2:	0e 94 82 0a 	call	0x1504	; 0x1504 <I2C_ByteRead>
    34e6:	88 2f       	mov	r24, r24
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	98 2f       	mov	r25, r24
    34ec:	88 27       	eor	r24, r24
    34ee:	9c 01       	movw	r18, r24
    34f0:	de 01       	movw	r26, r28
    34f2:	a9 5a       	subi	r26, 0xA9	; 169
    34f4:	bf 4f       	sbci	r27, 0xFF	; 255
    34f6:	fe 01       	movw	r30, r28
    34f8:	e9 5a       	subi	r30, 0xA9	; 169
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	80 81       	ld	r24, Z
    34fe:	91 81       	ldd	r25, Z+1	; 0x01
    3500:	82 2b       	or	r24, r18
    3502:	93 2b       	or	r25, r19
    3504:	8d 93       	st	X+, r24
    3506:	9c 93       	st	X, r25
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	a0 e8       	ldi	r26, 0x80	; 128
    350e:	bf e3       	ldi	r27, 0x3F	; 63
    3510:	8f a3       	std	Y+39, r24	; 0x27
    3512:	98 a7       	std	Y+40, r25	; 0x28
    3514:	a9 a7       	std	Y+41, r26	; 0x29
    3516:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3518:	6f a1       	ldd	r22, Y+39	; 0x27
    351a:	78 a5       	ldd	r23, Y+40	; 0x28
    351c:	89 a5       	ldd	r24, Y+41	; 0x29
    351e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	4a e7       	ldi	r20, 0x7A	; 122
    3526:	55 e4       	ldi	r21, 0x45	; 69
    3528:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	8b a3       	std	Y+35, r24	; 0x23
    3532:	9c a3       	std	Y+36, r25	; 0x24
    3534:	ad a3       	std	Y+37, r26	; 0x25
    3536:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3538:	6b a1       	ldd	r22, Y+35	; 0x23
    353a:	7c a1       	ldd	r23, Y+36	; 0x24
    353c:	8d a1       	ldd	r24, Y+37	; 0x25
    353e:	9e a1       	ldd	r25, Y+38	; 0x26
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	40 e8       	ldi	r20, 0x80	; 128
    3546:	5f e3       	ldi	r21, 0x3F	; 63
    3548:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    354c:	88 23       	and	r24, r24
    354e:	2c f4       	brge	.+10     	; 0x355a <Update_Accelerometor_Axis+0x46a>
		__ticks = 1;
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	9a a3       	std	Y+34, r25	; 0x22
    3556:	89 a3       	std	Y+33, r24	; 0x21
    3558:	3f c0       	rjmp	.+126    	; 0x35d8 <Update_Accelerometor_Axis+0x4e8>
	else if (__tmp > 65535)
    355a:	6b a1       	ldd	r22, Y+35	; 0x23
    355c:	7c a1       	ldd	r23, Y+36	; 0x24
    355e:	8d a1       	ldd	r24, Y+37	; 0x25
    3560:	9e a1       	ldd	r25, Y+38	; 0x26
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	3f ef       	ldi	r19, 0xFF	; 255
    3566:	4f e7       	ldi	r20, 0x7F	; 127
    3568:	57 e4       	ldi	r21, 0x47	; 71
    356a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    356e:	18 16       	cp	r1, r24
    3570:	4c f5       	brge	.+82     	; 0x35c4 <Update_Accelerometor_Axis+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3572:	6f a1       	ldd	r22, Y+39	; 0x27
    3574:	78 a5       	ldd	r23, Y+40	; 0x28
    3576:	89 a5       	ldd	r24, Y+41	; 0x29
    3578:	9a a5       	ldd	r25, Y+42	; 0x2a
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	40 e2       	ldi	r20, 0x20	; 32
    3580:	51 e4       	ldi	r21, 0x41	; 65
    3582:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	bc 01       	movw	r22, r24
    358c:	cd 01       	movw	r24, r26
    358e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	9a a3       	std	Y+34, r25	; 0x22
    3598:	89 a3       	std	Y+33, r24	; 0x21
    359a:	0f c0       	rjmp	.+30     	; 0x35ba <Update_Accelerometor_Axis+0x4ca>
    359c:	80 e9       	ldi	r24, 0x90	; 144
    359e:	91 e0       	ldi	r25, 0x01	; 1
    35a0:	98 a3       	std	Y+32, r25	; 0x20
    35a2:	8f 8f       	std	Y+31, r24	; 0x1f
    35a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35a6:	98 a1       	ldd	r25, Y+32	; 0x20
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <Update_Accelerometor_Axis+0x4b8>
    35ac:	98 a3       	std	Y+32, r25	; 0x20
    35ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b0:	89 a1       	ldd	r24, Y+33	; 0x21
    35b2:	9a a1       	ldd	r25, Y+34	; 0x22
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	9a a3       	std	Y+34, r25	; 0x22
    35b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ba:	89 a1       	ldd	r24, Y+33	; 0x21
    35bc:	9a a1       	ldd	r25, Y+34	; 0x22
    35be:	00 97       	sbiw	r24, 0x00	; 0
    35c0:	69 f7       	brne	.-38     	; 0x359c <Update_Accelerometor_Axis+0x4ac>
    35c2:	14 c0       	rjmp	.+40     	; 0x35ec <Update_Accelerometor_Axis+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c4:	6b a1       	ldd	r22, Y+35	; 0x23
    35c6:	7c a1       	ldd	r23, Y+36	; 0x24
    35c8:	8d a1       	ldd	r24, Y+37	; 0x25
    35ca:	9e a1       	ldd	r25, Y+38	; 0x26
    35cc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	9a a3       	std	Y+34, r25	; 0x22
    35d6:	89 a3       	std	Y+33, r24	; 0x21
    35d8:	89 a1       	ldd	r24, Y+33	; 0x21
    35da:	9a a1       	ldd	r25, Y+34	; 0x22
    35dc:	9e 8f       	std	Y+30, r25	; 0x1e
    35de:	8d 8f       	std	Y+29, r24	; 0x1d
    35e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	f1 f7       	brne	.-4      	; 0x35e4 <Update_Accelerometor_Axis+0x4f4>
    35e8:	9e 8f       	std	Y+30, r25	; 0x1e
    35ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Z_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ0);
    35ec:	fe 01       	movw	r30, r28
    35ee:	e5 5a       	subi	r30, 0xA5	; 165
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	80 81       	ld	r24, Z
    35f4:	66 e3       	ldi	r22, 0x36	; 54
    35f6:	0e 94 82 0a 	call	0x1504	; 0x1504 <I2C_ByteRead>
    35fa:	fe 01       	movw	r30, r28
    35fc:	eb 5a       	subi	r30, 0xAB	; 171
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	88 2f       	mov	r24, r24
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	91 83       	std	Z+1, r25	; 0x01
    3606:	80 83       	st	Z, r24
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	a0 e8       	ldi	r26, 0x80	; 128
    360e:	bf e3       	ldi	r27, 0x3F	; 63
    3610:	89 8f       	std	Y+25, r24	; 0x19
    3612:	9a 8f       	std	Y+26, r25	; 0x1a
    3614:	ab 8f       	std	Y+27, r26	; 0x1b
    3616:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3618:	69 8d       	ldd	r22, Y+25	; 0x19
    361a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    361c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    361e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	4a e7       	ldi	r20, 0x7A	; 122
    3626:	55 e4       	ldi	r21, 0x45	; 69
    3628:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	8d 8b       	std	Y+21, r24	; 0x15
    3632:	9e 8b       	std	Y+22, r25	; 0x16
    3634:	af 8b       	std	Y+23, r26	; 0x17
    3636:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3638:	6d 89       	ldd	r22, Y+21	; 0x15
    363a:	7e 89       	ldd	r23, Y+22	; 0x16
    363c:	8f 89       	ldd	r24, Y+23	; 0x17
    363e:	98 8d       	ldd	r25, Y+24	; 0x18
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e8       	ldi	r20, 0x80	; 128
    3646:	5f e3       	ldi	r21, 0x3F	; 63
    3648:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    364c:	88 23       	and	r24, r24
    364e:	2c f4       	brge	.+10     	; 0x365a <Update_Accelerometor_Axis+0x56a>
		__ticks = 1;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	9c 8b       	std	Y+20, r25	; 0x14
    3656:	8b 8b       	std	Y+19, r24	; 0x13
    3658:	3f c0       	rjmp	.+126    	; 0x36d8 <Update_Accelerometor_Axis+0x5e8>
	else if (__tmp > 65535)
    365a:	6d 89       	ldd	r22, Y+21	; 0x15
    365c:	7e 89       	ldd	r23, Y+22	; 0x16
    365e:	8f 89       	ldd	r24, Y+23	; 0x17
    3660:	98 8d       	ldd	r25, Y+24	; 0x18
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	3f ef       	ldi	r19, 0xFF	; 255
    3666:	4f e7       	ldi	r20, 0x7F	; 127
    3668:	57 e4       	ldi	r21, 0x47	; 71
    366a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    366e:	18 16       	cp	r1, r24
    3670:	4c f5       	brge	.+82     	; 0x36c4 <Update_Accelerometor_Axis+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3672:	69 8d       	ldd	r22, Y+25	; 0x19
    3674:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e2       	ldi	r20, 0x20	; 32
    3680:	51 e4       	ldi	r21, 0x41	; 65
    3682:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	9c 8b       	std	Y+20, r25	; 0x14
    3698:	8b 8b       	std	Y+19, r24	; 0x13
    369a:	0f c0       	rjmp	.+30     	; 0x36ba <Update_Accelerometor_Axis+0x5ca>
    369c:	80 e9       	ldi	r24, 0x90	; 144
    369e:	91 e0       	ldi	r25, 0x01	; 1
    36a0:	9a 8b       	std	Y+18, r25	; 0x12
    36a2:	89 8b       	std	Y+17, r24	; 0x11
    36a4:	89 89       	ldd	r24, Y+17	; 0x11
    36a6:	9a 89       	ldd	r25, Y+18	; 0x12
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	f1 f7       	brne	.-4      	; 0x36a8 <Update_Accelerometor_Axis+0x5b8>
    36ac:	9a 8b       	std	Y+18, r25	; 0x12
    36ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b0:	8b 89       	ldd	r24, Y+19	; 0x13
    36b2:	9c 89       	ldd	r25, Y+20	; 0x14
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	9c 8b       	std	Y+20, r25	; 0x14
    36b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ba:	8b 89       	ldd	r24, Y+19	; 0x13
    36bc:	9c 89       	ldd	r25, Y+20	; 0x14
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	69 f7       	brne	.-38     	; 0x369c <Update_Accelerometor_Axis+0x5ac>
    36c2:	14 c0       	rjmp	.+40     	; 0x36ec <Update_Accelerometor_Axis+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c4:	6d 89       	ldd	r22, Y+21	; 0x15
    36c6:	7e 89       	ldd	r23, Y+22	; 0x16
    36c8:	8f 89       	ldd	r24, Y+23	; 0x17
    36ca:	98 8d       	ldd	r25, Y+24	; 0x18
    36cc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	9c 8b       	std	Y+20, r25	; 0x14
    36d6:	8b 8b       	std	Y+19, r24	; 0x13
    36d8:	8b 89       	ldd	r24, Y+19	; 0x13
    36da:	9c 89       	ldd	r25, Y+20	; 0x14
    36dc:	98 8b       	std	Y+16, r25	; 0x10
    36de:	8f 87       	std	Y+15, r24	; 0x0f
    36e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    36e2:	98 89       	ldd	r25, Y+16	; 0x10
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <Update_Accelerometor_Axis+0x5f4>
    36e8:	98 8b       	std	Y+16, r25	; 0x10
    36ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Z_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ1))<<8;
    36ec:	fe 01       	movw	r30, r28
    36ee:	e5 5a       	subi	r30, 0xA5	; 165
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	80 81       	ld	r24, Z
    36f4:	67 e3       	ldi	r22, 0x37	; 55
    36f6:	0e 94 82 0a 	call	0x1504	; 0x1504 <I2C_ByteRead>
    36fa:	88 2f       	mov	r24, r24
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	98 2f       	mov	r25, r24
    3700:	88 27       	eor	r24, r24
    3702:	9c 01       	movw	r18, r24
    3704:	de 01       	movw	r26, r28
    3706:	ab 5a       	subi	r26, 0xAB	; 171
    3708:	bf 4f       	sbci	r27, 0xFF	; 255
    370a:	fe 01       	movw	r30, r28
    370c:	eb 5a       	subi	r30, 0xAB	; 171
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	80 81       	ld	r24, Z
    3712:	91 81       	ldd	r25, Z+1	; 0x01
    3714:	82 2b       	or	r24, r18
    3716:	93 2b       	or	r25, r19
    3718:	8d 93       	st	X+, r24
    371a:	9c 93       	st	X, r25
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	a0 e8       	ldi	r26, 0x80	; 128
    3722:	bf e3       	ldi	r27, 0x3F	; 63
    3724:	8b 87       	std	Y+11, r24	; 0x0b
    3726:	9c 87       	std	Y+12, r25	; 0x0c
    3728:	ad 87       	std	Y+13, r26	; 0x0d
    372a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372c:	6b 85       	ldd	r22, Y+11	; 0x0b
    372e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3730:	8d 85       	ldd	r24, Y+13	; 0x0d
    3732:	9e 85       	ldd	r25, Y+14	; 0x0e
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	4a e7       	ldi	r20, 0x7A	; 122
    373a:	55 e4       	ldi	r21, 0x45	; 69
    373c:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	8f 83       	std	Y+7, r24	; 0x07
    3746:	98 87       	std	Y+8, r25	; 0x08
    3748:	a9 87       	std	Y+9, r26	; 0x09
    374a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    374c:	6f 81       	ldd	r22, Y+7	; 0x07
    374e:	78 85       	ldd	r23, Y+8	; 0x08
    3750:	89 85       	ldd	r24, Y+9	; 0x09
    3752:	9a 85       	ldd	r25, Y+10	; 0x0a
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e8       	ldi	r20, 0x80	; 128
    375a:	5f e3       	ldi	r21, 0x3F	; 63
    375c:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    3760:	88 23       	and	r24, r24
    3762:	2c f4       	brge	.+10     	; 0x376e <Update_Accelerometor_Axis+0x67e>
		__ticks = 1;
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	9e 83       	std	Y+6, r25	; 0x06
    376a:	8d 83       	std	Y+5, r24	; 0x05
    376c:	3f c0       	rjmp	.+126    	; 0x37ec <Update_Accelerometor_Axis+0x6fc>
	else if (__tmp > 65535)
    376e:	6f 81       	ldd	r22, Y+7	; 0x07
    3770:	78 85       	ldd	r23, Y+8	; 0x08
    3772:	89 85       	ldd	r24, Y+9	; 0x09
    3774:	9a 85       	ldd	r25, Y+10	; 0x0a
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	3f ef       	ldi	r19, 0xFF	; 255
    377a:	4f e7       	ldi	r20, 0x7F	; 127
    377c:	57 e4       	ldi	r21, 0x47	; 71
    377e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    3782:	18 16       	cp	r1, r24
    3784:	4c f5       	brge	.+82     	; 0x37d8 <Update_Accelerometor_Axis+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3786:	6b 85       	ldd	r22, Y+11	; 0x0b
    3788:	7c 85       	ldd	r23, Y+12	; 0x0c
    378a:	8d 85       	ldd	r24, Y+13	; 0x0d
    378c:	9e 85       	ldd	r25, Y+14	; 0x0e
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e2       	ldi	r20, 0x20	; 32
    3794:	51 e4       	ldi	r21, 0x41	; 65
    3796:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	bc 01       	movw	r22, r24
    37a0:	cd 01       	movw	r24, r26
    37a2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	9e 83       	std	Y+6, r25	; 0x06
    37ac:	8d 83       	std	Y+5, r24	; 0x05
    37ae:	0f c0       	rjmp	.+30     	; 0x37ce <Update_Accelerometor_Axis+0x6de>
    37b0:	80 e9       	ldi	r24, 0x90	; 144
    37b2:	91 e0       	ldi	r25, 0x01	; 1
    37b4:	9c 83       	std	Y+4, r25	; 0x04
    37b6:	8b 83       	std	Y+3, r24	; 0x03
    37b8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ba:	9c 81       	ldd	r25, Y+4	; 0x04
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <Update_Accelerometor_Axis+0x6cc>
    37c0:	9c 83       	std	Y+4, r25	; 0x04
    37c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c4:	8d 81       	ldd	r24, Y+5	; 0x05
    37c6:	9e 81       	ldd	r25, Y+6	; 0x06
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	9e 83       	std	Y+6, r25	; 0x06
    37cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ce:	8d 81       	ldd	r24, Y+5	; 0x05
    37d0:	9e 81       	ldd	r25, Y+6	; 0x06
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	69 f7       	brne	.-38     	; 0x37b0 <Update_Accelerometor_Axis+0x6c0>
    37d6:	14 c0       	rjmp	.+40     	; 0x3800 <Update_Accelerometor_Axis+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d8:	6f 81       	ldd	r22, Y+7	; 0x07
    37da:	78 85       	ldd	r23, Y+8	; 0x08
    37dc:	89 85       	ldd	r24, Y+9	; 0x09
    37de:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e0:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9e 83       	std	Y+6, r25	; 0x06
    37ea:	8d 83       	std	Y+5, r24	; 0x05
    37ec:	8d 81       	ldd	r24, Y+5	; 0x05
    37ee:	9e 81       	ldd	r25, Y+6	; 0x06
    37f0:	9a 83       	std	Y+2, r25	; 0x02
    37f2:	89 83       	std	Y+1, r24	; 0x01
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	9a 81       	ldd	r25, Y+2	; 0x02
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <Update_Accelerometor_Axis+0x708>
    37fc:	9a 83       	std	Y+2, r25	; 0x02
    37fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	Data_ptr ->X_Axis= (X_Axis_Read);
    3800:	fe 01       	movw	r30, r28
    3802:	e7 5a       	subi	r30, 0xA7	; 167
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	80 81       	ld	r24, Z
    3808:	91 81       	ldd	r25, Z+1	; 0x01
    380a:	cc 01       	movw	r24, r24
    380c:	a0 e0       	ldi	r26, 0x00	; 0
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	bc 01       	movw	r22, r24
    3812:	cd 01       	movw	r24, r26
    3814:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    3818:	dc 01       	movw	r26, r24
    381a:	cb 01       	movw	r24, r22
    381c:	fe 01       	movw	r30, r28
    381e:	e4 5a       	subi	r30, 0xA4	; 164
    3820:	ff 4f       	sbci	r31, 0xFF	; 255
    3822:	01 90       	ld	r0, Z+
    3824:	f0 81       	ld	r31, Z
    3826:	e0 2d       	mov	r30, r0
    3828:	87 83       	std	Z+7, r24	; 0x07
    382a:	90 87       	std	Z+8, r25	; 0x08
    382c:	a1 87       	std	Z+9, r26	; 0x09
    382e:	b2 87       	std	Z+10, r27	; 0x0a
	Data_ptr ->Y_Axis= (Y_Axis_Read);
    3830:	fe 01       	movw	r30, r28
    3832:	e9 5a       	subi	r30, 0xA9	; 169
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	80 81       	ld	r24, Z
    3838:	91 81       	ldd	r25, Z+1	; 0x01
    383a:	cc 01       	movw	r24, r24
    383c:	a0 e0       	ldi	r26, 0x00	; 0
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	bc 01       	movw	r22, r24
    3842:	cd 01       	movw	r24, r26
    3844:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	fe 01       	movw	r30, r28
    384e:	e4 5a       	subi	r30, 0xA4	; 164
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	01 90       	ld	r0, Z+
    3854:	f0 81       	ld	r31, Z
    3856:	e0 2d       	mov	r30, r0
    3858:	83 87       	std	Z+11, r24	; 0x0b
    385a:	94 87       	std	Z+12, r25	; 0x0c
    385c:	a5 87       	std	Z+13, r26	; 0x0d
    385e:	b6 87       	std	Z+14, r27	; 0x0e
	Data_ptr ->Z_Axis= (Z_Axis_Read);
    3860:	fe 01       	movw	r30, r28
    3862:	eb 5a       	subi	r30, 0xAB	; 171
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	80 81       	ld	r24, Z
    3868:	91 81       	ldd	r25, Z+1	; 0x01
    386a:	cc 01       	movw	r24, r24
    386c:	a0 e0       	ldi	r26, 0x00	; 0
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	bc 01       	movw	r22, r24
    3872:	cd 01       	movw	r24, r26
    3874:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	fe 01       	movw	r30, r28
    387e:	e4 5a       	subi	r30, 0xA4	; 164
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	01 90       	ld	r0, Z+
    3884:	f0 81       	ld	r31, Z
    3886:	e0 2d       	mov	r30, r0
    3888:	87 87       	std	Z+15, r24	; 0x0f
    388a:	90 8b       	std	Z+16, r25	; 0x10
    388c:	a1 8b       	std	Z+17, r26	; 0x11
    388e:	b2 8b       	std	Z+18, r27	; 0x12
}
    3890:	c3 5a       	subi	r28, 0xA3	; 163
    3892:	df 4f       	sbci	r29, 0xFF	; 255
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	f8 94       	cli
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	0f be       	out	0x3f, r0	; 63
    389c:	cd bf       	out	0x3d, r28	; 61
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	1f 91       	pop	r17
    38a4:	0f 91       	pop	r16
    38a6:	08 95       	ret

000038a8 <Compare_Data>:
/*-----------------------------------------------------------------------------*/

u8  Compare_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data)
{
    38a8:	ef 92       	push	r14
    38aa:	ff 92       	push	r15
    38ac:	0f 93       	push	r16
    38ae:	1f 93       	push	r17
    38b0:	df 93       	push	r29
    38b2:	cf 93       	push	r28
    38b4:	cd b7       	in	r28, 0x3d	; 61
    38b6:	de b7       	in	r29, 0x3e	; 62
    38b8:	27 97       	sbiw	r28, 0x07	; 7
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	f8 94       	cli
    38be:	de bf       	out	0x3e, r29	; 62
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	cd bf       	out	0x3d, r28	; 61
    38c4:	9c 83       	std	Y+4, r25	; 0x04
    38c6:	8b 83       	std	Y+3, r24	; 0x03
    38c8:	7e 83       	std	Y+6, r23	; 0x06
    38ca:	6d 83       	std	Y+5, r22	; 0x05
	u8 ArrFlex_Counter;
	u8 ArrStruct_Counter;
	Word_index=0;
    38cc:	10 92 37 03 	sts	0x0337, r1
	for (ArrStruct_Counter= 0; ArrStruct_Counter < NumberOfStoredWords; ArrStruct_Counter++)
    38d0:	19 82       	std	Y+1, r1	; 0x01
    38d2:	08 c2       	rjmp	.+1040   	; 0x3ce4 <Compare_Data+0x43c>
	{
		for (ArrFlex_Counter= 0; ArrFlex_Counter < NumberOfFlexs; ArrFlex_Counter++)
    38d4:	1a 82       	std	Y+2, r1	; 0x02
    38d6:	ff c1       	rjmp	.+1022   	; 0x3cd6 <Compare_Data+0x42e>
			{
				if ( abs( Ptr_Sensor_Readings-> Arr_Flex[ArrFlex_Counter] - Ptr_Stored_Data[ArrStruct_Counter]. Arr_Flex[ArrFlex_Counter] ) <= Flex_Tolerance )
    38d8:	8a 81       	ldd	r24, Y+2	; 0x02
    38da:	28 2f       	mov	r18, r24
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	8b 81       	ldd	r24, Y+3	; 0x03
    38e0:	9c 81       	ldd	r25, Y+4	; 0x04
    38e2:	fc 01       	movw	r30, r24
    38e4:	e2 0f       	add	r30, r18
    38e6:	f3 1f       	adc	r31, r19
    38e8:	80 81       	ld	r24, Z
    38ea:	68 2f       	mov	r22, r24
    38ec:	70 e0       	ldi	r23, 0x00	; 0
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	48 2f       	mov	r20, r24
    38f2:	50 e0       	ldi	r21, 0x00	; 0
    38f4:	ca 01       	movw	r24, r20
    38f6:	88 0f       	add	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	9c 01       	movw	r18, r24
    38fc:	22 0f       	add	r18, r18
    38fe:	33 1f       	adc	r19, r19
    3900:	22 0f       	add	r18, r18
    3902:	33 1f       	adc	r19, r19
    3904:	22 0f       	add	r18, r18
    3906:	33 1f       	adc	r19, r19
    3908:	82 0f       	add	r24, r18
    390a:	93 1f       	adc	r25, r19
    390c:	9c 01       	movw	r18, r24
    390e:	24 0f       	add	r18, r20
    3910:	35 1f       	adc	r19, r21
    3912:	8d 81       	ldd	r24, Y+5	; 0x05
    3914:	9e 81       	ldd	r25, Y+6	; 0x06
    3916:	28 0f       	add	r18, r24
    3918:	39 1f       	adc	r19, r25
    391a:	8a 81       	ldd	r24, Y+2	; 0x02
    391c:	88 2f       	mov	r24, r24
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	f9 01       	movw	r30, r18
    3922:	e8 0f       	add	r30, r24
    3924:	f9 1f       	adc	r31, r25
    3926:	80 81       	ld	r24, Z
    3928:	88 2f       	mov	r24, r24
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	9b 01       	movw	r18, r22
    392e:	28 1b       	sub	r18, r24
    3930:	39 0b       	sbc	r19, r25
    3932:	c9 01       	movw	r24, r18
    3934:	3f ef       	ldi	r19, 0xFF	; 255
    3936:	84 3f       	cpi	r24, 0xF4	; 244
    3938:	93 07       	cpc	r25, r19
    393a:	0c f4       	brge	.+2      	; 0x393e <Compare_Data+0x96>
    393c:	c9 c1       	rjmp	.+914    	; 0x3cd0 <Compare_Data+0x428>
    393e:	8a 81       	ldd	r24, Y+2	; 0x02
    3940:	28 2f       	mov	r18, r24
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	8b 81       	ldd	r24, Y+3	; 0x03
    3946:	9c 81       	ldd	r25, Y+4	; 0x04
    3948:	fc 01       	movw	r30, r24
    394a:	e2 0f       	add	r30, r18
    394c:	f3 1f       	adc	r31, r19
    394e:	80 81       	ld	r24, Z
    3950:	68 2f       	mov	r22, r24
    3952:	70 e0       	ldi	r23, 0x00	; 0
    3954:	89 81       	ldd	r24, Y+1	; 0x01
    3956:	48 2f       	mov	r20, r24
    3958:	50 e0       	ldi	r21, 0x00	; 0
    395a:	ca 01       	movw	r24, r20
    395c:	88 0f       	add	r24, r24
    395e:	99 1f       	adc	r25, r25
    3960:	9c 01       	movw	r18, r24
    3962:	22 0f       	add	r18, r18
    3964:	33 1f       	adc	r19, r19
    3966:	22 0f       	add	r18, r18
    3968:	33 1f       	adc	r19, r19
    396a:	22 0f       	add	r18, r18
    396c:	33 1f       	adc	r19, r19
    396e:	82 0f       	add	r24, r18
    3970:	93 1f       	adc	r25, r19
    3972:	9c 01       	movw	r18, r24
    3974:	24 0f       	add	r18, r20
    3976:	35 1f       	adc	r19, r21
    3978:	8d 81       	ldd	r24, Y+5	; 0x05
    397a:	9e 81       	ldd	r25, Y+6	; 0x06
    397c:	28 0f       	add	r18, r24
    397e:	39 1f       	adc	r19, r25
    3980:	8a 81       	ldd	r24, Y+2	; 0x02
    3982:	88 2f       	mov	r24, r24
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	f9 01       	movw	r30, r18
    3988:	e8 0f       	add	r30, r24
    398a:	f9 1f       	adc	r31, r25
    398c:	80 81       	ld	r24, Z
    398e:	88 2f       	mov	r24, r24
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	9b 01       	movw	r18, r22
    3994:	28 1b       	sub	r18, r24
    3996:	39 0b       	sbc	r19, r25
    3998:	c9 01       	movw	r24, r18
    399a:	8d 30       	cpi	r24, 0x0D	; 13
    399c:	91 05       	cpc	r25, r1
    399e:	0c f0       	brlt	.+2      	; 0x39a2 <Compare_Data+0xfa>
    39a0:	97 c1       	rjmp	.+814    	; 0x3cd0 <Compare_Data+0x428>
				{
					if (ArrFlex_Counter == NumberOfFlexs-1)
    39a2:	8a 81       	ldd	r24, Y+2	; 0x02
    39a4:	86 30       	cpi	r24, 0x06	; 6
    39a6:	09 f0       	breq	.+2      	; 0x39aa <Compare_Data+0x102>
    39a8:	93 c1       	rjmp	.+806    	; 0x3cd0 <Compare_Data+0x428>
					{
						if ( abs( Ptr_Sensor_Readings-> Arr_Flex[ArrFlex_Counter] - Ptr_Stored_Data[ArrStruct_Counter]. Arr_Flex[ArrFlex_Counter] ) <= Flex_Tolerance )
    39aa:	8a 81       	ldd	r24, Y+2	; 0x02
    39ac:	28 2f       	mov	r18, r24
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	8b 81       	ldd	r24, Y+3	; 0x03
    39b2:	9c 81       	ldd	r25, Y+4	; 0x04
    39b4:	fc 01       	movw	r30, r24
    39b6:	e2 0f       	add	r30, r18
    39b8:	f3 1f       	adc	r31, r19
    39ba:	80 81       	ld	r24, Z
    39bc:	68 2f       	mov	r22, r24
    39be:	70 e0       	ldi	r23, 0x00	; 0
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	48 2f       	mov	r20, r24
    39c4:	50 e0       	ldi	r21, 0x00	; 0
    39c6:	ca 01       	movw	r24, r20
    39c8:	88 0f       	add	r24, r24
    39ca:	99 1f       	adc	r25, r25
    39cc:	9c 01       	movw	r18, r24
    39ce:	22 0f       	add	r18, r18
    39d0:	33 1f       	adc	r19, r19
    39d2:	22 0f       	add	r18, r18
    39d4:	33 1f       	adc	r19, r19
    39d6:	22 0f       	add	r18, r18
    39d8:	33 1f       	adc	r19, r19
    39da:	82 0f       	add	r24, r18
    39dc:	93 1f       	adc	r25, r19
    39de:	9c 01       	movw	r18, r24
    39e0:	24 0f       	add	r18, r20
    39e2:	35 1f       	adc	r19, r21
    39e4:	8d 81       	ldd	r24, Y+5	; 0x05
    39e6:	9e 81       	ldd	r25, Y+6	; 0x06
    39e8:	28 0f       	add	r18, r24
    39ea:	39 1f       	adc	r19, r25
    39ec:	8a 81       	ldd	r24, Y+2	; 0x02
    39ee:	88 2f       	mov	r24, r24
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	f9 01       	movw	r30, r18
    39f4:	e8 0f       	add	r30, r24
    39f6:	f9 1f       	adc	r31, r25
    39f8:	80 81       	ld	r24, Z
    39fa:	88 2f       	mov	r24, r24
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	9b 01       	movw	r18, r22
    3a00:	28 1b       	sub	r18, r24
    3a02:	39 0b       	sbc	r19, r25
    3a04:	c9 01       	movw	r24, r18
    3a06:	3f ef       	ldi	r19, 0xFF	; 255
    3a08:	84 3f       	cpi	r24, 0xF4	; 244
    3a0a:	93 07       	cpc	r25, r19
    3a0c:	0c f4       	brge	.+2      	; 0x3a10 <Compare_Data+0x168>
    3a0e:	60 c1       	rjmp	.+704    	; 0x3cd0 <Compare_Data+0x428>
    3a10:	8a 81       	ldd	r24, Y+2	; 0x02
    3a12:	28 2f       	mov	r18, r24
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	8b 81       	ldd	r24, Y+3	; 0x03
    3a18:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	e2 0f       	add	r30, r18
    3a1e:	f3 1f       	adc	r31, r19
    3a20:	80 81       	ld	r24, Z
    3a22:	68 2f       	mov	r22, r24
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	89 81       	ldd	r24, Y+1	; 0x01
    3a28:	48 2f       	mov	r20, r24
    3a2a:	50 e0       	ldi	r21, 0x00	; 0
    3a2c:	ca 01       	movw	r24, r20
    3a2e:	88 0f       	add	r24, r24
    3a30:	99 1f       	adc	r25, r25
    3a32:	9c 01       	movw	r18, r24
    3a34:	22 0f       	add	r18, r18
    3a36:	33 1f       	adc	r19, r19
    3a38:	22 0f       	add	r18, r18
    3a3a:	33 1f       	adc	r19, r19
    3a3c:	22 0f       	add	r18, r18
    3a3e:	33 1f       	adc	r19, r19
    3a40:	82 0f       	add	r24, r18
    3a42:	93 1f       	adc	r25, r19
    3a44:	9c 01       	movw	r18, r24
    3a46:	24 0f       	add	r18, r20
    3a48:	35 1f       	adc	r19, r21
    3a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4e:	28 0f       	add	r18, r24
    3a50:	39 1f       	adc	r19, r25
    3a52:	8a 81       	ldd	r24, Y+2	; 0x02
    3a54:	88 2f       	mov	r24, r24
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	f9 01       	movw	r30, r18
    3a5a:	e8 0f       	add	r30, r24
    3a5c:	f9 1f       	adc	r31, r25
    3a5e:	80 81       	ld	r24, Z
    3a60:	88 2f       	mov	r24, r24
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	9b 01       	movw	r18, r22
    3a66:	28 1b       	sub	r18, r24
    3a68:	39 0b       	sbc	r19, r25
    3a6a:	c9 01       	movw	r24, r18
    3a6c:	8d 30       	cpi	r24, 0x0D	; 13
    3a6e:	91 05       	cpc	r25, r1
    3a70:	0c f0       	brlt	.+2      	; 0x3a74 <Compare_Data+0x1cc>
    3a72:	2e c1       	rjmp	.+604    	; 0x3cd0 <Compare_Data+0x428>
						{
							if  (
    3a74:	eb 81       	ldd	r30, Y+3	; 0x03
    3a76:	fc 81       	ldd	r31, Y+4	; 0x04
    3a78:	e7 80       	ldd	r14, Z+7	; 0x07
    3a7a:	f0 84       	ldd	r15, Z+8	; 0x08
    3a7c:	01 85       	ldd	r16, Z+9	; 0x09
    3a7e:	12 85       	ldd	r17, Z+10	; 0x0a
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	48 2f       	mov	r20, r24
    3a84:	50 e0       	ldi	r21, 0x00	; 0
    3a86:	ca 01       	movw	r24, r20
    3a88:	88 0f       	add	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	9c 01       	movw	r18, r24
    3a8e:	22 0f       	add	r18, r18
    3a90:	33 1f       	adc	r19, r19
    3a92:	22 0f       	add	r18, r18
    3a94:	33 1f       	adc	r19, r19
    3a96:	22 0f       	add	r18, r18
    3a98:	33 1f       	adc	r19, r19
    3a9a:	82 0f       	add	r24, r18
    3a9c:	93 1f       	adc	r25, r19
    3a9e:	9c 01       	movw	r18, r24
    3aa0:	24 0f       	add	r18, r20
    3aa2:	35 1f       	adc	r19, r21
    3aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	e2 0f       	add	r30, r18
    3aac:	f3 1f       	adc	r31, r19
    3aae:	27 81       	ldd	r18, Z+7	; 0x07
    3ab0:	30 85       	ldd	r19, Z+8	; 0x08
    3ab2:	41 85       	ldd	r20, Z+9	; 0x09
    3ab4:	52 85       	ldd	r21, Z+10	; 0x0a
    3ab6:	c8 01       	movw	r24, r16
    3ab8:	b7 01       	movw	r22, r14
    3aba:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixsfsi>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	3f ef       	ldi	r19, 0xFF	; 255
    3ad0:	88 3d       	cpi	r24, 0xD8	; 216
    3ad2:	93 07       	cpc	r25, r19
    3ad4:	0c f4       	brge	.+2      	; 0x3ad8 <Compare_Data+0x230>
    3ad6:	fc c0       	rjmp	.+504    	; 0x3cd0 <Compare_Data+0x428>
    3ad8:	eb 81       	ldd	r30, Y+3	; 0x03
    3ada:	fc 81       	ldd	r31, Y+4	; 0x04
    3adc:	e7 80       	ldd	r14, Z+7	; 0x07
    3ade:	f0 84       	ldd	r15, Z+8	; 0x08
    3ae0:	01 85       	ldd	r16, Z+9	; 0x09
    3ae2:	12 85       	ldd	r17, Z+10	; 0x0a
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	48 2f       	mov	r20, r24
    3ae8:	50 e0       	ldi	r21, 0x00	; 0
    3aea:	ca 01       	movw	r24, r20
    3aec:	88 0f       	add	r24, r24
    3aee:	99 1f       	adc	r25, r25
    3af0:	9c 01       	movw	r18, r24
    3af2:	22 0f       	add	r18, r18
    3af4:	33 1f       	adc	r19, r19
    3af6:	22 0f       	add	r18, r18
    3af8:	33 1f       	adc	r19, r19
    3afa:	22 0f       	add	r18, r18
    3afc:	33 1f       	adc	r19, r19
    3afe:	82 0f       	add	r24, r18
    3b00:	93 1f       	adc	r25, r19
    3b02:	9c 01       	movw	r18, r24
    3b04:	24 0f       	add	r18, r20
    3b06:	35 1f       	adc	r19, r21
    3b08:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	e2 0f       	add	r30, r18
    3b10:	f3 1f       	adc	r31, r19
    3b12:	27 81       	ldd	r18, Z+7	; 0x07
    3b14:	30 85       	ldd	r19, Z+8	; 0x08
    3b16:	41 85       	ldd	r20, Z+9	; 0x09
    3b18:	52 85       	ldd	r21, Z+10	; 0x0a
    3b1a:	c8 01       	movw	r24, r16
    3b1c:	b7 01       	movw	r22, r14
    3b1e:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	bc 01       	movw	r22, r24
    3b28:	cd 01       	movw	r24, r26
    3b2a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixsfsi>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	89 32       	cpi	r24, 0x29	; 41
    3b34:	91 05       	cpc	r25, r1
    3b36:	0c f0       	brlt	.+2      	; 0x3b3a <Compare_Data+0x292>
    3b38:	cb c0       	rjmp	.+406    	; 0x3cd0 <Compare_Data+0x428>
    3b3a:	eb 81       	ldd	r30, Y+3	; 0x03
    3b3c:	fc 81       	ldd	r31, Y+4	; 0x04
    3b3e:	e3 84       	ldd	r14, Z+11	; 0x0b
    3b40:	f4 84       	ldd	r15, Z+12	; 0x0c
    3b42:	05 85       	ldd	r16, Z+13	; 0x0d
    3b44:	16 85       	ldd	r17, Z+14	; 0x0e
    3b46:	89 81       	ldd	r24, Y+1	; 0x01
    3b48:	48 2f       	mov	r20, r24
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	ca 01       	movw	r24, r20
    3b4e:	88 0f       	add	r24, r24
    3b50:	99 1f       	adc	r25, r25
    3b52:	9c 01       	movw	r18, r24
    3b54:	22 0f       	add	r18, r18
    3b56:	33 1f       	adc	r19, r19
    3b58:	22 0f       	add	r18, r18
    3b5a:	33 1f       	adc	r19, r19
    3b5c:	22 0f       	add	r18, r18
    3b5e:	33 1f       	adc	r19, r19
    3b60:	82 0f       	add	r24, r18
    3b62:	93 1f       	adc	r25, r19
    3b64:	9c 01       	movw	r18, r24
    3b66:	24 0f       	add	r18, r20
    3b68:	35 1f       	adc	r19, r21
    3b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6e:	fc 01       	movw	r30, r24
    3b70:	e2 0f       	add	r30, r18
    3b72:	f3 1f       	adc	r31, r19
    3b74:	23 85       	ldd	r18, Z+11	; 0x0b
    3b76:	34 85       	ldd	r19, Z+12	; 0x0c
    3b78:	45 85       	ldd	r20, Z+13	; 0x0d
    3b7a:	56 85       	ldd	r21, Z+14	; 0x0e
    3b7c:	c8 01       	movw	r24, r16
    3b7e:	b7 01       	movw	r22, r14
    3b80:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	bc 01       	movw	r22, r24
    3b8a:	cd 01       	movw	r24, r26
    3b8c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixsfsi>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	2f ef       	ldi	r18, 0xFF	; 255
    3b96:	88 3d       	cpi	r24, 0xD8	; 216
    3b98:	92 07       	cpc	r25, r18
    3b9a:	0c f4       	brge	.+2      	; 0x3b9e <Compare_Data+0x2f6>
    3b9c:	99 c0       	rjmp	.+306    	; 0x3cd0 <Compare_Data+0x428>
    3b9e:	eb 81       	ldd	r30, Y+3	; 0x03
    3ba0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ba2:	e3 84       	ldd	r14, Z+11	; 0x0b
    3ba4:	f4 84       	ldd	r15, Z+12	; 0x0c
    3ba6:	05 85       	ldd	r16, Z+13	; 0x0d
    3ba8:	16 85       	ldd	r17, Z+14	; 0x0e
    3baa:	89 81       	ldd	r24, Y+1	; 0x01
    3bac:	48 2f       	mov	r20, r24
    3bae:	50 e0       	ldi	r21, 0x00	; 0
    3bb0:	ca 01       	movw	r24, r20
    3bb2:	88 0f       	add	r24, r24
    3bb4:	99 1f       	adc	r25, r25
    3bb6:	9c 01       	movw	r18, r24
    3bb8:	22 0f       	add	r18, r18
    3bba:	33 1f       	adc	r19, r19
    3bbc:	22 0f       	add	r18, r18
    3bbe:	33 1f       	adc	r19, r19
    3bc0:	22 0f       	add	r18, r18
    3bc2:	33 1f       	adc	r19, r19
    3bc4:	82 0f       	add	r24, r18
    3bc6:	93 1f       	adc	r25, r19
    3bc8:	9c 01       	movw	r18, r24
    3bca:	24 0f       	add	r18, r20
    3bcc:	35 1f       	adc	r19, r21
    3bce:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	e2 0f       	add	r30, r18
    3bd6:	f3 1f       	adc	r31, r19
    3bd8:	23 85       	ldd	r18, Z+11	; 0x0b
    3bda:	34 85       	ldd	r19, Z+12	; 0x0c
    3bdc:	45 85       	ldd	r20, Z+13	; 0x0d
    3bde:	56 85       	ldd	r21, Z+14	; 0x0e
    3be0:	c8 01       	movw	r24, r16
    3be2:	b7 01       	movw	r22, r14
    3be4:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	bc 01       	movw	r22, r24
    3bee:	cd 01       	movw	r24, r26
    3bf0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixsfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	89 32       	cpi	r24, 0x29	; 41
    3bfa:	91 05       	cpc	r25, r1
    3bfc:	0c f0       	brlt	.+2      	; 0x3c00 <Compare_Data+0x358>
    3bfe:	68 c0       	rjmp	.+208    	; 0x3cd0 <Compare_Data+0x428>
    3c00:	eb 81       	ldd	r30, Y+3	; 0x03
    3c02:	fc 81       	ldd	r31, Y+4	; 0x04
    3c04:	e7 84       	ldd	r14, Z+15	; 0x0f
    3c06:	f0 88       	ldd	r15, Z+16	; 0x10
    3c08:	01 89       	ldd	r16, Z+17	; 0x11
    3c0a:	12 89       	ldd	r17, Z+18	; 0x12
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	48 2f       	mov	r20, r24
    3c10:	50 e0       	ldi	r21, 0x00	; 0
    3c12:	ca 01       	movw	r24, r20
    3c14:	88 0f       	add	r24, r24
    3c16:	99 1f       	adc	r25, r25
    3c18:	9c 01       	movw	r18, r24
    3c1a:	22 0f       	add	r18, r18
    3c1c:	33 1f       	adc	r19, r19
    3c1e:	22 0f       	add	r18, r18
    3c20:	33 1f       	adc	r19, r19
    3c22:	22 0f       	add	r18, r18
    3c24:	33 1f       	adc	r19, r19
    3c26:	82 0f       	add	r24, r18
    3c28:	93 1f       	adc	r25, r19
    3c2a:	9c 01       	movw	r18, r24
    3c2c:	24 0f       	add	r18, r20
    3c2e:	35 1f       	adc	r19, r21
    3c30:	8d 81       	ldd	r24, Y+5	; 0x05
    3c32:	9e 81       	ldd	r25, Y+6	; 0x06
    3c34:	fc 01       	movw	r30, r24
    3c36:	e2 0f       	add	r30, r18
    3c38:	f3 1f       	adc	r31, r19
    3c3a:	27 85       	ldd	r18, Z+15	; 0x0f
    3c3c:	30 89       	ldd	r19, Z+16	; 0x10
    3c3e:	41 89       	ldd	r20, Z+17	; 0x11
    3c40:	52 89       	ldd	r21, Z+18	; 0x12
    3c42:	c8 01       	movw	r24, r16
    3c44:	b7 01       	movw	r22, r14
    3c46:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	bc 01       	movw	r22, r24
    3c50:	cd 01       	movw	r24, r26
    3c52:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixsfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	3f ef       	ldi	r19, 0xFF	; 255
    3c5c:	88 3d       	cpi	r24, 0xD8	; 216
    3c5e:	93 07       	cpc	r25, r19
    3c60:	bc f1       	brlt	.+110    	; 0x3cd0 <Compare_Data+0x428>
    3c62:	eb 81       	ldd	r30, Y+3	; 0x03
    3c64:	fc 81       	ldd	r31, Y+4	; 0x04
    3c66:	e7 84       	ldd	r14, Z+15	; 0x0f
    3c68:	f0 88       	ldd	r15, Z+16	; 0x10
    3c6a:	01 89       	ldd	r16, Z+17	; 0x11
    3c6c:	12 89       	ldd	r17, Z+18	; 0x12
    3c6e:	89 81       	ldd	r24, Y+1	; 0x01
    3c70:	48 2f       	mov	r20, r24
    3c72:	50 e0       	ldi	r21, 0x00	; 0
    3c74:	ca 01       	movw	r24, r20
    3c76:	88 0f       	add	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	9c 01       	movw	r18, r24
    3c7c:	22 0f       	add	r18, r18
    3c7e:	33 1f       	adc	r19, r19
    3c80:	22 0f       	add	r18, r18
    3c82:	33 1f       	adc	r19, r19
    3c84:	22 0f       	add	r18, r18
    3c86:	33 1f       	adc	r19, r19
    3c88:	82 0f       	add	r24, r18
    3c8a:	93 1f       	adc	r25, r19
    3c8c:	9c 01       	movw	r18, r24
    3c8e:	24 0f       	add	r18, r20
    3c90:	35 1f       	adc	r19, r21
    3c92:	8d 81       	ldd	r24, Y+5	; 0x05
    3c94:	9e 81       	ldd	r25, Y+6	; 0x06
    3c96:	fc 01       	movw	r30, r24
    3c98:	e2 0f       	add	r30, r18
    3c9a:	f3 1f       	adc	r31, r19
    3c9c:	27 85       	ldd	r18, Z+15	; 0x0f
    3c9e:	30 89       	ldd	r19, Z+16	; 0x10
    3ca0:	41 89       	ldd	r20, Z+17	; 0x11
    3ca2:	52 89       	ldd	r21, Z+18	; 0x12
    3ca4:	c8 01       	movw	r24, r16
    3ca6:	b7 01       	movw	r22, r14
    3ca8:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	bc 01       	movw	r22, r24
    3cb2:	cd 01       	movw	r24, r26
    3cb4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixsfsi>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	89 32       	cpi	r24, 0x29	; 41
    3cbe:	91 05       	cpc	r25, r1
    3cc0:	3c f4       	brge	.+14     	; 0x3cd0 <Compare_Data+0x428>
									( abs( (Ptr_Sensor_Readings->X_Axis - Ptr_Stored_Data[ArrStruct_Counter].X_Axis) ) <=  X_Angle_Accuracy )
								 && ( abs( (Ptr_Sensor_Readings->Y_Axis - Ptr_Stored_Data[ArrStruct_Counter].Y_Axis) ) <=  Y_Angle_Accuracy )
								 && ( abs( (Ptr_Sensor_Readings->Z_Axis - Ptr_Stored_Data[ArrStruct_Counter].Z_Axis) ) <=  Z_Angle_Accuracy )
								)
							{
								Word_index= ArrStruct_Counter + 1;
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	8f 5f       	subi	r24, 0xFF	; 255
    3cc6:	80 93 37 03 	sts	0x0337, r24
								return 1;
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	8f 83       	std	Y+7, r24	; 0x07
    3cce:	0f c0       	rjmp	.+30     	; 0x3cee <Compare_Data+0x446>
	u8 ArrFlex_Counter;
	u8 ArrStruct_Counter;
	Word_index=0;
	for (ArrStruct_Counter= 0; ArrStruct_Counter < NumberOfStoredWords; ArrStruct_Counter++)
	{
		for (ArrFlex_Counter= 0; ArrFlex_Counter < NumberOfFlexs; ArrFlex_Counter++)
    3cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd2:	8f 5f       	subi	r24, 0xFF	; 255
    3cd4:	8a 83       	std	Y+2, r24	; 0x02
    3cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd8:	87 30       	cpi	r24, 0x07	; 7
    3cda:	08 f4       	brcc	.+2      	; 0x3cde <Compare_Data+0x436>
    3cdc:	fd cd       	rjmp	.-1030   	; 0x38d8 <Compare_Data+0x30>
u8  Compare_Data ( Letters_and_Words * Ptr_Sensor_Readings, Letters_and_Words * Ptr_Stored_Data)
{
	u8 ArrFlex_Counter;
	u8 ArrStruct_Counter;
	Word_index=0;
	for (ArrStruct_Counter= 0; ArrStruct_Counter < NumberOfStoredWords; ArrStruct_Counter++)
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	8f 5f       	subi	r24, 0xFF	; 255
    3ce2:	89 83       	std	Y+1, r24	; 0x01
    3ce4:	89 81       	ldd	r24, Y+1	; 0x01
    3ce6:	8a 30       	cpi	r24, 0x0A	; 10
    3ce8:	08 f4       	brcc	.+2      	; 0x3cec <Compare_Data+0x444>
    3cea:	f4 cd       	rjmp	.-1048   	; 0x38d4 <Compare_Data+0x2c>
						}
					}
				}
			}
	}
	return 0;
    3cec:	1f 82       	std	Y+7, r1	; 0x07
    3cee:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3cf0:	27 96       	adiw	r28, 0x07	; 7
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	f8 94       	cli
    3cf6:	de bf       	out	0x3e, r29	; 62
    3cf8:	0f be       	out	0x3f, r0	; 63
    3cfa:	cd bf       	out	0x3d, r28	; 61
    3cfc:	cf 91       	pop	r28
    3cfe:	df 91       	pop	r29
    3d00:	1f 91       	pop	r17
    3d02:	0f 91       	pop	r16
    3d04:	ff 90       	pop	r15
    3d06:	ef 90       	pop	r14
    3d08:	08 95       	ret

00003d0a <UART_init>:
#include <avr/iom128.h>

#define  BAUD_RATE (9600.0)

	void UART_init(void)
	{
    3d0a:	df 93       	push	r29
    3d0c:	cf 93       	push	r28
    3d0e:	00 d0       	rcall	.+0      	; 0x3d10 <UART_init+0x6>
    3d10:	cd b7       	in	r28, 0x3d	; 61
    3d12:	de b7       	in	r29, 0x3e	; 62
		
		uint16 UBRR_Value= ((F_CPU /(8.0 *BAUD_RATE ) ) - 1) +0.5; 
    3d14:	8f ec       	ldi	r24, 0xCF	; 207
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	9a 83       	std	Y+2, r25	; 0x02
    3d1a:	89 83       	std	Y+1, r24	; 0x01
		/* Set U2x " Double Speed Mode " */
		SET_BIT(UCSR0A,U2X);
    3d1c:	ab e2       	ldi	r26, 0x2B	; 43
    3d1e:	b0 e0       	ldi	r27, 0x00	; 0
    3d20:	eb e2       	ldi	r30, 0x2B	; 43
    3d22:	f0 e0       	ldi	r31, 0x00	; 0
    3d24:	80 81       	ld	r24, Z
    3d26:	82 60       	ori	r24, 0x02	; 2
    3d28:	8c 93       	st	X, r24
		
		/* Enable Rx , Tx */
		UCSR0B |= (1<<TXEN) | (1<<RXEN);
    3d2a:	aa e2       	ldi	r26, 0x2A	; 42
    3d2c:	b0 e0       	ldi	r27, 0x00	; 0
    3d2e:	ea e2       	ldi	r30, 0x2A	; 42
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	80 81       	ld	r24, Z
    3d34:	88 61       	ori	r24, 0x18	; 24
    3d36:	8c 93       	st	X, r24
		
//		UCSR0C |= (1<<URSEL) |(1<<UCSZ0) | (1<<UCSZ1);
		UCSR0C = (1<<USBS)|(3<<UCSZ0);
    3d38:	e5 e9       	ldi	r30, 0x95	; 149
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	8e e0       	ldi	r24, 0x0E	; 14
    3d3e:	80 83       	st	Z, r24

		
		UBRR0L = UBRR_Value & 0x00FF;
    3d40:	e9 e2       	ldi	r30, 0x29	; 41
    3d42:	f0 e0       	ldi	r31, 0x00	; 0
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	80 83       	st	Z, r24
		UBRR0H = UBRR_Value >>8;
    3d48:	e0 e9       	ldi	r30, 0x90	; 144
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d50:	89 2f       	mov	r24, r25
    3d52:	99 27       	eor	r25, r25
    3d54:	80 83       	st	Z, r24
	}
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	cf 91       	pop	r28
    3d5c:	df 91       	pop	r29
    3d5e:	08 95       	ret

00003d60 <UART_SendByte>:
	
	void UART_SendByte(uint8 Data)
	{
    3d60:	df 93       	push	r29
    3d62:	cf 93       	push	r28
    3d64:	0f 92       	push	r0
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	89 83       	std	Y+1, r24	; 0x01
		/* if Send Buffer is not empty wait until it being  empty */
		while (BIT_IS_CLEAR(UCSR0A,UDRE))
    3d6c:	eb e2       	ldi	r30, 0x2B	; 43
    3d6e:	f0 e0       	ldi	r31, 0x00	; 0
    3d70:	80 81       	ld	r24, Z
    3d72:	88 2f       	mov	r24, r24
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	80 72       	andi	r24, 0x20	; 32
    3d78:	90 70       	andi	r25, 0x00	; 0
    3d7a:	00 97       	sbiw	r24, 0x00	; 0
    3d7c:	b9 f3       	breq	.-18     	; 0x3d6c <UART_SendByte+0xc>
		{
			
		}	
		UDR0 = Data;
    3d7e:	ec e2       	ldi	r30, 0x2C	; 44
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	80 83       	st	Z, r24
		
	}
    3d86:	0f 90       	pop	r0
    3d88:	cf 91       	pop	r28
    3d8a:	df 91       	pop	r29
    3d8c:	08 95       	ret

00003d8e <UART_SendArray>:
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
    3d8e:	df 93       	push	r29
    3d90:	cf 93       	push	r28
    3d92:	00 d0       	rcall	.+0      	; 0x3d94 <UART_SendArray+0x6>
    3d94:	00 d0       	rcall	.+0      	; 0x3d96 <UART_SendArray+0x8>
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	9b 83       	std	Y+3, r25	; 0x03
    3d9c:	8a 83       	std	Y+2, r24	; 0x02
    3d9e:	6c 83       	std	Y+4, r22	; 0x04
		uint8 i = 0;
    3da0:	19 82       	std	Y+1, r1	; 0x01
		
		for(i=0;i<size;i++)
    3da2:	19 82       	std	Y+1, r1	; 0x01
    3da4:	0e c0       	rjmp	.+28     	; 0x3dc2 <UART_SendArray+0x34>
		{
			UART_SendByte(Data[i]);
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	28 2f       	mov	r18, r24
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	8a 81       	ldd	r24, Y+2	; 0x02
    3dae:	9b 81       	ldd	r25, Y+3	; 0x03
    3db0:	fc 01       	movw	r30, r24
    3db2:	e2 0f       	add	r30, r18
    3db4:	f3 1f       	adc	r31, r19
    3db6:	80 81       	ld	r24, Z
    3db8:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <UART_SendByte>
	
	void UART_SendArray(uint8 * Data , uint8 size)
	{
		uint8 i = 0;
		
		for(i=0;i<size;i++)
    3dbc:	89 81       	ldd	r24, Y+1	; 0x01
    3dbe:	8f 5f       	subi	r24, 0xFF	; 255
    3dc0:	89 83       	std	Y+1, r24	; 0x01
    3dc2:	99 81       	ldd	r25, Y+1	; 0x01
    3dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc6:	98 17       	cp	r25, r24
    3dc8:	70 f3       	brcs	.-36     	; 0x3da6 <UART_SendArray+0x18>
		{
			UART_SendByte(Data[i]);
		}
	}
    3dca:	0f 90       	pop	r0
    3dcc:	0f 90       	pop	r0
    3dce:	0f 90       	pop	r0
    3dd0:	0f 90       	pop	r0
    3dd2:	cf 91       	pop	r28
    3dd4:	df 91       	pop	r29
    3dd6:	08 95       	ret

00003dd8 <UART_recieveByte>:



uint8 UART_recieveByte(void)
{
    3dd8:	df 93       	push	r29
    3dda:	cf 93       	push	r28
    3ddc:	cd b7       	in	r28, 0x3d	; 61
    3dde:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSR0A,RXC)){}
    3de0:	eb e2       	ldi	r30, 0x2B	; 43
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	80 81       	ld	r24, Z
    3de6:	88 23       	and	r24, r24
    3de8:	dc f7       	brge	.-10     	; 0x3de0 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR0;
    3dea:	ec e2       	ldi	r30, 0x2C	; 44
    3dec:	f0 e0       	ldi	r31, 0x00	; 0
    3dee:	80 81       	ld	r24, Z
}
    3df0:	cf 91       	pop	r28
    3df2:	df 91       	pop	r29
    3df4:	08 95       	ret

00003df6 <__prologue_saves__>:
    3df6:	2f 92       	push	r2
    3df8:	3f 92       	push	r3
    3dfa:	4f 92       	push	r4
    3dfc:	5f 92       	push	r5
    3dfe:	6f 92       	push	r6
    3e00:	7f 92       	push	r7
    3e02:	8f 92       	push	r8
    3e04:	9f 92       	push	r9
    3e06:	af 92       	push	r10
    3e08:	bf 92       	push	r11
    3e0a:	cf 92       	push	r12
    3e0c:	df 92       	push	r13
    3e0e:	ef 92       	push	r14
    3e10:	ff 92       	push	r15
    3e12:	0f 93       	push	r16
    3e14:	1f 93       	push	r17
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	cd b7       	in	r28, 0x3d	; 61
    3e1c:	de b7       	in	r29, 0x3e	; 62
    3e1e:	ca 1b       	sub	r28, r26
    3e20:	db 0b       	sbc	r29, r27
    3e22:	0f b6       	in	r0, 0x3f	; 63
    3e24:	f8 94       	cli
    3e26:	de bf       	out	0x3e, r29	; 62
    3e28:	0f be       	out	0x3f, r0	; 63
    3e2a:	cd bf       	out	0x3d, r28	; 61
    3e2c:	09 94       	ijmp

00003e2e <__epilogue_restores__>:
    3e2e:	2a 88       	ldd	r2, Y+18	; 0x12
    3e30:	39 88       	ldd	r3, Y+17	; 0x11
    3e32:	48 88       	ldd	r4, Y+16	; 0x10
    3e34:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e36:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e38:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e40:	b9 84       	ldd	r11, Y+9	; 0x09
    3e42:	c8 84       	ldd	r12, Y+8	; 0x08
    3e44:	df 80       	ldd	r13, Y+7	; 0x07
    3e46:	ee 80       	ldd	r14, Y+6	; 0x06
    3e48:	fd 80       	ldd	r15, Y+5	; 0x05
    3e4a:	0c 81       	ldd	r16, Y+4	; 0x04
    3e4c:	1b 81       	ldd	r17, Y+3	; 0x03
    3e4e:	aa 81       	ldd	r26, Y+2	; 0x02
    3e50:	b9 81       	ldd	r27, Y+1	; 0x01
    3e52:	ce 0f       	add	r28, r30
    3e54:	d1 1d       	adc	r29, r1
    3e56:	0f b6       	in	r0, 0x3f	; 63
    3e58:	f8 94       	cli
    3e5a:	de bf       	out	0x3e, r29	; 62
    3e5c:	0f be       	out	0x3f, r0	; 63
    3e5e:	cd bf       	out	0x3d, r28	; 61
    3e60:	ed 01       	movw	r28, r26
    3e62:	08 95       	ret

00003e64 <itoa>:
    3e64:	fb 01       	movw	r30, r22
    3e66:	9f 01       	movw	r18, r30
    3e68:	e8 94       	clt
    3e6a:	42 30       	cpi	r20, 0x02	; 2
    3e6c:	c4 f0       	brlt	.+48     	; 0x3e9e <itoa+0x3a>
    3e6e:	45 32       	cpi	r20, 0x25	; 37
    3e70:	b4 f4       	brge	.+44     	; 0x3e9e <itoa+0x3a>
    3e72:	4a 30       	cpi	r20, 0x0A	; 10
    3e74:	29 f4       	brne	.+10     	; 0x3e80 <itoa+0x1c>
    3e76:	97 fb       	bst	r25, 7
    3e78:	1e f4       	brtc	.+6      	; 0x3e80 <itoa+0x1c>
    3e7a:	90 95       	com	r25
    3e7c:	81 95       	neg	r24
    3e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e80:	64 2f       	mov	r22, r20
    3e82:	77 27       	eor	r23, r23
    3e84:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodhi4>
    3e88:	80 5d       	subi	r24, 0xD0	; 208
    3e8a:	8a 33       	cpi	r24, 0x3A	; 58
    3e8c:	0c f0       	brlt	.+2      	; 0x3e90 <itoa+0x2c>
    3e8e:	89 5d       	subi	r24, 0xD9	; 217
    3e90:	81 93       	st	Z+, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	00 97       	sbiw	r24, 0x00	; 0
    3e96:	a1 f7       	brne	.-24     	; 0x3e80 <itoa+0x1c>
    3e98:	16 f4       	brtc	.+4      	; 0x3e9e <itoa+0x3a>
    3e9a:	5d e2       	ldi	r21, 0x2D	; 45
    3e9c:	51 93       	st	Z+, r21
    3e9e:	10 82       	st	Z, r1
    3ea0:	c9 01       	movw	r24, r18
    3ea2:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <strrev>

00003ea6 <strrev>:
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	67 2f       	mov	r22, r23
    3eac:	71 91       	ld	r23, Z+
    3eae:	77 23       	and	r23, r23
    3eb0:	e1 f7       	brne	.-8      	; 0x3eaa <strrev+0x4>
    3eb2:	32 97       	sbiw	r30, 0x02	; 2
    3eb4:	04 c0       	rjmp	.+8      	; 0x3ebe <strrev+0x18>
    3eb6:	7c 91       	ld	r23, X
    3eb8:	6d 93       	st	X+, r22
    3eba:	70 83       	st	Z, r23
    3ebc:	62 91       	ld	r22, -Z
    3ebe:	ae 17       	cp	r26, r30
    3ec0:	bf 07       	cpc	r27, r31
    3ec2:	c8 f3       	brcs	.-14     	; 0x3eb6 <strrev+0x10>
    3ec4:	08 95       	ret

00003ec6 <__udivmodhi4>:
    3ec6:	aa 1b       	sub	r26, r26
    3ec8:	bb 1b       	sub	r27, r27
    3eca:	51 e1       	ldi	r21, 0x11	; 17
    3ecc:	07 c0       	rjmp	.+14     	; 0x3edc <__udivmodhi4_ep>

00003ece <__udivmodhi4_loop>:
    3ece:	aa 1f       	adc	r26, r26
    3ed0:	bb 1f       	adc	r27, r27
    3ed2:	a6 17       	cp	r26, r22
    3ed4:	b7 07       	cpc	r27, r23
    3ed6:	10 f0       	brcs	.+4      	; 0x3edc <__udivmodhi4_ep>
    3ed8:	a6 1b       	sub	r26, r22
    3eda:	b7 0b       	sbc	r27, r23

00003edc <__udivmodhi4_ep>:
    3edc:	88 1f       	adc	r24, r24
    3ede:	99 1f       	adc	r25, r25
    3ee0:	5a 95       	dec	r21
    3ee2:	a9 f7       	brne	.-22     	; 0x3ece <__udivmodhi4_loop>
    3ee4:	80 95       	com	r24
    3ee6:	90 95       	com	r25
    3ee8:	bc 01       	movw	r22, r24
    3eea:	cd 01       	movw	r24, r26
    3eec:	08 95       	ret

00003eee <_exit>:
    3eee:	f8 94       	cli

00003ef0 <__stop_program>:
    3ef0:	ff cf       	rjmp	.-2      	; 0x3ef0 <__stop_program>
