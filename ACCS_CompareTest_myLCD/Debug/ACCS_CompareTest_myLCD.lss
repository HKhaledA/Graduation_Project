
ACCS_CompareTest_myLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a4  00800060  00002dee  00002e82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800204  00800204  00003026  2**0
                  ALLOC
  3 .stab         00002244  00000000  00000000  00003028  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012d1  00000000  00000000  0000526c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000653d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000066dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000068cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b238  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b6ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 13 	call	0x26a6	; 0x26a6 <main>
      8a:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e8       	ldi	r22, 0x83	; 131
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 57       	subi	r30, 0x75	; 117
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Accelerometor_init>:
 
#include "ADXL345.h"
#include "lcd.h"

void Accelerometor_init(ADX345_PowerModes Mode , ADXL345_Address EFF_Address)
{	
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Accelerometor_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	6a 83       	std	Y+2, r22	; 0x02
	I2C_ByteWrite(EFF_Address,POWER_CTRL,Mode);	
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	6d e2       	ldi	r22, 0x2D	; 45
     e40:	49 81       	ldd	r20, Y+1	; 0x01
     e42:	0e 94 b1 0c 	call	0x1962	; 0x1962 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0x0B);
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	61 e3       	ldi	r22, 0x31	; 49
     e4a:	4b e0       	ldi	r20, 0x0B	; 11
     e4c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSX,-1);
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	6e e1       	ldi	r22, 0x1E	; 30
     e54:	4f ef       	ldi	r20, 0xFF	; 255
     e56:	0e 94 b1 0c 	call	0x1962	; 0x1962 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSY,0);
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	6f e1       	ldi	r22, 0x1F	; 31
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	0e 94 b1 0c 	call	0x1962	; 0x1962 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSZ,-1);
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	60 e2       	ldi	r22, 0x20	; 32
     e68:	4f ef       	ldi	r20, 0xFF	; 255
     e6a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <I2C_ByteWrite>
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0);
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,8);
			
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <Accelerometor_ReadAxis>:



void Accelerometor_ReadAxis(ADXL345_Address EFF_Address ,volatile ADXL345_Data * Data_ptr)
{
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	cd 55       	subi	r28, 0x5D	; 93
     e86:	d0 40       	sbci	r29, 0x00	; 0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	fe 01       	movw	r30, r28
     e94:	e5 5a       	subi	r30, 0xA5	; 165
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	80 83       	st	Z, r24
     e9a:	fe 01       	movw	r30, r28
     e9c:	e4 5a       	subi	r30, 0xA4	; 164
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	71 83       	std	Z+1, r23	; 0x01
     ea2:	60 83       	st	Z, r22
	uint16 X_Axis_Read;
	uint16 Y_Axis_Read;
	uint16 Z_Axis_Read;
	
	
	X_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX0);
     ea4:	fe 01       	movw	r30, r28
     ea6:	e5 5a       	subi	r30, 0xA5	; 165
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	80 81       	ld	r24, Z
     eac:	62 e3       	ldi	r22, 0x32	; 50
     eae:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <I2C_ByteRead>
     eb2:	fe 01       	movw	r30, r28
     eb4:	e7 5a       	subi	r30, 0xA7	; 167
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
     ec0:	fe 01       	movw	r30, r28
     ec2:	ef 5a       	subi	r30, 0xAF	; 175
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a0 e8       	ldi	r26, 0x80	; 128
     ecc:	bf e3       	ldi	r27, 0x3F	; 63
     ece:	80 83       	st	Z, r24
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	a2 83       	std	Z+2, r26	; 0x02
     ed4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed6:	8e 01       	movw	r16, r28
     ed8:	03 5b       	subi	r16, 0xB3	; 179
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	fe 01       	movw	r30, r28
     ede:	ef 5a       	subi	r30, 0xAF	; 175
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e8       	ldi	r19, 0x80	; 128
     eee:	4b e3       	ldi	r20, 0x3B	; 59
     ef0:	55 e4       	ldi	r21, 0x45	; 69
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	f8 01       	movw	r30, r16
     efc:	80 83       	st	Z, r24
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	a2 83       	std	Z+2, r26	; 0x02
     f02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f04:	fe 01       	movw	r30, r28
     f06:	e3 5b       	subi	r30, 0xB3	; 179
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	93 81       	ldd	r25, Z+3	; 0x03
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e8       	ldi	r20, 0x80	; 128
     f18:	5f e3       	ldi	r21, 0x3F	; 63
     f1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f1e:	88 23       	and	r24, r24
     f20:	44 f4       	brge	.+16     	; 0xf32 <Accelerometor_ReadAxis+0xba>
		__ticks = 1;
     f22:	fe 01       	movw	r30, r28
     f24:	e5 5b       	subi	r30, 0xB5	; 181
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	91 83       	std	Z+1, r25	; 0x01
     f2e:	80 83       	st	Z, r24
     f30:	64 c0       	rjmp	.+200    	; 0xffa <Accelerometor_ReadAxis+0x182>
	else if (__tmp > 65535)
     f32:	fe 01       	movw	r30, r28
     f34:	e3 5b       	subi	r30, 0xB3	; 179
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	60 81       	ld	r22, Z
     f3a:	71 81       	ldd	r23, Z+1	; 0x01
     f3c:	82 81       	ldd	r24, Z+2	; 0x02
     f3e:	93 81       	ldd	r25, Z+3	; 0x03
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	3f ef       	ldi	r19, 0xFF	; 255
     f44:	4f e7       	ldi	r20, 0x7F	; 127
     f46:	57 e4       	ldi	r21, 0x47	; 71
     f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f4c:	18 16       	cp	r1, r24
     f4e:	0c f0       	brlt	.+2      	; 0xf52 <Accelerometor_ReadAxis+0xda>
     f50:	43 c0       	rjmp	.+134    	; 0xfd8 <Accelerometor_ReadAxis+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f52:	fe 01       	movw	r30, r28
     f54:	ef 5a       	subi	r30, 0xAF	; 175
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	60 81       	ld	r22, Z
     f5a:	71 81       	ldd	r23, Z+1	; 0x01
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e2       	ldi	r20, 0x20	; 32
     f66:	51 e4       	ldi	r21, 0x41	; 65
     f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	8e 01       	movw	r16, r28
     f72:	05 5b       	subi	r16, 0xB5	; 181
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	f8 01       	movw	r30, r16
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	80 83       	st	Z, r24
     f88:	1f c0       	rjmp	.+62     	; 0xfc8 <Accelerometor_ReadAxis+0x150>
     f8a:	fe 01       	movw	r30, r28
     f8c:	e7 5b       	subi	r30, 0xB7	; 183
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	8c e2       	ldi	r24, 0x2C	; 44
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f98:	fe 01       	movw	r30, r28
     f9a:	e7 5b       	subi	r30, 0xB7	; 183
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	91 81       	ldd	r25, Z+1	; 0x01
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <Accelerometor_ReadAxis+0x12a>
     fa6:	fe 01       	movw	r30, r28
     fa8:	e7 5b       	subi	r30, 0xB7	; 183
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb0:	de 01       	movw	r26, r28
     fb2:	a5 5b       	subi	r26, 0xB5	; 181
     fb4:	bf 4f       	sbci	r27, 0xFF	; 255
     fb6:	fe 01       	movw	r30, r28
     fb8:	e5 5b       	subi	r30, 0xB5	; 181
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	11 96       	adiw	r26, 0x01	; 1
     fc4:	9c 93       	st	X, r25
     fc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc8:	fe 01       	movw	r30, r28
     fca:	e5 5b       	subi	r30, 0xB5	; 181
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	d1 f6       	brne	.-76     	; 0xf8a <Accelerometor_ReadAxis+0x112>
     fd6:	27 c0       	rjmp	.+78     	; 0x1026 <Accelerometor_ReadAxis+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd8:	8e 01       	movw	r16, r28
     fda:	05 5b       	subi	r16, 0xB5	; 181
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	fe 01       	movw	r30, r28
     fe0:	e3 5b       	subi	r30, 0xB3	; 179
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	60 81       	ld	r22, Z
     fe6:	71 81       	ldd	r23, Z+1	; 0x01
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	f8 01       	movw	r30, r16
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	80 83       	st	Z, r24
     ffa:	de 01       	movw	r26, r28
     ffc:	a9 5b       	subi	r26, 0xB9	; 185
     ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    1000:	fe 01       	movw	r30, r28
    1002:	e5 5b       	subi	r30, 0xB5	; 181
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	8d 93       	st	X+, r24
    100c:	9c 93       	st	X, r25
    100e:	fe 01       	movw	r30, r28
    1010:	e9 5b       	subi	r30, 0xB9	; 185
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <Accelerometor_ReadAxis+0x1a0>
    101c:	fe 01       	movw	r30, r28
    101e:	e9 5b       	subi	r30, 0xB9	; 185
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	80 83       	st	Z, r24
	_delay_ms(1);
	X_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX1))<<8;
    1026:	fe 01       	movw	r30, r28
    1028:	e5 5a       	subi	r30, 0xA5	; 165
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	80 81       	ld	r24, Z
    102e:	63 e3       	ldi	r22, 0x33	; 51
    1030:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <I2C_ByteRead>
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	98 2f       	mov	r25, r24
    103a:	88 27       	eor	r24, r24
    103c:	9c 01       	movw	r18, r24
    103e:	de 01       	movw	r26, r28
    1040:	a7 5a       	subi	r26, 0xA7	; 167
    1042:	bf 4f       	sbci	r27, 0xFF	; 255
    1044:	fe 01       	movw	r30, r28
    1046:	e7 5a       	subi	r30, 0xA7	; 167
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	82 2b       	or	r24, r18
    1050:	93 2b       	or	r25, r19
    1052:	8d 93       	st	X+, r24
    1054:	9c 93       	st	X, r25
    1056:	fe 01       	movw	r30, r28
    1058:	ed 5b       	subi	r30, 0xBD	; 189
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 e8       	ldi	r26, 0x80	; 128
    1062:	bf e3       	ldi	r27, 0x3F	; 63
    1064:	80 83       	st	Z, r24
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	a2 83       	std	Z+2, r26	; 0x02
    106a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106c:	8e 01       	movw	r16, r28
    106e:	01 5c       	subi	r16, 0xC1	; 193
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	fe 01       	movw	r30, r28
    1074:	ed 5b       	subi	r30, 0xBD	; 189
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	93 81       	ldd	r25, Z+3	; 0x03
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e8       	ldi	r19, 0x80	; 128
    1084:	4b e3       	ldi	r20, 0x3B	; 59
    1086:	55 e4       	ldi	r21, 0x45	; 69
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	f8 01       	movw	r30, r16
    1092:	80 83       	st	Z, r24
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	a2 83       	std	Z+2, r26	; 0x02
    1098:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    109a:	fe 01       	movw	r30, r28
    109c:	ff 96       	adiw	r30, 0x3f	; 63
    109e:	60 81       	ld	r22, Z
    10a0:	71 81       	ldd	r23, Z+1	; 0x01
    10a2:	82 81       	ldd	r24, Z+2	; 0x02
    10a4:	93 81       	ldd	r25, Z+3	; 0x03
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e8       	ldi	r20, 0x80	; 128
    10ac:	5f e3       	ldi	r21, 0x3F	; 63
    10ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10b2:	88 23       	and	r24, r24
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <Accelerometor_ReadAxis+0x248>
		__ticks = 1;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9e af       	std	Y+62, r25	; 0x3e
    10bc:	8d af       	std	Y+61, r24	; 0x3d
    10be:	46 c0       	rjmp	.+140    	; 0x114c <Accelerometor_ReadAxis+0x2d4>
	else if (__tmp > 65535)
    10c0:	fe 01       	movw	r30, r28
    10c2:	ff 96       	adiw	r30, 0x3f	; 63
    10c4:	60 81       	ld	r22, Z
    10c6:	71 81       	ldd	r23, Z+1	; 0x01
    10c8:	82 81       	ldd	r24, Z+2	; 0x02
    10ca:	93 81       	ldd	r25, Z+3	; 0x03
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	3f ef       	ldi	r19, 0xFF	; 255
    10d0:	4f e7       	ldi	r20, 0x7F	; 127
    10d2:	57 e4       	ldi	r21, 0x47	; 71
    10d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10d8:	18 16       	cp	r1, r24
    10da:	64 f5       	brge	.+88     	; 0x1134 <Accelerometor_ReadAxis+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10dc:	fe 01       	movw	r30, r28
    10de:	ed 5b       	subi	r30, 0xBD	; 189
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	60 81       	ld	r22, Z
    10e4:	71 81       	ldd	r23, Z+1	; 0x01
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e2       	ldi	r20, 0x20	; 32
    10f0:	51 e4       	ldi	r21, 0x41	; 65
    10f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	bc 01       	movw	r22, r24
    10fc:	cd 01       	movw	r24, r26
    10fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9e af       	std	Y+62, r25	; 0x3e
    1108:	8d af       	std	Y+61, r24	; 0x3d
    110a:	0f c0       	rjmp	.+30     	; 0x112a <Accelerometor_ReadAxis+0x2b2>
    110c:	8c e2       	ldi	r24, 0x2C	; 44
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	9c af       	std	Y+60, r25	; 0x3c
    1112:	8b af       	std	Y+59, r24	; 0x3b
    1114:	8b ad       	ldd	r24, Y+59	; 0x3b
    1116:	9c ad       	ldd	r25, Y+60	; 0x3c
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <Accelerometor_ReadAxis+0x2a0>
    111c:	9c af       	std	Y+60, r25	; 0x3c
    111e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1120:	8d ad       	ldd	r24, Y+61	; 0x3d
    1122:	9e ad       	ldd	r25, Y+62	; 0x3e
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	9e af       	std	Y+62, r25	; 0x3e
    1128:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112a:	8d ad       	ldd	r24, Y+61	; 0x3d
    112c:	9e ad       	ldd	r25, Y+62	; 0x3e
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	69 f7       	brne	.-38     	; 0x110c <Accelerometor_ReadAxis+0x294>
    1132:	16 c0       	rjmp	.+44     	; 0x1160 <Accelerometor_ReadAxis+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1134:	fe 01       	movw	r30, r28
    1136:	ff 96       	adiw	r30, 0x3f	; 63
    1138:	60 81       	ld	r22, Z
    113a:	71 81       	ldd	r23, Z+1	; 0x01
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	9e af       	std	Y+62, r25	; 0x3e
    114a:	8d af       	std	Y+61, r24	; 0x3d
    114c:	8d ad       	ldd	r24, Y+61	; 0x3d
    114e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1150:	9a af       	std	Y+58, r25	; 0x3a
    1152:	89 af       	std	Y+57, r24	; 0x39
    1154:	89 ad       	ldd	r24, Y+57	; 0x39
    1156:	9a ad       	ldd	r25, Y+58	; 0x3a
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <Accelerometor_ReadAxis+0x2e0>
    115c:	9a af       	std	Y+58, r25	; 0x3a
    115e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	Y_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY0);
    1160:	fe 01       	movw	r30, r28
    1162:	e5 5a       	subi	r30, 0xA5	; 165
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	80 81       	ld	r24, Z
    1168:	64 e3       	ldi	r22, 0x34	; 52
    116a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <I2C_ByteRead>
    116e:	fe 01       	movw	r30, r28
    1170:	e9 5a       	subi	r30, 0xA9	; 169
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a0 e8       	ldi	r26, 0x80	; 128
    1182:	bf e3       	ldi	r27, 0x3F	; 63
    1184:	8d ab       	std	Y+53, r24	; 0x35
    1186:	9e ab       	std	Y+54, r25	; 0x36
    1188:	af ab       	std	Y+55, r26	; 0x37
    118a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	6d a9       	ldd	r22, Y+53	; 0x35
    118e:	7e a9       	ldd	r23, Y+54	; 0x36
    1190:	8f a9       	ldd	r24, Y+55	; 0x37
    1192:	98 ad       	ldd	r25, Y+56	; 0x38
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e8       	ldi	r19, 0x80	; 128
    1198:	4b e3       	ldi	r20, 0x3B	; 59
    119a:	55 e4       	ldi	r21, 0x45	; 69
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	89 ab       	std	Y+49, r24	; 0x31
    11a6:	9a ab       	std	Y+50, r25	; 0x32
    11a8:	ab ab       	std	Y+51, r26	; 0x33
    11aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11ac:	69 a9       	ldd	r22, Y+49	; 0x31
    11ae:	7a a9       	ldd	r23, Y+50	; 0x32
    11b0:	8b a9       	ldd	r24, Y+51	; 0x33
    11b2:	9c a9       	ldd	r25, Y+52	; 0x34
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	2c f4       	brge	.+10     	; 0x11ce <Accelerometor_ReadAxis+0x356>
		__ticks = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	98 ab       	std	Y+48, r25	; 0x30
    11ca:	8f a7       	std	Y+47, r24	; 0x2f
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <Accelerometor_ReadAxis+0x3d4>
	else if (__tmp > 65535)
    11ce:	69 a9       	ldd	r22, Y+49	; 0x31
    11d0:	7a a9       	ldd	r23, Y+50	; 0x32
    11d2:	8b a9       	ldd	r24, Y+51	; 0x33
    11d4:	9c a9       	ldd	r25, Y+52	; 0x34
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11e2:	18 16       	cp	r1, r24
    11e4:	4c f5       	brge	.+82     	; 0x1238 <Accelerometor_ReadAxis+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	6d a9       	ldd	r22, Y+53	; 0x35
    11e8:	7e a9       	ldd	r23, Y+54	; 0x36
    11ea:	8f a9       	ldd	r24, Y+55	; 0x37
    11ec:	98 ad       	ldd	r25, Y+56	; 0x38
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	51 e4       	ldi	r21, 0x41	; 65
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	98 ab       	std	Y+48, r25	; 0x30
    120c:	8f a7       	std	Y+47, r24	; 0x2f
    120e:	0f c0       	rjmp	.+30     	; 0x122e <Accelerometor_ReadAxis+0x3b6>
    1210:	8c e2       	ldi	r24, 0x2C	; 44
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	9e a7       	std	Y+46, r25	; 0x2e
    1216:	8d a7       	std	Y+45, r24	; 0x2d
    1218:	8d a5       	ldd	r24, Y+45	; 0x2d
    121a:	9e a5       	ldd	r25, Y+46	; 0x2e
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <Accelerometor_ReadAxis+0x3a4>
    1220:	9e a7       	std	Y+46, r25	; 0x2e
    1222:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1224:	8f a5       	ldd	r24, Y+47	; 0x2f
    1226:	98 a9       	ldd	r25, Y+48	; 0x30
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	98 ab       	std	Y+48, r25	; 0x30
    122c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1230:	98 a9       	ldd	r25, Y+48	; 0x30
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	69 f7       	brne	.-38     	; 0x1210 <Accelerometor_ReadAxis+0x398>
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <Accelerometor_ReadAxis+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	69 a9       	ldd	r22, Y+49	; 0x31
    123a:	7a a9       	ldd	r23, Y+50	; 0x32
    123c:	8b a9       	ldd	r24, Y+51	; 0x33
    123e:	9c a9       	ldd	r25, Y+52	; 0x34
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	98 ab       	std	Y+48, r25	; 0x30
    124a:	8f a7       	std	Y+47, r24	; 0x2f
    124c:	8f a5       	ldd	r24, Y+47	; 0x2f
    124e:	98 a9       	ldd	r25, Y+48	; 0x30
    1250:	9c a7       	std	Y+44, r25	; 0x2c
    1252:	8b a7       	std	Y+43, r24	; 0x2b
    1254:	8b a5       	ldd	r24, Y+43	; 0x2b
    1256:	9c a5       	ldd	r25, Y+44	; 0x2c
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <Accelerometor_ReadAxis+0x3e0>
    125c:	9c a7       	std	Y+44, r25	; 0x2c
    125e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Y_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY1))<<8;
    1260:	fe 01       	movw	r30, r28
    1262:	e5 5a       	subi	r30, 0xA5	; 165
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	80 81       	ld	r24, Z
    1268:	65 e3       	ldi	r22, 0x35	; 53
    126a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <I2C_ByteRead>
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	98 2f       	mov	r25, r24
    1274:	88 27       	eor	r24, r24
    1276:	9c 01       	movw	r18, r24
    1278:	de 01       	movw	r26, r28
    127a:	a9 5a       	subi	r26, 0xA9	; 169
    127c:	bf 4f       	sbci	r27, 0xFF	; 255
    127e:	fe 01       	movw	r30, r28
    1280:	e9 5a       	subi	r30, 0xA9	; 169
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	82 2b       	or	r24, r18
    128a:	93 2b       	or	r25, r19
    128c:	8d 93       	st	X+, r24
    128e:	9c 93       	st	X, r25
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a0 e8       	ldi	r26, 0x80	; 128
    1296:	bf e3       	ldi	r27, 0x3F	; 63
    1298:	8f a3       	std	Y+39, r24	; 0x27
    129a:	98 a7       	std	Y+40, r25	; 0x28
    129c:	a9 a7       	std	Y+41, r26	; 0x29
    129e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a0:	6f a1       	ldd	r22, Y+39	; 0x27
    12a2:	78 a5       	ldd	r23, Y+40	; 0x28
    12a4:	89 a5       	ldd	r24, Y+41	; 0x29
    12a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e8       	ldi	r19, 0x80	; 128
    12ac:	4b e3       	ldi	r20, 0x3B	; 59
    12ae:	55 e4       	ldi	r21, 0x45	; 69
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	8b a3       	std	Y+35, r24	; 0x23
    12ba:	9c a3       	std	Y+36, r25	; 0x24
    12bc:	ad a3       	std	Y+37, r26	; 0x25
    12be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c0:	6b a1       	ldd	r22, Y+35	; 0x23
    12c2:	7c a1       	ldd	r23, Y+36	; 0x24
    12c4:	8d a1       	ldd	r24, Y+37	; 0x25
    12c6:	9e a1       	ldd	r25, Y+38	; 0x26
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <Accelerometor_ReadAxis+0x46a>
		__ticks = 1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9a a3       	std	Y+34, r25	; 0x22
    12de:	89 a3       	std	Y+33, r24	; 0x21
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <Accelerometor_ReadAxis+0x4e8>
	else if (__tmp > 65535)
    12e2:	6b a1       	ldd	r22, Y+35	; 0x23
    12e4:	7c a1       	ldd	r23, Y+36	; 0x24
    12e6:	8d a1       	ldd	r24, Y+37	; 0x25
    12e8:	9e a1       	ldd	r25, Y+38	; 0x26
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	3f ef       	ldi	r19, 0xFF	; 255
    12ee:	4f e7       	ldi	r20, 0x7F	; 127
    12f0:	57 e4       	ldi	r21, 0x47	; 71
    12f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	4c f5       	brge	.+82     	; 0x134c <Accelerometor_ReadAxis+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	6f a1       	ldd	r22, Y+39	; 0x27
    12fc:	78 a5       	ldd	r23, Y+40	; 0x28
    12fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1300:	9a a5       	ldd	r25, Y+42	; 0x2a
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	51 e4       	ldi	r21, 0x41	; 65
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9a a3       	std	Y+34, r25	; 0x22
    1320:	89 a3       	std	Y+33, r24	; 0x21
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <Accelerometor_ReadAxis+0x4ca>
    1324:	8c e2       	ldi	r24, 0x2C	; 44
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	98 a3       	std	Y+32, r25	; 0x20
    132a:	8f 8f       	std	Y+31, r24	; 0x1f
    132c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    132e:	98 a1       	ldd	r25, Y+32	; 0x20
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <Accelerometor_ReadAxis+0x4b8>
    1334:	98 a3       	std	Y+32, r25	; 0x20
    1336:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1338:	89 a1       	ldd	r24, Y+33	; 0x21
    133a:	9a a1       	ldd	r25, Y+34	; 0x22
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9a a3       	std	Y+34, r25	; 0x22
    1340:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	89 a1       	ldd	r24, Y+33	; 0x21
    1344:	9a a1       	ldd	r25, Y+34	; 0x22
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f7       	brne	.-38     	; 0x1324 <Accelerometor_ReadAxis+0x4ac>
    134a:	14 c0       	rjmp	.+40     	; 0x1374 <Accelerometor_ReadAxis+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134c:	6b a1       	ldd	r22, Y+35	; 0x23
    134e:	7c a1       	ldd	r23, Y+36	; 0x24
    1350:	8d a1       	ldd	r24, Y+37	; 0x25
    1352:	9e a1       	ldd	r25, Y+38	; 0x26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9a a3       	std	Y+34, r25	; 0x22
    135e:	89 a3       	std	Y+33, r24	; 0x21
    1360:	89 a1       	ldd	r24, Y+33	; 0x21
    1362:	9a a1       	ldd	r25, Y+34	; 0x22
    1364:	9e 8f       	std	Y+30, r25	; 0x1e
    1366:	8d 8f       	std	Y+29, r24	; 0x1d
    1368:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <Accelerometor_ReadAxis+0x4f4>
    1370:	9e 8f       	std	Y+30, r25	; 0x1e
    1372:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Z_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ0);
    1374:	fe 01       	movw	r30, r28
    1376:	e5 5a       	subi	r30, 0xA5	; 165
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	80 81       	ld	r24, Z
    137c:	66 e3       	ldi	r22, 0x36	; 54
    137e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <I2C_ByteRead>
    1382:	fe 01       	movw	r30, r28
    1384:	eb 5a       	subi	r30, 0xAB	; 171
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a0 e8       	ldi	r26, 0x80	; 128
    1396:	bf e3       	ldi	r27, 0x3F	; 63
    1398:	89 8f       	std	Y+25, r24	; 0x19
    139a:	9a 8f       	std	Y+26, r25	; 0x1a
    139c:	ab 8f       	std	Y+27, r26	; 0x1b
    139e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a0:	69 8d       	ldd	r22, Y+25	; 0x19
    13a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e8       	ldi	r19, 0x80	; 128
    13ac:	4b e3       	ldi	r20, 0x3B	; 59
    13ae:	55 e4       	ldi	r21, 0x45	; 69
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8d 8b       	std	Y+21, r24	; 0x15
    13ba:	9e 8b       	std	Y+22, r25	; 0x16
    13bc:	af 8b       	std	Y+23, r26	; 0x17
    13be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13c0:	6d 89       	ldd	r22, Y+21	; 0x15
    13c2:	7e 89       	ldd	r23, Y+22	; 0x16
    13c4:	8f 89       	ldd	r24, Y+23	; 0x17
    13c6:	98 8d       	ldd	r25, Y+24	; 0x18
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <Accelerometor_ReadAxis+0x56a>
		__ticks = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9c 8b       	std	Y+20, r25	; 0x14
    13de:	8b 8b       	std	Y+19, r24	; 0x13
    13e0:	3f c0       	rjmp	.+126    	; 0x1460 <Accelerometor_ReadAxis+0x5e8>
	else if (__tmp > 65535)
    13e2:	6d 89       	ldd	r22, Y+21	; 0x15
    13e4:	7e 89       	ldd	r23, Y+22	; 0x16
    13e6:	8f 89       	ldd	r24, Y+23	; 0x17
    13e8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	4c f5       	brge	.+82     	; 0x144c <Accelerometor_ReadAxis+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fa:	69 8d       	ldd	r22, Y+25	; 0x19
    13fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1400:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e2       	ldi	r20, 0x20	; 32
    1408:	51 e4       	ldi	r21, 0x41	; 65
    140a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9c 8b       	std	Y+20, r25	; 0x14
    1420:	8b 8b       	std	Y+19, r24	; 0x13
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <Accelerometor_ReadAxis+0x5ca>
    1424:	8c e2       	ldi	r24, 0x2C	; 44
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	9a 8b       	std	Y+18, r25	; 0x12
    142a:	89 8b       	std	Y+17, r24	; 0x11
    142c:	89 89       	ldd	r24, Y+17	; 0x11
    142e:	9a 89       	ldd	r25, Y+18	; 0x12
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <Accelerometor_ReadAxis+0x5b8>
    1434:	9a 8b       	std	Y+18, r25	; 0x12
    1436:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1438:	8b 89       	ldd	r24, Y+19	; 0x13
    143a:	9c 89       	ldd	r25, Y+20	; 0x14
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	9c 8b       	std	Y+20, r25	; 0x14
    1440:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1442:	8b 89       	ldd	r24, Y+19	; 0x13
    1444:	9c 89       	ldd	r25, Y+20	; 0x14
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	69 f7       	brne	.-38     	; 0x1424 <Accelerometor_ReadAxis+0x5ac>
    144a:	14 c0       	rjmp	.+40     	; 0x1474 <Accelerometor_ReadAxis+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144c:	6d 89       	ldd	r22, Y+21	; 0x15
    144e:	7e 89       	ldd	r23, Y+22	; 0x16
    1450:	8f 89       	ldd	r24, Y+23	; 0x17
    1452:	98 8d       	ldd	r25, Y+24	; 0x18
    1454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9c 8b       	std	Y+20, r25	; 0x14
    145e:	8b 8b       	std	Y+19, r24	; 0x13
    1460:	8b 89       	ldd	r24, Y+19	; 0x13
    1462:	9c 89       	ldd	r25, Y+20	; 0x14
    1464:	98 8b       	std	Y+16, r25	; 0x10
    1466:	8f 87       	std	Y+15, r24	; 0x0f
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	98 89       	ldd	r25, Y+16	; 0x10
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <Accelerometor_ReadAxis+0x5f4>
    1470:	98 8b       	std	Y+16, r25	; 0x10
    1472:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Z_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ1))<<8;
    1474:	fe 01       	movw	r30, r28
    1476:	e5 5a       	subi	r30, 0xA5	; 165
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	80 81       	ld	r24, Z
    147c:	67 e3       	ldi	r22, 0x37	; 55
    147e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <I2C_ByteRead>
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	98 2f       	mov	r25, r24
    1488:	88 27       	eor	r24, r24
    148a:	9c 01       	movw	r18, r24
    148c:	de 01       	movw	r26, r28
    148e:	ab 5a       	subi	r26, 0xAB	; 171
    1490:	bf 4f       	sbci	r27, 0xFF	; 255
    1492:	fe 01       	movw	r30, r28
    1494:	eb 5a       	subi	r30, 0xAB	; 171
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	82 2b       	or	r24, r18
    149e:	93 2b       	or	r25, r19
    14a0:	8d 93       	st	X+, r24
    14a2:	9c 93       	st	X, r25
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e8       	ldi	r26, 0x80	; 128
    14aa:	bf e3       	ldi	r27, 0x3F	; 63
    14ac:	8b 87       	std	Y+11, r24	; 0x0b
    14ae:	9c 87       	std	Y+12, r25	; 0x0c
    14b0:	ad 87       	std	Y+13, r26	; 0x0d
    14b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e8       	ldi	r19, 0x80	; 128
    14c0:	4b e3       	ldi	r20, 0x3B	; 59
    14c2:	55 e4       	ldi	r21, 0x45	; 69
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8f 83       	std	Y+7, r24	; 0x07
    14ce:	98 87       	std	Y+8, r25	; 0x08
    14d0:	a9 87       	std	Y+9, r26	; 0x09
    14d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d4:	6f 81       	ldd	r22, Y+7	; 0x07
    14d6:	78 85       	ldd	r23, Y+8	; 0x08
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <Accelerometor_ReadAxis+0x67e>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <Accelerometor_ReadAxis+0x6fc>
	else if (__tmp > 65535)
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <Accelerometor_ReadAxis+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <Accelerometor_ReadAxis+0x6de>
    1538:	8c e2       	ldi	r24, 0x2C	; 44
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	9c 83       	std	Y+4, r25	; 0x04
    153e:	8b 83       	std	Y+3, r24	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <Accelerometor_ReadAxis+0x6cc>
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <Accelerometor_ReadAxis+0x6c0>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <Accelerometor_ReadAxis+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6f 81       	ldd	r22, Y+7	; 0x07
    1562:	78 85       	ldd	r23, Y+8	; 0x08
    1564:	89 85       	ldd	r24, Y+9	; 0x09
    1566:	9a 85       	ldd	r25, Y+10	; 0x0a
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <Accelerometor_ReadAxis+0x708>
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);	
	
	Data_ptr ->X_Axis= (X_Axis_Read);
    1588:	fe 01       	movw	r30, r28
    158a:	e7 5a       	subi	r30, 0xA7	; 167
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	80 81       	ld	r24, Z
    1590:	91 81       	ldd	r25, Z+1	; 0x01
    1592:	cc 01       	movw	r24, r24
    1594:	a0 e0       	ldi	r26, 0x00	; 0
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	fe 01       	movw	r30, r28
    15a6:	e4 5a       	subi	r30, 0xA4	; 164
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	01 90       	ld	r0, Z+
    15ac:	f0 81       	ld	r31, Z
    15ae:	e0 2d       	mov	r30, r0
    15b0:	80 83       	st	Z, r24
    15b2:	91 83       	std	Z+1, r25	; 0x01
    15b4:	a2 83       	std	Z+2, r26	; 0x02
    15b6:	b3 83       	std	Z+3, r27	; 0x03
	Data_ptr ->Y_Axis= (Y_Axis_Read);
    15b8:	fe 01       	movw	r30, r28
    15ba:	e9 5a       	subi	r30, 0xA9	; 169
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	80 81       	ld	r24, Z
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	cc 01       	movw	r24, r24
    15c4:	a0 e0       	ldi	r26, 0x00	; 0
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	bc 01       	movw	r22, r24
    15ca:	cd 01       	movw	r24, r26
    15cc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	fe 01       	movw	r30, r28
    15d6:	e4 5a       	subi	r30, 0xA4	; 164
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	01 90       	ld	r0, Z+
    15dc:	f0 81       	ld	r31, Z
    15de:	e0 2d       	mov	r30, r0
    15e0:	84 83       	std	Z+4, r24	; 0x04
    15e2:	95 83       	std	Z+5, r25	; 0x05
    15e4:	a6 83       	std	Z+6, r26	; 0x06
    15e6:	b7 83       	std	Z+7, r27	; 0x07
	Data_ptr ->Z_Axis= (Z_Axis_Read);
    15e8:	fe 01       	movw	r30, r28
    15ea:	eb 5a       	subi	r30, 0xAB	; 171
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	80 81       	ld	r24, Z
    15f0:	91 81       	ldd	r25, Z+1	; 0x01
    15f2:	cc 01       	movw	r24, r24
    15f4:	a0 e0       	ldi	r26, 0x00	; 0
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	fe 01       	movw	r30, r28
    1606:	e4 5a       	subi	r30, 0xA4	; 164
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	01 90       	ld	r0, Z+
    160c:	f0 81       	ld	r31, Z
    160e:	e0 2d       	mov	r30, r0
    1610:	80 87       	std	Z+8, r24	; 0x08
    1612:	91 87       	std	Z+9, r25	; 0x09
    1614:	a2 87       	std	Z+10, r26	; 0x0a
    1616:	b3 87       	std	Z+11, r27	; 0x0b
}
    1618:	c3 5a       	subi	r28, 0xA3	; 163
    161a:	df 4f       	sbci	r29, 0xFF	; 255
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <TWI_Init>:

#include "i2c.h"
#include "lcd.h"

void TWI_Init(I2C_Prescaler Prescale , I2C_interruptState int_state , uint32 F_SCL , uint8 Address)
{
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	29 97       	sbiw	r28, 0x09	; 9
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	6a 83       	std	Y+2, r22	; 0x02
    164c:	2b 83       	std	Y+3, r18	; 0x03
    164e:	3c 83       	std	Y+4, r19	; 0x04
    1650:	4d 83       	std	Y+5, r20	; 0x05
    1652:	5e 83       	std	Y+6, r21	; 0x06
    1654:	0f 83       	std	Y+7, r16	; 0x07
	TWAR = Address<<1;
    1656:	e2 e2       	ldi	r30, 0x22	; 34
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8f 81       	ldd	r24, Y+7	; 0x07
    165c:	88 0f       	add	r24, r24
    165e:	80 83       	st	Z, r24
	 /*  Calculating Bit Rate: */
	switch (Prescale)
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	39 87       	std	Y+9, r19	; 0x09
    1668:	28 87       	std	Y+8, r18	; 0x08
    166a:	88 85       	ldd	r24, Y+8	; 0x08
    166c:	99 85       	ldd	r25, Y+9	; 0x09
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	09 f4       	brne	.+2      	; 0x1676 <TWI_Init+0x46>
    1674:	45 c0       	rjmp	.+138    	; 0x1700 <TWI_Init+0xd0>
    1676:	e8 85       	ldd	r30, Y+8	; 0x08
    1678:	f9 85       	ldd	r31, Y+9	; 0x09
    167a:	e2 30       	cpi	r30, 0x02	; 2
    167c:	f1 05       	cpc	r31, r1
    167e:	34 f4       	brge	.+12     	; 0x168c <TWI_Init+0x5c>
    1680:	28 85       	ldd	r18, Y+8	; 0x08
    1682:	39 85       	ldd	r19, Y+9	; 0x09
    1684:	21 15       	cp	r18, r1
    1686:	31 05       	cpc	r19, r1
    1688:	71 f0       	breq	.+28     	; 0x16a6 <TWI_Init+0x76>
    168a:	e8 c0       	rjmp	.+464    	; 0x185c <TWI_Init+0x22c>
    168c:	88 85       	ldd	r24, Y+8	; 0x08
    168e:	99 85       	ldd	r25, Y+9	; 0x09
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	91 05       	cpc	r25, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <TWI_Init+0x68>
    1696:	65 c0       	rjmp	.+202    	; 0x1762 <TWI_Init+0x132>
    1698:	e8 85       	ldd	r30, Y+8	; 0x08
    169a:	f9 85       	ldd	r31, Y+9	; 0x09
    169c:	e3 30       	cpi	r30, 0x03	; 3
    169e:	f1 05       	cpc	r31, r1
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <TWI_Init+0x74>
    16a2:	9a c0       	rjmp	.+308    	; 0x17d8 <TWI_Init+0x1a8>
    16a4:	db c0       	rjmp	.+438    	; 0x185c <TWI_Init+0x22c>
	{
		case I2C_PRESCALE1:
								TWBR = (uint8) (((float)F_CPU/(2.0*F_SCL)) -8);
    16a6:	00 e2       	ldi	r16, 0x20	; 32
    16a8:	10 e0       	ldi	r17, 0x00	; 0
    16aa:	6b 81       	ldd	r22, Y+3	; 0x03
    16ac:	7c 81       	ldd	r23, Y+4	; 0x04
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    16b6:	9b 01       	movw	r18, r22
    16b8:	ac 01       	movw	r20, r24
    16ba:	ca 01       	movw	r24, r20
    16bc:	b9 01       	movw	r22, r18
    16be:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	9c 01       	movw	r18, r24
    16c8:	ad 01       	movw	r20, r26
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	7b e1       	ldi	r23, 0x1B	; 27
    16ce:	87 e3       	ldi	r24, 0x37	; 55
    16d0:	9b e4       	ldi	r25, 0x4B	; 75
    16d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	51 e4       	ldi	r21, 0x41	; 65
    16e6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	f8 01       	movw	r30, r16
    16fc:	80 83       	st	Z, r24
    16fe:	ae c0       	rjmp	.+348    	; 0x185c <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE4:
								TWBR = (uint8) (((float)F_CPU/(8.0*F_SCL)) -2);
    1700:	00 e2       	ldi	r16, 0x20	; 32
    1702:	10 e0       	ldi	r17, 0x00	; 0
    1704:	6b 81       	ldd	r22, Y+3	; 0x03
    1706:	7c 81       	ldd	r23, Y+4	; 0x04
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	51 e4       	ldi	r21, 0x41	; 65
    1720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	9c 01       	movw	r18, r24
    172a:	ad 01       	movw	r20, r26
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	7b e1       	ldi	r23, 0x1B	; 27
    1730:	87 e3       	ldi	r24, 0x37	; 55
    1732:	9b e4       	ldi	r25, 0x4B	; 75
    1734:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	50 e4       	ldi	r21, 0x40	; 64
    1748:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	bc 01       	movw	r22, r24
    1752:	cd 01       	movw	r24, r26
    1754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	f8 01       	movw	r30, r16
    175e:	80 83       	st	Z, r24
    1760:	7d c0       	rjmp	.+250    	; 0x185c <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE16:
								TWBR = (uint8) (((float)F_CPU/(32*F_SCL)) -0.5);
    1762:	00 e2       	ldi	r16, 0x20	; 32
    1764:	10 e0       	ldi	r17, 0x00	; 0
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	ad 81       	ldd	r26, Y+5	; 0x05
    176c:	be 81       	ldd	r27, Y+6	; 0x06
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	aa 1f       	adc	r26, r26
    1774:	bb 1f       	adc	r27, r27
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	aa 1f       	adc	r26, r26
    177c:	bb 1f       	adc	r27, r27
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	aa 1f       	adc	r26, r26
    1784:	bb 1f       	adc	r27, r27
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	aa 1f       	adc	r26, r26
    178c:	bb 1f       	adc	r27, r27
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	aa 1f       	adc	r26, r26
    1794:	bb 1f       	adc	r27, r27
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    179e:	9b 01       	movw	r18, r22
    17a0:	ac 01       	movw	r20, r24
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	7b e1       	ldi	r23, 0x1B	; 27
    17a6:	87 e3       	ldi	r24, 0x37	; 55
    17a8:	9b e4       	ldi	r25, 0x4B	; 75
    17aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	bc 01       	movw	r22, r24
    17c8:	cd 01       	movw	r24, r26
    17ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	f8 01       	movw	r30, r16
    17d4:	80 83       	st	Z, r24
    17d6:	42 c0       	rjmp	.+132    	; 0x185c <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE64:
								TWBR = (uint8) (((float)F_CPU/(128*F_SCL)) -0.125);
    17d8:	00 e2       	ldi	r16, 0x20	; 32
    17da:	10 e0       	ldi	r17, 0x00	; 0
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	ad 81       	ldd	r26, Y+5	; 0x05
    17e2:	be 81       	ldd	r27, Y+6	; 0x06
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	aa 1f       	adc	r26, r26
    17ea:	bb 1f       	adc	r27, r27
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	aa 1f       	adc	r26, r26
    17f2:	bb 1f       	adc	r27, r27
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	aa 1f       	adc	r26, r26
    17fa:	bb 1f       	adc	r27, r27
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	aa 1f       	adc	r26, r26
    1802:	bb 1f       	adc	r27, r27
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	aa 1f       	adc	r26, r26
    180a:	bb 1f       	adc	r27, r27
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	aa 1f       	adc	r26, r26
    1812:	bb 1f       	adc	r27, r27
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	aa 1f       	adc	r26, r26
    181a:	bb 1f       	adc	r27, r27
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1824:	9b 01       	movw	r18, r22
    1826:	ac 01       	movw	r20, r24
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	7b e1       	ldi	r23, 0x1B	; 27
    182c:	87 e3       	ldi	r24, 0x37	; 55
    182e:	9b e4       	ldi	r25, 0x4B	; 75
    1830:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	5e e3       	ldi	r21, 0x3E	; 62
    1844:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	f8 01       	movw	r30, r16
    185a:	80 83       	st	Z, r24
		default:
					break;
	}
   
	
	TWSR |= (Prescale & 0x03);
    185c:	a1 e2       	ldi	r26, 0x21	; 33
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e1 e2       	ldi	r30, 0x21	; 33
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	98 2f       	mov	r25, r24
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	83 70       	andi	r24, 0x03	; 3
    186c:	89 2b       	or	r24, r25
    186e:	8c 93       	st	X, r24
	TWCR |= (1<<TWEN) | (int_state & 0x01) ;
    1870:	a6 e5       	ldi	r26, 0x56	; 86
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e6 e5       	ldi	r30, 0x56	; 86
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	98 2f       	mov	r25, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	81 70       	andi	r24, 0x01	; 1
    1880:	84 60       	ori	r24, 0x04	; 4
    1882:	89 2b       	or	r24, r25
    1884:	8c 93       	st	X, r24
}
    1886:	29 96       	adiw	r28, 0x09	; 9
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <TWI_Start>:

void TWI_Start(void)
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
    18a4:	e6 e5       	ldi	r30, 0x56	; 86
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	84 ea       	ldi	r24, 0xA4	; 164
    18aa:	80 83       	st	Z, r24
 
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    18ac:	e6 e5       	ldi	r30, 0x56	; 86
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	88 23       	and	r24, r24
    18b4:	dc f7       	brge	.-10     	; 0x18ac <TWI_Start+0x10>
}
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <TWI_Stop>:

void TWI_Stop(void)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
    18c4:	e6 e5       	ldi	r30, 0x56	; 86
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	84 e9       	ldi	r24, 0x94	; 148
    18ca:	80 83       	st	Z, r24
 
}
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <TWI_Write>:

void TWI_Write(uint8 data)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    18de:	e3 e2       	ldi	r30, 0x23	; 35
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
   TWCR = (1<<TWEN) | (1<<TWINT);
    18e6:	e6 e5       	ldi	r30, 0x56	; 86
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	84 e8       	ldi	r24, 0x84	; 132
    18ec:	80 83       	st	Z, r24
   
   /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    18ee:	e6 e5       	ldi	r30, 0x56	; 86
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	88 23       	and	r24, r24
    18f6:	dc f7       	brge	.-10     	; 0x18ee <TWI_Write+0x1c>
}
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 

    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);    
    1908:	e6 e5       	ldi	r30, 0x56	; 86
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	84 ec       	ldi	r24, 0xC4	; 196
    190e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1910:	e6 e5       	ldi	r30, 0x56	; 86
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	88 23       	and	r24, r24
    1918:	dc f7       	brge	.-10     	; 0x1910 <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    191a:	e3 e2       	ldi	r30, 0x23	; 35
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
}
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62



		TWCR =(1<<TWEN) | (1<<TWINT);
    192e:	e6 e5       	ldi	r30, 0x56	; 86
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	84 e8       	ldi	r24, 0x84	; 132
    1934:	80 83       	st	Z, r24
/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
while(BIT_IS_CLEAR(TWCR,TWINT));
    1936:	e6 e5       	ldi	r30, 0x56	; 86
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	88 23       	and	r24, r24
    193e:	dc f7       	brge	.-10     	; 0x1936 <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    1940:	e3 e2       	ldi	r30, 0x23	; 35
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
}
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    1954:	e1 e2       	ldi	r30, 0x21	; 33
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	88 7f       	andi	r24, 0xF8	; 248
}
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <I2C_ByteWrite>:




void I2C_ByteWrite(uint8 SL_Address,uint8 Reg_Address ,uint8 Data )
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <I2C_ByteWrite+0x6>
    1968:	0f 92       	push	r0
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	6a 83       	std	Y+2, r22	; 0x02
    1972:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();
    1974:	0e 94 4e 0c 	call	0x189c	; 0x189c <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    1978:	0e 94 a6 0c 	call	0x194c	; 0x194c <TWI_Get_Status>
    197c:	88 30       	cpi	r24, 0x08	; 8
    197e:	19 f0       	breq	.+6      	; 0x1986 <I2C_ByteWrite+0x24>
	{
		TWI_Stop();
    1980:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TWI_Stop>
    1984:	21 c0       	rjmp	.+66     	; 0x19c8 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write((SL_Address<<1));
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	88 0f       	add	r24, r24
    198a:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_Write>
if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    198e:	0e 94 a6 0c 	call	0x194c	; 0x194c <TWI_Get_Status>
    1992:	88 31       	cpi	r24, 0x18	; 24
    1994:	19 f0       	breq	.+6      	; 0x199c <I2C_ByteWrite+0x3a>
	{

		TWI_Stop();
    1996:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TWI_Stop>
    199a:	16 c0       	rjmp	.+44     	; 0x19c8 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write(Reg_Address);
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    19a2:	0e 94 a6 0c 	call	0x194c	; 0x194c <TWI_Get_Status>
    19a6:	88 32       	cpi	r24, 0x28	; 40
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <I2C_ByteWrite+0x4e>
	{
		TWI_Stop();
    19aa:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TWI_Stop>
    19ae:	0c c0       	rjmp	.+24     	; 0x19c8 <I2C_ByteWrite+0x66>
		return ;
	}
	
TWI_Write(Data);
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    19b6:	0e 94 a6 0c 	call	0x194c	; 0x194c <TWI_Get_Status>
    19ba:	88 32       	cpi	r24, 0x28	; 40
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <I2C_ByteWrite+0x62>
	{

		TWI_Stop();
    19be:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TWI_Stop>
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
    19c4:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TWI_Stop>
	return ;

}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <I2C_ByteRead>:

 

 
uint8 I2C_ByteRead(uint8 SL_Address , uint8 Reg_Address)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <I2C_ByteRead+0x6>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <I2C_ByteRead+0x8>
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	8a 83       	std	Y+2, r24	; 0x02
    19e2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Data=0;
    19e4:	19 82       	std	Y+1, r1	; 0x01
	
	
	TWI_Start();
    19e6:	0e 94 4e 0c 	call	0x189c	; 0x189c <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    19ea:	0e 94 a6 0c 	call	0x194c	; 0x194c <TWI_Get_Status>
    19ee:	88 30       	cpi	r24, 0x08	; 8
    19f0:	29 f0       	breq	.+10     	; 0x19fc <I2C_ByteRead+0x28>
	{
		TWI_Stop();
    19f2:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TWI_Stop>
		return 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	8c 83       	std	Y+4, r24	; 0x04
    19fa:	3c c0       	rjmp	.+120    	; 0x1a74 <I2C_ByteRead+0xa0>
	}
	
	
	TWI_Write((SL_Address<<1));
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	88 0f       	add	r24, r24
    1a00:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    1a04:	0e 94 a6 0c 	call	0x194c	; 0x194c <TWI_Get_Status>
    1a08:	88 31       	cpi	r24, 0x18	; 24
    1a0a:	29 f0       	breq	.+10     	; 0x1a16 <I2C_ByteRead+0x42>
	{

		TWI_Stop();
    1a0c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TWI_Stop>
		return 2;
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	8c 83       	std	Y+4, r24	; 0x04
    1a14:	2f c0       	rjmp	.+94     	; 0x1a74 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write(Reg_Address);
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    1a1c:	0e 94 a6 0c 	call	0x194c	; 0x194c <TWI_Get_Status>
    1a20:	88 32       	cpi	r24, 0x28	; 40
    1a22:	29 f0       	breq	.+10     	; 0x1a2e <I2C_ByteRead+0x5a>
	{
		TWI_Stop();
    1a24:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TWI_Stop>
		return 3;
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	8c 83       	std	Y+4, r24	; 0x04
    1a2c:	23 c0       	rjmp	.+70     	; 0x1a74 <I2C_ByteRead+0xa0>
	}
	
	TWI_Start();
    1a2e:	0e 94 4e 0c 	call	0x189c	; 0x189c <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    1a32:	0e 94 a6 0c 	call	0x194c	; 0x194c <TWI_Get_Status>
    1a36:	80 31       	cpi	r24, 0x10	; 16
    1a38:	29 f0       	breq	.+10     	; 0x1a44 <I2C_ByteRead+0x70>
	{
		TWI_Stop();
    1a3a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TWI_Stop>
		return 4;
    1a3e:	84 e0       	ldi	r24, 0x04	; 4
    1a40:	8c 83       	std	Y+4, r24	; 0x04
    1a42:	18 c0       	rjmp	.+48     	; 0x1a74 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write((SL_Address<<1) | READ);
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	81 60       	ori	r24, 0x01	; 1
    1a50:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    1a54:	0e 94 a6 0c 	call	0x194c	; 0x194c <TWI_Get_Status>
    1a58:	80 34       	cpi	r24, 0x40	; 64
    1a5a:	29 f0       	breq	.+10     	; 0x1a66 <I2C_ByteRead+0x92>
	{

		TWI_Stop();
    1a5c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TWI_Stop>
		return 5;
    1a60:	85 e0       	ldi	r24, 0x05	; 5
    1a62:	8c 83       	std	Y+4, r24	; 0x04
    1a64:	07 c0       	rjmp	.+14     	; 0x1a74 <I2C_ByteRead+0xa0>
	}
	Data=TWI_Read_With_NACK();
    1a66:	0e 94 93 0c 	call	0x1926	; 0x1926 <TWI_Read_With_NACK>
    1a6a:	89 83       	std	Y+1, r24	; 0x01
	TWI_Stop();
    1a6c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TWI_Stop>
	
	return Data;		
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	8c 83       	std	Y+4, r24	; 0x04
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <LCD_Init>:

//LCD_DataDirection = 0xff;


void LCD_Init(void)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	e8 97       	sbiw	r28, 0x38	; 56
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a0 e2       	ldi	r26, 0x20	; 32
    1a9e:	b2 e4       	ldi	r27, 0x42	; 66
    1aa0:	8d ab       	std	Y+53, r24	; 0x35
    1aa2:	9e ab       	std	Y+54, r25	; 0x36
    1aa4:	af ab       	std	Y+55, r26	; 0x37
    1aa6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aaa:	7e a9       	ldd	r23, Y+54	; 0x36
    1aac:	8f a9       	ldd	r24, Y+55	; 0x37
    1aae:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e8       	ldi	r19, 0x80	; 128
    1ab4:	4b e3       	ldi	r20, 0x3B	; 59
    1ab6:	55 e4       	ldi	r21, 0x45	; 69
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	89 ab       	std	Y+49, r24	; 0x31
    1ac2:	9a ab       	std	Y+50, r25	; 0x32
    1ac4:	ab ab       	std	Y+51, r26	; 0x33
    1ac6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aca:	7a a9       	ldd	r23, Y+50	; 0x32
    1acc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ace:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <LCD_Init+0x66>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	98 ab       	std	Y+48, r25	; 0x30
    1ae6:	8f a7       	std	Y+47, r24	; 0x2f
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    1aea:	69 a9       	ldd	r22, Y+49	; 0x31
    1aec:	7a a9       	ldd	r23, Y+50	; 0x32
    1aee:	8b a9       	ldd	r24, Y+51	; 0x33
    1af0:	9c a9       	ldd	r25, Y+52	; 0x34
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6d a9       	ldd	r22, Y+53	; 0x35
    1b04:	7e a9       	ldd	r23, Y+54	; 0x36
    1b06:	8f a9       	ldd	r24, Y+55	; 0x37
    1b08:	98 ad       	ldd	r25, Y+56	; 0x38
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	98 ab       	std	Y+48, r25	; 0x30
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <LCD_Init+0xc6>
    1b2c:	8c e2       	ldi	r24, 0x2C	; 44
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	9e a7       	std	Y+46, r25	; 0x2e
    1b32:	8d a7       	std	Y+45, r24	; 0x2d
    1b34:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b36:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <LCD_Init+0xb4>
    1b3c:	9e a7       	std	Y+46, r25	; 0x2e
    1b3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b42:	98 a9       	ldd	r25, Y+48	; 0x30
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	98 ab       	std	Y+48, r25	; 0x30
    1b48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <LCD_Init+0xa8>
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	69 a9       	ldd	r22, Y+49	; 0x31
    1b56:	7a a9       	ldd	r23, Y+50	; 0x32
    1b58:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	98 ab       	std	Y+48, r25	; 0x30
    1b66:	8f a7       	std	Y+47, r24	; 0x2f
    1b68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6c:	9c a7       	std	Y+44, r25	; 0x2c
    1b6e:	8b a7       	std	Y+43, r24	; 0x2b
    1b70:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b72:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <LCD_Init+0xf0>
    1b78:	9c a7       	std	Y+44, r25	; 0x2c
    1b7a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_SendCommand (0b00111100);
    1b7c:	8c e3       	ldi	r24, 0x3C	; 60
    1b7e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_SendCommand>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a0 e4       	ldi	r26, 0x40	; 64
    1b88:	b0 e4       	ldi	r27, 0x40	; 64
    1b8a:	8f a3       	std	Y+39, r24	; 0x27
    1b8c:	98 a7       	std	Y+40, r25	; 0x28
    1b8e:	a9 a7       	std	Y+41, r26	; 0x29
    1b90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b92:	6f a1       	ldd	r22, Y+39	; 0x27
    1b94:	78 a5       	ldd	r23, Y+40	; 0x28
    1b96:	89 a5       	ldd	r24, Y+41	; 0x29
    1b98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e8       	ldi	r19, 0x80	; 128
    1b9e:	4b e3       	ldi	r20, 0x3B	; 59
    1ba0:	55 e4       	ldi	r21, 0x45	; 69
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	8b a3       	std	Y+35, r24	; 0x23
    1bac:	9c a3       	std	Y+36, r25	; 0x24
    1bae:	ad a3       	std	Y+37, r26	; 0x25
    1bb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e8       	ldi	r20, 0x80	; 128
    1bc0:	5f e3       	ldi	r21, 0x3F	; 63
    1bc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bc6:	88 23       	and	r24, r24
    1bc8:	2c f4       	brge	.+10     	; 0x1bd4 <LCD_Init+0x150>
		__ticks = 1;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	9a a3       	std	Y+34, r25	; 0x22
    1bd0:	89 a3       	std	Y+33, r24	; 0x21
    1bd2:	3f c0       	rjmp	.+126    	; 0x1c52 <LCD_Init+0x1ce>
	else if (__tmp > 65535)
    1bd4:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd6:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bda:	9e a1       	ldd	r25, Y+38	; 0x26
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	3f ef       	ldi	r19, 0xFF	; 255
    1be0:	4f e7       	ldi	r20, 0x7F	; 127
    1be2:	57 e4       	ldi	r21, 0x47	; 71
    1be4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be8:	18 16       	cp	r1, r24
    1bea:	4c f5       	brge	.+82     	; 0x1c3e <LCD_Init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bec:	6f a1       	ldd	r22, Y+39	; 0x27
    1bee:	78 a5       	ldd	r23, Y+40	; 0x28
    1bf0:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e2       	ldi	r20, 0x20	; 32
    1bfa:	51 e4       	ldi	r21, 0x41	; 65
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9a a3       	std	Y+34, r25	; 0x22
    1c12:	89 a3       	std	Y+33, r24	; 0x21
    1c14:	0f c0       	rjmp	.+30     	; 0x1c34 <LCD_Init+0x1b0>
    1c16:	8c e2       	ldi	r24, 0x2C	; 44
    1c18:	91 e0       	ldi	r25, 0x01	; 1
    1c1a:	98 a3       	std	Y+32, r25	; 0x20
    1c1c:	8f 8f       	std	Y+31, r24	; 0x1f
    1c1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c20:	98 a1       	ldd	r25, Y+32	; 0x20
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <LCD_Init+0x19e>
    1c26:	98 a3       	std	Y+32, r25	; 0x20
    1c28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	9a a3       	std	Y+34, r25	; 0x22
    1c32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c34:	89 a1       	ldd	r24, Y+33	; 0x21
    1c36:	9a a1       	ldd	r25, Y+34	; 0x22
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	69 f7       	brne	.-38     	; 0x1c16 <LCD_Init+0x192>
    1c3c:	14 c0       	rjmp	.+40     	; 0x1c66 <LCD_Init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c40:	7c a1       	ldd	r23, Y+36	; 0x24
    1c42:	8d a1       	ldd	r24, Y+37	; 0x25
    1c44:	9e a1       	ldd	r25, Y+38	; 0x26
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9a a3       	std	Y+34, r25	; 0x22
    1c50:	89 a3       	std	Y+33, r24	; 0x21
    1c52:	89 a1       	ldd	r24, Y+33	; 0x21
    1c54:	9a a1       	ldd	r25, Y+34	; 0x22
    1c56:	9e 8f       	std	Y+30, r25	; 0x1e
    1c58:	8d 8f       	std	Y+29, r24	; 0x1d
    1c5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <LCD_Init+0x1da>
    1c62:	9e 8f       	std	Y+30, r25	; 0x1e
    1c64:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);
	LCD_SendCommand(0b00001100);
    1c66:	8c e0       	ldi	r24, 0x0C	; 12
    1c68:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_SendCommand>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a0 e4       	ldi	r26, 0x40	; 64
    1c72:	b0 e4       	ldi	r27, 0x40	; 64
    1c74:	89 8f       	std	Y+25, r24	; 0x19
    1c76:	9a 8f       	std	Y+26, r25	; 0x1a
    1c78:	ab 8f       	std	Y+27, r26	; 0x1b
    1c7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e8       	ldi	r19, 0x80	; 128
    1c88:	4b e3       	ldi	r20, 0x3B	; 59
    1c8a:	55 e4       	ldi	r21, 0x45	; 69
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	8d 8b       	std	Y+21, r24	; 0x15
    1c96:	9e 8b       	std	Y+22, r25	; 0x16
    1c98:	af 8b       	std	Y+23, r26	; 0x17
    1c9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e8       	ldi	r20, 0x80	; 128
    1caa:	5f e3       	ldi	r21, 0x3F	; 63
    1cac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb0:	88 23       	and	r24, r24
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <LCD_Init+0x23a>
		__ticks = 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9c 8b       	std	Y+20, r25	; 0x14
    1cba:	8b 8b       	std	Y+19, r24	; 0x13
    1cbc:	3f c0       	rjmp	.+126    	; 0x1d3c <LCD_Init+0x2b8>
	else if (__tmp > 65535)
    1cbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	4c f5       	brge	.+82     	; 0x1d28 <LCD_Init+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e2       	ldi	r20, 0x20	; 32
    1ce4:	51 e4       	ldi	r21, 0x41	; 65
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	9c 8b       	std	Y+20, r25	; 0x14
    1cfc:	8b 8b       	std	Y+19, r24	; 0x13
    1cfe:	0f c0       	rjmp	.+30     	; 0x1d1e <LCD_Init+0x29a>
    1d00:	8c e2       	ldi	r24, 0x2C	; 44
    1d02:	91 e0       	ldi	r25, 0x01	; 1
    1d04:	9a 8b       	std	Y+18, r25	; 0x12
    1d06:	89 8b       	std	Y+17, r24	; 0x11
    1d08:	89 89       	ldd	r24, Y+17	; 0x11
    1d0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <LCD_Init+0x288>
    1d10:	9a 8b       	std	Y+18, r25	; 0x12
    1d12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d14:	8b 89       	ldd	r24, Y+19	; 0x13
    1d16:	9c 89       	ldd	r25, Y+20	; 0x14
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	9c 8b       	std	Y+20, r25	; 0x14
    1d1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d20:	9c 89       	ldd	r25, Y+20	; 0x14
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	69 f7       	brne	.-38     	; 0x1d00 <LCD_Init+0x27c>
    1d26:	14 c0       	rjmp	.+40     	; 0x1d50 <LCD_Init+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d28:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9c 8b       	std	Y+20, r25	; 0x14
    1d3a:	8b 8b       	std	Y+19, r24	; 0x13
    1d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d40:	98 8b       	std	Y+16, r25	; 0x10
    1d42:	8f 87       	std	Y+15, r24	; 0x0f
    1d44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d46:	98 89       	ldd	r25, Y+16	; 0x10
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <LCD_Init+0x2c4>
    1d4c:	98 8b       	std	Y+16, r25	; 0x10
    1d4e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	LCD_SendCommand (0b00000001);
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_SendCommand>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a0 e4       	ldi	r26, 0x40	; 64
    1d5c:	b0 e4       	ldi	r27, 0x40	; 64
    1d5e:	8b 87       	std	Y+11, r24	; 0x0b
    1d60:	9c 87       	std	Y+12, r25	; 0x0c
    1d62:	ad 87       	std	Y+13, r26	; 0x0d
    1d64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e8       	ldi	r19, 0x80	; 128
    1d72:	4b e3       	ldi	r20, 0x3B	; 59
    1d74:	55 e4       	ldi	r21, 0x45	; 69
    1d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8f 83       	std	Y+7, r24	; 0x07
    1d80:	98 87       	std	Y+8, r25	; 0x08
    1d82:	a9 87       	std	Y+9, r26	; 0x09
    1d84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d86:	6f 81       	ldd	r22, Y+7	; 0x07
    1d88:	78 85       	ldd	r23, Y+8	; 0x08
    1d8a:	89 85       	ldd	r24, Y+9	; 0x09
    1d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	5f e3       	ldi	r21, 0x3F	; 63
    1d96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <LCD_Init+0x324>
		__ticks = 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	3f c0       	rjmp	.+126    	; 0x1e26 <LCD_Init+0x3a2>
	else if (__tmp > 65535)
    1da8:	6f 81       	ldd	r22, Y+7	; 0x07
    1daa:	78 85       	ldd	r23, Y+8	; 0x08
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	3f ef       	ldi	r19, 0xFF	; 255
    1db4:	4f e7       	ldi	r20, 0x7F	; 127
    1db6:	57 e4       	ldi	r21, 0x47	; 71
    1db8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dbc:	18 16       	cp	r1, r24
    1dbe:	4c f5       	brge	.+82     	; 0x1e12 <LCD_Init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	51 e4       	ldi	r21, 0x41	; 65
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9e 83       	std	Y+6, r25	; 0x06
    1de6:	8d 83       	std	Y+5, r24	; 0x05
    1de8:	0f c0       	rjmp	.+30     	; 0x1e08 <LCD_Init+0x384>
    1dea:	8c e2       	ldi	r24, 0x2C	; 44
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCD_Init+0x372>
    1dfa:	9c 83       	std	Y+4, r25	; 0x04
    1dfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1e00:	9e 81       	ldd	r25, Y+6	; 0x06
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	9e 83       	std	Y+6, r25	; 0x06
    1e06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e08:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	69 f7       	brne	.-38     	; 0x1dea <LCD_Init+0x366>
    1e10:	14 c0       	rjmp	.+40     	; 0x1e3a <LCD_Init+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e12:	6f 81       	ldd	r22, Y+7	; 0x07
    1e14:	78 85       	ldd	r23, Y+8	; 0x08
    1e16:	89 85       	ldd	r24, Y+9	; 0x09
    1e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	9e 83       	std	Y+6, r25	; 0x06
    1e24:	8d 83       	std	Y+5, r24	; 0x05
    1e26:	8d 81       	ldd	r24, Y+5	; 0x05
    1e28:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_Init+0x3ae>
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    1e3a:	e8 96       	adiw	r28, 0x38	; 56
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <LCD_SendCommand>:

 void LCD_SendCommand(u8 command)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	2f 97       	sbiw	r28, 0x0f	; 15
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1e62:	a5 e3       	ldi	r26, 0x35	; 53
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e5 e3       	ldi	r30, 0x35	; 53
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	8f 7d       	andi	r24, 0xDF	; 223
    1e6e:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    1e70:	a5 e3       	ldi	r26, 0x35	; 53
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e5 e3       	ldi	r30, 0x35	; 53
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 7b       	andi	r24, 0xBF	; 191
    1e7c:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RS_Pin);
    1e7e:	a5 e3       	ldi	r26, 0x35	; 53
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e5 e3       	ldi	r30, 0x35	; 53
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8f 77       	andi	r24, 0x7F	; 127
    1e8a:	8c 93       	st	X, r24

	LCD_DataPORT= command;
    1e8c:	eb e3       	ldi	r30, 0x3B	; 59
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e92:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    1e94:	a5 e3       	ldi	r26, 0x35	; 53
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e5 e3       	ldi	r30, 0x35	; 53
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	80 62       	ori	r24, 0x20	; 32
    1ea0:	8c 93       	st	X, r24
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	a0 e0       	ldi	r26, 0x00	; 0
    1ea8:	b0 e4       	ldi	r27, 0x40	; 64
    1eaa:	8b 87       	std	Y+11, r24	; 0x0b
    1eac:	9c 87       	std	Y+12, r25	; 0x0c
    1eae:	ad 87       	std	Y+13, r26	; 0x0d
    1eb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e8       	ldi	r19, 0x80	; 128
    1ebe:	4b e3       	ldi	r20, 0x3B	; 59
    1ec0:	55 e4       	ldi	r21, 0x45	; 69
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8f 83       	std	Y+7, r24	; 0x07
    1ecc:	98 87       	std	Y+8, r25	; 0x08
    1ece:	a9 87       	std	Y+9, r26	; 0x09
    1ed0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	2c f4       	brge	.+10     	; 0x1ef4 <LCD_SendCommand+0xa8>
		__ticks = 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	3f c0       	rjmp	.+126    	; 0x1f72 <LCD_SendCommand+0x126>
	else if (__tmp > 65535)
    1ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef6:	78 85       	ldd	r23, Y+8	; 0x08
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	3f ef       	ldi	r19, 0xFF	; 255
    1f00:	4f e7       	ldi	r20, 0x7F	; 127
    1f02:	57 e4       	ldi	r21, 0x47	; 71
    1f04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f08:	18 16       	cp	r1, r24
    1f0a:	4c f5       	brge	.+82     	; 0x1f5e <LCD_SendCommand+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e2       	ldi	r20, 0x20	; 32
    1f1a:	51 e4       	ldi	r21, 0x41	; 65
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	0f c0       	rjmp	.+30     	; 0x1f54 <LCD_SendCommand+0x108>
    1f36:	8c e2       	ldi	r24, 0x2C	; 44
    1f38:	91 e0       	ldi	r25, 0x01	; 1
    1f3a:	9c 83       	std	Y+4, r25	; 0x04
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_SendCommand+0xf6>
    1f46:	9c 83       	std	Y+4, r25	; 0x04
    1f48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	69 f7       	brne	.-38     	; 0x1f36 <LCD_SendCommand+0xea>
    1f5c:	14 c0       	rjmp	.+40     	; 0x1f86 <LCD_SendCommand+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f60:	78 85       	ldd	r23, Y+8	; 0x08
    1f62:	89 85       	ldd	r24, Y+9	; 0x09
    1f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9e 83       	std	Y+6, r25	; 0x06
    1f70:	8d 83       	std	Y+5, r24	; 0x05
    1f72:	8d 81       	ldd	r24, Y+5	; 0x05
    1f74:	9e 81       	ldd	r25, Y+6	; 0x06
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_SendCommand+0x132>
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1f86:	a5 e3       	ldi	r26, 0x35	; 53
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e5 e3       	ldi	r30, 0x35	; 53
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	8f 7d       	andi	r24, 0xDF	; 223
    1f92:	8c 93       	st	X, r24
}
    1f94:	2f 96       	adiw	r28, 0x0f	; 15
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <LCD_Clear>:

 void LCD_Clear (void)
 {
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
	 LCD_SendCommand(1);
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_SendCommand>
 }
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <LCD_WriteData>:

 void LCD_WriteData(u8 data)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	2f 97       	sbiw	r28, 0x0f	; 15
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
	CLRBIT (LCD_ControlPORT, EN_Pin);
    1fd0:	a5 e3       	ldi	r26, 0x35	; 53
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e5 e3       	ldi	r30, 0x35	; 53
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	8f 7d       	andi	r24, 0xDF	; 223
    1fdc:	8c 93       	st	X, r24
	CLRBIT (LCD_ControlPORT, RW_Pin);
    1fde:	a5 e3       	ldi	r26, 0x35	; 53
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e5 e3       	ldi	r30, 0x35	; 53
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	8f 7b       	andi	r24, 0xBF	; 191
    1fea:	8c 93       	st	X, r24
	SETBIT (LCD_ControlPORT, RS_Pin);
    1fec:	a5 e3       	ldi	r26, 0x35	; 53
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	e5 e3       	ldi	r30, 0x35	; 53
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	80 68       	ori	r24, 0x80	; 128
    1ff8:	8c 93       	st	X, r24

	LCD_DataPORT= data;
    1ffa:	eb e3       	ldi	r30, 0x3B	; 59
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2000:	80 83       	st	Z, r24

	SETBIT (LCD_ControlPORT, EN_Pin);
    2002:	a5 e3       	ldi	r26, 0x35	; 53
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e5 e3       	ldi	r30, 0x35	; 53
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	80 62       	ori	r24, 0x20	; 32
    200e:	8c 93       	st	X, r24
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a0 e0       	ldi	r26, 0x00	; 0
    2016:	b0 e4       	ldi	r27, 0x40	; 64
    2018:	8b 87       	std	Y+11, r24	; 0x0b
    201a:	9c 87       	std	Y+12, r25	; 0x0c
    201c:	ad 87       	std	Y+13, r26	; 0x0d
    201e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2020:	6b 85       	ldd	r22, Y+11	; 0x0b
    2022:	7c 85       	ldd	r23, Y+12	; 0x0c
    2024:	8d 85       	ldd	r24, Y+13	; 0x0d
    2026:	9e 85       	ldd	r25, Y+14	; 0x0e
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e8       	ldi	r19, 0x80	; 128
    202c:	4b e3       	ldi	r20, 0x3B	; 59
    202e:	55 e4       	ldi	r21, 0x45	; 69
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8f 83       	std	Y+7, r24	; 0x07
    203a:	98 87       	std	Y+8, r25	; 0x08
    203c:	a9 87       	std	Y+9, r26	; 0x09
    203e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e8       	ldi	r20, 0x80	; 128
    204e:	5f e3       	ldi	r21, 0x3F	; 63
    2050:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2054:	88 23       	and	r24, r24
    2056:	2c f4       	brge	.+10     	; 0x2062 <LCD_WriteData+0xa8>
		__ticks = 1;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	3f c0       	rjmp	.+126    	; 0x20e0 <LCD_WriteData+0x126>
	else if (__tmp > 65535)
    2062:	6f 81       	ldd	r22, Y+7	; 0x07
    2064:	78 85       	ldd	r23, Y+8	; 0x08
    2066:	89 85       	ldd	r24, Y+9	; 0x09
    2068:	9a 85       	ldd	r25, Y+10	; 0x0a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	3f ef       	ldi	r19, 0xFF	; 255
    206e:	4f e7       	ldi	r20, 0x7F	; 127
    2070:	57 e4       	ldi	r21, 0x47	; 71
    2072:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2076:	18 16       	cp	r1, r24
    2078:	4c f5       	brge	.+82     	; 0x20cc <LCD_WriteData+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207a:	6b 85       	ldd	r22, Y+11	; 0x0b
    207c:	7c 85       	ldd	r23, Y+12	; 0x0c
    207e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2080:	9e 85       	ldd	r25, Y+14	; 0x0e
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e2       	ldi	r20, 0x20	; 32
    2088:	51 e4       	ldi	r21, 0x41	; 65
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <LCD_WriteData+0x108>
    20a4:	8c e2       	ldi	r24, 0x2C	; 44
    20a6:	91 e0       	ldi	r25, 0x01	; 1
    20a8:	9c 83       	std	Y+4, r25	; 0x04
    20aa:	8b 83       	std	Y+3, r24	; 0x03
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_WriteData+0xf6>
    20b4:	9c 83       	std	Y+4, r25	; 0x04
    20b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	9e 81       	ldd	r25, Y+6	; 0x06
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	8d 81       	ldd	r24, Y+5	; 0x05
    20c4:	9e 81       	ldd	r25, Y+6	; 0x06
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <LCD_WriteData+0xea>
    20ca:	14 c0       	rjmp	.+40     	; 0x20f4 <LCD_WriteData+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	78 85       	ldd	r23, Y+8	; 0x08
    20d0:	89 85       	ldd	r24, Y+9	; 0x09
    20d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	9a 83       	std	Y+2, r25	; 0x02
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <LCD_WriteData+0x132>
    20f0:	9a 83       	std	Y+2, r25	; 0x02
    20f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLRBIT (LCD_ControlPORT, EN_Pin);
    20f4:	a5 e3       	ldi	r26, 0x35	; 53
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e5 e3       	ldi	r30, 0x35	; 53
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	8f 7d       	andi	r24, 0xDF	; 223
    2100:	8c 93       	st	X, r24
}
    2102:	2f 96       	adiw	r28, 0x0f	; 15
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <LCD_WriteString>:

void LCD_WriteString(u8* pu8StringCpy)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	61 97       	sbiw	r28, 0x11	; 17
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	99 8b       	std	Y+17, r25	; 0x11
    212a:	88 8b       	std	Y+16, r24	; 0x10

  /* Local loop index */
  u8 u8Index = 0;
    212c:	1f 86       	std	Y+15, r1	; 0x0f
    212e:	80 c0       	rjmp	.+256    	; 0x2230 <LCD_WriteString+0x11c>

  while (pu8StringCpy [u8Index] != 0)
  {
    /* Write Character on LCD */
    LCD_WriteData (pu8StringCpy [u8Index]);
    2130:	8f 85       	ldd	r24, Y+15	; 0x0f
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	88 89       	ldd	r24, Y+16	; 0x10
    2138:	99 89       	ldd	r25, Y+17	; 0x11
    213a:	fc 01       	movw	r30, r24
    213c:	e2 0f       	add	r30, r18
    213e:	f3 1f       	adc	r31, r19
    2140:	80 81       	ld	r24, Z
    2142:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_WriteData>

    /* Increment local loop index */
    u8Index++;
    2146:	8f 85       	ldd	r24, Y+15	; 0x0f
    2148:	8f 5f       	subi	r24, 0xFF	; 255
    214a:	8f 87       	std	Y+15, r24	; 0x0f
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a0 e0       	ldi	r26, 0x00	; 0
    2152:	b0 e4       	ldi	r27, 0x40	; 64
    2154:	8b 87       	std	Y+11, r24	; 0x0b
    2156:	9c 87       	std	Y+12, r25	; 0x0c
    2158:	ad 87       	std	Y+13, r26	; 0x0d
    215a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	6b 85       	ldd	r22, Y+11	; 0x0b
    215e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2160:	8d 85       	ldd	r24, Y+13	; 0x0d
    2162:	9e 85       	ldd	r25, Y+14	; 0x0e
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e8       	ldi	r19, 0x80	; 128
    2168:	4b e3       	ldi	r20, 0x3B	; 59
    216a:	55 e4       	ldi	r21, 0x45	; 69
    216c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	8f 83       	std	Y+7, r24	; 0x07
    2176:	98 87       	std	Y+8, r25	; 0x08
    2178:	a9 87       	std	Y+9, r26	; 0x09
    217a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e8       	ldi	r20, 0x80	; 128
    218a:	5f e3       	ldi	r21, 0x3F	; 63
    218c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2190:	88 23       	and	r24, r24
    2192:	2c f4       	brge	.+10     	; 0x219e <LCD_WriteString+0x8a>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	3f c0       	rjmp	.+126    	; 0x221c <LCD_WriteString+0x108>
	else if (__tmp > 65535)
    219e:	6f 81       	ldd	r22, Y+7	; 0x07
    21a0:	78 85       	ldd	r23, Y+8	; 0x08
    21a2:	89 85       	ldd	r24, Y+9	; 0x09
    21a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	4c f5       	brge	.+82     	; 0x2208 <LCD_WriteString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    21bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <LCD_WriteString+0xea>
    21e0:	8c e2       	ldi	r24, 0x2C	; 44
    21e2:	91 e0       	ldi	r25, 0x01	; 1
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_WriteString+0xd8>
    21f0:	9c 83       	std	Y+4, r25	; 0x04
    21f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	8d 81       	ldd	r24, Y+5	; 0x05
    21f6:	9e 81       	ldd	r25, Y+6	; 0x06
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	9e 81       	ldd	r25, Y+6	; 0x06
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	69 f7       	brne	.-38     	; 0x21e0 <LCD_WriteString+0xcc>
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <LCD_WriteString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2208:	6f 81       	ldd	r22, Y+7	; 0x07
    220a:	78 85       	ldd	r23, Y+8	; 0x08
    220c:	89 85       	ldd	r24, Y+9	; 0x09
    220e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_WriteString+0x114>
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
{

  /* Local loop index */
  u8 u8Index = 0;

  while (pu8StringCpy [u8Index] != 0)
    2230:	8f 85       	ldd	r24, Y+15	; 0x0f
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	88 89       	ldd	r24, Y+16	; 0x10
    2238:	99 89       	ldd	r25, Y+17	; 0x11
    223a:	fc 01       	movw	r30, r24
    223c:	e2 0f       	add	r30, r18
    223e:	f3 1f       	adc	r31, r19
    2240:	80 81       	ld	r24, Z
    2242:	88 23       	and	r24, r24
    2244:	09 f0       	breq	.+2      	; 0x2248 <LCD_WriteString+0x134>
    2246:	74 cf       	rjmp	.-280    	; 0x2130 <LCD_WriteString+0x1c>

    /* Delay to let the LCD show the character */
    _delay_ms(2);
  }

}
    2248:	61 96       	adiw	r28, 0x11	; 17
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <LCD_Goto_xy>:

void LCD_Goto_xy(u8 x, u8 y)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	64 97       	sbiw	r28, 0x14	; 20
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	8b 8b       	std	Y+19, r24	; 0x13
    2270:	6c 8b       	std	Y+20, r22	; 0x14
	u8 firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
    2272:	80 e8       	ldi	r24, 0x80	; 128
    2274:	8f 87       	std	Y+15, r24	; 0x0f
    2276:	80 ec       	ldi	r24, 0xC0	; 192
    2278:	88 8b       	std	Y+16, r24	; 0x10
    227a:	84 e9       	ldi	r24, 0x94	; 148
    227c:	89 8b       	std	Y+17, r24	; 0x11
    227e:	84 ed       	ldi	r24, 0xD4	; 212
    2280:	8a 8b       	std	Y+18, r24	; 0x12
	LCD_SendCommand (firstcharAdr[y-1] + x - 1);
    2282:	8c 89       	ldd	r24, Y+20	; 0x14
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	9c 01       	movw	r18, r24
    228a:	21 50       	subi	r18, 0x01	; 1
    228c:	30 40       	sbci	r19, 0x00	; 0
    228e:	ce 01       	movw	r24, r28
    2290:	0f 96       	adiw	r24, 0x0f	; 15
    2292:	fc 01       	movw	r30, r24
    2294:	e2 0f       	add	r30, r18
    2296:	f3 1f       	adc	r31, r19
    2298:	90 81       	ld	r25, Z
    229a:	8b 89       	ldd	r24, Y+19	; 0x13
    229c:	89 0f       	add	r24, r25
    229e:	81 50       	subi	r24, 0x01	; 1
    22a0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_SendCommand>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a0 e8       	ldi	r26, 0x80	; 128
    22aa:	bf e3       	ldi	r27, 0x3F	; 63
    22ac:	8b 87       	std	Y+11, r24	; 0x0b
    22ae:	9c 87       	std	Y+12, r25	; 0x0c
    22b0:	ad 87       	std	Y+13, r26	; 0x0d
    22b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e8       	ldi	r19, 0x80	; 128
    22c0:	4b e3       	ldi	r20, 0x3B	; 59
    22c2:	55 e4       	ldi	r21, 0x45	; 69
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	8f 83       	std	Y+7, r24	; 0x07
    22ce:	98 87       	std	Y+8, r25	; 0x08
    22d0:	a9 87       	std	Y+9, r26	; 0x09
    22d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <LCD_Goto_xy+0x9c>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	3f c0       	rjmp	.+126    	; 0x2374 <LCD_Goto_xy+0x11a>
	else if (__tmp > 65535)
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	4c f5       	brge	.+82     	; 0x2360 <LCD_Goto_xy+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2310:	7c 85       	ldd	r23, Y+12	; 0x0c
    2312:	8d 85       	ldd	r24, Y+13	; 0x0d
    2314:	9e 85       	ldd	r25, Y+14	; 0x0e
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <LCD_Goto_xy+0xfc>
    2338:	8c e2       	ldi	r24, 0x2C	; 44
    233a:	91 e0       	ldi	r25, 0x01	; 1
    233c:	9c 83       	std	Y+4, r25	; 0x04
    233e:	8b 83       	std	Y+3, r24	; 0x03
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <LCD_Goto_xy+0xea>
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f7       	brne	.-38     	; 0x2338 <LCD_Goto_xy+0xde>
    235e:	14 c0       	rjmp	.+40     	; 0x2388 <LCD_Goto_xy+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <LCD_Goto_xy+0x126>
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2388:	64 96       	adiw	r28, 0x14	; 20
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <LCD_MoveCursorLeft>:

void LCD_MoveCursorLeft (void)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	2e 97       	sbiw	r28, 0x0e	; 14
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_LEFT);
    23ae:	80 e1       	ldi	r24, 0x10	; 16
    23b0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_SendCommand>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 e8       	ldi	r26, 0x80	; 128
    23ba:	bf e3       	ldi	r27, 0x3F	; 63
    23bc:	8b 87       	std	Y+11, r24	; 0x0b
    23be:	9c 87       	std	Y+12, r25	; 0x0c
    23c0:	ad 87       	std	Y+13, r26	; 0x0d
    23c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e8       	ldi	r19, 0x80	; 128
    23d0:	4b e3       	ldi	r20, 0x3B	; 59
    23d2:	55 e4       	ldi	r21, 0x45	; 69
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	8f 83       	std	Y+7, r24	; 0x07
    23de:	98 87       	std	Y+8, r25	; 0x08
    23e0:	a9 87       	std	Y+9, r26	; 0x09
    23e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e4:	6f 81       	ldd	r22, Y+7	; 0x07
    23e6:	78 85       	ldd	r23, Y+8	; 0x08
    23e8:	89 85       	ldd	r24, Y+9	; 0x09
    23ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	2c f4       	brge	.+10     	; 0x2406 <LCD_MoveCursorLeft+0x6c>
		__ticks = 1;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
    2404:	3f c0       	rjmp	.+126    	; 0x2484 <LCD_MoveCursorLeft+0xea>
	else if (__tmp > 65535)
    2406:	6f 81       	ldd	r22, Y+7	; 0x07
    2408:	78 85       	ldd	r23, Y+8	; 0x08
    240a:	89 85       	ldd	r24, Y+9	; 0x09
    240c:	9a 85       	ldd	r25, Y+10	; 0x0a
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	3f ef       	ldi	r19, 0xFF	; 255
    2412:	4f e7       	ldi	r20, 0x7F	; 127
    2414:	57 e4       	ldi	r21, 0x47	; 71
    2416:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    241a:	18 16       	cp	r1, r24
    241c:	4c f5       	brge	.+82     	; 0x2470 <LCD_MoveCursorLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2420:	7c 85       	ldd	r23, Y+12	; 0x0c
    2422:	8d 85       	ldd	r24, Y+13	; 0x0d
    2424:	9e 85       	ldd	r25, Y+14	; 0x0e
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e2       	ldi	r20, 0x20	; 32
    242c:	51 e4       	ldi	r21, 0x41	; 65
    242e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
    2446:	0f c0       	rjmp	.+30     	; 0x2466 <LCD_MoveCursorLeft+0xcc>
    2448:	8c e2       	ldi	r24, 0x2C	; 44
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	9c 83       	std	Y+4, r25	; 0x04
    244e:	8b 83       	std	Y+3, r24	; 0x03
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	9c 81       	ldd	r25, Y+4	; 0x04
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <LCD_MoveCursorLeft+0xba>
    2458:	9c 83       	std	Y+4, r25	; 0x04
    245a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2466:	8d 81       	ldd	r24, Y+5	; 0x05
    2468:	9e 81       	ldd	r25, Y+6	; 0x06
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	69 f7       	brne	.-38     	; 0x2448 <LCD_MoveCursorLeft+0xae>
    246e:	14 c0       	rjmp	.+40     	; 0x2498 <LCD_MoveCursorLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2470:	6f 81       	ldd	r22, Y+7	; 0x07
    2472:	78 85       	ldd	r23, Y+8	; 0x08
    2474:	89 85       	ldd	r24, Y+9	; 0x09
    2476:	9a 85       	ldd	r25, Y+10	; 0x0a
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9e 83       	std	Y+6, r25	; 0x06
    2482:	8d 83       	std	Y+5, r24	; 0x05
    2484:	8d 81       	ldd	r24, Y+5	; 0x05
    2486:	9e 81       	ldd	r25, Y+6	; 0x06
    2488:	9a 83       	std	Y+2, r25	; 0x02
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	9a 81       	ldd	r25, Y+2	; 0x02
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_MoveCursorLeft+0xf6>
    2494:	9a 83       	std	Y+2, r25	; 0x02
    2496:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2498:	2e 96       	adiw	r28, 0x0e	; 14
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <LCD_MoveCursorRight>:

//*******************************************************************************
void LCD_MoveCursorRight (void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	2e 97       	sbiw	r28, 0x0e	; 14
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
	LCD_SendCommand (LCD_MOVE_CURSOR_RIGHT);
    24be:	84 e1       	ldi	r24, 0x14	; 20
    24c0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_SendCommand>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 e8       	ldi	r26, 0x80	; 128
    24ca:	bf e3       	ldi	r27, 0x3F	; 63
    24cc:	8b 87       	std	Y+11, r24	; 0x0b
    24ce:	9c 87       	std	Y+12, r25	; 0x0c
    24d0:	ad 87       	std	Y+13, r26	; 0x0d
    24d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24da:	9e 85       	ldd	r25, Y+14	; 0x0e
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e8       	ldi	r19, 0x80	; 128
    24e0:	4b e3       	ldi	r20, 0x3B	; 59
    24e2:	55 e4       	ldi	r21, 0x45	; 69
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8f 83       	std	Y+7, r24	; 0x07
    24ee:	98 87       	std	Y+8, r25	; 0x08
    24f0:	a9 87       	std	Y+9, r26	; 0x09
    24f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <LCD_MoveCursorRight+0x6c>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <LCD_MoveCursorRight+0xea>
	else if (__tmp > 65535)
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <LCD_MoveCursorRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <LCD_MoveCursorRight+0xcc>
    2558:	8c e2       	ldi	r24, 0x2C	; 44
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	9c 83       	std	Y+4, r25	; 0x04
    255e:	8b 83       	std	Y+3, r24	; 0x03
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <LCD_MoveCursorRight+0xba>
    2568:	9c 83       	std	Y+4, r25	; 0x04
    256a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <LCD_MoveCursorRight+0xae>
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <LCD_MoveCursorRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_MoveCursorRight+0xf6>
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    25a8:	2e 96       	adiw	r28, 0x0e	; 14
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <LCD_WriteString_xy>:

void LCD_WriteString_xy(u8 x, u8 y, u8* pu8StringCpy)
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <LCD_WriteString_xy+0x6>
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <LCD_WriteString_xy+0x8>
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	6a 83       	std	Y+2, r22	; 0x02
    25ca:	5c 83       	std	Y+4, r21	; 0x04
    25cc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_Goto_xy(x,y);
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	6a 81       	ldd	r22, Y+2	; 0x02
    25d2:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_Goto_xy>
	LCD_WriteString(pu8StringCpy);
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	9c 81       	ldd	r25, Y+4	; 0x04
    25da:	0e 94 8a 10 	call	0x2114	; 0x2114 <LCD_WriteString>
}
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <LCD_WriteInteger_xy>:

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    25ec:	ef 92       	push	r14
    25ee:	ff 92       	push	r15
    25f0:	0f 93       	push	r16
    25f2:	1f 93       	push	r17
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	29 97       	sbiw	r28, 0x09	; 9
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	8b 83       	std	Y+3, r24	; 0x03
    260a:	6c 83       	std	Y+4, r22	; 0x04
    260c:	5e 83       	std	Y+6, r21	; 0x06
    260e:	4d 83       	std	Y+5, r20	; 0x05
    2610:	2f 83       	std	Y+7, r18	; 0x07
	u8 StringToDisplay[NumberOfDigits];
	itoa (IntegerToDisplay, StringToDisplay, 10);
	LCD_WriteString_xy (x, y, StringToDisplay);
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)

}
    2612:	0d b7       	in	r16, 0x3d	; 61
    2614:	1e b7       	in	r17, 0x3e	; 62
	LCD_Goto_xy(x,y);
	LCD_WriteString(pu8StringCpy);
}

void LCD_WriteInteger_xy(u8 x, u8 y, u16 IntegerToDisplay, u8 NumberOfDigits)
{
    2616:	8d b7       	in	r24, 0x3d	; 61
    2618:	9e b7       	in	r25, 0x3e	; 62
    261a:	7c 01       	movw	r14, r24
	u8 StringToDisplay[NumberOfDigits];
    261c:	8f 81       	ldd	r24, Y+7	; 0x07
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	2d b7       	in	r18, 0x3d	; 61
    2624:	3e b7       	in	r19, 0x3e	; 62
    2626:	28 1b       	sub	r18, r24
    2628:	39 0b       	sbc	r19, r25
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	3e bf       	out	0x3e, r19	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	2d bf       	out	0x3d, r18	; 61
    2634:	8d b7       	in	r24, 0x3d	; 61
    2636:	9e b7       	in	r25, 0x3e	; 62
    2638:	01 96       	adiw	r24, 0x01	; 1
    263a:	99 87       	std	Y+9, r25	; 0x09
    263c:	88 87       	std	Y+8, r24	; 0x08
    263e:	88 85       	ldd	r24, Y+8	; 0x08
    2640:	99 85       	ldd	r25, Y+9	; 0x09
    2642:	00 96       	adiw	r24, 0x00	; 0
    2644:	99 87       	std	Y+9, r25	; 0x09
    2646:	88 87       	std	Y+8, r24	; 0x08
    2648:	28 85       	ldd	r18, Y+8	; 0x08
    264a:	39 85       	ldd	r19, Y+9	; 0x09
    264c:	3a 83       	std	Y+2, r19	; 0x02
    264e:	29 83       	std	Y+1, r18	; 0x01
	itoa (IntegerToDisplay, StringToDisplay, 10);
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	29 81       	ldd	r18, Y+1	; 0x01
    2656:	3a 81       	ldd	r19, Y+2	; 0x02
    2658:	b9 01       	movw	r22, r18
    265a:	4a e0       	ldi	r20, 0x0A	; 10
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <itoa>
	LCD_WriteString_xy (x, y, StringToDisplay);
    2662:	29 81       	ldd	r18, Y+1	; 0x01
    2664:	3a 81       	ldd	r19, Y+2	; 0x02
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	6c 81       	ldd	r22, Y+4	; 0x04
    266a:	a9 01       	movw	r20, r18
    266c:	0e 94 dd 12 	call	0x25ba	; 0x25ba <LCD_WriteString_xy>
	LCD_WriteString(" ");  // 3lshan yms7 ay zeros btzhr (htfhm lma tgrb mn gherha)
    2670:	80 e6       	ldi	r24, 0x60	; 96
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	0e 94 8a 10 	call	0x2114	; 0x2114 <LCD_WriteString>
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	fe be       	out	0x3e, r15	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	ed be       	out	0x3d, r14	; 61

}
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	1e bf       	out	0x3e, r17	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	0d bf       	out	0x3d, r16	; 61
    268c:	29 96       	adiw	r28, 0x09	; 9
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	1f 91       	pop	r17
    269e:	0f 91       	pop	r16
    26a0:	ff 90       	pop	r15
    26a2:	ef 90       	pop	r14
    26a4:	08 95       	ret

000026a6 <main>:

u8  Compare_Accs_Data ( ADXL345_Data * Ptr_Accs_Readings, ADXL345_Data * Ptr_Acss_Stored_Data);


int main(void)
{
    26a6:	0f 93       	push	r16
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	aa 97       	sbiw	r28, 0x2a	; 42
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
	DDRA=0xFF;
    26bc:	ea e3       	ldi	r30, 0x3A	; 58
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	8f ef       	ldi	r24, 0xFF	; 255
    26c2:	80 83       	st	Z, r24
	DDRC|= (1<<5) | (1<<6) | (1<<7);
    26c4:	a4 e3       	ldi	r26, 0x34	; 52
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e4 e3       	ldi	r30, 0x34	; 52
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	80 6e       	ori	r24, 0xE0	; 224
    26d0:	8c 93       	st	X, r24
	LCD_Init();
    26d2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <LCD_Init>
	TWI_Init(I2C_PRESCALE1,I2C_intDisable,F_ADXL,0x01);
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	20 e8       	ldi	r18, 0x80	; 128
    26dc:	3a e1       	ldi	r19, 0x1A	; 26
    26de:	46 e0       	ldi	r20, 0x06	; 6
    26e0:	50 e0       	ldi	r21, 0x00	; 0
    26e2:	01 e0       	ldi	r16, 0x01	; 1
    26e4:	0e 94 18 0b 	call	0x1630	; 0x1630 <TWI_Init>
	Accelerometor_init(ADXL345_MessureMode,ADXL345_ALTERNATIVE_ADDRESS);
    26e8:	88 e0       	ldi	r24, 0x08	; 8
    26ea:	63 e5       	ldi	r22, 0x53	; 83
    26ec:	0e 94 17 07 	call	0xe2e	; 0xe2e <Accelerometor_init>
	LCD_WriteString("Testing LCD");
    26f0:	82 e6       	ldi	r24, 0x62	; 98
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 8a 10 	call	0x2114	; 0x2114 <LCD_WriteString>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	aa e7       	ldi	r26, 0x7A	; 122
    26fe:	b4 e4       	ldi	r27, 0x44	; 68
    2700:	8f a3       	std	Y+39, r24	; 0x27
    2702:	98 a7       	std	Y+40, r25	; 0x28
    2704:	a9 a7       	std	Y+41, r26	; 0x29
    2706:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2708:	6f a1       	ldd	r22, Y+39	; 0x27
    270a:	78 a5       	ldd	r23, Y+40	; 0x28
    270c:	89 a5       	ldd	r24, Y+41	; 0x29
    270e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e8       	ldi	r19, 0x80	; 128
    2714:	4b e3       	ldi	r20, 0x3B	; 59
    2716:	55 e4       	ldi	r21, 0x45	; 69
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	8b a3       	std	Y+35, r24	; 0x23
    2722:	9c a3       	std	Y+36, r25	; 0x24
    2724:	ad a3       	std	Y+37, r26	; 0x25
    2726:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2728:	6b a1       	ldd	r22, Y+35	; 0x23
    272a:	7c a1       	ldd	r23, Y+36	; 0x24
    272c:	8d a1       	ldd	r24, Y+37	; 0x25
    272e:	9e a1       	ldd	r25, Y+38	; 0x26
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e8       	ldi	r20, 0x80	; 128
    2736:	5f e3       	ldi	r21, 0x3F	; 63
    2738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    273c:	88 23       	and	r24, r24
    273e:	2c f4       	brge	.+10     	; 0x274a <main+0xa4>
		__ticks = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9a a3       	std	Y+34, r25	; 0x22
    2746:	89 a3       	std	Y+33, r24	; 0x21
    2748:	3f c0       	rjmp	.+126    	; 0x27c8 <main+0x122>
	else if (__tmp > 65535)
    274a:	6b a1       	ldd	r22, Y+35	; 0x23
    274c:	7c a1       	ldd	r23, Y+36	; 0x24
    274e:	8d a1       	ldd	r24, Y+37	; 0x25
    2750:	9e a1       	ldd	r25, Y+38	; 0x26
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	3f ef       	ldi	r19, 0xFF	; 255
    2756:	4f e7       	ldi	r20, 0x7F	; 127
    2758:	57 e4       	ldi	r21, 0x47	; 71
    275a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    275e:	18 16       	cp	r1, r24
    2760:	4c f5       	brge	.+82     	; 0x27b4 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2762:	6f a1       	ldd	r22, Y+39	; 0x27
    2764:	78 a5       	ldd	r23, Y+40	; 0x28
    2766:	89 a5       	ldd	r24, Y+41	; 0x29
    2768:	9a a5       	ldd	r25, Y+42	; 0x2a
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e2       	ldi	r20, 0x20	; 32
    2770:	51 e4       	ldi	r21, 0x41	; 65
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9a a3       	std	Y+34, r25	; 0x22
    2788:	89 a3       	std	Y+33, r24	; 0x21
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <main+0x104>
    278c:	8c e2       	ldi	r24, 0x2C	; 44
    278e:	91 e0       	ldi	r25, 0x01	; 1
    2790:	98 a3       	std	Y+32, r25	; 0x20
    2792:	8f 8f       	std	Y+31, r24	; 0x1f
    2794:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2796:	98 a1       	ldd	r25, Y+32	; 0x20
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <main+0xf2>
    279c:	98 a3       	std	Y+32, r25	; 0x20
    279e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a0:	89 a1       	ldd	r24, Y+33	; 0x21
    27a2:	9a a1       	ldd	r25, Y+34	; 0x22
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	9a a3       	std	Y+34, r25	; 0x22
    27a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27aa:	89 a1       	ldd	r24, Y+33	; 0x21
    27ac:	9a a1       	ldd	r25, Y+34	; 0x22
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	69 f7       	brne	.-38     	; 0x278c <main+0xe6>
    27b2:	14 c0       	rjmp	.+40     	; 0x27dc <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b4:	6b a1       	ldd	r22, Y+35	; 0x23
    27b6:	7c a1       	ldd	r23, Y+36	; 0x24
    27b8:	8d a1       	ldd	r24, Y+37	; 0x25
    27ba:	9e a1       	ldd	r25, Y+38	; 0x26
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9a a3       	std	Y+34, r25	; 0x22
    27c6:	89 a3       	std	Y+33, r24	; 0x21
    27c8:	89 a1       	ldd	r24, Y+33	; 0x21
    27ca:	9a a1       	ldd	r25, Y+34	; 0x22
    27cc:	9e 8f       	std	Y+30, r25	; 0x1e
    27ce:	8d 8f       	std	Y+29, r24	; 0x1d
    27d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <main+0x12e>
    27d8:	9e 8f       	std	Y+30, r25	; 0x1e
    27da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	
    while(1)
    {
		Accelerometor_ReadAxis(ADXL345_ALTERNATIVE_ADDRESS,&Live_Data);
    27dc:	21 e1       	ldi	r18, 0x11	; 17
    27de:	32 e0       	ldi	r19, 0x02	; 2
    27e0:	83 e5       	ldi	r24, 0x53	; 83
    27e2:	b9 01       	movw	r22, r18
    27e4:	0e 94 3c 07 	call	0xe78	; 0xe78 <Accelerometor_ReadAxis>
		if ( (Compare_Accs_Data(&Live_Data , &Accs_Stored_Data)))
    27e8:	81 e1       	ldi	r24, 0x11	; 17
    27ea:	92 e0       	ldi	r25, 0x02	; 2
    27ec:	2b e8       	ldi	r18, 0x8B	; 139
    27ee:	31 e0       	ldi	r19, 0x01	; 1
    27f0:	b9 01       	movw	r22, r18
    27f2:	0e 94 40 15 	call	0x2a80	; 0x2a80 <Compare_Accs_Data>
    27f6:	88 23       	and	r24, r24
    27f8:	89 f3       	breq	.-30     	; 0x27dc <main+0x136>

				{
					LCD_SendCommand(1);
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_SendCommand>
					LCD_WriteString_xy(1,1,"X=");
    2800:	2e e6       	ldi	r18, 0x6E	; 110
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	a9 01       	movw	r20, r18
    280a:	0e 94 dd 12 	call	0x25ba	; 0x25ba <LCD_WriteString_xy>
					LCD_WriteInteger_xy(3,1, (Live_Data.X_Axis), 4);
    280e:	80 91 11 02 	lds	r24, 0x0211
    2812:	90 91 12 02 	lds	r25, 0x0212
    2816:	a0 91 13 02 	lds	r26, 0x0213
    281a:	b0 91 14 02 	lds	r27, 0x0214
    281e:	bc 01       	movw	r22, r24
    2820:	cd 01       	movw	r24, r26
    2822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	9c 01       	movw	r18, r24
    282c:	83 e0       	ldi	r24, 0x03	; 3
    282e:	61 e0       	ldi	r22, 0x01	; 1
    2830:	a9 01       	movw	r20, r18
    2832:	24 e0       	ldi	r18, 0x04	; 4
    2834:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_WriteInteger_xy>
					LCD_WriteString_xy(7,1,"Y=");
    2838:	21 e7       	ldi	r18, 0x71	; 113
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	87 e0       	ldi	r24, 0x07	; 7
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	a9 01       	movw	r20, r18
    2842:	0e 94 dd 12 	call	0x25ba	; 0x25ba <LCD_WriteString_xy>
					LCD_WriteInteger_xy(9,1, (Live_Data.Y_Axis), 4);
    2846:	80 91 15 02 	lds	r24, 0x0215
    284a:	90 91 16 02 	lds	r25, 0x0216
    284e:	a0 91 17 02 	lds	r26, 0x0217
    2852:	b0 91 18 02 	lds	r27, 0x0218
    2856:	bc 01       	movw	r22, r24
    2858:	cd 01       	movw	r24, r26
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	9c 01       	movw	r18, r24
    2864:	89 e0       	ldi	r24, 0x09	; 9
    2866:	61 e0       	ldi	r22, 0x01	; 1
    2868:	a9 01       	movw	r20, r18
    286a:	24 e0       	ldi	r18, 0x04	; 4
    286c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_WriteInteger_xy>
					LCD_WriteString_xy(1,2,"Z=");
    2870:	24 e7       	ldi	r18, 0x74	; 116
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	62 e0       	ldi	r22, 0x02	; 2
    2878:	a9 01       	movw	r20, r18
    287a:	0e 94 dd 12 	call	0x25ba	; 0x25ba <LCD_WriteString_xy>
					LCD_WriteInteger_xy(3,1, (Live_Data.Z_Axis), 4);
    287e:	80 91 19 02 	lds	r24, 0x0219
    2882:	90 91 1a 02 	lds	r25, 0x021A
    2886:	a0 91 1b 02 	lds	r26, 0x021B
    288a:	b0 91 1c 02 	lds	r27, 0x021C
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	9c 01       	movw	r18, r24
    289c:	83 e0       	ldi	r24, 0x03	; 3
    289e:	61 e0       	ldi	r22, 0x01	; 1
    28a0:	a9 01       	movw	r20, r18
    28a2:	24 e0       	ldi	r18, 0x04	; 4
    28a4:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_WriteInteger_xy>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	aa ef       	ldi	r26, 0xFA	; 250
    28ae:	b3 e4       	ldi	r27, 0x43	; 67
    28b0:	89 8f       	std	Y+25, r24	; 0x19
    28b2:	9a 8f       	std	Y+26, r25	; 0x1a
    28b4:	ab 8f       	std	Y+27, r26	; 0x1b
    28b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e8       	ldi	r19, 0x80	; 128
    28c4:	4b e3       	ldi	r20, 0x3B	; 59
    28c6:	55 e4       	ldi	r21, 0x45	; 69
    28c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	8d 8b       	std	Y+21, r24	; 0x15
    28d2:	9e 8b       	std	Y+22, r25	; 0x16
    28d4:	af 8b       	std	Y+23, r26	; 0x17
    28d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28d8:	6d 89       	ldd	r22, Y+21	; 0x15
    28da:	7e 89       	ldd	r23, Y+22	; 0x16
    28dc:	8f 89       	ldd	r24, Y+23	; 0x17
    28de:	98 8d       	ldd	r25, Y+24	; 0x18
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e8       	ldi	r20, 0x80	; 128
    28e6:	5f e3       	ldi	r21, 0x3F	; 63
    28e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ec:	88 23       	and	r24, r24
    28ee:	2c f4       	brge	.+10     	; 0x28fa <main+0x254>
		__ticks = 1;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	9c 8b       	std	Y+20, r25	; 0x14
    28f6:	8b 8b       	std	Y+19, r24	; 0x13
    28f8:	3f c0       	rjmp	.+126    	; 0x2978 <main+0x2d2>
	else if (__tmp > 65535)
    28fa:	6d 89       	ldd	r22, Y+21	; 0x15
    28fc:	7e 89       	ldd	r23, Y+22	; 0x16
    28fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2900:	98 8d       	ldd	r25, Y+24	; 0x18
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	3f ef       	ldi	r19, 0xFF	; 255
    2906:	4f e7       	ldi	r20, 0x7F	; 127
    2908:	57 e4       	ldi	r21, 0x47	; 71
    290a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    290e:	18 16       	cp	r1, r24
    2910:	4c f5       	brge	.+82     	; 0x2964 <main+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2912:	69 8d       	ldd	r22, Y+25	; 0x19
    2914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e2       	ldi	r20, 0x20	; 32
    2920:	51 e4       	ldi	r21, 0x41	; 65
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9c 8b       	std	Y+20, r25	; 0x14
    2938:	8b 8b       	std	Y+19, r24	; 0x13
    293a:	0f c0       	rjmp	.+30     	; 0x295a <main+0x2b4>
    293c:	8c e2       	ldi	r24, 0x2C	; 44
    293e:	91 e0       	ldi	r25, 0x01	; 1
    2940:	9a 8b       	std	Y+18, r25	; 0x12
    2942:	89 8b       	std	Y+17, r24	; 0x11
    2944:	89 89       	ldd	r24, Y+17	; 0x11
    2946:	9a 89       	ldd	r25, Y+18	; 0x12
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <main+0x2a2>
    294c:	9a 8b       	std	Y+18, r25	; 0x12
    294e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2950:	8b 89       	ldd	r24, Y+19	; 0x13
    2952:	9c 89       	ldd	r25, Y+20	; 0x14
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	9c 8b       	std	Y+20, r25	; 0x14
    2958:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295a:	8b 89       	ldd	r24, Y+19	; 0x13
    295c:	9c 89       	ldd	r25, Y+20	; 0x14
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	69 f7       	brne	.-38     	; 0x293c <main+0x296>
    2962:	14 c0       	rjmp	.+40     	; 0x298c <main+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2964:	6d 89       	ldd	r22, Y+21	; 0x15
    2966:	7e 89       	ldd	r23, Y+22	; 0x16
    2968:	8f 89       	ldd	r24, Y+23	; 0x17
    296a:	98 8d       	ldd	r25, Y+24	; 0x18
    296c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	9c 8b       	std	Y+20, r25	; 0x14
    2976:	8b 8b       	std	Y+19, r24	; 0x13
    2978:	8b 89       	ldd	r24, Y+19	; 0x13
    297a:	9c 89       	ldd	r25, Y+20	; 0x14
    297c:	98 8b       	std	Y+16, r25	; 0x10
    297e:	8f 87       	std	Y+15, r24	; 0x0f
    2980:	8f 85       	ldd	r24, Y+15	; 0x0f
    2982:	98 89       	ldd	r25, Y+16	; 0x10
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <main+0x2de>
    2988:	98 8b       	std	Y+16, r25	; 0x10
    298a:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					LCD_SendCommand(1);
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_SendCommand>
					LCD_WriteString("Updating ..");
    2992:	87 e7       	ldi	r24, 0x77	; 119
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 8a 10 	call	0x2114	; 0x2114 <LCD_WriteString>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	aa ef       	ldi	r26, 0xFA	; 250
    29a0:	b3 e4       	ldi	r27, 0x43	; 67
    29a2:	8b 87       	std	Y+11, r24	; 0x0b
    29a4:	9c 87       	std	Y+12, r25	; 0x0c
    29a6:	ad 87       	std	Y+13, r26	; 0x0d
    29a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e8       	ldi	r19, 0x80	; 128
    29b6:	4b e3       	ldi	r20, 0x3B	; 59
    29b8:	55 e4       	ldi	r21, 0x45	; 69
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8f 83       	std	Y+7, r24	; 0x07
    29c4:	98 87       	std	Y+8, r25	; 0x08
    29c6:	a9 87       	std	Y+9, r26	; 0x09
    29c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <main+0x346>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <main+0x3c4>
	else if (__tmp > 65535)
    29ec:	6f 81       	ldd	r22, Y+7	; 0x07
    29ee:	78 85       	ldd	r23, Y+8	; 0x08
    29f0:	89 85       	ldd	r24, Y+9	; 0x09
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <main+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9e 83       	std	Y+6, r25	; 0x06
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <main+0x3a6>
    2a2e:	8c e2       	ldi	r24, 0x2C	; 44
    2a30:	91 e0       	ldi	r25, 0x01	; 1
    2a32:	9c 83       	std	Y+4, r25	; 0x04
    2a34:	8b 83       	std	Y+3, r24	; 0x03
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <main+0x394>
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	9e 81       	ldd	r25, Y+6	; 0x06
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <main+0x388>
    2a54:	c3 ce       	rjmp	.-634    	; 0x27dc <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	6f 81       	ldd	r22, Y+7	; 0x07
    2a58:	78 85       	ldd	r23, Y+8	; 0x08
    2a5a:	89 85       	ldd	r24, Y+9	; 0x09
    2a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <main+0x3d0>
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	ae ce       	rjmp	.-676    	; 0x27dc <main+0x136>

00002a80 <Compare_Accs_Data>:
				}
    }
}

u8  Compare_Accs_Data ( ADXL345_Data * Ptr_Accs_Readings, ADXL345_Data * Ptr_Acss_Stored_Data)
{
    2a80:	ef 92       	push	r14
    2a82:	ff 92       	push	r15
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <Compare_Accs_Data+0xe>
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <Compare_Accs_Data+0x10>
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <Compare_Accs_Data+0x12>
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	9b 83       	std	Y+3, r25	; 0x03
    2a98:	8a 83       	std	Y+2, r24	; 0x02
    2a9a:	7d 83       	std	Y+5, r23	; 0x05
    2a9c:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	Word_index=0;
    2a9e:	10 92 10 02 	sts	0x0210, r1
	for (i=0; i<10; i++)
    2aa2:	19 82       	std	Y+1, r1	; 0x01
    2aa4:	13 c1       	rjmp	.+550    	; 0x2ccc <Compare_Accs_Data+0x24c>
	{
		if  (
    2aa6:	ea 81       	ldd	r30, Y+2	; 0x02
    2aa8:	fb 81       	ldd	r31, Y+3	; 0x03
    2aaa:	e0 80       	ld	r14, Z
    2aac:	f1 80       	ldd	r15, Z+1	; 0x01
    2aae:	02 81       	ldd	r16, Z+2	; 0x02
    2ab0:	13 81       	ldd	r17, Z+3	; 0x03
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	c9 01       	movw	r24, r18
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	82 0f       	add	r24, r18
    2ac0:	93 1f       	adc	r25, r19
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	88 0f       	add	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	9c 01       	movw	r18, r24
    2acc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ace:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	e2 0f       	add	r30, r18
    2ad4:	f3 1f       	adc	r31, r19
    2ad6:	20 81       	ld	r18, Z
    2ad8:	31 81       	ldd	r19, Z+1	; 0x01
    2ada:	42 81       	ldd	r20, Z+2	; 0x02
    2adc:	53 81       	ldd	r21, Z+3	; 0x03
    2ade:	c8 01       	movw	r24, r16
    2ae0:	b7 01       	movw	r22, r14
    2ae2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	2f ef       	ldi	r18, 0xFF	; 255
    2af8:	87 3e       	cpi	r24, 0xE7	; 231
    2afa:	92 07       	cpc	r25, r18
    2afc:	0c f4       	brge	.+2      	; 0x2b00 <Compare_Accs_Data+0x80>
    2afe:	e3 c0       	rjmp	.+454    	; 0x2cc6 <Compare_Accs_Data+0x246>
    2b00:	ea 81       	ldd	r30, Y+2	; 0x02
    2b02:	fb 81       	ldd	r31, Y+3	; 0x03
    2b04:	e0 80       	ld	r14, Z
    2b06:	f1 80       	ldd	r15, Z+1	; 0x01
    2b08:	02 81       	ldd	r16, Z+2	; 0x02
    2b0a:	13 81       	ldd	r17, Z+3	; 0x03
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	c9 01       	movw	r24, r18
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	82 0f       	add	r24, r18
    2b1a:	93 1f       	adc	r25, r19
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	9c 01       	movw	r18, r24
    2b26:	8c 81       	ldd	r24, Y+4	; 0x04
    2b28:	9d 81       	ldd	r25, Y+5	; 0x05
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	e2 0f       	add	r30, r18
    2b2e:	f3 1f       	adc	r31, r19
    2b30:	20 81       	ld	r18, Z
    2b32:	31 81       	ldd	r19, Z+1	; 0x01
    2b34:	42 81       	ldd	r20, Z+2	; 0x02
    2b36:	53 81       	ldd	r21, Z+3	; 0x03
    2b38:	c8 01       	movw	r24, r16
    2b3a:	b7 01       	movw	r22, r14
    2b3c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	8a 31       	cpi	r24, 0x1A	; 26
    2b52:	91 05       	cpc	r25, r1
    2b54:	0c f0       	brlt	.+2      	; 0x2b58 <Compare_Accs_Data+0xd8>
    2b56:	b7 c0       	rjmp	.+366    	; 0x2cc6 <Compare_Accs_Data+0x246>
    2b58:	ea 81       	ldd	r30, Y+2	; 0x02
    2b5a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b5c:	e4 80       	ldd	r14, Z+4	; 0x04
    2b5e:	f5 80       	ldd	r15, Z+5	; 0x05
    2b60:	06 81       	ldd	r16, Z+6	; 0x06
    2b62:	17 81       	ldd	r17, Z+7	; 0x07
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	c9 01       	movw	r24, r18
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	82 0f       	add	r24, r18
    2b72:	93 1f       	adc	r25, r19
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	9c 01       	movw	r18, r24
    2b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b80:	9d 81       	ldd	r25, Y+5	; 0x05
    2b82:	fc 01       	movw	r30, r24
    2b84:	e2 0f       	add	r30, r18
    2b86:	f3 1f       	adc	r31, r19
    2b88:	24 81       	ldd	r18, Z+4	; 0x04
    2b8a:	35 81       	ldd	r19, Z+5	; 0x05
    2b8c:	46 81       	ldd	r20, Z+6	; 0x06
    2b8e:	57 81       	ldd	r21, Z+7	; 0x07
    2b90:	c8 01       	movw	r24, r16
    2b92:	b7 01       	movw	r22, r14
    2b94:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	bc 01       	movw	r22, r24
    2b9e:	cd 01       	movw	r24, r26
    2ba0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	2f ef       	ldi	r18, 0xFF	; 255
    2baa:	87 3e       	cpi	r24, 0xE7	; 231
    2bac:	92 07       	cpc	r25, r18
    2bae:	0c f4       	brge	.+2      	; 0x2bb2 <Compare_Accs_Data+0x132>
    2bb0:	8a c0       	rjmp	.+276    	; 0x2cc6 <Compare_Accs_Data+0x246>
    2bb2:	ea 81       	ldd	r30, Y+2	; 0x02
    2bb4:	fb 81       	ldd	r31, Y+3	; 0x03
    2bb6:	e4 80       	ldd	r14, Z+4	; 0x04
    2bb8:	f5 80       	ldd	r15, Z+5	; 0x05
    2bba:	06 81       	ldd	r16, Z+6	; 0x06
    2bbc:	17 81       	ldd	r17, Z+7	; 0x07
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	c9 01       	movw	r24, r18
    2bc6:	88 0f       	add	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	82 0f       	add	r24, r18
    2bcc:	93 1f       	adc	r25, r19
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	9c 01       	movw	r18, r24
    2bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bda:	9d 81       	ldd	r25, Y+5	; 0x05
    2bdc:	fc 01       	movw	r30, r24
    2bde:	e2 0f       	add	r30, r18
    2be0:	f3 1f       	adc	r31, r19
    2be2:	24 81       	ldd	r18, Z+4	; 0x04
    2be4:	35 81       	ldd	r19, Z+5	; 0x05
    2be6:	46 81       	ldd	r20, Z+6	; 0x06
    2be8:	57 81       	ldd	r21, Z+7	; 0x07
    2bea:	c8 01       	movw	r24, r16
    2bec:	b7 01       	movw	r22, r14
    2bee:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8a 31       	cpi	r24, 0x1A	; 26
    2c04:	91 05       	cpc	r25, r1
    2c06:	0c f0       	brlt	.+2      	; 0x2c0a <Compare_Accs_Data+0x18a>
    2c08:	5e c0       	rjmp	.+188    	; 0x2cc6 <Compare_Accs_Data+0x246>
    2c0a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c0c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c0e:	e0 84       	ldd	r14, Z+8	; 0x08
    2c10:	f1 84       	ldd	r15, Z+9	; 0x09
    2c12:	02 85       	ldd	r16, Z+10	; 0x0a
    2c14:	13 85       	ldd	r17, Z+11	; 0x0b
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	28 2f       	mov	r18, r24
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	c9 01       	movw	r24, r18
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	82 0f       	add	r24, r18
    2c24:	93 1f       	adc	r25, r19
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	9c 01       	movw	r18, r24
    2c30:	8c 81       	ldd	r24, Y+4	; 0x04
    2c32:	9d 81       	ldd	r25, Y+5	; 0x05
    2c34:	fc 01       	movw	r30, r24
    2c36:	e2 0f       	add	r30, r18
    2c38:	f3 1f       	adc	r31, r19
    2c3a:	20 85       	ldd	r18, Z+8	; 0x08
    2c3c:	31 85       	ldd	r19, Z+9	; 0x09
    2c3e:	42 85       	ldd	r20, Z+10	; 0x0a
    2c40:	53 85       	ldd	r21, Z+11	; 0x0b
    2c42:	c8 01       	movw	r24, r16
    2c44:	b7 01       	movw	r22, r14
    2c46:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	bc 01       	movw	r22, r24
    2c50:	cd 01       	movw	r24, r26
    2c52:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	2f ef       	ldi	r18, 0xFF	; 255
    2c5c:	87 3e       	cpi	r24, 0xE7	; 231
    2c5e:	92 07       	cpc	r25, r18
    2c60:	94 f1       	brlt	.+100    	; 0x2cc6 <Compare_Accs_Data+0x246>
    2c62:	ea 81       	ldd	r30, Y+2	; 0x02
    2c64:	fb 81       	ldd	r31, Y+3	; 0x03
    2c66:	e0 84       	ldd	r14, Z+8	; 0x08
    2c68:	f1 84       	ldd	r15, Z+9	; 0x09
    2c6a:	02 85       	ldd	r16, Z+10	; 0x0a
    2c6c:	13 85       	ldd	r17, Z+11	; 0x0b
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	c9 01       	movw	r24, r18
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	82 0f       	add	r24, r18
    2c7c:	93 1f       	adc	r25, r19
    2c7e:	88 0f       	add	r24, r24
    2c80:	99 1f       	adc	r25, r25
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	9c 01       	movw	r18, r24
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	e2 0f       	add	r30, r18
    2c90:	f3 1f       	adc	r31, r19
    2c92:	20 85       	ldd	r18, Z+8	; 0x08
    2c94:	31 85       	ldd	r19, Z+9	; 0x09
    2c96:	42 85       	ldd	r20, Z+10	; 0x0a
    2c98:	53 85       	ldd	r21, Z+11	; 0x0b
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	b7 01       	movw	r22, r14
    2c9e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	8a 31       	cpi	r24, 0x1A	; 26
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	3c f4       	brge	.+14     	; 0x2cc6 <Compare_Accs_Data+0x246>
*/


			)
		{
			Word_index= i + 1;
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	8f 5f       	subi	r24, 0xFF	; 255
    2cbc:	80 93 10 02 	sts	0x0210, r24
			return 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	8e 83       	std	Y+6, r24	; 0x06
    2cc4:	08 c0       	rjmp	.+16     	; 0x2cd6 <Compare_Accs_Data+0x256>

u8  Compare_Accs_Data ( ADXL345_Data * Ptr_Accs_Readings, ADXL345_Data * Ptr_Acss_Stored_Data)
{
	u8 i;
	Word_index=0;
	for (i=0; i<10; i++)
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	8f 5f       	subi	r24, 0xFF	; 255
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	8a 30       	cpi	r24, 0x0A	; 10
    2cd0:	08 f4       	brcc	.+2      	; 0x2cd4 <Compare_Accs_Data+0x254>
    2cd2:	e9 ce       	rjmp	.-558    	; 0x2aa6 <Compare_Accs_Data+0x26>
		{
			Word_index= i + 1;
			return 1;
		}
	}
	return 0;
    2cd4:	1e 82       	std	Y+6, r1	; 0x06
    2cd6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2cd8:	26 96       	adiw	r28, 0x06	; 6
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	cf 91       	pop	r28
    2ce6:	df 91       	pop	r29
    2ce8:	1f 91       	pop	r17
    2cea:	0f 91       	pop	r16
    2cec:	ff 90       	pop	r15
    2cee:	ef 90       	pop	r14
    2cf0:	08 95       	ret

00002cf2 <__prologue_saves__>:
    2cf2:	2f 92       	push	r2
    2cf4:	3f 92       	push	r3
    2cf6:	4f 92       	push	r4
    2cf8:	5f 92       	push	r5
    2cfa:	6f 92       	push	r6
    2cfc:	7f 92       	push	r7
    2cfe:	8f 92       	push	r8
    2d00:	9f 92       	push	r9
    2d02:	af 92       	push	r10
    2d04:	bf 92       	push	r11
    2d06:	cf 92       	push	r12
    2d08:	df 92       	push	r13
    2d0a:	ef 92       	push	r14
    2d0c:	ff 92       	push	r15
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	ca 1b       	sub	r28, r26
    2d1c:	db 0b       	sbc	r29, r27
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	09 94       	ijmp

00002d2a <__epilogue_restores__>:
    2d2a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d2c:	39 88       	ldd	r3, Y+17	; 0x11
    2d2e:	48 88       	ldd	r4, Y+16	; 0x10
    2d30:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d32:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d34:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d36:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d38:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d3a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d3c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d3e:	c8 84       	ldd	r12, Y+8	; 0x08
    2d40:	df 80       	ldd	r13, Y+7	; 0x07
    2d42:	ee 80       	ldd	r14, Y+6	; 0x06
    2d44:	fd 80       	ldd	r15, Y+5	; 0x05
    2d46:	0c 81       	ldd	r16, Y+4	; 0x04
    2d48:	1b 81       	ldd	r17, Y+3	; 0x03
    2d4a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d4c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d4e:	ce 0f       	add	r28, r30
    2d50:	d1 1d       	adc	r29, r1
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	ed 01       	movw	r28, r26
    2d5e:	08 95       	ret

00002d60 <itoa>:
    2d60:	fb 01       	movw	r30, r22
    2d62:	9f 01       	movw	r18, r30
    2d64:	e8 94       	clt
    2d66:	42 30       	cpi	r20, 0x02	; 2
    2d68:	c4 f0       	brlt	.+48     	; 0x2d9a <itoa+0x3a>
    2d6a:	45 32       	cpi	r20, 0x25	; 37
    2d6c:	b4 f4       	brge	.+44     	; 0x2d9a <itoa+0x3a>
    2d6e:	4a 30       	cpi	r20, 0x0A	; 10
    2d70:	29 f4       	brne	.+10     	; 0x2d7c <itoa+0x1c>
    2d72:	97 fb       	bst	r25, 7
    2d74:	1e f4       	brtc	.+6      	; 0x2d7c <itoa+0x1c>
    2d76:	90 95       	com	r25
    2d78:	81 95       	neg	r24
    2d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7c:	64 2f       	mov	r22, r20
    2d7e:	77 27       	eor	r23, r23
    2d80:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    2d84:	80 5d       	subi	r24, 0xD0	; 208
    2d86:	8a 33       	cpi	r24, 0x3A	; 58
    2d88:	0c f0       	brlt	.+2      	; 0x2d8c <itoa+0x2c>
    2d8a:	89 5d       	subi	r24, 0xD9	; 217
    2d8c:	81 93       	st	Z+, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	a1 f7       	brne	.-24     	; 0x2d7c <itoa+0x1c>
    2d94:	16 f4       	brtc	.+4      	; 0x2d9a <itoa+0x3a>
    2d96:	5d e2       	ldi	r21, 0x2D	; 45
    2d98:	51 93       	st	Z+, r21
    2d9a:	10 82       	st	Z, r1
    2d9c:	c9 01       	movw	r24, r18
    2d9e:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <strrev>

00002da2 <strrev>:
    2da2:	dc 01       	movw	r26, r24
    2da4:	fc 01       	movw	r30, r24
    2da6:	67 2f       	mov	r22, r23
    2da8:	71 91       	ld	r23, Z+
    2daa:	77 23       	and	r23, r23
    2dac:	e1 f7       	brne	.-8      	; 0x2da6 <strrev+0x4>
    2dae:	32 97       	sbiw	r30, 0x02	; 2
    2db0:	04 c0       	rjmp	.+8      	; 0x2dba <strrev+0x18>
    2db2:	7c 91       	ld	r23, X
    2db4:	6d 93       	st	X+, r22
    2db6:	70 83       	st	Z, r23
    2db8:	62 91       	ld	r22, -Z
    2dba:	ae 17       	cp	r26, r30
    2dbc:	bf 07       	cpc	r27, r31
    2dbe:	c8 f3       	brcs	.-14     	; 0x2db2 <strrev+0x10>
    2dc0:	08 95       	ret

00002dc2 <__udivmodhi4>:
    2dc2:	aa 1b       	sub	r26, r26
    2dc4:	bb 1b       	sub	r27, r27
    2dc6:	51 e1       	ldi	r21, 0x11	; 17
    2dc8:	07 c0       	rjmp	.+14     	; 0x2dd8 <__udivmodhi4_ep>

00002dca <__udivmodhi4_loop>:
    2dca:	aa 1f       	adc	r26, r26
    2dcc:	bb 1f       	adc	r27, r27
    2dce:	a6 17       	cp	r26, r22
    2dd0:	b7 07       	cpc	r27, r23
    2dd2:	10 f0       	brcs	.+4      	; 0x2dd8 <__udivmodhi4_ep>
    2dd4:	a6 1b       	sub	r26, r22
    2dd6:	b7 0b       	sbc	r27, r23

00002dd8 <__udivmodhi4_ep>:
    2dd8:	88 1f       	adc	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	5a 95       	dec	r21
    2dde:	a9 f7       	brne	.-22     	; 0x2dca <__udivmodhi4_loop>
    2de0:	80 95       	com	r24
    2de2:	90 95       	com	r25
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	08 95       	ret

00002dea <_exit>:
    2dea:	f8 94       	cli

00002dec <__stop_program>:
    2dec:	ff cf       	rjmp	.-2      	; 0x2dec <__stop_program>
