
Atmega128_ACCs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800100  00003162  000031f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003162  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080022a  0080022a  00003320  2**0
                  ALLOC
  3 .stab         0000231c  00000000  00000000  00003320  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010eb  00000000  00000000  0000563c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006727  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000068c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b420  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f7  00000000  00000000  0000b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c245  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e6       	ldi	r30, 0x62	; 98
      a0:	f1 e3       	ldi	r31, 0x31	; 49
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 32       	cpi	r26, 0x2A	; 42
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	aa e2       	ldi	r26, 0x2A	; 42
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 33       	cpi	r26, 0x36	; 54
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <main>
      c6:	0c 94 af 18 	jmp	0x315e	; 0x315e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__fixunssfsi>:
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	7b 01       	movw	r14, r22
      d8:	8c 01       	movw	r16, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	5f e4       	ldi	r21, 0x4F	; 79
      e2:	0e 94 13 04 	call	0x826	; 0x826 <__gesf2>
      e6:	88 23       	and	r24, r24
      e8:	8c f0       	brlt	.+34     	; 0x10c <__fixunssfsi+0x3e>
      ea:	c8 01       	movw	r24, r16
      ec:	b7 01       	movw	r22, r14
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	5f e4       	ldi	r21, 0x4F	; 79
      f6:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
      fa:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixsfsi>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	20 50       	subi	r18, 0x00	; 0
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	50 48       	sbci	r21, 0x80	; 128
     10a:	06 c0       	rjmp	.+12     	; 0x118 <__fixunssfsi+0x4a>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fixsfsi>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
     118:	b9 01       	movw	r22, r18
     11a:	ca 01       	movw	r24, r20
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <_fpadd_parts>:
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__prologue_saves__>
     132:	dc 01       	movw	r26, r24
     134:	2b 01       	movw	r4, r22
     136:	fa 01       	movw	r30, r20
     138:	9c 91       	ld	r25, X
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	08 f4       	brcc	.+2      	; 0x140 <_fpadd_parts+0x1a>
     13e:	39 c1       	rjmp	.+626    	; 0x3b2 <_fpadd_parts+0x28c>
     140:	eb 01       	movw	r28, r22
     142:	88 81       	ld	r24, Y
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	08 f4       	brcc	.+2      	; 0x14a <_fpadd_parts+0x24>
     148:	33 c1       	rjmp	.+614    	; 0x3b0 <_fpadd_parts+0x28a>
     14a:	94 30       	cpi	r25, 0x04	; 4
     14c:	69 f4       	brne	.+26     	; 0x168 <_fpadd_parts+0x42>
     14e:	84 30       	cpi	r24, 0x04	; 4
     150:	09 f0       	breq	.+2      	; 0x154 <_fpadd_parts+0x2e>
     152:	2f c1       	rjmp	.+606    	; 0x3b2 <_fpadd_parts+0x28c>
     154:	11 96       	adiw	r26, 0x01	; 1
     156:	9c 91       	ld	r25, X
     158:	11 97       	sbiw	r26, 0x01	; 1
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	98 17       	cp	r25, r24
     15e:	09 f4       	brne	.+2      	; 0x162 <_fpadd_parts+0x3c>
     160:	28 c1       	rjmp	.+592    	; 0x3b2 <_fpadd_parts+0x28c>
     162:	a2 e2       	ldi	r26, 0x22	; 34
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	25 c1       	rjmp	.+586    	; 0x3b2 <_fpadd_parts+0x28c>
     168:	84 30       	cpi	r24, 0x04	; 4
     16a:	09 f4       	brne	.+2      	; 0x16e <_fpadd_parts+0x48>
     16c:	21 c1       	rjmp	.+578    	; 0x3b0 <_fpadd_parts+0x28a>
     16e:	82 30       	cpi	r24, 0x02	; 2
     170:	a9 f4       	brne	.+42     	; 0x19c <_fpadd_parts+0x76>
     172:	92 30       	cpi	r25, 0x02	; 2
     174:	09 f0       	breq	.+2      	; 0x178 <_fpadd_parts+0x52>
     176:	1d c1       	rjmp	.+570    	; 0x3b2 <_fpadd_parts+0x28c>
     178:	9a 01       	movw	r18, r20
     17a:	ad 01       	movw	r20, r26
     17c:	88 e0       	ldi	r24, 0x08	; 8
     17e:	ea 01       	movw	r28, r20
     180:	09 90       	ld	r0, Y+
     182:	ae 01       	movw	r20, r28
     184:	e9 01       	movw	r28, r18
     186:	09 92       	st	Y+, r0
     188:	9e 01       	movw	r18, r28
     18a:	81 50       	subi	r24, 0x01	; 1
     18c:	c1 f7       	brne	.-16     	; 0x17e <_fpadd_parts+0x58>
     18e:	e2 01       	movw	r28, r4
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	11 96       	adiw	r26, 0x01	; 1
     194:	9c 91       	ld	r25, X
     196:	89 23       	and	r24, r25
     198:	81 83       	std	Z+1, r24	; 0x01
     19a:	08 c1       	rjmp	.+528    	; 0x3ac <_fpadd_parts+0x286>
     19c:	92 30       	cpi	r25, 0x02	; 2
     19e:	09 f4       	brne	.+2      	; 0x1a2 <_fpadd_parts+0x7c>
     1a0:	07 c1       	rjmp	.+526    	; 0x3b0 <_fpadd_parts+0x28a>
     1a2:	12 96       	adiw	r26, 0x02	; 2
     1a4:	2d 90       	ld	r2, X+
     1a6:	3c 90       	ld	r3, X
     1a8:	13 97       	sbiw	r26, 0x03	; 3
     1aa:	eb 01       	movw	r28, r22
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	9b 81       	ldd	r25, Y+3	; 0x03
     1b0:	14 96       	adiw	r26, 0x04	; 4
     1b2:	ad 90       	ld	r10, X+
     1b4:	bd 90       	ld	r11, X+
     1b6:	cd 90       	ld	r12, X+
     1b8:	dc 90       	ld	r13, X
     1ba:	17 97       	sbiw	r26, 0x07	; 7
     1bc:	ec 80       	ldd	r14, Y+4	; 0x04
     1be:	fd 80       	ldd	r15, Y+5	; 0x05
     1c0:	0e 81       	ldd	r16, Y+6	; 0x06
     1c2:	1f 81       	ldd	r17, Y+7	; 0x07
     1c4:	91 01       	movw	r18, r2
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	b9 01       	movw	r22, r18
     1cc:	37 ff       	sbrs	r19, 7
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <_fpadd_parts+0xb2>
     1d0:	66 27       	eor	r22, r22
     1d2:	77 27       	eor	r23, r23
     1d4:	62 1b       	sub	r22, r18
     1d6:	73 0b       	sbc	r23, r19
     1d8:	60 32       	cpi	r22, 0x20	; 32
     1da:	71 05       	cpc	r23, r1
     1dc:	0c f0       	brlt	.+2      	; 0x1e0 <_fpadd_parts+0xba>
     1de:	61 c0       	rjmp	.+194    	; 0x2a2 <_fpadd_parts+0x17c>
     1e0:	12 16       	cp	r1, r18
     1e2:	13 06       	cpc	r1, r19
     1e4:	6c f5       	brge	.+90     	; 0x240 <_fpadd_parts+0x11a>
     1e6:	37 01       	movw	r6, r14
     1e8:	48 01       	movw	r8, r16
     1ea:	06 2e       	mov	r0, r22
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <_fpadd_parts+0xd0>
     1ee:	96 94       	lsr	r9
     1f0:	87 94       	ror	r8
     1f2:	77 94       	ror	r7
     1f4:	67 94       	ror	r6
     1f6:	0a 94       	dec	r0
     1f8:	d2 f7       	brpl	.-12     	; 0x1ee <_fpadd_parts+0xc8>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0xe6>
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	44 1f       	adc	r20, r20
     20a:	55 1f       	adc	r21, r21
     20c:	6a 95       	dec	r22
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0xde>
     210:	21 50       	subi	r18, 0x01	; 1
     212:	30 40       	sbci	r19, 0x00	; 0
     214:	40 40       	sbci	r20, 0x00	; 0
     216:	50 40       	sbci	r21, 0x00	; 0
     218:	2e 21       	and	r18, r14
     21a:	3f 21       	and	r19, r15
     21c:	40 23       	and	r20, r16
     21e:	51 23       	and	r21, r17
     220:	21 15       	cp	r18, r1
     222:	31 05       	cpc	r19, r1
     224:	41 05       	cpc	r20, r1
     226:	51 05       	cpc	r21, r1
     228:	21 f0       	breq	.+8      	; 0x232 <_fpadd_parts+0x10c>
     22a:	21 e0       	ldi	r18, 0x01	; 1
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	79 01       	movw	r14, r18
     234:	8a 01       	movw	r16, r20
     236:	e6 28       	or	r14, r6
     238:	f7 28       	or	r15, r7
     23a:	08 29       	or	r16, r8
     23c:	19 29       	or	r17, r9
     23e:	3c c0       	rjmp	.+120    	; 0x2b8 <_fpadd_parts+0x192>
     240:	23 2b       	or	r18, r19
     242:	d1 f1       	breq	.+116    	; 0x2b8 <_fpadd_parts+0x192>
     244:	26 0e       	add	r2, r22
     246:	37 1e       	adc	r3, r23
     248:	35 01       	movw	r6, r10
     24a:	46 01       	movw	r8, r12
     24c:	06 2e       	mov	r0, r22
     24e:	04 c0       	rjmp	.+8      	; 0x258 <_fpadd_parts+0x132>
     250:	96 94       	lsr	r9
     252:	87 94       	ror	r8
     254:	77 94       	ror	r7
     256:	67 94       	ror	r6
     258:	0a 94       	dec	r0
     25a:	d2 f7       	brpl	.-12     	; 0x250 <_fpadd_parts+0x12a>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	04 c0       	rjmp	.+8      	; 0x26e <_fpadd_parts+0x148>
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	44 1f       	adc	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	6a 95       	dec	r22
     270:	d2 f7       	brpl	.-12     	; 0x266 <_fpadd_parts+0x140>
     272:	21 50       	subi	r18, 0x01	; 1
     274:	30 40       	sbci	r19, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	50 40       	sbci	r21, 0x00	; 0
     27a:	2a 21       	and	r18, r10
     27c:	3b 21       	and	r19, r11
     27e:	4c 21       	and	r20, r12
     280:	5d 21       	and	r21, r13
     282:	21 15       	cp	r18, r1
     284:	31 05       	cpc	r19, r1
     286:	41 05       	cpc	r20, r1
     288:	51 05       	cpc	r21, r1
     28a:	21 f0       	breq	.+8      	; 0x294 <_fpadd_parts+0x16e>
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	59 01       	movw	r10, r18
     296:	6a 01       	movw	r12, r20
     298:	a6 28       	or	r10, r6
     29a:	b7 28       	or	r11, r7
     29c:	c8 28       	or	r12, r8
     29e:	d9 28       	or	r13, r9
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <_fpadd_parts+0x192>
     2a2:	82 15       	cp	r24, r2
     2a4:	93 05       	cpc	r25, r3
     2a6:	2c f0       	brlt	.+10     	; 0x2b2 <_fpadd_parts+0x18c>
     2a8:	1c 01       	movw	r2, r24
     2aa:	aa 24       	eor	r10, r10
     2ac:	bb 24       	eor	r11, r11
     2ae:	65 01       	movw	r12, r10
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <_fpadd_parts+0x192>
     2b2:	ee 24       	eor	r14, r14
     2b4:	ff 24       	eor	r15, r15
     2b6:	87 01       	movw	r16, r14
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 91       	ld	r25, X
     2bc:	d2 01       	movw	r26, r4
     2be:	11 96       	adiw	r26, 0x01	; 1
     2c0:	8c 91       	ld	r24, X
     2c2:	98 17       	cp	r25, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <_fpadd_parts+0x1a2>
     2c6:	45 c0       	rjmp	.+138    	; 0x352 <_fpadd_parts+0x22c>
     2c8:	99 23       	and	r25, r25
     2ca:	39 f0       	breq	.+14     	; 0x2da <_fpadd_parts+0x1b4>
     2cc:	a8 01       	movw	r20, r16
     2ce:	97 01       	movw	r18, r14
     2d0:	2a 19       	sub	r18, r10
     2d2:	3b 09       	sbc	r19, r11
     2d4:	4c 09       	sbc	r20, r12
     2d6:	5d 09       	sbc	r21, r13
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <_fpadd_parts+0x1c0>
     2da:	a6 01       	movw	r20, r12
     2dc:	95 01       	movw	r18, r10
     2de:	2e 19       	sub	r18, r14
     2e0:	3f 09       	sbc	r19, r15
     2e2:	40 0b       	sbc	r20, r16
     2e4:	51 0b       	sbc	r21, r17
     2e6:	57 fd       	sbrc	r21, 7
     2e8:	08 c0       	rjmp	.+16     	; 0x2fa <_fpadd_parts+0x1d4>
     2ea:	11 82       	std	Z+1, r1	; 0x01
     2ec:	33 82       	std	Z+3, r3	; 0x03
     2ee:	22 82       	std	Z+2, r2	; 0x02
     2f0:	24 83       	std	Z+4, r18	; 0x04
     2f2:	35 83       	std	Z+5, r19	; 0x05
     2f4:	46 83       	std	Z+6, r20	; 0x06
     2f6:	57 83       	std	Z+7, r21	; 0x07
     2f8:	1d c0       	rjmp	.+58     	; 0x334 <_fpadd_parts+0x20e>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	81 83       	std	Z+1, r24	; 0x01
     2fe:	33 82       	std	Z+3, r3	; 0x03
     300:	22 82       	std	Z+2, r2	; 0x02
     302:	88 27       	eor	r24, r24
     304:	99 27       	eor	r25, r25
     306:	dc 01       	movw	r26, r24
     308:	82 1b       	sub	r24, r18
     30a:	93 0b       	sbc	r25, r19
     30c:	a4 0b       	sbc	r26, r20
     30e:	b5 0b       	sbc	r27, r21
     310:	84 83       	std	Z+4, r24	; 0x04
     312:	95 83       	std	Z+5, r25	; 0x05
     314:	a6 83       	std	Z+6, r26	; 0x06
     316:	b7 83       	std	Z+7, r27	; 0x07
     318:	0d c0       	rjmp	.+26     	; 0x334 <_fpadd_parts+0x20e>
     31a:	22 0f       	add	r18, r18
     31c:	33 1f       	adc	r19, r19
     31e:	44 1f       	adc	r20, r20
     320:	55 1f       	adc	r21, r21
     322:	24 83       	std	Z+4, r18	; 0x04
     324:	35 83       	std	Z+5, r19	; 0x05
     326:	46 83       	std	Z+6, r20	; 0x06
     328:	57 83       	std	Z+7, r21	; 0x07
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	93 83       	std	Z+3, r25	; 0x03
     332:	82 83       	std	Z+2, r24	; 0x02
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	da 01       	movw	r26, r20
     33e:	c9 01       	movw	r24, r18
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	a1 09       	sbc	r26, r1
     344:	b1 09       	sbc	r27, r1
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	af 4f       	sbci	r26, 0xFF	; 255
     34c:	bf 43       	sbci	r27, 0x3F	; 63
     34e:	28 f3       	brcs	.-54     	; 0x31a <_fpadd_parts+0x1f4>
     350:	0b c0       	rjmp	.+22     	; 0x368 <_fpadd_parts+0x242>
     352:	91 83       	std	Z+1, r25	; 0x01
     354:	33 82       	std	Z+3, r3	; 0x03
     356:	22 82       	std	Z+2, r2	; 0x02
     358:	ea 0c       	add	r14, r10
     35a:	fb 1c       	adc	r15, r11
     35c:	0c 1d       	adc	r16, r12
     35e:	1d 1d       	adc	r17, r13
     360:	e4 82       	std	Z+4, r14	; 0x04
     362:	f5 82       	std	Z+5, r15	; 0x05
     364:	06 83       	std	Z+6, r16	; 0x06
     366:	17 83       	std	Z+7, r17	; 0x07
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	80 83       	st	Z, r24
     36c:	24 81       	ldd	r18, Z+4	; 0x04
     36e:	35 81       	ldd	r19, Z+5	; 0x05
     370:	46 81       	ldd	r20, Z+6	; 0x06
     372:	57 81       	ldd	r21, Z+7	; 0x07
     374:	57 ff       	sbrs	r21, 7
     376:	1a c0       	rjmp	.+52     	; 0x3ac <_fpadd_parts+0x286>
     378:	c9 01       	movw	r24, r18
     37a:	aa 27       	eor	r26, r26
     37c:	97 fd       	sbrc	r25, 7
     37e:	a0 95       	com	r26
     380:	ba 2f       	mov	r27, r26
     382:	81 70       	andi	r24, 0x01	; 1
     384:	90 70       	andi	r25, 0x00	; 0
     386:	a0 70       	andi	r26, 0x00	; 0
     388:	b0 70       	andi	r27, 0x00	; 0
     38a:	56 95       	lsr	r21
     38c:	47 95       	ror	r20
     38e:	37 95       	ror	r19
     390:	27 95       	ror	r18
     392:	82 2b       	or	r24, r18
     394:	93 2b       	or	r25, r19
     396:	a4 2b       	or	r26, r20
     398:	b5 2b       	or	r27, r21
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	95 83       	std	Z+5, r25	; 0x05
     39e:	a6 83       	std	Z+6, r26	; 0x06
     3a0:	b7 83       	std	Z+7, r27	; 0x07
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	93 83       	std	Z+3, r25	; 0x03
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	df 01       	movw	r26, r30
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <_fpadd_parts+0x28c>
     3b0:	d2 01       	movw	r26, r4
     3b2:	cd 01       	movw	r24, r26
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	e2 e1       	ldi	r30, 0x12	; 18
     3ba:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__epilogue_restores__>

000003be <__subsf3>:
     3be:	a0 e2       	ldi	r26, 0x20	; 32
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e5 ee       	ldi	r30, 0xE5	; 229
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__prologue_saves__+0x18>
     3ca:	69 83       	std	Y+1, r22	; 0x01
     3cc:	7a 83       	std	Y+2, r23	; 0x02
     3ce:	8b 83       	std	Y+3, r24	; 0x03
     3d0:	9c 83       	std	Y+4, r25	; 0x04
     3d2:	2d 83       	std	Y+5, r18	; 0x05
     3d4:	3e 83       	std	Y+6, r19	; 0x06
     3d6:	4f 83       	std	Y+7, r20	; 0x07
     3d8:	58 87       	std	Y+8, r21	; 0x08
     3da:	e9 e0       	ldi	r30, 0x09	; 9
     3dc:	ee 2e       	mov	r14, r30
     3de:	f1 2c       	mov	r15, r1
     3e0:	ec 0e       	add	r14, r28
     3e2:	fd 1e       	adc	r15, r29
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     3ee:	8e 01       	movw	r16, r28
     3f0:	0f 5e       	subi	r16, 0xEF	; 239
     3f2:	1f 4f       	sbci	r17, 0xFF	; 255
     3f4:	ce 01       	movw	r24, r28
     3f6:	05 96       	adiw	r24, 0x05	; 5
     3f8:	b8 01       	movw	r22, r16
     3fa:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     3fe:	8a 89       	ldd	r24, Y+18	; 0x12
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	89 27       	eor	r24, r25
     404:	8a 8b       	std	Y+18, r24	; 0x12
     406:	c7 01       	movw	r24, r14
     408:	b8 01       	movw	r22, r16
     40a:	ae 01       	movw	r20, r28
     40c:	47 5e       	subi	r20, 0xE7	; 231
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     414:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__pack_f>
     418:	a0 96       	adiw	r28, 0x20	; 32
     41a:	e6 e0       	ldi	r30, 0x06	; 6
     41c:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__epilogue_restores__+0x18>

00000420 <__addsf3>:
     420:	a0 e2       	ldi	r26, 0x20	; 32
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__prologue_saves__+0x18>
     42c:	69 83       	std	Y+1, r22	; 0x01
     42e:	7a 83       	std	Y+2, r23	; 0x02
     430:	8b 83       	std	Y+3, r24	; 0x03
     432:	9c 83       	std	Y+4, r25	; 0x04
     434:	2d 83       	std	Y+5, r18	; 0x05
     436:	3e 83       	std	Y+6, r19	; 0x06
     438:	4f 83       	std	Y+7, r20	; 0x07
     43a:	58 87       	std	Y+8, r21	; 0x08
     43c:	f9 e0       	ldi	r31, 0x09	; 9
     43e:	ef 2e       	mov	r14, r31
     440:	f1 2c       	mov	r15, r1
     442:	ec 0e       	add	r14, r28
     444:	fd 1e       	adc	r15, r29
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	b7 01       	movw	r22, r14
     44c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     450:	8e 01       	movw	r16, r28
     452:	0f 5e       	subi	r16, 0xEF	; 239
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	ce 01       	movw	r24, r28
     458:	05 96       	adiw	r24, 0x05	; 5
     45a:	b8 01       	movw	r22, r16
     45c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     460:	c7 01       	movw	r24, r14
     462:	b8 01       	movw	r22, r16
     464:	ae 01       	movw	r20, r28
     466:	47 5e       	subi	r20, 0xE7	; 231
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     46e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__pack_f>
     472:	a0 96       	adiw	r28, 0x20	; 32
     474:	e6 e0       	ldi	r30, 0x06	; 6
     476:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__epilogue_restores__+0x18>

0000047a <__mulsf3>:
     47a:	a0 e2       	ldi	r26, 0x20	; 32
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e3 e4       	ldi	r30, 0x43	; 67
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__prologue_saves__>
     486:	69 83       	std	Y+1, r22	; 0x01
     488:	7a 83       	std	Y+2, r23	; 0x02
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	9c 83       	std	Y+4, r25	; 0x04
     48e:	2d 83       	std	Y+5, r18	; 0x05
     490:	3e 83       	std	Y+6, r19	; 0x06
     492:	4f 83       	std	Y+7, r20	; 0x07
     494:	58 87       	std	Y+8, r21	; 0x08
     496:	ce 01       	movw	r24, r28
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	be 01       	movw	r22, r28
     49c:	67 5f       	subi	r22, 0xF7	; 247
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     4a4:	ce 01       	movw	r24, r28
     4a6:	05 96       	adiw	r24, 0x05	; 5
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5e       	subi	r22, 0xEF	; 239
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     4b2:	99 85       	ldd	r25, Y+9	; 0x09
     4b4:	92 30       	cpi	r25, 0x02	; 2
     4b6:	88 f0       	brcs	.+34     	; 0x4da <__mulsf3+0x60>
     4b8:	89 89       	ldd	r24, Y+17	; 0x11
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	c8 f0       	brcs	.+50     	; 0x4f0 <__mulsf3+0x76>
     4be:	94 30       	cpi	r25, 0x04	; 4
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <__mulsf3+0x4e>
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	51 f4       	brne	.+20     	; 0x4da <__mulsf3+0x60>
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__mulsf3+0x56>
     4c8:	84 30       	cpi	r24, 0x04	; 4
     4ca:	29 f4       	brne	.+10     	; 0x4d6 <__mulsf3+0x5c>
     4cc:	92 30       	cpi	r25, 0x02	; 2
     4ce:	81 f4       	brne	.+32     	; 0x4f0 <__mulsf3+0x76>
     4d0:	82 e2       	ldi	r24, 0x22	; 34
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	c6 c0       	rjmp	.+396    	; 0x662 <__mulsf3+0x1e8>
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	49 f4       	brne	.+18     	; 0x4ec <__mulsf3+0x72>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4de:	8a 89       	ldd	r24, Y+18	; 0x12
     4e0:	98 13       	cpse	r25, r24
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	2a 87       	std	Y+10, r18	; 0x0a
     4e6:	ce 01       	movw	r24, r28
     4e8:	09 96       	adiw	r24, 0x09	; 9
     4ea:	bb c0       	rjmp	.+374    	; 0x662 <__mulsf3+0x1e8>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	49 f4       	brne	.+18     	; 0x502 <__mulsf3+0x88>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	98 13       	cpse	r25, r24
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	2a 8b       	std	Y+18, r18	; 0x12
     4fc:	ce 01       	movw	r24, r28
     4fe:	41 96       	adiw	r24, 0x11	; 17
     500:	b0 c0       	rjmp	.+352    	; 0x662 <__mulsf3+0x1e8>
     502:	2d 84       	ldd	r2, Y+13	; 0x0d
     504:	3e 84       	ldd	r3, Y+14	; 0x0e
     506:	4f 84       	ldd	r4, Y+15	; 0x0f
     508:	58 88       	ldd	r5, Y+16	; 0x10
     50a:	6d 88       	ldd	r6, Y+21	; 0x15
     50c:	7e 88       	ldd	r7, Y+22	; 0x16
     50e:	8f 88       	ldd	r8, Y+23	; 0x17
     510:	98 8c       	ldd	r9, Y+24	; 0x18
     512:	ee 24       	eor	r14, r14
     514:	ff 24       	eor	r15, r15
     516:	87 01       	movw	r16, r14
     518:	aa 24       	eor	r10, r10
     51a:	bb 24       	eor	r11, r11
     51c:	65 01       	movw	r12, r10
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	e0 e0       	ldi	r30, 0x00	; 0
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	c1 01       	movw	r24, r2
     52c:	81 70       	andi	r24, 0x01	; 1
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	89 2b       	or	r24, r25
     532:	e9 f0       	breq	.+58     	; 0x56e <__mulsf3+0xf4>
     534:	e6 0c       	add	r14, r6
     536:	f7 1c       	adc	r15, r7
     538:	08 1d       	adc	r16, r8
     53a:	19 1d       	adc	r17, r9
     53c:	9a 01       	movw	r18, r20
     53e:	ab 01       	movw	r20, r22
     540:	2a 0d       	add	r18, r10
     542:	3b 1d       	adc	r19, r11
     544:	4c 1d       	adc	r20, r12
     546:	5d 1d       	adc	r21, r13
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	e6 14       	cp	r14, r6
     552:	f7 04       	cpc	r15, r7
     554:	08 05       	cpc	r16, r8
     556:	19 05       	cpc	r17, r9
     558:	20 f4       	brcc	.+8      	; 0x562 <__mulsf3+0xe8>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	ba 01       	movw	r22, r20
     564:	a9 01       	movw	r20, r18
     566:	48 0f       	add	r20, r24
     568:	59 1f       	adc	r21, r25
     56a:	6a 1f       	adc	r22, r26
     56c:	7b 1f       	adc	r23, r27
     56e:	aa 0c       	add	r10, r10
     570:	bb 1c       	adc	r11, r11
     572:	cc 1c       	adc	r12, r12
     574:	dd 1c       	adc	r13, r13
     576:	97 fe       	sbrs	r9, 7
     578:	08 c0       	rjmp	.+16     	; 0x58a <__mulsf3+0x110>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	a8 2a       	or	r10, r24
     584:	b9 2a       	or	r11, r25
     586:	ca 2a       	or	r12, r26
     588:	db 2a       	or	r13, r27
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	e0 32       	cpi	r30, 0x20	; 32
     58e:	f1 05       	cpc	r31, r1
     590:	49 f0       	breq	.+18     	; 0x5a4 <__mulsf3+0x12a>
     592:	66 0c       	add	r6, r6
     594:	77 1c       	adc	r7, r7
     596:	88 1c       	adc	r8, r8
     598:	99 1c       	adc	r9, r9
     59a:	56 94       	lsr	r5
     59c:	47 94       	ror	r4
     59e:	37 94       	ror	r3
     5a0:	27 94       	ror	r2
     5a2:	c3 cf       	rjmp	.-122    	; 0x52a <__mulsf3+0xb0>
     5a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a6:	ea 89       	ldd	r30, Y+18	; 0x12
     5a8:	2b 89       	ldd	r18, Y+19	; 0x13
     5aa:	3c 89       	ldd	r19, Y+20	; 0x14
     5ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b0:	28 0f       	add	r18, r24
     5b2:	39 1f       	adc	r19, r25
     5b4:	2e 5f       	subi	r18, 0xFE	; 254
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	17 c0       	rjmp	.+46     	; 0x5e8 <__mulsf3+0x16e>
     5ba:	ca 01       	movw	r24, r20
     5bc:	81 70       	andi	r24, 0x01	; 1
     5be:	90 70       	andi	r25, 0x00	; 0
     5c0:	89 2b       	or	r24, r25
     5c2:	61 f0       	breq	.+24     	; 0x5dc <__mulsf3+0x162>
     5c4:	16 95       	lsr	r17
     5c6:	07 95       	ror	r16
     5c8:	f7 94       	ror	r15
     5ca:	e7 94       	ror	r14
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	a0 e0       	ldi	r26, 0x00	; 0
     5d2:	b0 e8       	ldi	r27, 0x80	; 128
     5d4:	e8 2a       	or	r14, r24
     5d6:	f9 2a       	or	r15, r25
     5d8:	0a 2b       	or	r16, r26
     5da:	1b 2b       	or	r17, r27
     5dc:	76 95       	lsr	r23
     5de:	67 95       	ror	r22
     5e0:	57 95       	ror	r21
     5e2:	47 95       	ror	r20
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	77 fd       	sbrc	r23, 7
     5ea:	e7 cf       	rjmp	.-50     	; 0x5ba <__mulsf3+0x140>
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <__mulsf3+0x18c>
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	66 1f       	adc	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	17 fd       	sbrc	r17, 7
     5f8:	41 60       	ori	r20, 0x01	; 1
     5fa:	ee 0c       	add	r14, r14
     5fc:	ff 1c       	adc	r15, r15
     5fe:	00 1f       	adc	r16, r16
     600:	11 1f       	adc	r17, r17
     602:	21 50       	subi	r18, 0x01	; 1
     604:	30 40       	sbci	r19, 0x00	; 0
     606:	40 30       	cpi	r20, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	59 07       	cpc	r21, r25
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	69 07       	cpc	r22, r25
     610:	90 e4       	ldi	r25, 0x40	; 64
     612:	79 07       	cpc	r23, r25
     614:	60 f3       	brcs	.-40     	; 0x5ee <__mulsf3+0x174>
     616:	2b 8f       	std	Y+27, r18	; 0x1b
     618:	3c 8f       	std	Y+28, r19	; 0x1c
     61a:	db 01       	movw	r26, r22
     61c:	ca 01       	movw	r24, r20
     61e:	8f 77       	andi	r24, 0x7F	; 127
     620:	90 70       	andi	r25, 0x00	; 0
     622:	a0 70       	andi	r26, 0x00	; 0
     624:	b0 70       	andi	r27, 0x00	; 0
     626:	80 34       	cpi	r24, 0x40	; 64
     628:	91 05       	cpc	r25, r1
     62a:	a1 05       	cpc	r26, r1
     62c:	b1 05       	cpc	r27, r1
     62e:	61 f4       	brne	.+24     	; 0x648 <__mulsf3+0x1ce>
     630:	47 fd       	sbrc	r20, 7
     632:	0a c0       	rjmp	.+20     	; 0x648 <__mulsf3+0x1ce>
     634:	e1 14       	cp	r14, r1
     636:	f1 04       	cpc	r15, r1
     638:	01 05       	cpc	r16, r1
     63a:	11 05       	cpc	r17, r1
     63c:	29 f0       	breq	.+10     	; 0x648 <__mulsf3+0x1ce>
     63e:	40 5c       	subi	r20, 0xC0	; 192
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	6f 4f       	sbci	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	40 78       	andi	r20, 0x80	; 128
     648:	1a 8e       	std	Y+26, r1	; 0x1a
     64a:	fe 17       	cp	r31, r30
     64c:	11 f0       	breq	.+4      	; 0x652 <__mulsf3+0x1d8>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8a 8f       	std	Y+26, r24	; 0x1a
     652:	4d 8f       	std	Y+29, r20	; 0x1d
     654:	5e 8f       	std	Y+30, r21	; 0x1e
     656:	6f 8f       	std	Y+31, r22	; 0x1f
     658:	78 a3       	std	Y+32, r23	; 0x20
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	89 8f       	std	Y+25, r24	; 0x19
     65e:	ce 01       	movw	r24, r28
     660:	49 96       	adiw	r24, 0x19	; 25
     662:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__pack_f>
     666:	a0 96       	adiw	r28, 0x20	; 32
     668:	e2 e1       	ldi	r30, 0x12	; 18
     66a:	0c 94 4f 18 	jmp	0x309e	; 0x309e <__epilogue_restores__>

0000066e <__divsf3>:
     66e:	a8 e1       	ldi	r26, 0x18	; 24
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	ed e3       	ldi	r30, 0x3D	; 61
     674:	f3 e0       	ldi	r31, 0x03	; 3
     676:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__prologue_saves__+0x10>
     67a:	69 83       	std	Y+1, r22	; 0x01
     67c:	7a 83       	std	Y+2, r23	; 0x02
     67e:	8b 83       	std	Y+3, r24	; 0x03
     680:	9c 83       	std	Y+4, r25	; 0x04
     682:	2d 83       	std	Y+5, r18	; 0x05
     684:	3e 83       	std	Y+6, r19	; 0x06
     686:	4f 83       	std	Y+7, r20	; 0x07
     688:	58 87       	std	Y+8, r21	; 0x08
     68a:	b9 e0       	ldi	r27, 0x09	; 9
     68c:	eb 2e       	mov	r14, r27
     68e:	f1 2c       	mov	r15, r1
     690:	ec 0e       	add	r14, r28
     692:	fd 1e       	adc	r15, r29
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     69e:	8e 01       	movw	r16, r28
     6a0:	0f 5e       	subi	r16, 0xEF	; 239
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	ce 01       	movw	r24, r28
     6a6:	05 96       	adiw	r24, 0x05	; 5
     6a8:	b8 01       	movw	r22, r16
     6aa:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     6ae:	29 85       	ldd	r18, Y+9	; 0x09
     6b0:	22 30       	cpi	r18, 0x02	; 2
     6b2:	08 f4       	brcc	.+2      	; 0x6b6 <__divsf3+0x48>
     6b4:	7e c0       	rjmp	.+252    	; 0x7b2 <__divsf3+0x144>
     6b6:	39 89       	ldd	r19, Y+17	; 0x11
     6b8:	32 30       	cpi	r19, 0x02	; 2
     6ba:	10 f4       	brcc	.+4      	; 0x6c0 <__divsf3+0x52>
     6bc:	b8 01       	movw	r22, r16
     6be:	7c c0       	rjmp	.+248    	; 0x7b8 <__divsf3+0x14a>
     6c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c2:	9a 89       	ldd	r25, Y+18	; 0x12
     6c4:	89 27       	eor	r24, r25
     6c6:	8a 87       	std	Y+10, r24	; 0x0a
     6c8:	24 30       	cpi	r18, 0x04	; 4
     6ca:	11 f0       	breq	.+4      	; 0x6d0 <__divsf3+0x62>
     6cc:	22 30       	cpi	r18, 0x02	; 2
     6ce:	31 f4       	brne	.+12     	; 0x6dc <__divsf3+0x6e>
     6d0:	23 17       	cp	r18, r19
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <__divsf3+0x68>
     6d4:	6e c0       	rjmp	.+220    	; 0x7b2 <__divsf3+0x144>
     6d6:	62 e2       	ldi	r22, 0x22	; 34
     6d8:	71 e0       	ldi	r23, 0x01	; 1
     6da:	6e c0       	rjmp	.+220    	; 0x7b8 <__divsf3+0x14a>
     6dc:	34 30       	cpi	r19, 0x04	; 4
     6de:	39 f4       	brne	.+14     	; 0x6ee <__divsf3+0x80>
     6e0:	1d 86       	std	Y+13, r1	; 0x0d
     6e2:	1e 86       	std	Y+14, r1	; 0x0e
     6e4:	1f 86       	std	Y+15, r1	; 0x0f
     6e6:	18 8a       	std	Y+16, r1	; 0x10
     6e8:	1c 86       	std	Y+12, r1	; 0x0c
     6ea:	1b 86       	std	Y+11, r1	; 0x0b
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__divsf3+0x88>
     6ee:	32 30       	cpi	r19, 0x02	; 2
     6f0:	21 f4       	brne	.+8      	; 0x6fa <__divsf3+0x8c>
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	89 87       	std	Y+9, r24	; 0x09
     6f6:	b7 01       	movw	r22, r14
     6f8:	5f c0       	rjmp	.+190    	; 0x7b8 <__divsf3+0x14a>
     6fa:	2b 85       	ldd	r18, Y+11	; 0x0b
     6fc:	3c 85       	ldd	r19, Y+12	; 0x0c
     6fe:	8b 89       	ldd	r24, Y+19	; 0x13
     700:	9c 89       	ldd	r25, Y+20	; 0x14
     702:	28 1b       	sub	r18, r24
     704:	39 0b       	sbc	r19, r25
     706:	3c 87       	std	Y+12, r19	; 0x0c
     708:	2b 87       	std	Y+11, r18	; 0x0b
     70a:	ed 84       	ldd	r14, Y+13	; 0x0d
     70c:	fe 84       	ldd	r15, Y+14	; 0x0e
     70e:	0f 85       	ldd	r16, Y+15	; 0x0f
     710:	18 89       	ldd	r17, Y+16	; 0x10
     712:	ad 88       	ldd	r10, Y+21	; 0x15
     714:	be 88       	ldd	r11, Y+22	; 0x16
     716:	cf 88       	ldd	r12, Y+23	; 0x17
     718:	d8 8c       	ldd	r13, Y+24	; 0x18
     71a:	ea 14       	cp	r14, r10
     71c:	fb 04       	cpc	r15, r11
     71e:	0c 05       	cpc	r16, r12
     720:	1d 05       	cpc	r17, r13
     722:	40 f4       	brcc	.+16     	; 0x734 <__divsf3+0xc6>
     724:	ee 0c       	add	r14, r14
     726:	ff 1c       	adc	r15, r15
     728:	00 1f       	adc	r16, r16
     72a:	11 1f       	adc	r17, r17
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	30 40       	sbci	r19, 0x00	; 0
     730:	3c 87       	std	Y+12, r19	; 0x0c
     732:	2b 87       	std	Y+11, r18	; 0x0b
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e0       	ldi	r26, 0x00	; 0
     742:	b0 e4       	ldi	r27, 0x40	; 64
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	ea 14       	cp	r14, r10
     74a:	fb 04       	cpc	r15, r11
     74c:	0c 05       	cpc	r16, r12
     74e:	1d 05       	cpc	r17, r13
     750:	40 f0       	brcs	.+16     	; 0x762 <__divsf3+0xf4>
     752:	28 2b       	or	r18, r24
     754:	39 2b       	or	r19, r25
     756:	4a 2b       	or	r20, r26
     758:	5b 2b       	or	r21, r27
     75a:	ea 18       	sub	r14, r10
     75c:	fb 08       	sbc	r15, r11
     75e:	0c 09       	sbc	r16, r12
     760:	1d 09       	sbc	r17, r13
     762:	b6 95       	lsr	r27
     764:	a7 95       	ror	r26
     766:	97 95       	ror	r25
     768:	87 95       	ror	r24
     76a:	ee 0c       	add	r14, r14
     76c:	ff 1c       	adc	r15, r15
     76e:	00 1f       	adc	r16, r16
     770:	11 1f       	adc	r17, r17
     772:	6f 5f       	subi	r22, 0xFF	; 255
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	6f 31       	cpi	r22, 0x1F	; 31
     778:	71 05       	cpc	r23, r1
     77a:	31 f7       	brne	.-52     	; 0x748 <__divsf3+0xda>
     77c:	da 01       	movw	r26, r20
     77e:	c9 01       	movw	r24, r18
     780:	8f 77       	andi	r24, 0x7F	; 127
     782:	90 70       	andi	r25, 0x00	; 0
     784:	a0 70       	andi	r26, 0x00	; 0
     786:	b0 70       	andi	r27, 0x00	; 0
     788:	80 34       	cpi	r24, 0x40	; 64
     78a:	91 05       	cpc	r25, r1
     78c:	a1 05       	cpc	r26, r1
     78e:	b1 05       	cpc	r27, r1
     790:	61 f4       	brne	.+24     	; 0x7aa <__divsf3+0x13c>
     792:	27 fd       	sbrc	r18, 7
     794:	0a c0       	rjmp	.+20     	; 0x7aa <__divsf3+0x13c>
     796:	e1 14       	cp	r14, r1
     798:	f1 04       	cpc	r15, r1
     79a:	01 05       	cpc	r16, r1
     79c:	11 05       	cpc	r17, r1
     79e:	29 f0       	breq	.+10     	; 0x7aa <__divsf3+0x13c>
     7a0:	20 5c       	subi	r18, 0xC0	; 192
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	4f 4f       	sbci	r20, 0xFF	; 255
     7a6:	5f 4f       	sbci	r21, 0xFF	; 255
     7a8:	20 78       	andi	r18, 0x80	; 128
     7aa:	2d 87       	std	Y+13, r18	; 0x0d
     7ac:	3e 87       	std	Y+14, r19	; 0x0e
     7ae:	4f 87       	std	Y+15, r20	; 0x0f
     7b0:	58 8b       	std	Y+16, r21	; 0x10
     7b2:	be 01       	movw	r22, r28
     7b4:	67 5f       	subi	r22, 0xF7	; 247
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	cb 01       	movw	r24, r22
     7ba:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__pack_f>
     7be:	68 96       	adiw	r28, 0x18	; 24
     7c0:	ea e0       	ldi	r30, 0x0A	; 10
     7c2:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__epilogue_restores__+0x10>

000007c6 <__gtsf2>:
     7c6:	a8 e1       	ldi	r26, 0x18	; 24
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e9 ee       	ldi	r30, 0xE9	; 233
     7cc:	f3 e0       	ldi	r31, 0x03	; 3
     7ce:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__prologue_saves__+0x18>
     7d2:	69 83       	std	Y+1, r22	; 0x01
     7d4:	7a 83       	std	Y+2, r23	; 0x02
     7d6:	8b 83       	std	Y+3, r24	; 0x03
     7d8:	9c 83       	std	Y+4, r25	; 0x04
     7da:	2d 83       	std	Y+5, r18	; 0x05
     7dc:	3e 83       	std	Y+6, r19	; 0x06
     7de:	4f 83       	std	Y+7, r20	; 0x07
     7e0:	58 87       	std	Y+8, r21	; 0x08
     7e2:	89 e0       	ldi	r24, 0x09	; 9
     7e4:	e8 2e       	mov	r14, r24
     7e6:	f1 2c       	mov	r15, r1
     7e8:	ec 0e       	add	r14, r28
     7ea:	fd 1e       	adc	r15, r29
     7ec:	ce 01       	movw	r24, r28
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	b7 01       	movw	r22, r14
     7f2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     7f6:	8e 01       	movw	r16, r28
     7f8:	0f 5e       	subi	r16, 0xEF	; 239
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	ce 01       	movw	r24, r28
     7fe:	05 96       	adiw	r24, 0x05	; 5
     800:	b8 01       	movw	r22, r16
     802:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     806:	89 85       	ldd	r24, Y+9	; 0x09
     808:	82 30       	cpi	r24, 0x02	; 2
     80a:	40 f0       	brcs	.+16     	; 0x81c <__gtsf2+0x56>
     80c:	89 89       	ldd	r24, Y+17	; 0x11
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	28 f0       	brcs	.+10     	; 0x81c <__gtsf2+0x56>
     812:	c7 01       	movw	r24, r14
     814:	b8 01       	movw	r22, r16
     816:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fpcmp_parts_f>
     81a:	01 c0       	rjmp	.+2      	; 0x81e <__gtsf2+0x58>
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	68 96       	adiw	r28, 0x18	; 24
     820:	e6 e0       	ldi	r30, 0x06	; 6
     822:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__epilogue_restores__+0x18>

00000826 <__gesf2>:
     826:	a8 e1       	ldi	r26, 0x18	; 24
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	e9 e1       	ldi	r30, 0x19	; 25
     82c:	f4 e0       	ldi	r31, 0x04	; 4
     82e:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__prologue_saves__+0x18>
     832:	69 83       	std	Y+1, r22	; 0x01
     834:	7a 83       	std	Y+2, r23	; 0x02
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	2d 83       	std	Y+5, r18	; 0x05
     83c:	3e 83       	std	Y+6, r19	; 0x06
     83e:	4f 83       	std	Y+7, r20	; 0x07
     840:	58 87       	std	Y+8, r21	; 0x08
     842:	89 e0       	ldi	r24, 0x09	; 9
     844:	e8 2e       	mov	r14, r24
     846:	f1 2c       	mov	r15, r1
     848:	ec 0e       	add	r14, r28
     84a:	fd 1e       	adc	r15, r29
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	b7 01       	movw	r22, r14
     852:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     856:	8e 01       	movw	r16, r28
     858:	0f 5e       	subi	r16, 0xEF	; 239
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
     85c:	ce 01       	movw	r24, r28
     85e:	05 96       	adiw	r24, 0x05	; 5
     860:	b8 01       	movw	r22, r16
     862:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     866:	89 85       	ldd	r24, Y+9	; 0x09
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	40 f0       	brcs	.+16     	; 0x87c <__gesf2+0x56>
     86c:	89 89       	ldd	r24, Y+17	; 0x11
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	28 f0       	brcs	.+10     	; 0x87c <__gesf2+0x56>
     872:	c7 01       	movw	r24, r14
     874:	b8 01       	movw	r22, r16
     876:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fpcmp_parts_f>
     87a:	01 c0       	rjmp	.+2      	; 0x87e <__gesf2+0x58>
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	68 96       	adiw	r28, 0x18	; 24
     880:	e6 e0       	ldi	r30, 0x06	; 6
     882:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__epilogue_restores__+0x18>

00000886 <__ltsf2>:
     886:	a8 e1       	ldi	r26, 0x18	; 24
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	e9 e4       	ldi	r30, 0x49	; 73
     88c:	f4 e0       	ldi	r31, 0x04	; 4
     88e:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__prologue_saves__+0x18>
     892:	69 83       	std	Y+1, r22	; 0x01
     894:	7a 83       	std	Y+2, r23	; 0x02
     896:	8b 83       	std	Y+3, r24	; 0x03
     898:	9c 83       	std	Y+4, r25	; 0x04
     89a:	2d 83       	std	Y+5, r18	; 0x05
     89c:	3e 83       	std	Y+6, r19	; 0x06
     89e:	4f 83       	std	Y+7, r20	; 0x07
     8a0:	58 87       	std	Y+8, r21	; 0x08
     8a2:	89 e0       	ldi	r24, 0x09	; 9
     8a4:	e8 2e       	mov	r14, r24
     8a6:	f1 2c       	mov	r15, r1
     8a8:	ec 0e       	add	r14, r28
     8aa:	fd 1e       	adc	r15, r29
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	b7 01       	movw	r22, r14
     8b2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     8b6:	8e 01       	movw	r16, r28
     8b8:	0f 5e       	subi	r16, 0xEF	; 239
     8ba:	1f 4f       	sbci	r17, 0xFF	; 255
     8bc:	ce 01       	movw	r24, r28
     8be:	05 96       	adiw	r24, 0x05	; 5
     8c0:	b8 01       	movw	r22, r16
     8c2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     8c6:	89 85       	ldd	r24, Y+9	; 0x09
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	40 f0       	brcs	.+16     	; 0x8dc <__ltsf2+0x56>
     8cc:	89 89       	ldd	r24, Y+17	; 0x11
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__ltsf2+0x56>
     8d2:	c7 01       	movw	r24, r14
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fpcmp_parts_f>
     8da:	01 c0       	rjmp	.+2      	; 0x8de <__ltsf2+0x58>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	68 96       	adiw	r28, 0x18	; 24
     8e0:	e6 e0       	ldi	r30, 0x06	; 6
     8e2:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__epilogue_restores__+0x18>

000008e6 <__fixsfsi>:
     8e6:	ac e0       	ldi	r26, 0x0C	; 12
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e9 e7       	ldi	r30, 0x79	; 121
     8ec:	f4 e0       	ldi	r31, 0x04	; 4
     8ee:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__prologue_saves__+0x20>
     8f2:	69 83       	std	Y+1, r22	; 0x01
     8f4:	7a 83       	std	Y+2, r23	; 0x02
     8f6:	8b 83       	std	Y+3, r24	; 0x03
     8f8:	9c 83       	std	Y+4, r25	; 0x04
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	be 01       	movw	r22, r28
     900:	6b 5f       	subi	r22, 0xFB	; 251
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__unpack_f>
     908:	8d 81       	ldd	r24, Y+5	; 0x05
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	61 f1       	breq	.+88     	; 0x966 <__fixsfsi+0x80>
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	50 f1       	brcs	.+84     	; 0x966 <__fixsfsi+0x80>
     912:	84 30       	cpi	r24, 0x04	; 4
     914:	21 f4       	brne	.+8      	; 0x91e <__fixsfsi+0x38>
     916:	8e 81       	ldd	r24, Y+6	; 0x06
     918:	88 23       	and	r24, r24
     91a:	51 f1       	breq	.+84     	; 0x970 <__fixsfsi+0x8a>
     91c:	2e c0       	rjmp	.+92     	; 0x97a <__fixsfsi+0x94>
     91e:	2f 81       	ldd	r18, Y+7	; 0x07
     920:	38 85       	ldd	r19, Y+8	; 0x08
     922:	37 fd       	sbrc	r19, 7
     924:	20 c0       	rjmp	.+64     	; 0x966 <__fixsfsi+0x80>
     926:	6e 81       	ldd	r22, Y+6	; 0x06
     928:	2f 31       	cpi	r18, 0x1F	; 31
     92a:	31 05       	cpc	r19, r1
     92c:	1c f0       	brlt	.+6      	; 0x934 <__fixsfsi+0x4e>
     92e:	66 23       	and	r22, r22
     930:	f9 f0       	breq	.+62     	; 0x970 <__fixsfsi+0x8a>
     932:	23 c0       	rjmp	.+70     	; 0x97a <__fixsfsi+0x94>
     934:	8e e1       	ldi	r24, 0x1E	; 30
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	82 1b       	sub	r24, r18
     93a:	93 0b       	sbc	r25, r19
     93c:	29 85       	ldd	r18, Y+9	; 0x09
     93e:	3a 85       	ldd	r19, Y+10	; 0x0a
     940:	4b 85       	ldd	r20, Y+11	; 0x0b
     942:	5c 85       	ldd	r21, Y+12	; 0x0c
     944:	04 c0       	rjmp	.+8      	; 0x94e <__fixsfsi+0x68>
     946:	56 95       	lsr	r21
     948:	47 95       	ror	r20
     94a:	37 95       	ror	r19
     94c:	27 95       	ror	r18
     94e:	8a 95       	dec	r24
     950:	d2 f7       	brpl	.-12     	; 0x946 <__fixsfsi+0x60>
     952:	66 23       	and	r22, r22
     954:	b1 f0       	breq	.+44     	; 0x982 <__fixsfsi+0x9c>
     956:	50 95       	com	r21
     958:	40 95       	com	r20
     95a:	30 95       	com	r19
     95c:	21 95       	neg	r18
     95e:	3f 4f       	sbci	r19, 0xFF	; 255
     960:	4f 4f       	sbci	r20, 0xFF	; 255
     962:	5f 4f       	sbci	r21, 0xFF	; 255
     964:	0e c0       	rjmp	.+28     	; 0x982 <__fixsfsi+0x9c>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	09 c0       	rjmp	.+18     	; 0x982 <__fixsfsi+0x9c>
     970:	2f ef       	ldi	r18, 0xFF	; 255
     972:	3f ef       	ldi	r19, 0xFF	; 255
     974:	4f ef       	ldi	r20, 0xFF	; 255
     976:	5f e7       	ldi	r21, 0x7F	; 127
     978:	04 c0       	rjmp	.+8      	; 0x982 <__fixsfsi+0x9c>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e8       	ldi	r21, 0x80	; 128
     982:	b9 01       	movw	r22, r18
     984:	ca 01       	movw	r24, r20
     986:	2c 96       	adiw	r28, 0x0c	; 12
     988:	e2 e0       	ldi	r30, 0x02	; 2
     98a:	0c 94 5f 18 	jmp	0x30be	; 0x30be <__epilogue_restores__+0x20>

0000098e <__floatunsisf>:
     98e:	a8 e0       	ldi	r26, 0x08	; 8
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	ed ec       	ldi	r30, 0xCD	; 205
     994:	f4 e0       	ldi	r31, 0x04	; 4
     996:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__prologue_saves__+0x10>
     99a:	7b 01       	movw	r14, r22
     99c:	8c 01       	movw	r16, r24
     99e:	61 15       	cp	r22, r1
     9a0:	71 05       	cpc	r23, r1
     9a2:	81 05       	cpc	r24, r1
     9a4:	91 05       	cpc	r25, r1
     9a6:	19 f4       	brne	.+6      	; 0x9ae <__floatunsisf+0x20>
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	89 83       	std	Y+1, r24	; 0x01
     9ac:	60 c0       	rjmp	.+192    	; 0xa6e <__floatunsisf+0xe0>
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	8e e1       	ldi	r24, 0x1E	; 30
     9b4:	c8 2e       	mov	r12, r24
     9b6:	d1 2c       	mov	r13, r1
     9b8:	dc 82       	std	Y+4, r13	; 0x04
     9ba:	cb 82       	std	Y+3, r12	; 0x03
     9bc:	ed 82       	std	Y+5, r14	; 0x05
     9be:	fe 82       	std	Y+6, r15	; 0x06
     9c0:	0f 83       	std	Y+7, r16	; 0x07
     9c2:	18 87       	std	Y+8, r17	; 0x08
     9c4:	c8 01       	movw	r24, r16
     9c6:	b7 01       	movw	r22, r14
     9c8:	0e 94 40 05 	call	0xa80	; 0xa80 <__clzsi2>
     9cc:	fc 01       	movw	r30, r24
     9ce:	31 97       	sbiw	r30, 0x01	; 1
     9d0:	f7 ff       	sbrs	r31, 7
     9d2:	3b c0       	rjmp	.+118    	; 0xa4a <__floatunsisf+0xbc>
     9d4:	22 27       	eor	r18, r18
     9d6:	33 27       	eor	r19, r19
     9d8:	2e 1b       	sub	r18, r30
     9da:	3f 0b       	sbc	r19, r31
     9dc:	57 01       	movw	r10, r14
     9de:	68 01       	movw	r12, r16
     9e0:	02 2e       	mov	r0, r18
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <__floatunsisf+0x5e>
     9e4:	d6 94       	lsr	r13
     9e6:	c7 94       	ror	r12
     9e8:	b7 94       	ror	r11
     9ea:	a7 94       	ror	r10
     9ec:	0a 94       	dec	r0
     9ee:	d2 f7       	brpl	.-12     	; 0x9e4 <__floatunsisf+0x56>
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__floatunsisf+0x7c>
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	aa 1f       	adc	r26, r26
     a08:	bb 1f       	adc	r27, r27
     a0a:	2a 95       	dec	r18
     a0c:	d2 f7       	brpl	.-12     	; 0xa02 <__floatunsisf+0x74>
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	a1 09       	sbc	r26, r1
     a12:	b1 09       	sbc	r27, r1
     a14:	8e 21       	and	r24, r14
     a16:	9f 21       	and	r25, r15
     a18:	a0 23       	and	r26, r16
     a1a:	b1 23       	and	r27, r17
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	21 f0       	breq	.+8      	; 0xa2c <__floatunsisf+0x9e>
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	4a 29       	or	r20, r10
     a2e:	5b 29       	or	r21, r11
     a30:	6c 29       	or	r22, r12
     a32:	7d 29       	or	r23, r13
     a34:	4d 83       	std	Y+5, r20	; 0x05
     a36:	5e 83       	std	Y+6, r21	; 0x06
     a38:	6f 83       	std	Y+7, r22	; 0x07
     a3a:	78 87       	std	Y+8, r23	; 0x08
     a3c:	8e e1       	ldi	r24, 0x1E	; 30
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	8e 1b       	sub	r24, r30
     a42:	9f 0b       	sbc	r25, r31
     a44:	9c 83       	std	Y+4, r25	; 0x04
     a46:	8b 83       	std	Y+3, r24	; 0x03
     a48:	12 c0       	rjmp	.+36     	; 0xa6e <__floatunsisf+0xe0>
     a4a:	30 97       	sbiw	r30, 0x00	; 0
     a4c:	81 f0       	breq	.+32     	; 0xa6e <__floatunsisf+0xe0>
     a4e:	0e 2e       	mov	r0, r30
     a50:	04 c0       	rjmp	.+8      	; 0xa5a <__floatunsisf+0xcc>
     a52:	ee 0c       	add	r14, r14
     a54:	ff 1c       	adc	r15, r15
     a56:	00 1f       	adc	r16, r16
     a58:	11 1f       	adc	r17, r17
     a5a:	0a 94       	dec	r0
     a5c:	d2 f7       	brpl	.-12     	; 0xa52 <__floatunsisf+0xc4>
     a5e:	ed 82       	std	Y+5, r14	; 0x05
     a60:	fe 82       	std	Y+6, r15	; 0x06
     a62:	0f 83       	std	Y+7, r16	; 0x07
     a64:	18 87       	std	Y+8, r17	; 0x08
     a66:	ce 1a       	sub	r12, r30
     a68:	df 0a       	sbc	r13, r31
     a6a:	dc 82       	std	Y+4, r13	; 0x04
     a6c:	cb 82       	std	Y+3, r12	; 0x03
     a6e:	1a 82       	std	Y+2, r1	; 0x02
     a70:	ce 01       	movw	r24, r28
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__pack_f>
     a78:	28 96       	adiw	r28, 0x08	; 8
     a7a:	ea e0       	ldi	r30, 0x0A	; 10
     a7c:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__epilogue_restores__+0x10>

00000a80 <__clzsi2>:
     a80:	ef 92       	push	r14
     a82:	ff 92       	push	r15
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	7b 01       	movw	r14, r22
     a8a:	8c 01       	movw	r16, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	e8 16       	cp	r14, r24
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	f8 06       	cpc	r15, r24
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	08 07       	cpc	r16, r24
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	18 07       	cpc	r17, r24
     a9c:	88 f4       	brcc	.+34     	; 0xac0 <__clzsi2+0x40>
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	e8 16       	cp	r14, r24
     aa2:	f1 04       	cpc	r15, r1
     aa4:	01 05       	cpc	r16, r1
     aa6:	11 05       	cpc	r17, r1
     aa8:	31 f0       	breq	.+12     	; 0xab6 <__clzsi2+0x36>
     aaa:	28 f0       	brcs	.+10     	; 0xab6 <__clzsi2+0x36>
     aac:	88 e0       	ldi	r24, 0x08	; 8
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	17 c0       	rjmp	.+46     	; 0xae4 <__clzsi2+0x64>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	12 c0       	rjmp	.+36     	; 0xae4 <__clzsi2+0x64>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	e8 16       	cp	r14, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	f8 06       	cpc	r15, r24
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	08 07       	cpc	r16, r24
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	18 07       	cpc	r17, r24
     ad0:	28 f0       	brcs	.+10     	; 0xadc <__clzsi2+0x5c>
     ad2:	88 e1       	ldi	r24, 0x18	; 24
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a0 e0       	ldi	r26, 0x00	; 0
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <__clzsi2+0x64>
     adc:	80 e1       	ldi	r24, 0x10	; 16
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e0       	ldi	r26, 0x00	; 0
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	20 e2       	ldi	r18, 0x20	; 32
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	28 1b       	sub	r18, r24
     aee:	39 0b       	sbc	r19, r25
     af0:	4a 0b       	sbc	r20, r26
     af2:	5b 0b       	sbc	r21, r27
     af4:	04 c0       	rjmp	.+8      	; 0xafe <__clzsi2+0x7e>
     af6:	16 95       	lsr	r17
     af8:	07 95       	ror	r16
     afa:	f7 94       	ror	r15
     afc:	e7 94       	ror	r14
     afe:	8a 95       	dec	r24
     b00:	d2 f7       	brpl	.-12     	; 0xaf6 <__clzsi2+0x76>
     b02:	f7 01       	movw	r30, r14
     b04:	e6 5d       	subi	r30, 0xD6	; 214
     b06:	fe 4f       	sbci	r31, 0xFE	; 254
     b08:	80 81       	ld	r24, Z
     b0a:	28 1b       	sub	r18, r24
     b0c:	31 09       	sbc	r19, r1
     b0e:	41 09       	sbc	r20, r1
     b10:	51 09       	sbc	r21, r1
     b12:	c9 01       	movw	r24, r18
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	08 95       	ret

00000b1e <__pack_f>:
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	fc 01       	movw	r30, r24
     b2a:	e4 80       	ldd	r14, Z+4	; 0x04
     b2c:	f5 80       	ldd	r15, Z+5	; 0x05
     b2e:	06 81       	ldd	r16, Z+6	; 0x06
     b30:	17 81       	ldd	r17, Z+7	; 0x07
     b32:	d1 80       	ldd	r13, Z+1	; 0x01
     b34:	80 81       	ld	r24, Z
     b36:	82 30       	cpi	r24, 0x02	; 2
     b38:	48 f4       	brcc	.+18     	; 0xb4c <__pack_f+0x2e>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	a0 e1       	ldi	r26, 0x10	; 16
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e8 2a       	or	r14, r24
     b44:	f9 2a       	or	r15, r25
     b46:	0a 2b       	or	r16, r26
     b48:	1b 2b       	or	r17, r27
     b4a:	a5 c0       	rjmp	.+330    	; 0xc96 <__pack_f+0x178>
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	09 f4       	brne	.+2      	; 0xb52 <__pack_f+0x34>
     b50:	9f c0       	rjmp	.+318    	; 0xc90 <__pack_f+0x172>
     b52:	82 30       	cpi	r24, 0x02	; 2
     b54:	21 f4       	brne	.+8      	; 0xb5e <__pack_f+0x40>
     b56:	ee 24       	eor	r14, r14
     b58:	ff 24       	eor	r15, r15
     b5a:	87 01       	movw	r16, r14
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <__pack_f+0x4a>
     b5e:	e1 14       	cp	r14, r1
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	19 f4       	brne	.+6      	; 0xb6e <__pack_f+0x50>
     b68:	e0 e0       	ldi	r30, 0x00	; 0
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	96 c0       	rjmp	.+300    	; 0xc9a <__pack_f+0x17c>
     b6e:	62 81       	ldd	r22, Z+2	; 0x02
     b70:	73 81       	ldd	r23, Z+3	; 0x03
     b72:	9f ef       	ldi	r25, 0xFF	; 255
     b74:	62 38       	cpi	r22, 0x82	; 130
     b76:	79 07       	cpc	r23, r25
     b78:	0c f0       	brlt	.+2      	; 0xb7c <__pack_f+0x5e>
     b7a:	5b c0       	rjmp	.+182    	; 0xc32 <__pack_f+0x114>
     b7c:	22 e8       	ldi	r18, 0x82	; 130
     b7e:	3f ef       	ldi	r19, 0xFF	; 255
     b80:	26 1b       	sub	r18, r22
     b82:	37 0b       	sbc	r19, r23
     b84:	2a 31       	cpi	r18, 0x1A	; 26
     b86:	31 05       	cpc	r19, r1
     b88:	2c f0       	brlt	.+10     	; 0xb94 <__pack_f+0x76>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	2a c0       	rjmp	.+84     	; 0xbe8 <__pack_f+0xca>
     b94:	b8 01       	movw	r22, r16
     b96:	a7 01       	movw	r20, r14
     b98:	02 2e       	mov	r0, r18
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <__pack_f+0x86>
     b9c:	76 95       	lsr	r23
     b9e:	67 95       	ror	r22
     ba0:	57 95       	ror	r21
     ba2:	47 95       	ror	r20
     ba4:	0a 94       	dec	r0
     ba6:	d2 f7       	brpl	.-12     	; 0xb9c <__pack_f+0x7e>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <__pack_f+0x9c>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	aa 1f       	adc	r26, r26
     bb8:	bb 1f       	adc	r27, r27
     bba:	2a 95       	dec	r18
     bbc:	d2 f7       	brpl	.-12     	; 0xbb2 <__pack_f+0x94>
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	a1 09       	sbc	r26, r1
     bc2:	b1 09       	sbc	r27, r1
     bc4:	8e 21       	and	r24, r14
     bc6:	9f 21       	and	r25, r15
     bc8:	a0 23       	and	r26, r16
     bca:	b1 23       	and	r27, r17
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	a1 05       	cpc	r26, r1
     bd0:	b1 05       	cpc	r27, r1
     bd2:	21 f0       	breq	.+8      	; 0xbdc <__pack_f+0xbe>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	9a 01       	movw	r18, r20
     bde:	ab 01       	movw	r20, r22
     be0:	28 2b       	or	r18, r24
     be2:	39 2b       	or	r19, r25
     be4:	4a 2b       	or	r20, r26
     be6:	5b 2b       	or	r21, r27
     be8:	da 01       	movw	r26, r20
     bea:	c9 01       	movw	r24, r18
     bec:	8f 77       	andi	r24, 0x7F	; 127
     bee:	90 70       	andi	r25, 0x00	; 0
     bf0:	a0 70       	andi	r26, 0x00	; 0
     bf2:	b0 70       	andi	r27, 0x00	; 0
     bf4:	80 34       	cpi	r24, 0x40	; 64
     bf6:	91 05       	cpc	r25, r1
     bf8:	a1 05       	cpc	r26, r1
     bfa:	b1 05       	cpc	r27, r1
     bfc:	39 f4       	brne	.+14     	; 0xc0c <__pack_f+0xee>
     bfe:	27 ff       	sbrs	r18, 7
     c00:	09 c0       	rjmp	.+18     	; 0xc14 <__pack_f+0xf6>
     c02:	20 5c       	subi	r18, 0xC0	; 192
     c04:	3f 4f       	sbci	r19, 0xFF	; 255
     c06:	4f 4f       	sbci	r20, 0xFF	; 255
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0xf6>
     c0c:	21 5c       	subi	r18, 0xC1	; 193
     c0e:	3f 4f       	sbci	r19, 0xFF	; 255
     c10:	4f 4f       	sbci	r20, 0xFF	; 255
     c12:	5f 4f       	sbci	r21, 0xFF	; 255
     c14:	e0 e0       	ldi	r30, 0x00	; 0
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	20 30       	cpi	r18, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	3a 07       	cpc	r19, r26
     c1e:	a0 e0       	ldi	r26, 0x00	; 0
     c20:	4a 07       	cpc	r20, r26
     c22:	a0 e4       	ldi	r26, 0x40	; 64
     c24:	5a 07       	cpc	r21, r26
     c26:	10 f0       	brcs	.+4      	; 0xc2c <__pack_f+0x10e>
     c28:	e1 e0       	ldi	r30, 0x01	; 1
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	79 01       	movw	r14, r18
     c2e:	8a 01       	movw	r16, r20
     c30:	27 c0       	rjmp	.+78     	; 0xc80 <__pack_f+0x162>
     c32:	60 38       	cpi	r22, 0x80	; 128
     c34:	71 05       	cpc	r23, r1
     c36:	64 f5       	brge	.+88     	; 0xc90 <__pack_f+0x172>
     c38:	fb 01       	movw	r30, r22
     c3a:	e1 58       	subi	r30, 0x81	; 129
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	d8 01       	movw	r26, r16
     c40:	c7 01       	movw	r24, r14
     c42:	8f 77       	andi	r24, 0x7F	; 127
     c44:	90 70       	andi	r25, 0x00	; 0
     c46:	a0 70       	andi	r26, 0x00	; 0
     c48:	b0 70       	andi	r27, 0x00	; 0
     c4a:	80 34       	cpi	r24, 0x40	; 64
     c4c:	91 05       	cpc	r25, r1
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	39 f4       	brne	.+14     	; 0xc62 <__pack_f+0x144>
     c54:	e7 fe       	sbrs	r14, 7
     c56:	0d c0       	rjmp	.+26     	; 0xc72 <__pack_f+0x154>
     c58:	80 e4       	ldi	r24, 0x40	; 64
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <__pack_f+0x14c>
     c62:	8f e3       	ldi	r24, 0x3F	; 63
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	a0 e0       	ldi	r26, 0x00	; 0
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e8 0e       	add	r14, r24
     c6c:	f9 1e       	adc	r15, r25
     c6e:	0a 1f       	adc	r16, r26
     c70:	1b 1f       	adc	r17, r27
     c72:	17 ff       	sbrs	r17, 7
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <__pack_f+0x162>
     c76:	16 95       	lsr	r17
     c78:	07 95       	ror	r16
     c7a:	f7 94       	ror	r15
     c7c:	e7 94       	ror	r14
     c7e:	31 96       	adiw	r30, 0x01	; 1
     c80:	87 e0       	ldi	r24, 0x07	; 7
     c82:	16 95       	lsr	r17
     c84:	07 95       	ror	r16
     c86:	f7 94       	ror	r15
     c88:	e7 94       	ror	r14
     c8a:	8a 95       	dec	r24
     c8c:	d1 f7       	brne	.-12     	; 0xc82 <__pack_f+0x164>
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__pack_f+0x17c>
     c90:	ee 24       	eor	r14, r14
     c92:	ff 24       	eor	r15, r15
     c94:	87 01       	movw	r16, r14
     c96:	ef ef       	ldi	r30, 0xFF	; 255
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	6e 2f       	mov	r22, r30
     c9c:	67 95       	ror	r22
     c9e:	66 27       	eor	r22, r22
     ca0:	67 95       	ror	r22
     ca2:	90 2f       	mov	r25, r16
     ca4:	9f 77       	andi	r25, 0x7F	; 127
     ca6:	d7 94       	ror	r13
     ca8:	dd 24       	eor	r13, r13
     caa:	d7 94       	ror	r13
     cac:	8e 2f       	mov	r24, r30
     cae:	86 95       	lsr	r24
     cb0:	49 2f       	mov	r20, r25
     cb2:	46 2b       	or	r20, r22
     cb4:	58 2f       	mov	r21, r24
     cb6:	5d 29       	or	r21, r13
     cb8:	b7 01       	movw	r22, r14
     cba:	ca 01       	movw	r24, r20
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	08 95       	ret

00000cc8 <__unpack_f>:
     cc8:	fc 01       	movw	r30, r24
     cca:	db 01       	movw	r26, r22
     ccc:	40 81       	ld	r20, Z
     cce:	51 81       	ldd	r21, Z+1	; 0x01
     cd0:	22 81       	ldd	r18, Z+2	; 0x02
     cd2:	62 2f       	mov	r22, r18
     cd4:	6f 77       	andi	r22, 0x7F	; 127
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	22 1f       	adc	r18, r18
     cda:	22 27       	eor	r18, r18
     cdc:	22 1f       	adc	r18, r18
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	89 2f       	mov	r24, r25
     ce2:	88 0f       	add	r24, r24
     ce4:	82 2b       	or	r24, r18
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	99 1f       	adc	r25, r25
     cec:	99 27       	eor	r25, r25
     cee:	99 1f       	adc	r25, r25
     cf0:	11 96       	adiw	r26, 0x01	; 1
     cf2:	9c 93       	st	X, r25
     cf4:	11 97       	sbiw	r26, 0x01	; 1
     cf6:	21 15       	cp	r18, r1
     cf8:	31 05       	cpc	r19, r1
     cfa:	a9 f5       	brne	.+106    	; 0xd66 <__unpack_f+0x9e>
     cfc:	41 15       	cp	r20, r1
     cfe:	51 05       	cpc	r21, r1
     d00:	61 05       	cpc	r22, r1
     d02:	71 05       	cpc	r23, r1
     d04:	11 f4       	brne	.+4      	; 0xd0a <__unpack_f+0x42>
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	37 c0       	rjmp	.+110    	; 0xd78 <__unpack_f+0xb0>
     d0a:	82 e8       	ldi	r24, 0x82	; 130
     d0c:	9f ef       	ldi	r25, 0xFF	; 255
     d0e:	13 96       	adiw	r26, 0x03	; 3
     d10:	9c 93       	st	X, r25
     d12:	8e 93       	st	-X, r24
     d14:	12 97       	sbiw	r26, 0x02	; 2
     d16:	9a 01       	movw	r18, r20
     d18:	ab 01       	movw	r20, r22
     d1a:	67 e0       	ldi	r22, 0x07	; 7
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	6a 95       	dec	r22
     d26:	d1 f7       	brne	.-12     	; 0xd1c <__unpack_f+0x54>
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	8c 93       	st	X, r24
     d2c:	0d c0       	rjmp	.+26     	; 0xd48 <__unpack_f+0x80>
     d2e:	22 0f       	add	r18, r18
     d30:	33 1f       	adc	r19, r19
     d32:	44 1f       	adc	r20, r20
     d34:	55 1f       	adc	r21, r21
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	8d 91       	ld	r24, X+
     d3a:	9c 91       	ld	r25, X
     d3c:	13 97       	sbiw	r26, 0x03	; 3
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	13 96       	adiw	r26, 0x03	; 3
     d42:	9c 93       	st	X, r25
     d44:	8e 93       	st	-X, r24
     d46:	12 97       	sbiw	r26, 0x02	; 2
     d48:	20 30       	cpi	r18, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	38 07       	cpc	r19, r24
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	48 07       	cpc	r20, r24
     d52:	80 e4       	ldi	r24, 0x40	; 64
     d54:	58 07       	cpc	r21, r24
     d56:	58 f3       	brcs	.-42     	; 0xd2e <__unpack_f+0x66>
     d58:	14 96       	adiw	r26, 0x04	; 4
     d5a:	2d 93       	st	X+, r18
     d5c:	3d 93       	st	X+, r19
     d5e:	4d 93       	st	X+, r20
     d60:	5c 93       	st	X, r21
     d62:	17 97       	sbiw	r26, 0x07	; 7
     d64:	08 95       	ret
     d66:	2f 3f       	cpi	r18, 0xFF	; 255
     d68:	31 05       	cpc	r19, r1
     d6a:	79 f4       	brne	.+30     	; 0xd8a <__unpack_f+0xc2>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	19 f4       	brne	.+6      	; 0xd7c <__unpack_f+0xb4>
     d76:	84 e0       	ldi	r24, 0x04	; 4
     d78:	8c 93       	st	X, r24
     d7a:	08 95       	ret
     d7c:	64 ff       	sbrs	r22, 4
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <__unpack_f+0xbe>
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	8c 93       	st	X, r24
     d84:	12 c0       	rjmp	.+36     	; 0xdaa <__unpack_f+0xe2>
     d86:	1c 92       	st	X, r1
     d88:	10 c0       	rjmp	.+32     	; 0xdaa <__unpack_f+0xe2>
     d8a:	2f 57       	subi	r18, 0x7F	; 127
     d8c:	30 40       	sbci	r19, 0x00	; 0
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	3c 93       	st	X, r19
     d92:	2e 93       	st	-X, r18
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	8c 93       	st	X, r24
     d9a:	87 e0       	ldi	r24, 0x07	; 7
     d9c:	44 0f       	add	r20, r20
     d9e:	55 1f       	adc	r21, r21
     da0:	66 1f       	adc	r22, r22
     da2:	77 1f       	adc	r23, r23
     da4:	8a 95       	dec	r24
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0xd4>
     da8:	70 64       	ori	r23, 0x40	; 64
     daa:	14 96       	adiw	r26, 0x04	; 4
     dac:	4d 93       	st	X+, r20
     dae:	5d 93       	st	X+, r21
     db0:	6d 93       	st	X+, r22
     db2:	7c 93       	st	X, r23
     db4:	17 97       	sbiw	r26, 0x07	; 7
     db6:	08 95       	ret

00000db8 <__fpcmp_parts_f>:
     db8:	1f 93       	push	r17
     dba:	dc 01       	movw	r26, r24
     dbc:	fb 01       	movw	r30, r22
     dbe:	9c 91       	ld	r25, X
     dc0:	92 30       	cpi	r25, 0x02	; 2
     dc2:	08 f4       	brcc	.+2      	; 0xdc6 <__fpcmp_parts_f+0xe>
     dc4:	47 c0       	rjmp	.+142    	; 0xe54 <__fpcmp_parts_f+0x9c>
     dc6:	80 81       	ld	r24, Z
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	08 f4       	brcc	.+2      	; 0xdce <__fpcmp_parts_f+0x16>
     dcc:	43 c0       	rjmp	.+134    	; 0xe54 <__fpcmp_parts_f+0x9c>
     dce:	94 30       	cpi	r25, 0x04	; 4
     dd0:	51 f4       	brne	.+20     	; 0xde6 <__fpcmp_parts_f+0x2e>
     dd2:	11 96       	adiw	r26, 0x01	; 1
     dd4:	1c 91       	ld	r17, X
     dd6:	84 30       	cpi	r24, 0x04	; 4
     dd8:	99 f5       	brne	.+102    	; 0xe40 <__fpcmp_parts_f+0x88>
     dda:	81 81       	ldd	r24, Z+1	; 0x01
     ddc:	68 2f       	mov	r22, r24
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	61 1b       	sub	r22, r17
     de2:	71 09       	sbc	r23, r1
     de4:	3f c0       	rjmp	.+126    	; 0xe64 <__fpcmp_parts_f+0xac>
     de6:	84 30       	cpi	r24, 0x04	; 4
     de8:	21 f0       	breq	.+8      	; 0xdf2 <__fpcmp_parts_f+0x3a>
     dea:	92 30       	cpi	r25, 0x02	; 2
     dec:	31 f4       	brne	.+12     	; 0xdfa <__fpcmp_parts_f+0x42>
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	b9 f1       	breq	.+110    	; 0xe60 <__fpcmp_parts_f+0xa8>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	88 23       	and	r24, r24
     df6:	89 f1       	breq	.+98     	; 0xe5a <__fpcmp_parts_f+0xa2>
     df8:	2d c0       	rjmp	.+90     	; 0xe54 <__fpcmp_parts_f+0x9c>
     dfa:	11 96       	adiw	r26, 0x01	; 1
     dfc:	1c 91       	ld	r17, X
     dfe:	11 97       	sbiw	r26, 0x01	; 1
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	f1 f0       	breq	.+60     	; 0xe40 <__fpcmp_parts_f+0x88>
     e04:	81 81       	ldd	r24, Z+1	; 0x01
     e06:	18 17       	cp	r17, r24
     e08:	d9 f4       	brne	.+54     	; 0xe40 <__fpcmp_parts_f+0x88>
     e0a:	12 96       	adiw	r26, 0x02	; 2
     e0c:	2d 91       	ld	r18, X+
     e0e:	3c 91       	ld	r19, X
     e10:	13 97       	sbiw	r26, 0x03	; 3
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	82 17       	cp	r24, r18
     e18:	93 07       	cpc	r25, r19
     e1a:	94 f0       	brlt	.+36     	; 0xe40 <__fpcmp_parts_f+0x88>
     e1c:	28 17       	cp	r18, r24
     e1e:	39 07       	cpc	r19, r25
     e20:	bc f0       	brlt	.+46     	; 0xe50 <__fpcmp_parts_f+0x98>
     e22:	14 96       	adiw	r26, 0x04	; 4
     e24:	8d 91       	ld	r24, X+
     e26:	9d 91       	ld	r25, X+
     e28:	0d 90       	ld	r0, X+
     e2a:	bc 91       	ld	r27, X
     e2c:	a0 2d       	mov	r26, r0
     e2e:	24 81       	ldd	r18, Z+4	; 0x04
     e30:	35 81       	ldd	r19, Z+5	; 0x05
     e32:	46 81       	ldd	r20, Z+6	; 0x06
     e34:	57 81       	ldd	r21, Z+7	; 0x07
     e36:	28 17       	cp	r18, r24
     e38:	39 07       	cpc	r19, r25
     e3a:	4a 07       	cpc	r20, r26
     e3c:	5b 07       	cpc	r21, r27
     e3e:	18 f4       	brcc	.+6      	; 0xe46 <__fpcmp_parts_f+0x8e>
     e40:	11 23       	and	r17, r17
     e42:	41 f0       	breq	.+16     	; 0xe54 <__fpcmp_parts_f+0x9c>
     e44:	0a c0       	rjmp	.+20     	; 0xe5a <__fpcmp_parts_f+0xa2>
     e46:	82 17       	cp	r24, r18
     e48:	93 07       	cpc	r25, r19
     e4a:	a4 07       	cpc	r26, r20
     e4c:	b5 07       	cpc	r27, r21
     e4e:	40 f4       	brcc	.+16     	; 0xe60 <__fpcmp_parts_f+0xa8>
     e50:	11 23       	and	r17, r17
     e52:	19 f0       	breq	.+6      	; 0xe5a <__fpcmp_parts_f+0xa2>
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <__fpcmp_parts_f+0xac>
     e5a:	6f ef       	ldi	r22, 0xFF	; 255
     e5c:	7f ef       	ldi	r23, 0xFF	; 255
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <__fpcmp_parts_f+0xac>
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	cb 01       	movw	r24, r22
     e66:	1f 91       	pop	r17
     e68:	08 95       	ret

00000e6a <Accelerometor_init>:
 
#include "ADXL345.h"
#include "LCD.h"

void Accelerometor_init(ADX345_PowerModes Mode , ADXL345_Address EFF_Address)
{	
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <Accelerometor_init+0x6>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02
	I2C_ByteWrite(EFF_Address,POWER_CTRL,Mode);	
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	6d e2       	ldi	r22, 0x2D	; 45
     e7c:	49 81       	ldd	r20, Y+1	; 0x01
     e7e:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0x0B);
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	61 e3       	ldi	r22, 0x31	; 49
     e86:	4b e0       	ldi	r20, 0x0B	; 11
     e88:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSX,-1);
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	6e e1       	ldi	r22, 0x1E	; 30
     e90:	4f ef       	ldi	r20, 0xFF	; 255
     e92:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSY,0);
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	6f e1       	ldi	r22, 0x1F	; 31
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <I2C_ByteWrite>
	I2C_ByteWrite(EFF_Address,ACCS_OFSZ,-1);
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	60 e2       	ldi	r22, 0x20	; 32
     ea4:	4f ef       	ldi	r20, 0xFF	; 255
     ea6:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <I2C_ByteWrite>
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,0);
	//I2C_ByteWrite(EFF_Address,ACCS_DATA_FORMAT,8);
			
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <Accelerometor_ReadAxis>:



void Accelerometor_ReadAxis(ADXL345_Address EFF_Address ,volatile ADXL345_Data * Data_ptr)  
{
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	cd 55       	subi	r28, 0x5D	; 93
     ec2:	d0 40       	sbci	r29, 0x00	; 0
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	fe 01       	movw	r30, r28
     ed0:	e5 5a       	subi	r30, 0xA5	; 165
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	80 83       	st	Z, r24
     ed6:	fe 01       	movw	r30, r28
     ed8:	e4 5a       	subi	r30, 0xA4	; 164
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	71 83       	std	Z+1, r23	; 0x01
     ede:	60 83       	st	Z, r22
	uint16 X_Axis_Read;
	uint16 Y_Axis_Read;
	uint16 Z_Axis_Read;
	
	
	X_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX0);
     ee0:	fe 01       	movw	r30, r28
     ee2:	e5 5a       	subi	r30, 0xA5	; 165
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	80 81       	ld	r24, Z
     ee8:	62 e3       	ldi	r22, 0x32	; 50
     eea:	0e 94 09 16 	call	0x2c12	; 0x2c12 <I2C_ByteRead>
     eee:	fe 01       	movw	r30, r28
     ef0:	e7 5a       	subi	r30, 0xA7	; 167
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	91 83       	std	Z+1, r25	; 0x01
     efa:	80 83       	st	Z, r24
     efc:	fe 01       	movw	r30, r28
     efe:	ef 5a       	subi	r30, 0xAF	; 175
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	a0 e8       	ldi	r26, 0x80	; 128
     f08:	bf e3       	ldi	r27, 0x3F	; 63
     f0a:	80 83       	st	Z, r24
     f0c:	91 83       	std	Z+1, r25	; 0x01
     f0e:	a2 83       	std	Z+2, r26	; 0x02
     f10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f12:	8e 01       	movw	r16, r28
     f14:	03 5b       	subi	r16, 0xB3	; 179
     f16:	1f 4f       	sbci	r17, 0xFF	; 255
     f18:	fe 01       	movw	r30, r28
     f1a:	ef 5a       	subi	r30, 0xAF	; 175
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	60 81       	ld	r22, Z
     f20:	71 81       	ldd	r23, Z+1	; 0x01
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	93 81       	ldd	r25, Z+3	; 0x03
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	4a e7       	ldi	r20, 0x7A	; 122
     f2c:	55 e4       	ldi	r21, 0x45	; 69
     f2e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	f8 01       	movw	r30, r16
     f38:	80 83       	st	Z, r24
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	a2 83       	std	Z+2, r26	; 0x02
     f3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f40:	fe 01       	movw	r30, r28
     f42:	e3 5b       	subi	r30, 0xB3	; 179
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	60 81       	ld	r22, Z
     f48:	71 81       	ldd	r23, Z+1	; 0x01
     f4a:	82 81       	ldd	r24, Z+2	; 0x02
     f4c:	93 81       	ldd	r25, Z+3	; 0x03
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e8       	ldi	r20, 0x80	; 128
     f54:	5f e3       	ldi	r21, 0x3F	; 63
     f56:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
     f5a:	88 23       	and	r24, r24
     f5c:	44 f4       	brge	.+16     	; 0xf6e <Accelerometor_ReadAxis+0xba>
		__ticks = 1;
     f5e:	fe 01       	movw	r30, r28
     f60:	e5 5b       	subi	r30, 0xB5	; 181
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	80 83       	st	Z, r24
     f6c:	64 c0       	rjmp	.+200    	; 0x1036 <Accelerometor_ReadAxis+0x182>
	else if (__tmp > 65535)
     f6e:	fe 01       	movw	r30, r28
     f70:	e3 5b       	subi	r30, 0xB3	; 179
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	60 81       	ld	r22, Z
     f76:	71 81       	ldd	r23, Z+1	; 0x01
     f78:	82 81       	ldd	r24, Z+2	; 0x02
     f7a:	93 81       	ldd	r25, Z+3	; 0x03
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	3f ef       	ldi	r19, 0xFF	; 255
     f80:	4f e7       	ldi	r20, 0x7F	; 127
     f82:	57 e4       	ldi	r21, 0x47	; 71
     f84:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
     f88:	18 16       	cp	r1, r24
     f8a:	0c f0       	brlt	.+2      	; 0xf8e <Accelerometor_ReadAxis+0xda>
     f8c:	43 c0       	rjmp	.+134    	; 0x1014 <Accelerometor_ReadAxis+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8e:	fe 01       	movw	r30, r28
     f90:	ef 5a       	subi	r30, 0xAF	; 175
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	60 81       	ld	r22, Z
     f96:	71 81       	ldd	r23, Z+1	; 0x01
     f98:	82 81       	ldd	r24, Z+2	; 0x02
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e2       	ldi	r20, 0x20	; 32
     fa2:	51 e4       	ldi	r21, 0x41	; 65
     fa4:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	8e 01       	movw	r16, r28
     fae:	05 5b       	subi	r16, 0xB5	; 181
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	f8 01       	movw	r30, r16
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
     fc4:	1f c0       	rjmp	.+62     	; 0x1004 <Accelerometor_ReadAxis+0x150>
     fc6:	fe 01       	movw	r30, r28
     fc8:	e7 5b       	subi	r30, 0xB7	; 183
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	80 e9       	ldi	r24, 0x90	; 144
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fd4:	fe 01       	movw	r30, r28
     fd6:	e7 5b       	subi	r30, 0xB7	; 183
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	80 81       	ld	r24, Z
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <Accelerometor_ReadAxis+0x12a>
     fe2:	fe 01       	movw	r30, r28
     fe4:	e7 5b       	subi	r30, 0xB7	; 183
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	91 83       	std	Z+1, r25	; 0x01
     fea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fec:	de 01       	movw	r26, r28
     fee:	a5 5b       	subi	r26, 0xB5	; 181
     ff0:	bf 4f       	sbci	r27, 0xFF	; 255
     ff2:	fe 01       	movw	r30, r28
     ff4:	e5 5b       	subi	r30, 0xB5	; 181
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	11 96       	adiw	r26, 0x01	; 1
    1000:	9c 93       	st	X, r25
    1002:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1004:	fe 01       	movw	r30, r28
    1006:	e5 5b       	subi	r30, 0xB5	; 181
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	80 81       	ld	r24, Z
    100c:	91 81       	ldd	r25, Z+1	; 0x01
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	d1 f6       	brne	.-76     	; 0xfc6 <Accelerometor_ReadAxis+0x112>
    1012:	27 c0       	rjmp	.+78     	; 0x1062 <Accelerometor_ReadAxis+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1014:	8e 01       	movw	r16, r28
    1016:	05 5b       	subi	r16, 0xB5	; 181
    1018:	1f 4f       	sbci	r17, 0xFF	; 255
    101a:	fe 01       	movw	r30, r28
    101c:	e3 5b       	subi	r30, 0xB3	; 179
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	60 81       	ld	r22, Z
    1022:	71 81       	ldd	r23, Z+1	; 0x01
    1024:	82 81       	ldd	r24, Z+2	; 0x02
    1026:	93 81       	ldd	r25, Z+3	; 0x03
    1028:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	f8 01       	movw	r30, r16
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	80 83       	st	Z, r24
    1036:	de 01       	movw	r26, r28
    1038:	a9 5b       	subi	r26, 0xB9	; 185
    103a:	bf 4f       	sbci	r27, 0xFF	; 255
    103c:	fe 01       	movw	r30, r28
    103e:	e5 5b       	subi	r30, 0xB5	; 181
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	8d 93       	st	X+, r24
    1048:	9c 93       	st	X, r25
    104a:	fe 01       	movw	r30, r28
    104c:	e9 5b       	subi	r30, 0xB9	; 185
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <Accelerometor_ReadAxis+0x1a0>
    1058:	fe 01       	movw	r30, r28
    105a:	e9 5b       	subi	r30, 0xB9	; 185
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	91 83       	std	Z+1, r25	; 0x01
    1060:	80 83       	st	Z, r24
	_delay_ms(1);
	X_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAX1))<<8;
    1062:	fe 01       	movw	r30, r28
    1064:	e5 5a       	subi	r30, 0xA5	; 165
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	63 e3       	ldi	r22, 0x33	; 51
    106c:	0e 94 09 16 	call	0x2c12	; 0x2c12 <I2C_ByteRead>
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	98 2f       	mov	r25, r24
    1076:	88 27       	eor	r24, r24
    1078:	9c 01       	movw	r18, r24
    107a:	de 01       	movw	r26, r28
    107c:	a7 5a       	subi	r26, 0xA7	; 167
    107e:	bf 4f       	sbci	r27, 0xFF	; 255
    1080:	fe 01       	movw	r30, r28
    1082:	e7 5a       	subi	r30, 0xA7	; 167
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	82 2b       	or	r24, r18
    108c:	93 2b       	or	r25, r19
    108e:	8d 93       	st	X+, r24
    1090:	9c 93       	st	X, r25
    1092:	fe 01       	movw	r30, r28
    1094:	ed 5b       	subi	r30, 0xBD	; 189
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	a0 e8       	ldi	r26, 0x80	; 128
    109e:	bf e3       	ldi	r27, 0x3F	; 63
    10a0:	80 83       	st	Z, r24
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	a2 83       	std	Z+2, r26	; 0x02
    10a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a8:	8e 01       	movw	r16, r28
    10aa:	01 5c       	subi	r16, 0xC1	; 193
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	fe 01       	movw	r30, r28
    10b0:	ed 5b       	subi	r30, 0xBD	; 189
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	60 81       	ld	r22, Z
    10b6:	71 81       	ldd	r23, Z+1	; 0x01
    10b8:	82 81       	ldd	r24, Z+2	; 0x02
    10ba:	93 81       	ldd	r25, Z+3	; 0x03
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	4a e7       	ldi	r20, 0x7A	; 122
    10c2:	55 e4       	ldi	r21, 0x45	; 69
    10c4:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	f8 01       	movw	r30, r16
    10ce:	80 83       	st	Z, r24
    10d0:	91 83       	std	Z+1, r25	; 0x01
    10d2:	a2 83       	std	Z+2, r26	; 0x02
    10d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10d6:	fe 01       	movw	r30, r28
    10d8:	ff 96       	adiw	r30, 0x3f	; 63
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	2c f4       	brge	.+10     	; 0x10fc <Accelerometor_ReadAxis+0x248>
		__ticks = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9e af       	std	Y+62, r25	; 0x3e
    10f8:	8d af       	std	Y+61, r24	; 0x3d
    10fa:	46 c0       	rjmp	.+140    	; 0x1188 <__stack+0x89>
	else if (__tmp > 65535)
    10fc:	fe 01       	movw	r30, r28
    10fe:	ff 96       	adiw	r30, 0x3f	; 63
    1100:	60 81       	ld	r22, Z
    1102:	71 81       	ldd	r23, Z+1	; 0x01
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	3f ef       	ldi	r19, 0xFF	; 255
    110c:	4f e7       	ldi	r20, 0x7F	; 127
    110e:	57 e4       	ldi	r21, 0x47	; 71
    1110:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1114:	18 16       	cp	r1, r24
    1116:	64 f5       	brge	.+88     	; 0x1170 <__stack+0x71>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1118:	fe 01       	movw	r30, r28
    111a:	ed 5b       	subi	r30, 0xBD	; 189
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e af       	std	Y+62, r25	; 0x3e
    1144:	8d af       	std	Y+61, r24	; 0x3d
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <__stack+0x67>
    1148:	80 e9       	ldi	r24, 0x90	; 144
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c af       	std	Y+60, r25	; 0x3c
    114e:	8b af       	std	Y+59, r24	; 0x3b
    1150:	8b ad       	ldd	r24, Y+59	; 0x3b
    1152:	9c ad       	ldd	r25, Y+60	; 0x3c
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <__stack+0x55>
    1158:	9c af       	std	Y+60, r25	; 0x3c
    115a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d ad       	ldd	r24, Y+61	; 0x3d
    115e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e af       	std	Y+62, r25	; 0x3e
    1164:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d ad       	ldd	r24, Y+61	; 0x3d
    1168:	9e ad       	ldd	r25, Y+62	; 0x3e
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <__stack+0x49>
    116e:	16 c0       	rjmp	.+44     	; 0x119c <__stack+0x9d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	fe 01       	movw	r30, r28
    1172:	ff 96       	adiw	r30, 0x3f	; 63
    1174:	60 81       	ld	r22, Z
    1176:	71 81       	ldd	r23, Z+1	; 0x01
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	93 81       	ldd	r25, Z+3	; 0x03
    117c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	9e af       	std	Y+62, r25	; 0x3e
    1186:	8d af       	std	Y+61, r24	; 0x3d
    1188:	8d ad       	ldd	r24, Y+61	; 0x3d
    118a:	9e ad       	ldd	r25, Y+62	; 0x3e
    118c:	9a af       	std	Y+58, r25	; 0x3a
    118e:	89 af       	std	Y+57, r24	; 0x39
    1190:	89 ad       	ldd	r24, Y+57	; 0x39
    1192:	9a ad       	ldd	r25, Y+58	; 0x3a
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <__stack+0x95>
    1198:	9a af       	std	Y+58, r25	; 0x3a
    119a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	Y_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY0);
    119c:	fe 01       	movw	r30, r28
    119e:	e5 5a       	subi	r30, 0xA5	; 165
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	80 81       	ld	r24, Z
    11a4:	64 e3       	ldi	r22, 0x34	; 52
    11a6:	0e 94 09 16 	call	0x2c12	; 0x2c12 <I2C_ByteRead>
    11aa:	fe 01       	movw	r30, r28
    11ac:	e9 5a       	subi	r30, 0xA9	; 169
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	91 83       	std	Z+1, r25	; 0x01
    11b6:	80 83       	st	Z, r24
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a0 e8       	ldi	r26, 0x80	; 128
    11be:	bf e3       	ldi	r27, 0x3F	; 63
    11c0:	8d ab       	std	Y+53, r24	; 0x35
    11c2:	9e ab       	std	Y+54, r25	; 0x36
    11c4:	af ab       	std	Y+55, r26	; 0x37
    11c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c8:	6d a9       	ldd	r22, Y+53	; 0x35
    11ca:	7e a9       	ldd	r23, Y+54	; 0x36
    11cc:	8f a9       	ldd	r24, Y+55	; 0x37
    11ce:	98 ad       	ldd	r25, Y+56	; 0x38
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	4a e7       	ldi	r20, 0x7A	; 122
    11d6:	55 e4       	ldi	r21, 0x45	; 69
    11d8:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	89 ab       	std	Y+49, r24	; 0x31
    11e2:	9a ab       	std	Y+50, r25	; 0x32
    11e4:	ab ab       	std	Y+51, r26	; 0x33
    11e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11e8:	69 a9       	ldd	r22, Y+49	; 0x31
    11ea:	7a a9       	ldd	r23, Y+50	; 0x32
    11ec:	8b a9       	ldd	r24, Y+51	; 0x33
    11ee:	9c a9       	ldd	r25, Y+52	; 0x34
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e8       	ldi	r20, 0x80	; 128
    11f6:	5f e3       	ldi	r21, 0x3F	; 63
    11f8:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    11fc:	88 23       	and	r24, r24
    11fe:	2c f4       	brge	.+10     	; 0x120a <__stack+0x10b>
		__ticks = 1;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	98 ab       	std	Y+48, r25	; 0x30
    1206:	8f a7       	std	Y+47, r24	; 0x2f
    1208:	3f c0       	rjmp	.+126    	; 0x1288 <__stack+0x189>
	else if (__tmp > 65535)
    120a:	69 a9       	ldd	r22, Y+49	; 0x31
    120c:	7a a9       	ldd	r23, Y+50	; 0x32
    120e:	8b a9       	ldd	r24, Y+51	; 0x33
    1210:	9c a9       	ldd	r25, Y+52	; 0x34
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	4f e7       	ldi	r20, 0x7F	; 127
    1218:	57 e4       	ldi	r21, 0x47	; 71
    121a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    121e:	18 16       	cp	r1, r24
    1220:	4c f5       	brge	.+82     	; 0x1274 <__stack+0x175>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1222:	6d a9       	ldd	r22, Y+53	; 0x35
    1224:	7e a9       	ldd	r23, Y+54	; 0x36
    1226:	8f a9       	ldd	r24, Y+55	; 0x37
    1228:	98 ad       	ldd	r25, Y+56	; 0x38
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e2       	ldi	r20, 0x20	; 32
    1230:	51 e4       	ldi	r21, 0x41	; 65
    1232:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	bc 01       	movw	r22, r24
    123c:	cd 01       	movw	r24, r26
    123e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	98 ab       	std	Y+48, r25	; 0x30
    1248:	8f a7       	std	Y+47, r24	; 0x2f
    124a:	0f c0       	rjmp	.+30     	; 0x126a <__stack+0x16b>
    124c:	80 e9       	ldi	r24, 0x90	; 144
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	9e a7       	std	Y+46, r25	; 0x2e
    1252:	8d a7       	std	Y+45, r24	; 0x2d
    1254:	8d a5       	ldd	r24, Y+45	; 0x2d
    1256:	9e a5       	ldd	r25, Y+46	; 0x2e
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <__stack+0x159>
    125c:	9e a7       	std	Y+46, r25	; 0x2e
    125e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1260:	8f a5       	ldd	r24, Y+47	; 0x2f
    1262:	98 a9       	ldd	r25, Y+48	; 0x30
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	98 ab       	std	Y+48, r25	; 0x30
    1268:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126a:	8f a5       	ldd	r24, Y+47	; 0x2f
    126c:	98 a9       	ldd	r25, Y+48	; 0x30
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	69 f7       	brne	.-38     	; 0x124c <__stack+0x14d>
    1272:	14 c0       	rjmp	.+40     	; 0x129c <__stack+0x19d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1274:	69 a9       	ldd	r22, Y+49	; 0x31
    1276:	7a a9       	ldd	r23, Y+50	; 0x32
    1278:	8b a9       	ldd	r24, Y+51	; 0x33
    127a:	9c a9       	ldd	r25, Y+52	; 0x34
    127c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	98 ab       	std	Y+48, r25	; 0x30
    1286:	8f a7       	std	Y+47, r24	; 0x2f
    1288:	8f a5       	ldd	r24, Y+47	; 0x2f
    128a:	98 a9       	ldd	r25, Y+48	; 0x30
    128c:	9c a7       	std	Y+44, r25	; 0x2c
    128e:	8b a7       	std	Y+43, r24	; 0x2b
    1290:	8b a5       	ldd	r24, Y+43	; 0x2b
    1292:	9c a5       	ldd	r25, Y+44	; 0x2c
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <__stack+0x195>
    1298:	9c a7       	std	Y+44, r25	; 0x2c
    129a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	Y_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAY1))<<8;
    129c:	fe 01       	movw	r30, r28
    129e:	e5 5a       	subi	r30, 0xA5	; 165
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	80 81       	ld	r24, Z
    12a4:	65 e3       	ldi	r22, 0x35	; 53
    12a6:	0e 94 09 16 	call	0x2c12	; 0x2c12 <I2C_ByteRead>
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	98 2f       	mov	r25, r24
    12b0:	88 27       	eor	r24, r24
    12b2:	9c 01       	movw	r18, r24
    12b4:	de 01       	movw	r26, r28
    12b6:	a9 5a       	subi	r26, 0xA9	; 169
    12b8:	bf 4f       	sbci	r27, 0xFF	; 255
    12ba:	fe 01       	movw	r30, r28
    12bc:	e9 5a       	subi	r30, 0xA9	; 169
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
    12c4:	82 2b       	or	r24, r18
    12c6:	93 2b       	or	r25, r19
    12c8:	8d 93       	st	X+, r24
    12ca:	9c 93       	st	X, r25
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a0 e8       	ldi	r26, 0x80	; 128
    12d2:	bf e3       	ldi	r27, 0x3F	; 63
    12d4:	8f a3       	std	Y+39, r24	; 0x27
    12d6:	98 a7       	std	Y+40, r25	; 0x28
    12d8:	a9 a7       	std	Y+41, r26	; 0x29
    12da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12dc:	6f a1       	ldd	r22, Y+39	; 0x27
    12de:	78 a5       	ldd	r23, Y+40	; 0x28
    12e0:	89 a5       	ldd	r24, Y+41	; 0x29
    12e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a e7       	ldi	r20, 0x7A	; 122
    12ea:	55 e4       	ldi	r21, 0x45	; 69
    12ec:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	8b a3       	std	Y+35, r24	; 0x23
    12f6:	9c a3       	std	Y+36, r25	; 0x24
    12f8:	ad a3       	std	Y+37, r26	; 0x25
    12fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12fc:	6b a1       	ldd	r22, Y+35	; 0x23
    12fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1300:	8d a1       	ldd	r24, Y+37	; 0x25
    1302:	9e a1       	ldd	r25, Y+38	; 0x26
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e8       	ldi	r20, 0x80	; 128
    130a:	5f e3       	ldi	r21, 0x3F	; 63
    130c:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1310:	88 23       	and	r24, r24
    1312:	2c f4       	brge	.+10     	; 0x131e <__stack+0x21f>
		__ticks = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9a a3       	std	Y+34, r25	; 0x22
    131a:	89 a3       	std	Y+33, r24	; 0x21
    131c:	3f c0       	rjmp	.+126    	; 0x139c <__stack+0x29d>
	else if (__tmp > 65535)
    131e:	6b a1       	ldd	r22, Y+35	; 0x23
    1320:	7c a1       	ldd	r23, Y+36	; 0x24
    1322:	8d a1       	ldd	r24, Y+37	; 0x25
    1324:	9e a1       	ldd	r25, Y+38	; 0x26
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	3f ef       	ldi	r19, 0xFF	; 255
    132a:	4f e7       	ldi	r20, 0x7F	; 127
    132c:	57 e4       	ldi	r21, 0x47	; 71
    132e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1332:	18 16       	cp	r1, r24
    1334:	4c f5       	brge	.+82     	; 0x1388 <__stack+0x289>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1336:	6f a1       	ldd	r22, Y+39	; 0x27
    1338:	78 a5       	ldd	r23, Y+40	; 0x28
    133a:	89 a5       	ldd	r24, Y+41	; 0x29
    133c:	9a a5       	ldd	r25, Y+42	; 0x2a
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e2       	ldi	r20, 0x20	; 32
    1344:	51 e4       	ldi	r21, 0x41	; 65
    1346:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	9a a3       	std	Y+34, r25	; 0x22
    135c:	89 a3       	std	Y+33, r24	; 0x21
    135e:	0f c0       	rjmp	.+30     	; 0x137e <__stack+0x27f>
    1360:	80 e9       	ldi	r24, 0x90	; 144
    1362:	91 e0       	ldi	r25, 0x01	; 1
    1364:	98 a3       	std	Y+32, r25	; 0x20
    1366:	8f 8f       	std	Y+31, r24	; 0x1f
    1368:	8f 8d       	ldd	r24, Y+31	; 0x1f
    136a:	98 a1       	ldd	r25, Y+32	; 0x20
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <__stack+0x26d>
    1370:	98 a3       	std	Y+32, r25	; 0x20
    1372:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1374:	89 a1       	ldd	r24, Y+33	; 0x21
    1376:	9a a1       	ldd	r25, Y+34	; 0x22
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	9a a3       	std	Y+34, r25	; 0x22
    137c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137e:	89 a1       	ldd	r24, Y+33	; 0x21
    1380:	9a a1       	ldd	r25, Y+34	; 0x22
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	69 f7       	brne	.-38     	; 0x1360 <__stack+0x261>
    1386:	14 c0       	rjmp	.+40     	; 0x13b0 <__stack+0x2b1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1388:	6b a1       	ldd	r22, Y+35	; 0x23
    138a:	7c a1       	ldd	r23, Y+36	; 0x24
    138c:	8d a1       	ldd	r24, Y+37	; 0x25
    138e:	9e a1       	ldd	r25, Y+38	; 0x26
    1390:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9a a3       	std	Y+34, r25	; 0x22
    139a:	89 a3       	std	Y+33, r24	; 0x21
    139c:	89 a1       	ldd	r24, Y+33	; 0x21
    139e:	9a a1       	ldd	r25, Y+34	; 0x22
    13a0:	9e 8f       	std	Y+30, r25	; 0x1e
    13a2:	8d 8f       	std	Y+29, r24	; 0x1d
    13a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <__stack+0x2a9>
    13ac:	9e 8f       	std	Y+30, r25	; 0x1e
    13ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Z_Axis_Read = (uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ0);
    13b0:	fe 01       	movw	r30, r28
    13b2:	e5 5a       	subi	r30, 0xA5	; 165
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	80 81       	ld	r24, Z
    13b8:	66 e3       	ldi	r22, 0x36	; 54
    13ba:	0e 94 09 16 	call	0x2c12	; 0x2c12 <I2C_ByteRead>
    13be:	fe 01       	movw	r30, r28
    13c0:	eb 5a       	subi	r30, 0xAB	; 171
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a0 e8       	ldi	r26, 0x80	; 128
    13d2:	bf e3       	ldi	r27, 0x3F	; 63
    13d4:	89 8f       	std	Y+25, r24	; 0x19
    13d6:	9a 8f       	std	Y+26, r25	; 0x1a
    13d8:	ab 8f       	std	Y+27, r26	; 0x1b
    13da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13dc:	69 8d       	ldd	r22, Y+25	; 0x19
    13de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	4a e7       	ldi	r20, 0x7A	; 122
    13ea:	55 e4       	ldi	r21, 0x45	; 69
    13ec:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	8d 8b       	std	Y+21, r24	; 0x15
    13f6:	9e 8b       	std	Y+22, r25	; 0x16
    13f8:	af 8b       	std	Y+23, r26	; 0x17
    13fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13fc:	6d 89       	ldd	r22, Y+21	; 0x15
    13fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1400:	8f 89       	ldd	r24, Y+23	; 0x17
    1402:	98 8d       	ldd	r25, Y+24	; 0x18
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e8       	ldi	r20, 0x80	; 128
    140a:	5f e3       	ldi	r21, 0x3F	; 63
    140c:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1410:	88 23       	and	r24, r24
    1412:	2c f4       	brge	.+10     	; 0x141e <__stack+0x31f>
		__ticks = 1;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9c 8b       	std	Y+20, r25	; 0x14
    141a:	8b 8b       	std	Y+19, r24	; 0x13
    141c:	3f c0       	rjmp	.+126    	; 0x149c <__stack+0x39d>
	else if (__tmp > 65535)
    141e:	6d 89       	ldd	r22, Y+21	; 0x15
    1420:	7e 89       	ldd	r23, Y+22	; 0x16
    1422:	8f 89       	ldd	r24, Y+23	; 0x17
    1424:	98 8d       	ldd	r25, Y+24	; 0x18
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	3f ef       	ldi	r19, 0xFF	; 255
    142a:	4f e7       	ldi	r20, 0x7F	; 127
    142c:	57 e4       	ldi	r21, 0x47	; 71
    142e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1432:	18 16       	cp	r1, r24
    1434:	4c f5       	brge	.+82     	; 0x1488 <__stack+0x389>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1436:	69 8d       	ldd	r22, Y+25	; 0x19
    1438:	7a 8d       	ldd	r23, Y+26	; 0x1a
    143a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    143c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e2       	ldi	r20, 0x20	; 32
    1444:	51 e4       	ldi	r21, 0x41	; 65
    1446:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	bc 01       	movw	r22, r24
    1450:	cd 01       	movw	r24, r26
    1452:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	9c 8b       	std	Y+20, r25	; 0x14
    145c:	8b 8b       	std	Y+19, r24	; 0x13
    145e:	0f c0       	rjmp	.+30     	; 0x147e <__stack+0x37f>
    1460:	80 e9       	ldi	r24, 0x90	; 144
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	9a 8b       	std	Y+18, r25	; 0x12
    1466:	89 8b       	std	Y+17, r24	; 0x11
    1468:	89 89       	ldd	r24, Y+17	; 0x11
    146a:	9a 89       	ldd	r25, Y+18	; 0x12
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <__stack+0x36d>
    1470:	9a 8b       	std	Y+18, r25	; 0x12
    1472:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1474:	8b 89       	ldd	r24, Y+19	; 0x13
    1476:	9c 89       	ldd	r25, Y+20	; 0x14
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	9c 8b       	std	Y+20, r25	; 0x14
    147c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147e:	8b 89       	ldd	r24, Y+19	; 0x13
    1480:	9c 89       	ldd	r25, Y+20	; 0x14
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	69 f7       	brne	.-38     	; 0x1460 <__stack+0x361>
    1486:	14 c0       	rjmp	.+40     	; 0x14b0 <__stack+0x3b1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	7e 89       	ldd	r23, Y+22	; 0x16
    148c:	8f 89       	ldd	r24, Y+23	; 0x17
    148e:	98 8d       	ldd	r25, Y+24	; 0x18
    1490:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9c 8b       	std	Y+20, r25	; 0x14
    149a:	8b 8b       	std	Y+19, r24	; 0x13
    149c:	8b 89       	ldd	r24, Y+19	; 0x13
    149e:	9c 89       	ldd	r25, Y+20	; 0x14
    14a0:	98 8b       	std	Y+16, r25	; 0x10
    14a2:	8f 87       	std	Y+15, r24	; 0x0f
    14a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a6:	98 89       	ldd	r25, Y+16	; 0x10
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <__stack+0x3a9>
    14ac:	98 8b       	std	Y+16, r25	; 0x10
    14ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Z_Axis_Read |= ((uint8)I2C_ByteRead(EFF_Address , ACCS_DATAZ1))<<8;
    14b0:	fe 01       	movw	r30, r28
    14b2:	e5 5a       	subi	r30, 0xA5	; 165
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	80 81       	ld	r24, Z
    14b8:	67 e3       	ldi	r22, 0x37	; 55
    14ba:	0e 94 09 16 	call	0x2c12	; 0x2c12 <I2C_ByteRead>
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	98 2f       	mov	r25, r24
    14c4:	88 27       	eor	r24, r24
    14c6:	9c 01       	movw	r18, r24
    14c8:	de 01       	movw	r26, r28
    14ca:	ab 5a       	subi	r26, 0xAB	; 171
    14cc:	bf 4f       	sbci	r27, 0xFF	; 255
    14ce:	fe 01       	movw	r30, r28
    14d0:	eb 5a       	subi	r30, 0xAB	; 171
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 81       	ld	r24, Z
    14d6:	91 81       	ldd	r25, Z+1	; 0x01
    14d8:	82 2b       	or	r24, r18
    14da:	93 2b       	or	r25, r19
    14dc:	8d 93       	st	X+, r24
    14de:	9c 93       	st	X, r25
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a0 e8       	ldi	r26, 0x80	; 128
    14e6:	bf e3       	ldi	r27, 0x3F	; 63
    14e8:	8b 87       	std	Y+11, r24	; 0x0b
    14ea:	9c 87       	std	Y+12, r25	; 0x0c
    14ec:	ad 87       	std	Y+13, r26	; 0x0d
    14ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	4a e7       	ldi	r20, 0x7A	; 122
    14fe:	55 e4       	ldi	r21, 0x45	; 69
    1500:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	8f 83       	std	Y+7, r24	; 0x07
    150a:	98 87       	std	Y+8, r25	; 0x08
    150c:	a9 87       	std	Y+9, r26	; 0x09
    150e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1510:	6f 81       	ldd	r22, Y+7	; 0x07
    1512:	78 85       	ldd	r23, Y+8	; 0x08
    1514:	89 85       	ldd	r24, Y+9	; 0x09
    1516:	9a 85       	ldd	r25, Y+10	; 0x0a
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e8       	ldi	r20, 0x80	; 128
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1524:	88 23       	and	r24, r24
    1526:	2c f4       	brge	.+10     	; 0x1532 <__stack+0x433>
		__ticks = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	8d 83       	std	Y+5, r24	; 0x05
    1530:	3f c0       	rjmp	.+126    	; 0x15b0 <__stack+0x4b1>
	else if (__tmp > 65535)
    1532:	6f 81       	ldd	r22, Y+7	; 0x07
    1534:	78 85       	ldd	r23, Y+8	; 0x08
    1536:	89 85       	ldd	r24, Y+9	; 0x09
    1538:	9a 85       	ldd	r25, Y+10	; 0x0a
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	4f e7       	ldi	r20, 0x7F	; 127
    1540:	57 e4       	ldi	r21, 0x47	; 71
    1542:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1546:	18 16       	cp	r1, r24
    1548:	4c f5       	brge	.+82     	; 0x159c <__stack+0x49d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154a:	6b 85       	ldd	r22, Y+11	; 0x0b
    154c:	7c 85       	ldd	r23, Y+12	; 0x0c
    154e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1550:	9e 85       	ldd	r25, Y+14	; 0x0e
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e2       	ldi	r20, 0x20	; 32
    1558:	51 e4       	ldi	r21, 0x41	; 65
    155a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9e 83       	std	Y+6, r25	; 0x06
    1570:	8d 83       	std	Y+5, r24	; 0x05
    1572:	0f c0       	rjmp	.+30     	; 0x1592 <__stack+0x493>
    1574:	80 e9       	ldi	r24, 0x90	; 144
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	9c 83       	std	Y+4, r25	; 0x04
    157a:	8b 83       	std	Y+3, r24	; 0x03
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <__stack+0x481>
    1584:	9c 83       	std	Y+4, r25	; 0x04
    1586:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	9e 83       	std	Y+6, r25	; 0x06
    1590:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	69 f7       	brne	.-38     	; 0x1574 <__stack+0x475>
    159a:	14 c0       	rjmp	.+40     	; 0x15c4 <__stack+0x4c5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159c:	6f 81       	ldd	r22, Y+7	; 0x07
    159e:	78 85       	ldd	r23, Y+8	; 0x08
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <__stack+0x4bd>
    15c0:	9a 83       	std	Y+2, r25	; 0x02
    15c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);	
	
	Data_ptr ->X_Axis= (X_Axis_Read);
    15c4:	fe 01       	movw	r30, r28
    15c6:	e7 5a       	subi	r30, 0xA7	; 167
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	cc 01       	movw	r24, r24
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	fe 01       	movw	r30, r28
    15e2:	e4 5a       	subi	r30, 0xA4	; 164
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	01 90       	ld	r0, Z+
    15e8:	f0 81       	ld	r31, Z
    15ea:	e0 2d       	mov	r30, r0
    15ec:	80 83       	st	Z, r24
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	a2 83       	std	Z+2, r26	; 0x02
    15f2:	b3 83       	std	Z+3, r27	; 0x03
	Data_ptr ->Y_Axis= (Y_Axis_Read);
    15f4:	fe 01       	movw	r30, r28
    15f6:	e9 5a       	subi	r30, 0xA9	; 169
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	80 81       	ld	r24, Z
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	cc 01       	movw	r24, r24
    1600:	a0 e0       	ldi	r26, 0x00	; 0
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	fe 01       	movw	r30, r28
    1612:	e4 5a       	subi	r30, 0xA4	; 164
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	01 90       	ld	r0, Z+
    1618:	f0 81       	ld	r31, Z
    161a:	e0 2d       	mov	r30, r0
    161c:	84 83       	std	Z+4, r24	; 0x04
    161e:	95 83       	std	Z+5, r25	; 0x05
    1620:	a6 83       	std	Z+6, r26	; 0x06
    1622:	b7 83       	std	Z+7, r27	; 0x07
	Data_ptr ->Z_Axis= (Z_Axis_Read);
    1624:	fe 01       	movw	r30, r28
    1626:	eb 5a       	subi	r30, 0xAB	; 171
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	cc 01       	movw	r24, r24
    1630:	a0 e0       	ldi	r26, 0x00	; 0
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	fe 01       	movw	r30, r28
    1642:	e4 5a       	subi	r30, 0xA4	; 164
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	01 90       	ld	r0, Z+
    1648:	f0 81       	ld	r31, Z
    164a:	e0 2d       	mov	r30, r0
    164c:	80 87       	std	Z+8, r24	; 0x08
    164e:	91 87       	std	Z+9, r25	; 0x09
    1650:	a2 87       	std	Z+10, r26	; 0x0a
    1652:	b3 87       	std	Z+11, r27	; 0x0b
}
    1654:	c3 5a       	subi	r28, 0xA3	; 163
    1656:	df 4f       	sbci	r29, 0xFF	; 255
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	1f 91       	pop	r17
    1668:	0f 91       	pop	r16
    166a:	08 95       	ret

0000166c <LCD_init>:


	#include "LCD.h"
	
	void LCD_init(void)
	{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
		/* Set The Control Pins Direction to OUtput */
		LCD_Control_reg_DIR |=(1<<E) | (1<<RW) | (1<<RS);
    1674:	a4 e3       	ldi	r26, 0x34	; 52
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e4 e3       	ldi	r30, 0x34	; 52
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	80 6e       	ori	r24, 0xE0	; 224
    1680:	8c 93       	st	X, r24
			LCD_Data_Reg_DIR =0xFF;
		#else
			
			#ifdef Upper_Data_port
				/* Set The Direction of The Upper Pins to OP*/
				LCD_Data_Reg_DIR |=(0xF0);
    1682:	aa e3       	ldi	r26, 0x3A	; 58
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	ea e3       	ldi	r30, 0x3A	; 58
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	80 6f       	ori	r24, 0xF0	; 240
    168e:	8c 93       	st	X, r24
			#else
				/* Set The Direction of The LOWER Pins to OP*/
				LCD_Data_Reg_DIR|=(0x0F);
			#endif
			Send_instruction(Return_Home);
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	0e 94 57 0b 	call	0x16ae	; 0x16ae <Send_instruction>
		#endif
		
		Send_instruction(Data_Set);
    1696:	88 e2       	ldi	r24, 0x28	; 40
    1698:	0e 94 57 0b 	call	0x16ae	; 0x16ae <Send_instruction>
		Send_instruction(Display_on);
    169c:	8c e0       	ldi	r24, 0x0C	; 12
    169e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <Send_instruction>
		Send_instruction(Clear_display);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <Send_instruction>
	}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <Send_instruction>:
	
	void Send_instruction(uint8 instruction)
	{
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	c3 56       	subi	r28, 0x63	; 99
    16bc:	d0 40       	sbci	r29, 0x00	; 0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	fe 01       	movw	r30, r28
    16ca:	ed 59       	subi	r30, 0x9D	; 157
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 83       	st	Z, r24
		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEAR_BIT(LCD_Control_reg_OP,RS);
    16d0:	a5 e3       	ldi	r26, 0x35	; 53
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e5 e3       	ldi	r30, 0x35	; 53
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	8f 7d       	andi	r24, 0xDF	; 223
    16dc:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_Control_reg_OP,RW);
    16de:	a5 e3       	ldi	r26, 0x35	; 53
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e5 e3       	ldi	r30, 0x35	; 53
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8f 7b       	andi	r24, 0xBF	; 191
    16ea:	8c 93       	st	X, r24
    16ec:	fe 01       	movw	r30, r28
    16ee:	e1 5a       	subi	r30, 0xA1	; 161
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a0 e8       	ldi	r26, 0x80	; 128
    16f8:	bf e3       	ldi	r27, 0x3F	; 63
    16fa:	80 83       	st	Z, r24
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	a2 83       	std	Z+2, r26	; 0x02
    1700:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1702:	8e 01       	movw	r16, r28
    1704:	05 5a       	subi	r16, 0xA5	; 165
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	fe 01       	movw	r30, r28
    170a:	e1 5a       	subi	r30, 0xA1	; 161
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	60 81       	ld	r22, Z
    1710:	71 81       	ldd	r23, Z+1	; 0x01
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	93 81       	ldd	r25, Z+3	; 0x03
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4a e7       	ldi	r20, 0x7A	; 122
    171c:	55 e4       	ldi	r21, 0x45	; 69
    171e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	f8 01       	movw	r30, r16
    1728:	80 83       	st	Z, r24
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	a2 83       	std	Z+2, r26	; 0x02
    172e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1730:	fe 01       	movw	r30, r28
    1732:	e5 5a       	subi	r30, 0xA5	; 165
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    174a:	88 23       	and	r24, r24
    174c:	44 f4       	brge	.+16     	; 0x175e <Send_instruction+0xb0>
		__ticks = 1;
    174e:	fe 01       	movw	r30, r28
    1750:	e7 5a       	subi	r30, 0xA7	; 167
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
    175c:	64 c0       	rjmp	.+200    	; 0x1826 <Send_instruction+0x178>
	else if (__tmp > 65535)
    175e:	fe 01       	movw	r30, r28
    1760:	e5 5a       	subi	r30, 0xA5	; 165
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	0c f0       	brlt	.+2      	; 0x177e <Send_instruction+0xd0>
    177c:	43 c0       	rjmp	.+134    	; 0x1804 <Send_instruction+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	fe 01       	movw	r30, r28
    1780:	e1 5a       	subi	r30, 0xA1	; 161
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e2       	ldi	r20, 0x20	; 32
    1792:	51 e4       	ldi	r21, 0x41	; 65
    1794:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	8e 01       	movw	r16, r28
    179e:	07 5a       	subi	r16, 0xA7	; 167
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	bc 01       	movw	r22, r24
    17a4:	cd 01       	movw	r24, r26
    17a6:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	f8 01       	movw	r30, r16
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	80 83       	st	Z, r24
    17b4:	1f c0       	rjmp	.+62     	; 0x17f4 <Send_instruction+0x146>
    17b6:	fe 01       	movw	r30, r28
    17b8:	e9 5a       	subi	r30, 0xA9	; 169
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 e9       	ldi	r24, 0x90	; 144
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    17c4:	fe 01       	movw	r30, r28
    17c6:	e9 5a       	subi	r30, 0xA9	; 169
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <Send_instruction+0x120>
    17d2:	fe 01       	movw	r30, r28
    17d4:	e9 5a       	subi	r30, 0xA9	; 169
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17dc:	de 01       	movw	r26, r28
    17de:	a7 5a       	subi	r26, 0xA7	; 167
    17e0:	bf 4f       	sbci	r27, 0xFF	; 255
    17e2:	fe 01       	movw	r30, r28
    17e4:	e7 5a       	subi	r30, 0xA7	; 167
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	11 96       	adiw	r26, 0x01	; 1
    17f0:	9c 93       	st	X, r25
    17f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f4:	fe 01       	movw	r30, r28
    17f6:	e7 5a       	subi	r30, 0xA7	; 167
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	d1 f6       	brne	.-76     	; 0x17b6 <Send_instruction+0x108>
    1802:	27 c0       	rjmp	.+78     	; 0x1852 <Send_instruction+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1804:	8e 01       	movw	r16, r28
    1806:	07 5a       	subi	r16, 0xA7	; 167
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	fe 01       	movw	r30, r28
    180c:	e5 5a       	subi	r30, 0xA5	; 165
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	f8 01       	movw	r30, r16
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
    1826:	de 01       	movw	r26, r28
    1828:	ab 5a       	subi	r26, 0xAB	; 171
    182a:	bf 4f       	sbci	r27, 0xFF	; 255
    182c:	fe 01       	movw	r30, r28
    182e:	e7 5a       	subi	r30, 0xA7	; 167
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	8d 93       	st	X+, r24
    1838:	9c 93       	st	X, r25
    183a:	fe 01       	movw	r30, r28
    183c:	eb 5a       	subi	r30, 0xAB	; 171
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <Send_instruction+0x196>
    1848:	fe 01       	movw	r30, r28
    184a:	eb 5a       	subi	r30, 0xAB	; 171
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	80 83       	st	Z, r24
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SET_BIT(LCD_Control_reg_OP,E);
    1852:	a5 e3       	ldi	r26, 0x35	; 53
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e5 e3       	ldi	r30, 0x35	; 53
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 68       	ori	r24, 0x80	; 128
    185e:	8c 93       	st	X, r24
    1860:	fe 01       	movw	r30, r28
    1862:	ef 5a       	subi	r30, 0xAF	; 175
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a0 e8       	ldi	r26, 0x80	; 128
    186c:	bf e3       	ldi	r27, 0x3F	; 63
    186e:	80 83       	st	Z, r24
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	a2 83       	std	Z+2, r26	; 0x02
    1874:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1876:	8e 01       	movw	r16, r28
    1878:	03 5b       	subi	r16, 0xB3	; 179
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	fe 01       	movw	r30, r28
    187e:	ef 5a       	subi	r30, 0xAF	; 175
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a e7       	ldi	r20, 0x7A	; 122
    1890:	55 e4       	ldi	r21, 0x45	; 69
    1892:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	f8 01       	movw	r30, r16
    189c:	80 83       	st	Z, r24
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	a2 83       	std	Z+2, r26	; 0x02
    18a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18a4:	fe 01       	movw	r30, r28
    18a6:	e3 5b       	subi	r30, 0xB3	; 179
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	60 81       	ld	r22, Z
    18ac:	71 81       	ldd	r23, Z+1	; 0x01
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	44 f4       	brge	.+16     	; 0x18d2 <Send_instruction+0x224>
		__ticks = 1;
    18c2:	fe 01       	movw	r30, r28
    18c4:	e5 5b       	subi	r30, 0xB5	; 181
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	80 83       	st	Z, r24
    18d0:	64 c0       	rjmp	.+200    	; 0x199a <Send_instruction+0x2ec>
	else if (__tmp > 65535)
    18d2:	fe 01       	movw	r30, r28
    18d4:	e3 5b       	subi	r30, 0xB3	; 179
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	0c f0       	brlt	.+2      	; 0x18f2 <Send_instruction+0x244>
    18f0:	43 c0       	rjmp	.+134    	; 0x1978 <Send_instruction+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f2:	fe 01       	movw	r30, r28
    18f4:	ef 5a       	subi	r30, 0xAF	; 175
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8e 01       	movw	r16, r28
    1912:	05 5b       	subi	r16, 0xB5	; 181
    1914:	1f 4f       	sbci	r17, 0xFF	; 255
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	f8 01       	movw	r30, r16
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	80 83       	st	Z, r24
    1928:	1f c0       	rjmp	.+62     	; 0x1968 <Send_instruction+0x2ba>
    192a:	fe 01       	movw	r30, r28
    192c:	e7 5b       	subi	r30, 0xB7	; 183
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 e9       	ldi	r24, 0x90	; 144
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	80 83       	st	Z, r24
    1938:	fe 01       	movw	r30, r28
    193a:	e7 5b       	subi	r30, 0xB7	; 183
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 81       	ld	r24, Z
    1940:	91 81       	ldd	r25, Z+1	; 0x01
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <Send_instruction+0x294>
    1946:	fe 01       	movw	r30, r28
    1948:	e7 5b       	subi	r30, 0xB7	; 183
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	de 01       	movw	r26, r28
    1952:	a5 5b       	subi	r26, 0xB5	; 181
    1954:	bf 4f       	sbci	r27, 0xFF	; 255
    1956:	fe 01       	movw	r30, r28
    1958:	e5 5b       	subi	r30, 0xB5	; 181
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	11 96       	adiw	r26, 0x01	; 1
    1964:	9c 93       	st	X, r25
    1966:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	fe 01       	movw	r30, r28
    196a:	e5 5b       	subi	r30, 0xB5	; 181
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	80 81       	ld	r24, Z
    1970:	91 81       	ldd	r25, Z+1	; 0x01
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	d1 f6       	brne	.-76     	; 0x192a <Send_instruction+0x27c>
    1976:	27 c0       	rjmp	.+78     	; 0x19c6 <Send_instruction+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1978:	8e 01       	movw	r16, r28
    197a:	05 5b       	subi	r16, 0xB5	; 181
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	e3 5b       	subi	r30, 0xB3	; 179
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	f8 01       	movw	r30, r16
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	80 83       	st	Z, r24
    199a:	de 01       	movw	r26, r28
    199c:	a9 5b       	subi	r26, 0xB9	; 185
    199e:	bf 4f       	sbci	r27, 0xFF	; 255
    19a0:	fe 01       	movw	r30, r28
    19a2:	e5 5b       	subi	r30, 0xB5	; 181
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	8d 93       	st	X+, r24
    19ac:	9c 93       	st	X, r25
    19ae:	fe 01       	movw	r30, r28
    19b0:	e9 5b       	subi	r30, 0xB9	; 185
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <Send_instruction+0x30a>
    19bc:	fe 01       	movw	r30, r28
    19be:	e9 5b       	subi	r30, 0xB9	; 185
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	80 83       	st	Z, r24
			_delay_ms(1); 
		#else 
			
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    19c6:	ab e3       	ldi	r26, 0x3B	; 59
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	eb e3       	ldi	r30, 0x3B	; 59
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8f 70       	andi	r24, 0x0F	; 15
    19d2:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= (instruction & 0xF0);
    19d4:	ab e3       	ldi	r26, 0x3B	; 59
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	eb e3       	ldi	r30, 0x3B	; 59
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	98 2f       	mov	r25, r24
    19e0:	fe 01       	movw	r30, r28
    19e2:	ed 59       	subi	r30, 0x9D	; 157
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	80 7f       	andi	r24, 0xF0	; 240
    19ea:	89 2b       	or	r24, r25
    19ec:	8c 93       	st	X, r24
    19ee:	fe 01       	movw	r30, r28
    19f0:	ed 5b       	subi	r30, 0xBD	; 189
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	a0 e8       	ldi	r26, 0x80	; 128
    19fa:	bf e3       	ldi	r27, 0x3F	; 63
    19fc:	80 83       	st	Z, r24
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	a2 83       	std	Z+2, r26	; 0x02
    1a02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a04:	8e 01       	movw	r16, r28
    1a06:	01 5c       	subi	r16, 0xC1	; 193
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ed 5b       	subi	r30, 0xBD	; 189
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	60 81       	ld	r22, Z
    1a12:	71 81       	ldd	r23, Z+1	; 0x01
    1a14:	82 81       	ldd	r24, Z+2	; 0x02
    1a16:	93 81       	ldd	r25, Z+3	; 0x03
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	4a e7       	ldi	r20, 0x7A	; 122
    1a1e:	55 e4       	ldi	r21, 0x45	; 69
    1a20:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	f8 01       	movw	r30, r16
    1a2a:	80 83       	st	Z, r24
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	a2 83       	std	Z+2, r26	; 0x02
    1a30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a32:	fe 01       	movw	r30, r28
    1a34:	ff 96       	adiw	r30, 0x3f	; 63
    1a36:	60 81       	ld	r22, Z
    1a38:	71 81       	ldd	r23, Z+1	; 0x01
    1a3a:	82 81       	ldd	r24, Z+2	; 0x02
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e8       	ldi	r20, 0x80	; 128
    1a44:	5f e3       	ldi	r21, 0x3F	; 63
    1a46:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1a4a:	88 23       	and	r24, r24
    1a4c:	2c f4       	brge	.+10     	; 0x1a58 <Send_instruction+0x3aa>
		__ticks = 1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9e af       	std	Y+62, r25	; 0x3e
    1a54:	8d af       	std	Y+61, r24	; 0x3d
    1a56:	46 c0       	rjmp	.+140    	; 0x1ae4 <Send_instruction+0x436>
	else if (__tmp > 65535)
    1a58:	fe 01       	movw	r30, r28
    1a5a:	ff 96       	adiw	r30, 0x3f	; 63
    1a5c:	60 81       	ld	r22, Z
    1a5e:	71 81       	ldd	r23, Z+1	; 0x01
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	3f ef       	ldi	r19, 0xFF	; 255
    1a68:	4f e7       	ldi	r20, 0x7F	; 127
    1a6a:	57 e4       	ldi	r21, 0x47	; 71
    1a6c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1a70:	18 16       	cp	r1, r24
    1a72:	64 f5       	brge	.+88     	; 0x1acc <Send_instruction+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a74:	fe 01       	movw	r30, r28
    1a76:	ed 5b       	subi	r30, 0xBD	; 189
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	60 81       	ld	r22, Z
    1a7c:	71 81       	ldd	r23, Z+1	; 0x01
    1a7e:	82 81       	ldd	r24, Z+2	; 0x02
    1a80:	93 81       	ldd	r25, Z+3	; 0x03
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9e af       	std	Y+62, r25	; 0x3e
    1aa0:	8d af       	std	Y+61, r24	; 0x3d
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <Send_instruction+0x414>
    1aa4:	80 e9       	ldi	r24, 0x90	; 144
    1aa6:	91 e0       	ldi	r25, 0x01	; 1
    1aa8:	9c af       	std	Y+60, r25	; 0x3c
    1aaa:	8b af       	std	Y+59, r24	; 0x3b
    1aac:	8b ad       	ldd	r24, Y+59	; 0x3b
    1aae:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <Send_instruction+0x402>
    1ab4:	9c af       	std	Y+60, r25	; 0x3c
    1ab6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aba:	9e ad       	ldd	r25, Y+62	; 0x3e
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9e af       	std	Y+62, r25	; 0x3e
    1ac0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ac4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	69 f7       	brne	.-38     	; 0x1aa4 <Send_instruction+0x3f6>
    1aca:	16 c0       	rjmp	.+44     	; 0x1af8 <Send_instruction+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1acc:	fe 01       	movw	r30, r28
    1ace:	ff 96       	adiw	r30, 0x3f	; 63
    1ad0:	60 81       	ld	r22, Z
    1ad2:	71 81       	ldd	r23, Z+1	; 0x01
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9e af       	std	Y+62, r25	; 0x3e
    1ae2:	8d af       	std	Y+61, r24	; 0x3d
    1ae4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ae6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ae8:	9a af       	std	Y+58, r25	; 0x3a
    1aea:	89 af       	std	Y+57, r24	; 0x39
    1aec:	89 ad       	ldd	r24, Y+57	; 0x39
    1aee:	9a ad       	ldd	r25, Y+58	; 0x3a
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <Send_instruction+0x442>
    1af4:	9a af       	std	Y+58, r25	; 0x3a
    1af6:	89 af       	std	Y+57, r24	; 0x39
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEAR_BIT(LCD_Control_reg_OP,E);
    1af8:	a5 e3       	ldi	r26, 0x35	; 53
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e5 e3       	ldi	r30, 0x35	; 53
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	8f 77       	andi	r24, 0x7F	; 127
    1b04:	8c 93       	st	X, r24
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	a0 e8       	ldi	r26, 0x80	; 128
    1b0c:	bf e3       	ldi	r27, 0x3F	; 63
    1b0e:	8d ab       	std	Y+53, r24	; 0x35
    1b10:	9e ab       	std	Y+54, r25	; 0x36
    1b12:	af ab       	std	Y+55, r26	; 0x37
    1b14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b16:	6d a9       	ldd	r22, Y+53	; 0x35
    1b18:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a e7       	ldi	r20, 0x7A	; 122
    1b24:	55 e4       	ldi	r21, 0x45	; 69
    1b26:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	89 ab       	std	Y+49, r24	; 0x31
    1b30:	9a ab       	std	Y+50, r25	; 0x32
    1b32:	ab ab       	std	Y+51, r26	; 0x33
    1b34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b36:	69 a9       	ldd	r22, Y+49	; 0x31
    1b38:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <Send_instruction+0x4aa>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	98 ab       	std	Y+48, r25	; 0x30
    1b54:	8f a7       	std	Y+47, r24	; 0x2f
    1b56:	3f c0       	rjmp	.+126    	; 0x1bd6 <Send_instruction+0x528>
	else if (__tmp > 65535)
    1b58:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	4c f5       	brge	.+82     	; 0x1bc2 <Send_instruction+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	6d a9       	ldd	r22, Y+53	; 0x35
    1b72:	7e a9       	ldd	r23, Y+54	; 0x36
    1b74:	8f a9       	ldd	r24, Y+55	; 0x37
    1b76:	98 ad       	ldd	r25, Y+56	; 0x38
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e2       	ldi	r20, 0x20	; 32
    1b7e:	51 e4       	ldi	r21, 0x41	; 65
    1b80:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	98 ab       	std	Y+48, r25	; 0x30
    1b96:	8f a7       	std	Y+47, r24	; 0x2f
    1b98:	0f c0       	rjmp	.+30     	; 0x1bb8 <Send_instruction+0x50a>
    1b9a:	80 e9       	ldi	r24, 0x90	; 144
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	9e a7       	std	Y+46, r25	; 0x2e
    1ba0:	8d a7       	std	Y+45, r24	; 0x2d
    1ba2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ba4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <Send_instruction+0x4f8>
    1baa:	9e a7       	std	Y+46, r25	; 0x2e
    1bac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	98 ab       	std	Y+48, r25	; 0x30
    1bb6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bba:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	69 f7       	brne	.-38     	; 0x1b9a <Send_instruction+0x4ec>
    1bc0:	14 c0       	rjmp	.+40     	; 0x1bea <Send_instruction+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bca:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	98 ab       	std	Y+48, r25	; 0x30
    1bd4:	8f a7       	std	Y+47, r24	; 0x2f
    1bd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bda:	9c a7       	std	Y+44, r25	; 0x2c
    1bdc:	8b a7       	std	Y+43, r24	; 0x2b
    1bde:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <Send_instruction+0x534>
    1be6:	9c a7       	std	Y+44, r25	; 0x2c
    1be8:	8b a7       	std	Y+43, r24	; 0x2b
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SET_BIT(LCD_Control_reg_OP,E);
    1bea:	a5 e3       	ldi	r26, 0x35	; 53
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e5 e3       	ldi	r30, 0x35	; 53
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	80 68       	ori	r24, 0x80	; 128
    1bf6:	8c 93       	st	X, r24
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a0 e8       	ldi	r26, 0x80	; 128
    1bfe:	bf e3       	ldi	r27, 0x3F	; 63
    1c00:	8f a3       	std	Y+39, r24	; 0x27
    1c02:	98 a7       	std	Y+40, r25	; 0x28
    1c04:	a9 a7       	std	Y+41, r26	; 0x29
    1c06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c08:	6f a1       	ldd	r22, Y+39	; 0x27
    1c0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a e7       	ldi	r20, 0x7A	; 122
    1c16:	55 e4       	ldi	r21, 0x45	; 69
    1c18:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8b a3       	std	Y+35, r24	; 0x23
    1c22:	9c a3       	std	Y+36, r25	; 0x24
    1c24:	ad a3       	std	Y+37, r26	; 0x25
    1c26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c28:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1c3c:	88 23       	and	r24, r24
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <Send_instruction+0x59c>
		__ticks = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9a a3       	std	Y+34, r25	; 0x22
    1c46:	89 a3       	std	Y+33, r24	; 0x21
    1c48:	3f c0       	rjmp	.+126    	; 0x1cc8 <Send_instruction+0x61a>
	else if (__tmp > 65535)
    1c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c50:	9e a1       	ldd	r25, Y+38	; 0x26
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1c5e:	18 16       	cp	r1, r24
    1c60:	4c f5       	brge	.+82     	; 0x1cb4 <Send_instruction+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	6f a1       	ldd	r22, Y+39	; 0x27
    1c64:	78 a5       	ldd	r23, Y+40	; 0x28
    1c66:	89 a5       	ldd	r24, Y+41	; 0x29
    1c68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9a a3       	std	Y+34, r25	; 0x22
    1c88:	89 a3       	std	Y+33, r24	; 0x21
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <Send_instruction+0x5fc>
    1c8c:	80 e9       	ldi	r24, 0x90	; 144
    1c8e:	91 e0       	ldi	r25, 0x01	; 1
    1c90:	98 a3       	std	Y+32, r25	; 0x20
    1c92:	8f 8f       	std	Y+31, r24	; 0x1f
    1c94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c96:	98 a1       	ldd	r25, Y+32	; 0x20
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <Send_instruction+0x5ea>
    1c9c:	98 a3       	std	Y+32, r25	; 0x20
    1c9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	9a a3       	std	Y+34, r25	; 0x22
    1ca8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cac:	9a a1       	ldd	r25, Y+34	; 0x22
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <Send_instruction+0x5de>
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <Send_instruction+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cba:	9e a1       	ldd	r25, Y+38	; 0x26
    1cbc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9a a3       	std	Y+34, r25	; 0x22
    1cc6:	89 a3       	std	Y+33, r24	; 0x21
    1cc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cca:	9a a1       	ldd	r25, Y+34	; 0x22
    1ccc:	9e 8f       	std	Y+30, r25	; 0x1e
    1cce:	8d 8f       	std	Y+29, r24	; 0x1d
    1cd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <Send_instruction+0x626>
    1cd8:	9e 8f       	std	Y+30, r25	; 0x1e
    1cda:	8d 8f       	std	Y+29, r24	; 0x1d
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    1cdc:	ab e3       	ldi	r26, 0x3B	; 59
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	eb e3       	ldi	r30, 0x3B	; 59
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8f 70       	andi	r24, 0x0F	; 15
    1ce8:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= ((instruction <<4) & 0xF0);
    1cea:	ab e3       	ldi	r26, 0x3B	; 59
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	eb e3       	ldi	r30, 0x3B	; 59
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ed 59       	subi	r30, 0x9D	; 157
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	82 95       	swap	r24
    1d04:	92 95       	swap	r25
    1d06:	90 7f       	andi	r25, 0xF0	; 240
    1d08:	98 27       	eor	r25, r24
    1d0a:	80 7f       	andi	r24, 0xF0	; 240
    1d0c:	98 27       	eor	r25, r24
    1d0e:	82 2b       	or	r24, r18
    1d10:	8c 93       	st	X, r24
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e8       	ldi	r26, 0x80	; 128
    1d18:	bf e3       	ldi	r27, 0x3F	; 63
    1d1a:	89 8f       	std	Y+25, r24	; 0x19
    1d1c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d1e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d22:	69 8d       	ldd	r22, Y+25	; 0x19
    1d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	4a e7       	ldi	r20, 0x7A	; 122
    1d30:	55 e4       	ldi	r21, 0x45	; 69
    1d32:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	8d 8b       	std	Y+21, r24	; 0x15
    1d3c:	9e 8b       	std	Y+22, r25	; 0x16
    1d3e:	af 8b       	std	Y+23, r26	; 0x17
    1d40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d42:	6d 89       	ldd	r22, Y+21	; 0x15
    1d44:	7e 89       	ldd	r23, Y+22	; 0x16
    1d46:	8f 89       	ldd	r24, Y+23	; 0x17
    1d48:	98 8d       	ldd	r25, Y+24	; 0x18
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e8       	ldi	r20, 0x80	; 128
    1d50:	5f e3       	ldi	r21, 0x3F	; 63
    1d52:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1d56:	88 23       	and	r24, r24
    1d58:	2c f4       	brge	.+10     	; 0x1d64 <Send_instruction+0x6b6>
		__ticks = 1;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9c 8b       	std	Y+20, r25	; 0x14
    1d60:	8b 8b       	std	Y+19, r24	; 0x13
    1d62:	3f c0       	rjmp	.+126    	; 0x1de2 <Send_instruction+0x734>
	else if (__tmp > 65535)
    1d64:	6d 89       	ldd	r22, Y+21	; 0x15
    1d66:	7e 89       	ldd	r23, Y+22	; 0x16
    1d68:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	3f ef       	ldi	r19, 0xFF	; 255
    1d70:	4f e7       	ldi	r20, 0x7F	; 127
    1d72:	57 e4       	ldi	r21, 0x47	; 71
    1d74:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1d78:	18 16       	cp	r1, r24
    1d7a:	4c f5       	brge	.+82     	; 0x1dce <Send_instruction+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e2       	ldi	r20, 0x20	; 32
    1d8a:	51 e4       	ldi	r21, 0x41	; 65
    1d8c:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	9c 8b       	std	Y+20, r25	; 0x14
    1da2:	8b 8b       	std	Y+19, r24	; 0x13
    1da4:	0f c0       	rjmp	.+30     	; 0x1dc4 <Send_instruction+0x716>
    1da6:	80 e9       	ldi	r24, 0x90	; 144
    1da8:	91 e0       	ldi	r25, 0x01	; 1
    1daa:	9a 8b       	std	Y+18, r25	; 0x12
    1dac:	89 8b       	std	Y+17, r24	; 0x11
    1dae:	89 89       	ldd	r24, Y+17	; 0x11
    1db0:	9a 89       	ldd	r25, Y+18	; 0x12
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <Send_instruction+0x704>
    1db6:	9a 8b       	std	Y+18, r25	; 0x12
    1db8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dba:	8b 89       	ldd	r24, Y+19	; 0x13
    1dbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	9c 8b       	std	Y+20, r25	; 0x14
    1dc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	69 f7       	brne	.-38     	; 0x1da6 <Send_instruction+0x6f8>
    1dcc:	14 c0       	rjmp	.+40     	; 0x1df6 <Send_instruction+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dce:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd6:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9c 8b       	std	Y+20, r25	; 0x14
    1de0:	8b 8b       	std	Y+19, r24	; 0x13
    1de2:	8b 89       	ldd	r24, Y+19	; 0x13
    1de4:	9c 89       	ldd	r25, Y+20	; 0x14
    1de6:	98 8b       	std	Y+16, r25	; 0x10
    1de8:	8f 87       	std	Y+15, r24	; 0x0f
    1dea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dec:	98 89       	ldd	r25, Y+16	; 0x10
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <Send_instruction+0x740>
    1df2:	98 8b       	std	Y+16, r25	; 0x10
    1df4:	8f 87       	std	Y+15, r24	; 0x0f
				LCD_Data_Reg_OP |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEAR_BIT(LCD_Control_reg_OP,E);
    1df6:	a5 e3       	ldi	r26, 0x35	; 53
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e5 e3       	ldi	r30, 0x35	; 53
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	8f 77       	andi	r24, 0x7F	; 127
    1e02:	8c 93       	st	X, r24
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a0 e8       	ldi	r26, 0x80	; 128
    1e0a:	bf e3       	ldi	r27, 0x3F	; 63
    1e0c:	8b 87       	std	Y+11, r24	; 0x0b
    1e0e:	9c 87       	std	Y+12, r25	; 0x0c
    1e10:	ad 87       	std	Y+13, r26	; 0x0d
    1e12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	4a e7       	ldi	r20, 0x7A	; 122
    1e22:	55 e4       	ldi	r21, 0x45	; 69
    1e24:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	8f 83       	std	Y+7, r24	; 0x07
    1e2e:	98 87       	std	Y+8, r25	; 0x08
    1e30:	a9 87       	std	Y+9, r26	; 0x09
    1e32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e34:	6f 81       	ldd	r22, Y+7	; 0x07
    1e36:	78 85       	ldd	r23, Y+8	; 0x08
    1e38:	89 85       	ldd	r24, Y+9	; 0x09
    1e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e8       	ldi	r20, 0x80	; 128
    1e42:	5f e3       	ldi	r21, 0x3F	; 63
    1e44:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <Send_instruction+0x7a8>
		__ticks = 1;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	8d 83       	std	Y+5, r24	; 0x05
    1e54:	3f c0       	rjmp	.+126    	; 0x1ed4 <Send_instruction+0x826>
	else if (__tmp > 65535)
    1e56:	6f 81       	ldd	r22, Y+7	; 0x07
    1e58:	78 85       	ldd	r23, Y+8	; 0x08
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	3f ef       	ldi	r19, 0xFF	; 255
    1e62:	4f e7       	ldi	r20, 0x7F	; 127
    1e64:	57 e4       	ldi	r21, 0x47	; 71
    1e66:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1e6a:	18 16       	cp	r1, r24
    1e6c:	4c f5       	brge	.+82     	; 0x1ec0 <Send_instruction+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e2       	ldi	r20, 0x20	; 32
    1e7c:	51 e4       	ldi	r21, 0x41	; 65
    1e7e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	8d 83       	std	Y+5, r24	; 0x05
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <Send_instruction+0x808>
    1e98:	80 e9       	ldi	r24, 0x90	; 144
    1e9a:	91 e0       	ldi	r25, 0x01	; 1
    1e9c:	9c 83       	std	Y+4, r25	; 0x04
    1e9e:	8b 83       	std	Y+3, r24	; 0x03
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <Send_instruction+0x7f6>
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eac:	8d 81       	ldd	r24, Y+5	; 0x05
    1eae:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	69 f7       	brne	.-38     	; 0x1e98 <Send_instruction+0x7ea>
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <Send_instruction+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <Send_instruction+0x832>
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
				/* Data Hold delay Th = 10ns */
				_delay_ms(1);
		#endif
	}
    1ee8:	cd 59       	subi	r28, 0x9D	; 157
    1eea:	df 4f       	sbci	r29, 0xFF	; 255
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	08 95       	ret

00001f00 <LCD_DisplayChar>:
	
	
	void LCD_DisplayChar(uint8 Data)
	{
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	c3 56       	subi	r28, 0x63	; 99
    1f0e:	d0 40       	sbci	r29, 0x00	; 0
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	ed 59       	subi	r30, 0x9D	; 157
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 83       	st	Z, r24
		/* RW  Should be 0  and RS should be 1 when Writing Data to LCD */
		SET_BIT(LCD_Control_reg_OP,RS);
    1f22:	a5 e3       	ldi	r26, 0x35	; 53
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e5 e3       	ldi	r30, 0x35	; 53
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	80 62       	ori	r24, 0x20	; 32
    1f2e:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_Control_reg_OP,RW);
    1f30:	a5 e3       	ldi	r26, 0x35	; 53
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e5 e3       	ldi	r30, 0x35	; 53
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8f 7b       	andi	r24, 0xBF	; 191
    1f3c:	8c 93       	st	X, r24
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e1 5a       	subi	r30, 0xA1	; 161
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e8       	ldi	r26, 0x80	; 128
    1f4a:	bf e3       	ldi	r27, 0x3F	; 63
    1f4c:	80 83       	st	Z, r24
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	a2 83       	std	Z+2, r26	; 0x02
    1f52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	8e 01       	movw	r16, r28
    1f56:	05 5a       	subi	r16, 0xA5	; 165
    1f58:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e1 5a       	subi	r30, 0xA1	; 161
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a e7       	ldi	r20, 0x7A	; 122
    1f6e:	55 e4       	ldi	r21, 0x45	; 69
    1f70:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	f8 01       	movw	r30, r16
    1f7a:	80 83       	st	Z, r24
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	a2 83       	std	Z+2, r26	; 0x02
    1f80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f82:	fe 01       	movw	r30, r28
    1f84:	e5 5a       	subi	r30, 0xA5	; 165
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	44 f4       	brge	.+16     	; 0x1fb0 <LCD_DisplayChar+0xb0>
		__ticks = 1;
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e7 5a       	subi	r30, 0xA7	; 167
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
    1fae:	64 c0       	rjmp	.+200    	; 0x2078 <LCD_DisplayChar+0x178>
	else if (__tmp > 65535)
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e5 5a       	subi	r30, 0xA5	; 165
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	0c f0       	brlt	.+2      	; 0x1fd0 <LCD_DisplayChar+0xd0>
    1fce:	43 c0       	rjmp	.+134    	; 0x2056 <LCD_DisplayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e1 5a       	subi	r30, 0xA1	; 161
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8e 01       	movw	r16, r28
    1ff0:	07 5a       	subi	r16, 0xA7	; 167
    1ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	cd 01       	movw	r24, r26
    1ff8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	f8 01       	movw	r30, r16
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
    2006:	1f c0       	rjmp	.+62     	; 0x2046 <LCD_DisplayChar+0x146>
    2008:	fe 01       	movw	r30, r28
    200a:	e9 5a       	subi	r30, 0xA9	; 169
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 e9       	ldi	r24, 0x90	; 144
    2010:	91 e0       	ldi	r25, 0x01	; 1
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	fe 01       	movw	r30, r28
    2018:	e9 5a       	subi	r30, 0xA9	; 169
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <LCD_DisplayChar+0x120>
    2024:	fe 01       	movw	r30, r28
    2026:	e9 5a       	subi	r30, 0xA9	; 169
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	de 01       	movw	r26, r28
    2030:	a7 5a       	subi	r26, 0xA7	; 167
    2032:	bf 4f       	sbci	r27, 0xFF	; 255
    2034:	fe 01       	movw	r30, r28
    2036:	e7 5a       	subi	r30, 0xA7	; 167
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 81       	ld	r24, Z
    203c:	91 81       	ldd	r25, Z+1	; 0x01
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	11 96       	adiw	r26, 0x01	; 1
    2042:	9c 93       	st	X, r25
    2044:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	fe 01       	movw	r30, r28
    2048:	e7 5a       	subi	r30, 0xA7	; 167
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 81       	ld	r24, Z
    204e:	91 81       	ldd	r25, Z+1	; 0x01
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	d1 f6       	brne	.-76     	; 0x2008 <LCD_DisplayChar+0x108>
    2054:	27 c0       	rjmp	.+78     	; 0x20a4 <LCD_DisplayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2056:	8e 01       	movw	r16, r28
    2058:	07 5a       	subi	r16, 0xA7	; 167
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
    205c:	fe 01       	movw	r30, r28
    205e:	e5 5a       	subi	r30, 0xA5	; 165
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	f8 01       	movw	r30, r16
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	80 83       	st	Z, r24
    2078:	de 01       	movw	r26, r28
    207a:	ab 5a       	subi	r26, 0xAB	; 171
    207c:	bf 4f       	sbci	r27, 0xFF	; 255
    207e:	fe 01       	movw	r30, r28
    2080:	e7 5a       	subi	r30, 0xA7	; 167
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 81       	ld	r24, Z
    2086:	91 81       	ldd	r25, Z+1	; 0x01
    2088:	8d 93       	st	X+, r24
    208a:	9c 93       	st	X, r25
    208c:	fe 01       	movw	r30, r28
    208e:	eb 5a       	subi	r30, 0xAB	; 171
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 81       	ld	r24, Z
    2094:	91 81       	ldd	r25, Z+1	; 0x01
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <LCD_DisplayChar+0x196>
    209a:	fe 01       	movw	r30, r28
    209c:	eb 5a       	subi	r30, 0xAB	; 171
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	80 83       	st	Z, r24
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		/* Enable LCD E=1 */
		SET_BIT(LCD_Control_reg_OP,E);
    20a4:	a5 e3       	ldi	r26, 0x35	; 53
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e5 e3       	ldi	r30, 0x35	; 53
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	80 68       	ori	r24, 0x80	; 128
    20b0:	8c 93       	st	X, r24
    20b2:	fe 01       	movw	r30, r28
    20b4:	ef 5a       	subi	r30, 0xAF	; 175
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e8       	ldi	r26, 0x80	; 128
    20be:	bf e3       	ldi	r27, 0x3F	; 63
    20c0:	80 83       	st	Z, r24
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	a2 83       	std	Z+2, r26	; 0x02
    20c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c8:	8e 01       	movw	r16, r28
    20ca:	03 5b       	subi	r16, 0xB3	; 179
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	fe 01       	movw	r30, r28
    20d0:	ef 5a       	subi	r30, 0xAF	; 175
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a e7       	ldi	r20, 0x7A	; 122
    20e2:	55 e4       	ldi	r21, 0x45	; 69
    20e4:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	f8 01       	movw	r30, r16
    20ee:	80 83       	st	Z, r24
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	a2 83       	std	Z+2, r26	; 0x02
    20f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20f6:	fe 01       	movw	r30, r28
    20f8:	e3 5b       	subi	r30, 0xB3	; 179
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	44 f4       	brge	.+16     	; 0x2124 <LCD_DisplayChar+0x224>
		__ticks = 1;
    2114:	fe 01       	movw	r30, r28
    2116:	e5 5b       	subi	r30, 0xB5	; 181
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	80 83       	st	Z, r24
    2122:	64 c0       	rjmp	.+200    	; 0x21ec <LCD_DisplayChar+0x2ec>
	else if (__tmp > 65535)
    2124:	fe 01       	movw	r30, r28
    2126:	e3 5b       	subi	r30, 0xB3	; 179
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	57 e4       	ldi	r21, 0x47	; 71
    213a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    213e:	18 16       	cp	r1, r24
    2140:	0c f0       	brlt	.+2      	; 0x2144 <LCD_DisplayChar+0x244>
    2142:	43 c0       	rjmp	.+134    	; 0x21ca <LCD_DisplayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	fe 01       	movw	r30, r28
    2146:	ef 5a       	subi	r30, 0xAF	; 175
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e2       	ldi	r20, 0x20	; 32
    2158:	51 e4       	ldi	r21, 0x41	; 65
    215a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8e 01       	movw	r16, r28
    2164:	05 5b       	subi	r16, 0xB5	; 181
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	f8 01       	movw	r30, r16
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
    217a:	1f c0       	rjmp	.+62     	; 0x21ba <LCD_DisplayChar+0x2ba>
    217c:	fe 01       	movw	r30, r28
    217e:	e7 5b       	subi	r30, 0xB7	; 183
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 e9       	ldi	r24, 0x90	; 144
    2184:	91 e0       	ldi	r25, 0x01	; 1
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	80 83       	st	Z, r24
    218a:	fe 01       	movw	r30, r28
    218c:	e7 5b       	subi	r30, 0xB7	; 183
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 81       	ld	r24, Z
    2192:	91 81       	ldd	r25, Z+1	; 0x01
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_DisplayChar+0x294>
    2198:	fe 01       	movw	r30, r28
    219a:	e7 5b       	subi	r30, 0xB7	; 183
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a2:	de 01       	movw	r26, r28
    21a4:	a5 5b       	subi	r26, 0xB5	; 181
    21a6:	bf 4f       	sbci	r27, 0xFF	; 255
    21a8:	fe 01       	movw	r30, r28
    21aa:	e5 5b       	subi	r30, 0xB5	; 181
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	91 81       	ldd	r25, Z+1	; 0x01
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	11 96       	adiw	r26, 0x01	; 1
    21b6:	9c 93       	st	X, r25
    21b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ba:	fe 01       	movw	r30, r28
    21bc:	e5 5b       	subi	r30, 0xB5	; 181
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	d1 f6       	brne	.-76     	; 0x217c <LCD_DisplayChar+0x27c>
    21c8:	27 c0       	rjmp	.+78     	; 0x2218 <LCD_DisplayChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ca:	8e 01       	movw	r16, r28
    21cc:	05 5b       	subi	r16, 0xB5	; 181
    21ce:	1f 4f       	sbci	r17, 0xFF	; 255
    21d0:	fe 01       	movw	r30, r28
    21d2:	e3 5b       	subi	r30, 0xB3	; 179
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	60 81       	ld	r22, Z
    21d8:	71 81       	ldd	r23, Z+1	; 0x01
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	f8 01       	movw	r30, r16
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
    21ec:	de 01       	movw	r26, r28
    21ee:	a9 5b       	subi	r26, 0xB9	; 185
    21f0:	bf 4f       	sbci	r27, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	e5 5b       	subi	r30, 0xB5	; 181
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	8d 93       	st	X+, r24
    21fe:	9c 93       	st	X, r25
    2200:	fe 01       	movw	r30, r28
    2202:	e9 5b       	subi	r30, 0xB9	; 185
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_DisplayChar+0x30a>
    220e:	fe 01       	movw	r30, r28
    2210:	e9 5b       	subi	r30, 0xB9	; 185
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	80 83       	st	Z, r24
		#if eight_bitdata
			LCD_Data_Reg_OP=Data;
		#else
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    2218:	ab e3       	ldi	r26, 0x3B	; 59
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	eb e3       	ldi	r30, 0x3B	; 59
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	8f 70       	andi	r24, 0x0F	; 15
    2224:	8c 93       	st	X, r24
				/* Send MSB (4-bits )*/
				LCD_Data_Reg_OP |= (Data & 0xF0);
    2226:	ab e3       	ldi	r26, 0x3B	; 59
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	eb e3       	ldi	r30, 0x3B	; 59
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	98 2f       	mov	r25, r24
    2232:	fe 01       	movw	r30, r28
    2234:	ed 59       	subi	r30, 0x9D	; 157
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	80 81       	ld	r24, Z
    223a:	80 7f       	andi	r24, 0xF0	; 240
    223c:	89 2b       	or	r24, r25
    223e:	8c 93       	st	X, r24
    2240:	fe 01       	movw	r30, r28
    2242:	ed 5b       	subi	r30, 0xBD	; 189
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	a0 e8       	ldi	r26, 0x80	; 128
    224c:	bf e3       	ldi	r27, 0x3F	; 63
    224e:	80 83       	st	Z, r24
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	a2 83       	std	Z+2, r26	; 0x02
    2254:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2256:	8e 01       	movw	r16, r28
    2258:	01 5c       	subi	r16, 0xC1	; 193
    225a:	1f 4f       	sbci	r17, 0xFF	; 255
    225c:	fe 01       	movw	r30, r28
    225e:	ed 5b       	subi	r30, 0xBD	; 189
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	60 81       	ld	r22, Z
    2264:	71 81       	ldd	r23, Z+1	; 0x01
    2266:	82 81       	ldd	r24, Z+2	; 0x02
    2268:	93 81       	ldd	r25, Z+3	; 0x03
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	4a e7       	ldi	r20, 0x7A	; 122
    2270:	55 e4       	ldi	r21, 0x45	; 69
    2272:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	f8 01       	movw	r30, r16
    227c:	80 83       	st	Z, r24
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	a2 83       	std	Z+2, r26	; 0x02
    2282:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2284:	fe 01       	movw	r30, r28
    2286:	ff 96       	adiw	r30, 0x3f	; 63
    2288:	60 81       	ld	r22, Z
    228a:	71 81       	ldd	r23, Z+1	; 0x01
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e8       	ldi	r20, 0x80	; 128
    2296:	5f e3       	ldi	r21, 0x3F	; 63
    2298:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    229c:	88 23       	and	r24, r24
    229e:	2c f4       	brge	.+10     	; 0x22aa <LCD_DisplayChar+0x3aa>
		__ticks = 1;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	9e af       	std	Y+62, r25	; 0x3e
    22a6:	8d af       	std	Y+61, r24	; 0x3d
    22a8:	46 c0       	rjmp	.+140    	; 0x2336 <LCD_DisplayChar+0x436>
	else if (__tmp > 65535)
    22aa:	fe 01       	movw	r30, r28
    22ac:	ff 96       	adiw	r30, 0x3f	; 63
    22ae:	60 81       	ld	r22, Z
    22b0:	71 81       	ldd	r23, Z+1	; 0x01
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	64 f5       	brge	.+88     	; 0x231e <LCD_DisplayChar+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	fe 01       	movw	r30, r28
    22c8:	ed 5b       	subi	r30, 0xBD	; 189
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e2       	ldi	r20, 0x20	; 32
    22da:	51 e4       	ldi	r21, 0x41	; 65
    22dc:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9e af       	std	Y+62, r25	; 0x3e
    22f2:	8d af       	std	Y+61, r24	; 0x3d
    22f4:	0f c0       	rjmp	.+30     	; 0x2314 <LCD_DisplayChar+0x414>
    22f6:	80 e9       	ldi	r24, 0x90	; 144
    22f8:	91 e0       	ldi	r25, 0x01	; 1
    22fa:	9c af       	std	Y+60, r25	; 0x3c
    22fc:	8b af       	std	Y+59, r24	; 0x3b
    22fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    2300:	9c ad       	ldd	r25, Y+60	; 0x3c
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCD_DisplayChar+0x402>
    2306:	9c af       	std	Y+60, r25	; 0x3c
    2308:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230a:	8d ad       	ldd	r24, Y+61	; 0x3d
    230c:	9e ad       	ldd	r25, Y+62	; 0x3e
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	9e af       	std	Y+62, r25	; 0x3e
    2312:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2314:	8d ad       	ldd	r24, Y+61	; 0x3d
    2316:	9e ad       	ldd	r25, Y+62	; 0x3e
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	69 f7       	brne	.-38     	; 0x22f6 <LCD_DisplayChar+0x3f6>
    231c:	16 c0       	rjmp	.+44     	; 0x234a <LCD_DisplayChar+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231e:	fe 01       	movw	r30, r28
    2320:	ff 96       	adiw	r30, 0x3f	; 63
    2322:	60 81       	ld	r22, Z
    2324:	71 81       	ldd	r23, Z+1	; 0x01
    2326:	82 81       	ldd	r24, Z+2	; 0x02
    2328:	93 81       	ldd	r25, Z+3	; 0x03
    232a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e af       	std	Y+62, r25	; 0x3e
    2334:	8d af       	std	Y+61, r24	; 0x3d
    2336:	8d ad       	ldd	r24, Y+61	; 0x3d
    2338:	9e ad       	ldd	r25, Y+62	; 0x3e
    233a:	9a af       	std	Y+58, r25	; 0x3a
    233c:	89 af       	std	Y+57, r24	; 0x39
    233e:	89 ad       	ldd	r24, Y+57	; 0x39
    2340:	9a ad       	ldd	r25, Y+58	; 0x3a
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <LCD_DisplayChar+0x442>
    2346:	9a af       	std	Y+58, r25	; 0x3a
    2348:	89 af       	std	Y+57, r24	; 0x39
			#endif
				
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
			/* disable LCD E=0 */
			CLEAR_BIT(LCD_Control_reg_OP,E);
    234a:	a5 e3       	ldi	r26, 0x35	; 53
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e5 e3       	ldi	r30, 0x35	; 53
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	8f 77       	andi	r24, 0x7F	; 127
    2356:	8c 93       	st	X, r24
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a0 e8       	ldi	r26, 0x80	; 128
    235e:	bf e3       	ldi	r27, 0x3F	; 63
    2360:	8d ab       	std	Y+53, r24	; 0x35
    2362:	9e ab       	std	Y+54, r25	; 0x36
    2364:	af ab       	std	Y+55, r26	; 0x37
    2366:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2368:	6d a9       	ldd	r22, Y+53	; 0x35
    236a:	7e a9       	ldd	r23, Y+54	; 0x36
    236c:	8f a9       	ldd	r24, Y+55	; 0x37
    236e:	98 ad       	ldd	r25, Y+56	; 0x38
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a e7       	ldi	r20, 0x7A	; 122
    2376:	55 e4       	ldi	r21, 0x45	; 69
    2378:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	89 ab       	std	Y+49, r24	; 0x31
    2382:	9a ab       	std	Y+50, r25	; 0x32
    2384:	ab ab       	std	Y+51, r26	; 0x33
    2386:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2388:	69 a9       	ldd	r22, Y+49	; 0x31
    238a:	7a a9       	ldd	r23, Y+50	; 0x32
    238c:	8b a9       	ldd	r24, Y+51	; 0x33
    238e:	9c a9       	ldd	r25, Y+52	; 0x34
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    239c:	88 23       	and	r24, r24
    239e:	2c f4       	brge	.+10     	; 0x23aa <LCD_DisplayChar+0x4aa>
		__ticks = 1;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	98 ab       	std	Y+48, r25	; 0x30
    23a6:	8f a7       	std	Y+47, r24	; 0x2f
    23a8:	3f c0       	rjmp	.+126    	; 0x2428 <LCD_DisplayChar+0x528>
	else if (__tmp > 65535)
    23aa:	69 a9       	ldd	r22, Y+49	; 0x31
    23ac:	7a a9       	ldd	r23, Y+50	; 0x32
    23ae:	8b a9       	ldd	r24, Y+51	; 0x33
    23b0:	9c a9       	ldd	r25, Y+52	; 0x34
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	3f ef       	ldi	r19, 0xFF	; 255
    23b6:	4f e7       	ldi	r20, 0x7F	; 127
    23b8:	57 e4       	ldi	r21, 0x47	; 71
    23ba:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    23be:	18 16       	cp	r1, r24
    23c0:	4c f5       	brge	.+82     	; 0x2414 <LCD_DisplayChar+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c2:	6d a9       	ldd	r22, Y+53	; 0x35
    23c4:	7e a9       	ldd	r23, Y+54	; 0x36
    23c6:	8f a9       	ldd	r24, Y+55	; 0x37
    23c8:	98 ad       	ldd	r25, Y+56	; 0x38
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e2       	ldi	r20, 0x20	; 32
    23d0:	51 e4       	ldi	r21, 0x41	; 65
    23d2:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	98 ab       	std	Y+48, r25	; 0x30
    23e8:	8f a7       	std	Y+47, r24	; 0x2f
    23ea:	0f c0       	rjmp	.+30     	; 0x240a <LCD_DisplayChar+0x50a>
    23ec:	80 e9       	ldi	r24, 0x90	; 144
    23ee:	91 e0       	ldi	r25, 0x01	; 1
    23f0:	9e a7       	std	Y+46, r25	; 0x2e
    23f2:	8d a7       	std	Y+45, r24	; 0x2d
    23f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    23f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <LCD_DisplayChar+0x4f8>
    23fc:	9e a7       	std	Y+46, r25	; 0x2e
    23fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2400:	8f a5       	ldd	r24, Y+47	; 0x2f
    2402:	98 a9       	ldd	r25, Y+48	; 0x30
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	98 ab       	std	Y+48, r25	; 0x30
    2408:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240a:	8f a5       	ldd	r24, Y+47	; 0x2f
    240c:	98 a9       	ldd	r25, Y+48	; 0x30
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	69 f7       	brne	.-38     	; 0x23ec <LCD_DisplayChar+0x4ec>
    2412:	14 c0       	rjmp	.+40     	; 0x243c <LCD_DisplayChar+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2414:	69 a9       	ldd	r22, Y+49	; 0x31
    2416:	7a a9       	ldd	r23, Y+50	; 0x32
    2418:	8b a9       	ldd	r24, Y+51	; 0x33
    241a:	9c a9       	ldd	r25, Y+52	; 0x34
    241c:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	98 ab       	std	Y+48, r25	; 0x30
    2426:	8f a7       	std	Y+47, r24	; 0x2f
    2428:	8f a5       	ldd	r24, Y+47	; 0x2f
    242a:	98 a9       	ldd	r25, Y+48	; 0x30
    242c:	9c a7       	std	Y+44, r25	; 0x2c
    242e:	8b a7       	std	Y+43, r24	; 0x2b
    2430:	8b a5       	ldd	r24, Y+43	; 0x2b
    2432:	9c a5       	ldd	r25, Y+44	; 0x2c
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_DisplayChar+0x534>
    2438:	9c a7       	std	Y+44, r25	; 0x2c
    243a:	8b a7       	std	Y+43, r24	; 0x2b
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			/* Enable LCD E=1 */
			SET_BIT(LCD_Control_reg_OP,E); 
    243c:	a5 e3       	ldi	r26, 0x35	; 53
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e5 e3       	ldi	r30, 0x35	; 53
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	80 68       	ori	r24, 0x80	; 128
    2448:	8c 93       	st	X, r24
				
			#ifdef Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
    244a:	ab e3       	ldi	r26, 0x3B	; 59
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	eb e3       	ldi	r30, 0x3B	; 59
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	8f 70       	andi	r24, 0x0F	; 15
    2456:	8c 93       	st	X, r24
				LCD_Data_Reg_OP |= ((Data <<4) & 0xF0);
    2458:	ab e3       	ldi	r26, 0x3B	; 59
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	eb e3       	ldi	r30, 0x3B	; 59
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	28 2f       	mov	r18, r24
    2464:	fe 01       	movw	r30, r28
    2466:	ed 59       	subi	r30, 0x9D	; 157
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	82 95       	swap	r24
    2472:	92 95       	swap	r25
    2474:	90 7f       	andi	r25, 0xF0	; 240
    2476:	98 27       	eor	r25, r24
    2478:	80 7f       	andi	r24, 0xF0	; 240
    247a:	98 27       	eor	r25, r24
    247c:	82 2b       	or	r24, r18
    247e:	8c 93       	st	X, r24
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a0 e8       	ldi	r26, 0x80	; 128
    2486:	bf e3       	ldi	r27, 0x3F	; 63
    2488:	8f a3       	std	Y+39, r24	; 0x27
    248a:	98 a7       	std	Y+40, r25	; 0x28
    248c:	a9 a7       	std	Y+41, r26	; 0x29
    248e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2490:	6f a1       	ldd	r22, Y+39	; 0x27
    2492:	78 a5       	ldd	r23, Y+40	; 0x28
    2494:	89 a5       	ldd	r24, Y+41	; 0x29
    2496:	9a a5       	ldd	r25, Y+42	; 0x2a
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4a e7       	ldi	r20, 0x7A	; 122
    249e:	55 e4       	ldi	r21, 0x45	; 69
    24a0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8b a3       	std	Y+35, r24	; 0x23
    24aa:	9c a3       	std	Y+36, r25	; 0x24
    24ac:	ad a3       	std	Y+37, r26	; 0x25
    24ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24b0:	6b a1       	ldd	r22, Y+35	; 0x23
    24b2:	7c a1       	ldd	r23, Y+36	; 0x24
    24b4:	8d a1       	ldd	r24, Y+37	; 0x25
    24b6:	9e a1       	ldd	r25, Y+38	; 0x26
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	2c f4       	brge	.+10     	; 0x24d2 <LCD_DisplayChar+0x5d2>
		__ticks = 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9a a3       	std	Y+34, r25	; 0x22
    24ce:	89 a3       	std	Y+33, r24	; 0x21
    24d0:	3f c0       	rjmp	.+126    	; 0x2550 <LCD_DisplayChar+0x650>
	else if (__tmp > 65535)
    24d2:	6b a1       	ldd	r22, Y+35	; 0x23
    24d4:	7c a1       	ldd	r23, Y+36	; 0x24
    24d6:	8d a1       	ldd	r24, Y+37	; 0x25
    24d8:	9e a1       	ldd	r25, Y+38	; 0x26
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	3f ef       	ldi	r19, 0xFF	; 255
    24de:	4f e7       	ldi	r20, 0x7F	; 127
    24e0:	57 e4       	ldi	r21, 0x47	; 71
    24e2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	4c f5       	brge	.+82     	; 0x253c <LCD_DisplayChar+0x63c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ea:	6f a1       	ldd	r22, Y+39	; 0x27
    24ec:	78 a5       	ldd	r23, Y+40	; 0x28
    24ee:	89 a5       	ldd	r24, Y+41	; 0x29
    24f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9a a3       	std	Y+34, r25	; 0x22
    2510:	89 a3       	std	Y+33, r24	; 0x21
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <LCD_DisplayChar+0x632>
    2514:	80 e9       	ldi	r24, 0x90	; 144
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	98 a3       	std	Y+32, r25	; 0x20
    251a:	8f 8f       	std	Y+31, r24	; 0x1f
    251c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    251e:	98 a1       	ldd	r25, Y+32	; 0x20
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <LCD_DisplayChar+0x620>
    2524:	98 a3       	std	Y+32, r25	; 0x20
    2526:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	89 a1       	ldd	r24, Y+33	; 0x21
    252a:	9a a1       	ldd	r25, Y+34	; 0x22
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	9a a3       	std	Y+34, r25	; 0x22
    2530:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2532:	89 a1       	ldd	r24, Y+33	; 0x21
    2534:	9a a1       	ldd	r25, Y+34	; 0x22
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	69 f7       	brne	.-38     	; 0x2514 <LCD_DisplayChar+0x614>
    253a:	14 c0       	rjmp	.+40     	; 0x2564 <LCD_DisplayChar+0x664>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253c:	6b a1       	ldd	r22, Y+35	; 0x23
    253e:	7c a1       	ldd	r23, Y+36	; 0x24
    2540:	8d a1       	ldd	r24, Y+37	; 0x25
    2542:	9e a1       	ldd	r25, Y+38	; 0x26
    2544:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9a a3       	std	Y+34, r25	; 0x22
    254e:	89 a3       	std	Y+33, r24	; 0x21
    2550:	89 a1       	ldd	r24, Y+33	; 0x21
    2552:	9a a1       	ldd	r25, Y+34	; 0x22
    2554:	9e 8f       	std	Y+30, r25	; 0x1e
    2556:	8d 8f       	std	Y+29, r24	; 0x1d
    2558:	8d 8d       	ldd	r24, Y+29	; 0x1d
    255a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <LCD_DisplayChar+0x65c>
    2560:	9e 8f       	std	Y+30, r25	; 0x1e
    2562:	8d 8f       	std	Y+29, r24	; 0x1d
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a0 e8       	ldi	r26, 0x80	; 128
    256a:	bf e3       	ldi	r27, 0x3F	; 63
    256c:	89 8f       	std	Y+25, r24	; 0x19
    256e:	9a 8f       	std	Y+26, r25	; 0x1a
    2570:	ab 8f       	std	Y+27, r26	; 0x1b
    2572:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2574:	69 8d       	ldd	r22, Y+25	; 0x19
    2576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4a e7       	ldi	r20, 0x7A	; 122
    2582:	55 e4       	ldi	r21, 0x45	; 69
    2584:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8d 8b       	std	Y+21, r24	; 0x15
    258e:	9e 8b       	std	Y+22, r25	; 0x16
    2590:	af 8b       	std	Y+23, r26	; 0x17
    2592:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2594:	6d 89       	ldd	r22, Y+21	; 0x15
    2596:	7e 89       	ldd	r23, Y+22	; 0x16
    2598:	8f 89       	ldd	r24, Y+23	; 0x17
    259a:	98 8d       	ldd	r25, Y+24	; 0x18
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e8       	ldi	r20, 0x80	; 128
    25a2:	5f e3       	ldi	r21, 0x3F	; 63
    25a4:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    25a8:	88 23       	and	r24, r24
    25aa:	2c f4       	brge	.+10     	; 0x25b6 <LCD_DisplayChar+0x6b6>
		__ticks = 1;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	9c 8b       	std	Y+20, r25	; 0x14
    25b2:	8b 8b       	std	Y+19, r24	; 0x13
    25b4:	3f c0       	rjmp	.+126    	; 0x2634 <LCD_DisplayChar+0x734>
	else if (__tmp > 65535)
    25b6:	6d 89       	ldd	r22, Y+21	; 0x15
    25b8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ba:	8f 89       	ldd	r24, Y+23	; 0x17
    25bc:	98 8d       	ldd	r25, Y+24	; 0x18
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	3f ef       	ldi	r19, 0xFF	; 255
    25c2:	4f e7       	ldi	r20, 0x7F	; 127
    25c4:	57 e4       	ldi	r21, 0x47	; 71
    25c6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    25ca:	18 16       	cp	r1, r24
    25cc:	4c f5       	brge	.+82     	; 0x2620 <LCD_DisplayChar+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ce:	69 8d       	ldd	r22, Y+25	; 0x19
    25d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e2       	ldi	r20, 0x20	; 32
    25dc:	51 e4       	ldi	r21, 0x41	; 65
    25de:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9c 8b       	std	Y+20, r25	; 0x14
    25f4:	8b 8b       	std	Y+19, r24	; 0x13
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <LCD_DisplayChar+0x716>
    25f8:	80 e9       	ldi	r24, 0x90	; 144
    25fa:	91 e0       	ldi	r25, 0x01	; 1
    25fc:	9a 8b       	std	Y+18, r25	; 0x12
    25fe:	89 8b       	std	Y+17, r24	; 0x11
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_DisplayChar+0x704>
    2608:	9a 8b       	std	Y+18, r25	; 0x12
    260a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260c:	8b 89       	ldd	r24, Y+19	; 0x13
    260e:	9c 89       	ldd	r25, Y+20	; 0x14
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	9c 8b       	std	Y+20, r25	; 0x14
    2614:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2616:	8b 89       	ldd	r24, Y+19	; 0x13
    2618:	9c 89       	ldd	r25, Y+20	; 0x14
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	69 f7       	brne	.-38     	; 0x25f8 <LCD_DisplayChar+0x6f8>
    261e:	14 c0       	rjmp	.+40     	; 0x2648 <LCD_DisplayChar+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2620:	6d 89       	ldd	r22, Y+21	; 0x15
    2622:	7e 89       	ldd	r23, Y+22	; 0x16
    2624:	8f 89       	ldd	r24, Y+23	; 0x17
    2626:	98 8d       	ldd	r25, Y+24	; 0x18
    2628:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9c 8b       	std	Y+20, r25	; 0x14
    2632:	8b 8b       	std	Y+19, r24	; 0x13
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	98 8b       	std	Y+16, r25	; 0x10
    263a:	8f 87       	std	Y+15, r24	; 0x0f
    263c:	8f 85       	ldd	r24, Y+15	; 0x0f
    263e:	98 89       	ldd	r25, Y+16	; 0x10
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <LCD_DisplayChar+0x740>
    2644:	98 8b       	std	Y+16, r25	; 0x10
    2646:	8f 87       	std	Y+15, r24	; 0x0f
			
			#endif
		/* Data set-up time delay  Tdsw = 195 ns */
		_delay_ms(1);
		/* disable LCD E=0 */
		CLEAR_BIT(LCD_Control_reg_OP,E);						
    2648:	a5 e3       	ldi	r26, 0x35	; 53
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e5 e3       	ldi	r30, 0x35	; 53
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	8f 77       	andi	r24, 0x7F	; 127
    2654:	8c 93       	st	X, r24
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	a0 e8       	ldi	r26, 0x80	; 128
    265c:	bf e3       	ldi	r27, 0x3F	; 63
    265e:	8b 87       	std	Y+11, r24	; 0x0b
    2660:	9c 87       	std	Y+12, r25	; 0x0c
    2662:	ad 87       	std	Y+13, r26	; 0x0d
    2664:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2666:	6b 85       	ldd	r22, Y+11	; 0x0b
    2668:	7c 85       	ldd	r23, Y+12	; 0x0c
    266a:	8d 85       	ldd	r24, Y+13	; 0x0d
    266c:	9e 85       	ldd	r25, Y+14	; 0x0e
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	4a e7       	ldi	r20, 0x7A	; 122
    2674:	55 e4       	ldi	r21, 0x45	; 69
    2676:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	8f 83       	std	Y+7, r24	; 0x07
    2680:	98 87       	std	Y+8, r25	; 0x08
    2682:	a9 87       	std	Y+9, r26	; 0x09
    2684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2686:	6f 81       	ldd	r22, Y+7	; 0x07
    2688:	78 85       	ldd	r23, Y+8	; 0x08
    268a:	89 85       	ldd	r24, Y+9	; 0x09
    268c:	9a 85       	ldd	r25, Y+10	; 0x0a
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e8       	ldi	r20, 0x80	; 128
    2694:	5f e3       	ldi	r21, 0x3F	; 63
    2696:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    269a:	88 23       	and	r24, r24
    269c:	2c f4       	brge	.+10     	; 0x26a8 <LCD_DisplayChar+0x7a8>
		__ticks = 1;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9e 83       	std	Y+6, r25	; 0x06
    26a4:	8d 83       	std	Y+5, r24	; 0x05
    26a6:	3f c0       	rjmp	.+126    	; 0x2726 <LCD_DisplayChar+0x826>
	else if (__tmp > 65535)
    26a8:	6f 81       	ldd	r22, Y+7	; 0x07
    26aa:	78 85       	ldd	r23, Y+8	; 0x08
    26ac:	89 85       	ldd	r24, Y+9	; 0x09
    26ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	3f ef       	ldi	r19, 0xFF	; 255
    26b4:	4f e7       	ldi	r20, 0x7F	; 127
    26b6:	57 e4       	ldi	r21, 0x47	; 71
    26b8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    26bc:	18 16       	cp	r1, r24
    26be:	4c f5       	brge	.+82     	; 0x2712 <LCD_DisplayChar+0x812>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e2       	ldi	r20, 0x20	; 32
    26ce:	51 e4       	ldi	r21, 0x41	; 65
    26d0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	bc 01       	movw	r22, r24
    26da:	cd 01       	movw	r24, r26
    26dc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	9e 83       	std	Y+6, r25	; 0x06
    26e6:	8d 83       	std	Y+5, r24	; 0x05
    26e8:	0f c0       	rjmp	.+30     	; 0x2708 <LCD_DisplayChar+0x808>
    26ea:	80 e9       	ldi	r24, 0x90	; 144
    26ec:	91 e0       	ldi	r25, 0x01	; 1
    26ee:	9c 83       	std	Y+4, r25	; 0x04
    26f0:	8b 83       	std	Y+3, r24	; 0x03
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <LCD_DisplayChar+0x7f6>
    26fa:	9c 83       	std	Y+4, r25	; 0x04
    26fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	9e 81       	ldd	r25, Y+6	; 0x06
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	9e 83       	std	Y+6, r25	; 0x06
    2706:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2708:	8d 81       	ldd	r24, Y+5	; 0x05
    270a:	9e 81       	ldd	r25, Y+6	; 0x06
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	69 f7       	brne	.-38     	; 0x26ea <LCD_DisplayChar+0x7ea>
    2710:	14 c0       	rjmp	.+40     	; 0x273a <LCD_DisplayChar+0x83a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2712:	6f 81       	ldd	r22, Y+7	; 0x07
    2714:	78 85       	ldd	r23, Y+8	; 0x08
    2716:	89 85       	ldd	r24, Y+9	; 0x09
    2718:	9a 85       	ldd	r25, Y+10	; 0x0a
    271a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9e 83       	std	Y+6, r25	; 0x06
    2724:	8d 83       	std	Y+5, r24	; 0x05
    2726:	8d 81       	ldd	r24, Y+5	; 0x05
    2728:	9e 81       	ldd	r25, Y+6	; 0x06
    272a:	9a 83       	std	Y+2, r25	; 0x02
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	9a 81       	ldd	r25, Y+2	; 0x02
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <LCD_DisplayChar+0x832>
    2736:	9a 83       	std	Y+2, r25	; 0x02
    2738:	89 83       	std	Y+1, r24	; 0x01
		/* Data Hold delay Th = 10ns */
		_delay_ms(1);
		
	}
    273a:	cd 59       	subi	r28, 0x9D	; 157
    273c:	df 4f       	sbci	r29, 0xFF	; 255
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	08 95       	ret

00002752 <LCD_Clear>:
	
	void LCD_Clear(void)
	{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
		/* Clear Screen */
		Send_instruction(Clear_display); 
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <Send_instruction>
	}
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <LCD_DisplayString>:
	
	
	void LCD_DisplayString(char * ptr)
	{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	00 d0       	rcall	.+0      	; 0x276c <LCD_DisplayString+0x6>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	0a c0       	rjmp	.+20     	; 0x278a <LCD_DisplayString+0x24>
		while(*ptr != '\0')
		{
			LCD_DisplayChar(*ptr);
    2776:	e9 81       	ldd	r30, Y+1	; 0x01
    2778:	fa 81       	ldd	r31, Y+2	; 0x02
    277a:	80 81       	ld	r24, Z
    277c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_DisplayChar>
			ptr++;
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	9a 81       	ldd	r25, Y+2	; 0x02
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	9a 83       	std	Y+2, r25	; 0x02
    2788:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
    278a:	e9 81       	ldd	r30, Y+1	; 0x01
    278c:	fa 81       	ldd	r31, Y+2	; 0x02
    278e:	80 81       	ld	r24, Z
    2790:	88 23       	and	r24, r24
    2792:	89 f7       	brne	.-30     	; 0x2776 <LCD_DisplayString+0x10>
		{
			LCD_DisplayChar(*ptr);
			ptr++;
		}
	}
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <LCD_Select_RowCol>:
	
	void LCD_Select_RowCol(uint8 Row , uint8 col)
	{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <LCD_Select_RowCol+0x6>
    27a4:	00 d0       	rcall	.+0      	; 0x27a6 <LCD_Select_RowCol+0x8>
    27a6:	0f 92       	push	r0
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	8a 83       	std	Y+2, r24	; 0x02
    27ae:	6b 83       	std	Y+3, r22	; 0x03
		uint8 Address=0;
    27b0:	19 82       	std	Y+1, r1	; 0x01
		
		switch(Row)
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	3d 83       	std	Y+5, r19	; 0x05
    27ba:	2c 83       	std	Y+4, r18	; 0x04
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	9d 81       	ldd	r25, Y+5	; 0x05
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	91 05       	cpc	r25, r1
    27c4:	c1 f0       	breq	.+48     	; 0x27f6 <LCD_Select_RowCol+0x58>
    27c6:	2c 81       	ldd	r18, Y+4	; 0x04
    27c8:	3d 81       	ldd	r19, Y+5	; 0x05
    27ca:	22 30       	cpi	r18, 0x02	; 2
    27cc:	31 05       	cpc	r19, r1
    27ce:	2c f4       	brge	.+10     	; 0x27da <LCD_Select_RowCol+0x3c>
    27d0:	8c 81       	ldd	r24, Y+4	; 0x04
    27d2:	9d 81       	ldd	r25, Y+5	; 0x05
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	61 f0       	breq	.+24     	; 0x27f0 <LCD_Select_RowCol+0x52>
    27d8:	19 c0       	rjmp	.+50     	; 0x280c <LCD_Select_RowCol+0x6e>
    27da:	2c 81       	ldd	r18, Y+4	; 0x04
    27dc:	3d 81       	ldd	r19, Y+5	; 0x05
    27de:	22 30       	cpi	r18, 0x02	; 2
    27e0:	31 05       	cpc	r19, r1
    27e2:	69 f0       	breq	.+26     	; 0x27fe <LCD_Select_RowCol+0x60>
    27e4:	8c 81       	ldd	r24, Y+4	; 0x04
    27e6:	9d 81       	ldd	r25, Y+5	; 0x05
    27e8:	83 30       	cpi	r24, 0x03	; 3
    27ea:	91 05       	cpc	r25, r1
    27ec:	61 f0       	breq	.+24     	; 0x2806 <LCD_Select_RowCol+0x68>
    27ee:	0e c0       	rjmp	.+28     	; 0x280c <LCD_Select_RowCol+0x6e>
		{
			case 0:
					/* When Writing To LCD 1st Col The Base Address is 0x00 */
						Address=col | LCD_1ST_BASE;
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	89 83       	std	Y+1, r24	; 0x01
    27f4:	0b c0       	rjmp	.+22     	; 0x280c <LCD_Select_RowCol+0x6e>
						break;
			case 1:
					/* When Writing To LCD 2nd Col The Base Address is 0x40 */
						Address=col | LCD_2ND_BASE;
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	80 64       	ori	r24, 0x40	; 64
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	07 c0       	rjmp	.+14     	; 0x280c <LCD_Select_RowCol+0x6e>
						break;
			case 2:
					/* When Writing To LCD 1st Col The Base Address is 0x10 */
						Address = col | LCD_3RD_BASE;
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	80 61       	ori	r24, 0x10	; 16
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	03 c0       	rjmp	.+6      	; 0x280c <LCD_Select_RowCol+0x6e>
						break;
			case 3:
					/* When Writing To LCD 1st Col The Base Address is 0x50 */
						Address=col| LCD_4TH_BASE;
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	80 65       	ori	r24, 0x50	; 80
    280a:	89 83       	std	Y+1, r24	; 0x01
						break;		
		}
		
		Send_instruction(DDRAM_CONST|Address);
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	80 68       	ori	r24, 0x80	; 128
    2810:	0e 94 57 0b 	call	0x16ae	; 0x16ae <Send_instruction>
	}
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <LCD_DisplayInt>:
	
	
	void LCD_DisplayInt(sint32 data)
	{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	65 97       	sbiw	r28, 0x15	; 21
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61
    2838:	6a 8b       	std	Y+18, r22	; 0x12
    283a:	7b 8b       	std	Y+19, r23	; 0x13
    283c:	8c 8b       	std	Y+20, r24	; 0x14
    283e:	9d 8b       	std	Y+21, r25	; 0x15
		/* String to hold the ascii result */
		char Result[17]; 
		 /* 10 for decimal */
		itoa(data,Result,10);
    2840:	8a 89       	ldd	r24, Y+18	; 0x12
    2842:	9b 89       	ldd	r25, Y+19	; 0x13
    2844:	9e 01       	movw	r18, r28
    2846:	2f 5f       	subi	r18, 0xFF	; 255
    2848:	3f 4f       	sbci	r19, 0xFF	; 255
    284a:	b9 01       	movw	r22, r18
    284c:	4a e0       	ldi	r20, 0x0A	; 10
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <itoa>
		/* Display The Result */
		LCD_DisplayString(Result);
    2854:	ce 01       	movw	r24, r28
    2856:	01 96       	adiw	r24, 0x01	; 1
    2858:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_DisplayString>
	}
    285c:	65 96       	adiw	r28, 0x15	; 21
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <TWI_Init>:

#include "i2c.h"
#include "LCD.h"

void TWI_Init(I2C_Prescaler Prescale , I2C_interruptState int_state , uint32 F_SCL , uint8 Address)
{
    286e:	0f 93       	push	r16
    2870:	1f 93       	push	r17
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	29 97       	sbiw	r28, 0x09	; 9
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	6a 83       	std	Y+2, r22	; 0x02
    288a:	2b 83       	std	Y+3, r18	; 0x03
    288c:	3c 83       	std	Y+4, r19	; 0x04
    288e:	4d 83       	std	Y+5, r20	; 0x05
    2890:	5e 83       	std	Y+6, r21	; 0x06
    2892:	0f 83       	std	Y+7, r16	; 0x07
	TWAR = Address<<1;
    2894:	e2 e7       	ldi	r30, 0x72	; 114
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	8f 81       	ldd	r24, Y+7	; 0x07
    289a:	88 0f       	add	r24, r24
    289c:	80 83       	st	Z, r24
	 /*  Calculating Bit Rate: */
	switch (Prescale)
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	28 2f       	mov	r18, r24
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	39 87       	std	Y+9, r19	; 0x09
    28a6:	28 87       	std	Y+8, r18	; 0x08
    28a8:	88 85       	ldd	r24, Y+8	; 0x08
    28aa:	99 85       	ldd	r25, Y+9	; 0x09
    28ac:	81 30       	cpi	r24, 0x01	; 1
    28ae:	91 05       	cpc	r25, r1
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <TWI_Init+0x46>
    28b2:	45 c0       	rjmp	.+138    	; 0x293e <TWI_Init+0xd0>
    28b4:	e8 85       	ldd	r30, Y+8	; 0x08
    28b6:	f9 85       	ldd	r31, Y+9	; 0x09
    28b8:	e2 30       	cpi	r30, 0x02	; 2
    28ba:	f1 05       	cpc	r31, r1
    28bc:	34 f4       	brge	.+12     	; 0x28ca <TWI_Init+0x5c>
    28be:	28 85       	ldd	r18, Y+8	; 0x08
    28c0:	39 85       	ldd	r19, Y+9	; 0x09
    28c2:	21 15       	cp	r18, r1
    28c4:	31 05       	cpc	r19, r1
    28c6:	71 f0       	breq	.+28     	; 0x28e4 <TWI_Init+0x76>
    28c8:	e8 c0       	rjmp	.+464    	; 0x2a9a <TWI_Init+0x22c>
    28ca:	88 85       	ldd	r24, Y+8	; 0x08
    28cc:	99 85       	ldd	r25, Y+9	; 0x09
    28ce:	82 30       	cpi	r24, 0x02	; 2
    28d0:	91 05       	cpc	r25, r1
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <TWI_Init+0x68>
    28d4:	65 c0       	rjmp	.+202    	; 0x29a0 <TWI_Init+0x132>
    28d6:	e8 85       	ldd	r30, Y+8	; 0x08
    28d8:	f9 85       	ldd	r31, Y+9	; 0x09
    28da:	e3 30       	cpi	r30, 0x03	; 3
    28dc:	f1 05       	cpc	r31, r1
    28de:	09 f4       	brne	.+2      	; 0x28e2 <TWI_Init+0x74>
    28e0:	9a c0       	rjmp	.+308    	; 0x2a16 <TWI_Init+0x1a8>
    28e2:	db c0       	rjmp	.+438    	; 0x2a9a <TWI_Init+0x22c>
	{
		case I2C_PRESCALE1:
								TWBR = (uint8) (((float)F_CPU/(2.0*F_SCL)) -8);
    28e4:	00 e7       	ldi	r16, 0x70	; 112
    28e6:	10 e0       	ldi	r17, 0x00	; 0
    28e8:	6b 81       	ldd	r22, Y+3	; 0x03
    28ea:	7c 81       	ldd	r23, Y+4	; 0x04
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    28f4:	9b 01       	movw	r18, r22
    28f6:	ac 01       	movw	r20, r24
    28f8:	ca 01       	movw	r24, r20
    28fa:	b9 01       	movw	r22, r18
    28fc:	0e 94 10 02 	call	0x420	; 0x420 <__addsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9c 01       	movw	r18, r24
    2906:	ad 01       	movw	r20, r26
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	74 e2       	ldi	r23, 0x24	; 36
    290c:	84 e7       	ldi	r24, 0x74	; 116
    290e:	9b e4       	ldi	r25, 0x4B	; 75
    2910:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	f8 01       	movw	r30, r16
    293a:	80 83       	st	Z, r24
    293c:	ae c0       	rjmp	.+348    	; 0x2a9a <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE4:
								TWBR = (uint8) (((float)F_CPU/(8.0*F_SCL)) -2);
    293e:	00 e7       	ldi	r16, 0x70	; 112
    2940:	10 e0       	ldi	r17, 0x00	; 0
    2942:	6b 81       	ldd	r22, Y+3	; 0x03
    2944:	7c 81       	ldd	r23, Y+4	; 0x04
    2946:	8d 81       	ldd	r24, Y+5	; 0x05
    2948:	9e 81       	ldd	r25, Y+6	; 0x06
    294a:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e0       	ldi	r20, 0x00	; 0
    295c:	51 e4       	ldi	r21, 0x41	; 65
    295e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9c 01       	movw	r18, r24
    2968:	ad 01       	movw	r20, r26
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	74 e2       	ldi	r23, 0x24	; 36
    296e:	84 e7       	ldi	r24, 0x74	; 116
    2970:	9b e4       	ldi	r25, 0x4B	; 75
    2972:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e0       	ldi	r20, 0x00	; 0
    2984:	50 e4       	ldi	r21, 0x40	; 64
    2986:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	f8 01       	movw	r30, r16
    299c:	80 83       	st	Z, r24
    299e:	7d c0       	rjmp	.+250    	; 0x2a9a <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE16:
								TWBR = (uint8) (((float)F_CPU/(32*F_SCL)) -0.5);
    29a0:	00 e7       	ldi	r16, 0x70	; 112
    29a2:	10 e0       	ldi	r17, 0x00	; 0
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
    29a8:	ad 81       	ldd	r26, Y+5	; 0x05
    29aa:	be 81       	ldd	r27, Y+6	; 0x06
    29ac:	88 0f       	add	r24, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	aa 1f       	adc	r26, r26
    29b2:	bb 1f       	adc	r27, r27
    29b4:	88 0f       	add	r24, r24
    29b6:	99 1f       	adc	r25, r25
    29b8:	aa 1f       	adc	r26, r26
    29ba:	bb 1f       	adc	r27, r27
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	aa 1f       	adc	r26, r26
    29c2:	bb 1f       	adc	r27, r27
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	aa 1f       	adc	r26, r26
    29ca:	bb 1f       	adc	r27, r27
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	aa 1f       	adc	r26, r26
    29d2:	bb 1f       	adc	r27, r27
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    29dc:	9b 01       	movw	r18, r22
    29de:	ac 01       	movw	r20, r24
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	74 e2       	ldi	r23, 0x24	; 36
    29e4:	84 e7       	ldi	r24, 0x74	; 116
    29e6:	9b e4       	ldi	r25, 0x4B	; 75
    29e8:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	bc 01       	movw	r22, r24
    29f2:	cd 01       	movw	r24, r26
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	5f e3       	ldi	r21, 0x3F	; 63
    29fc:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	bc 01       	movw	r22, r24
    2a06:	cd 01       	movw	r24, r26
    2a08:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	f8 01       	movw	r30, r16
    2a12:	80 83       	st	Z, r24
    2a14:	42 c0       	rjmp	.+132    	; 0x2a9a <TWI_Init+0x22c>
								break;
		case I2C_PRESCALE64:
								TWBR = (uint8) (((float)F_CPU/(128*F_SCL)) -0.125);
    2a16:	00 e7       	ldi	r16, 0x70	; 112
    2a18:	10 e0       	ldi	r17, 0x00	; 0
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1e:	ad 81       	ldd	r26, Y+5	; 0x05
    2a20:	be 81       	ldd	r27, Y+6	; 0x06
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	aa 1f       	adc	r26, r26
    2a28:	bb 1f       	adc	r27, r27
    2a2a:	88 0f       	add	r24, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	aa 1f       	adc	r26, r26
    2a30:	bb 1f       	adc	r27, r27
    2a32:	88 0f       	add	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	aa 1f       	adc	r26, r26
    2a38:	bb 1f       	adc	r27, r27
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	aa 1f       	adc	r26, r26
    2a40:	bb 1f       	adc	r27, r27
    2a42:	88 0f       	add	r24, r24
    2a44:	99 1f       	adc	r25, r25
    2a46:	aa 1f       	adc	r26, r26
    2a48:	bb 1f       	adc	r27, r27
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	aa 1f       	adc	r26, r26
    2a50:	bb 1f       	adc	r27, r27
    2a52:	88 0f       	add	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	aa 1f       	adc	r26, r26
    2a58:	bb 1f       	adc	r27, r27
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	0e 94 c7 04 	call	0x98e	; 0x98e <__floatunsisf>
    2a62:	9b 01       	movw	r18, r22
    2a64:	ac 01       	movw	r20, r24
    2a66:	60 e0       	ldi	r22, 0x00	; 0
    2a68:	74 e2       	ldi	r23, 0x24	; 36
    2a6a:	84 e7       	ldi	r24, 0x74	; 116
    2a6c:	9b e4       	ldi	r25, 0x4B	; 75
    2a6e:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	bc 01       	movw	r22, r24
    2a78:	cd 01       	movw	r24, r26
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e0       	ldi	r20, 0x00	; 0
    2a80:	5e e3       	ldi	r21, 0x3E	; 62
    2a82:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	f8 01       	movw	r30, r16
    2a98:	80 83       	st	Z, r24
		default:
					break;
	}
   
	
	TWSR |= (Prescale & 0x03);
    2a9a:	a1 e7       	ldi	r26, 0x71	; 113
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	e1 e7       	ldi	r30, 0x71	; 113
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	98 2f       	mov	r25, r24
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	83 70       	andi	r24, 0x03	; 3
    2aaa:	89 2b       	or	r24, r25
    2aac:	8c 93       	st	X, r24
	TWCR |= (1<<TWEN) | (int_state & 0x01) ;
    2aae:	a4 e7       	ldi	r26, 0x74	; 116
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	e4 e7       	ldi	r30, 0x74	; 116
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	98 2f       	mov	r25, r24
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	81 70       	andi	r24, 0x01	; 1
    2abe:	84 60       	ori	r24, 0x04	; 4
    2ac0:	89 2b       	or	r24, r25
    2ac2:	8c 93       	st	X, r24
}
    2ac4:	29 96       	adiw	r28, 0x09	; 9
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	08 95       	ret

00002ada <TWI_Start>:

void TWI_Start(void)
{
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
    2ae2:	e4 e7       	ldi	r30, 0x74	; 116
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	84 ea       	ldi	r24, 0xA4	; 164
    2ae8:	80 83       	st	Z, r24
 
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    2aea:	e4 e7       	ldi	r30, 0x74	; 116
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	88 23       	and	r24, r24
    2af2:	dc f7       	brge	.-10     	; 0x2aea <TWI_Start+0x10>
}
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <TWI_Stop>:

void TWI_Stop(void)
{
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
    2b02:	e4 e7       	ldi	r30, 0x74	; 116
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	84 e9       	ldi	r24, 0x94	; 148
    2b08:	80 83       	st	Z, r24
 
}
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <TWI_Write>:

void TWI_Write(uint8 data)
{
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	0f 92       	push	r0
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2b1c:	e3 e7       	ldi	r30, 0x73	; 115
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
   TWCR = (1<<TWEN) | (1<<TWINT);
    2b24:	e4 e7       	ldi	r30, 0x74	; 116
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	84 e8       	ldi	r24, 0x84	; 132
    2b2a:	80 83       	st	Z, r24
   
   /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
   while(BIT_IS_CLEAR(TWCR,TWINT));
    2b2c:	e4 e7       	ldi	r30, 0x74	; 116
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	88 23       	and	r24, r24
    2b34:	dc f7       	brge	.-10     	; 0x2b2c <TWI_Write+0x1c>
}
    2b36:	0f 90       	pop	r0
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	08 95       	ret

00002b3e <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 

    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);    
    2b46:	e4 e7       	ldi	r30, 0x74	; 116
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	84 ec       	ldi	r24, 0xC4	; 196
    2b4c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2b4e:	e4 e7       	ldi	r30, 0x74	; 116
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	88 23       	and	r24, r24
    2b56:	dc f7       	brge	.-10     	; 0x2b4e <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
    2b58:	e3 e7       	ldi	r30, 0x73	; 115
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
}
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62



		TWCR =(1<<TWEN) | (1<<TWINT);
    2b6c:	e4 e7       	ldi	r30, 0x74	; 116
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	84 e8       	ldi	r24, 0x84	; 132
    2b72:	80 83       	st	Z, r24
/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
while(BIT_IS_CLEAR(TWCR,TWINT));
    2b74:	e4 e7       	ldi	r30, 0x74	; 116
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	88 23       	and	r24, r24
    2b7c:	dc f7       	brge	.-10     	; 0x2b74 <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
    2b7e:	e3 e7       	ldi	r30, 0x73	; 115
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
}
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
   
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    2b92:	e1 e7       	ldi	r30, 0x71	; 113
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	88 7f       	andi	r24, 0xF8	; 248
}
    2b9a:	cf 91       	pop	r28
    2b9c:	df 91       	pop	r29
    2b9e:	08 95       	ret

00002ba0 <I2C_ByteWrite>:




void I2C_ByteWrite(uint8 SL_Address,uint8 Reg_Address ,uint8 Data )
{
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <I2C_ByteWrite+0x6>
    2ba6:	0f 92       	push	r0
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	6a 83       	std	Y+2, r22	; 0x02
    2bb0:	4b 83       	std	Y+3, r20	; 0x03
	TWI_Start();
    2bb2:	0e 94 6d 15 	call	0x2ada	; 0x2ada <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    2bb6:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <TWI_Get_Status>
    2bba:	88 30       	cpi	r24, 0x08	; 8
    2bbc:	19 f0       	breq	.+6      	; 0x2bc4 <I2C_ByteWrite+0x24>
	{
		TWI_Stop();
    2bbe:	0e 94 7d 15 	call	0x2afa	; 0x2afa <TWI_Stop>
    2bc2:	21 c0       	rjmp	.+66     	; 0x2c06 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write((SL_Address<<1));
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	88 0f       	add	r24, r24
    2bc8:	0e 94 88 15 	call	0x2b10	; 0x2b10 <TWI_Write>
if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    2bcc:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <TWI_Get_Status>
    2bd0:	88 31       	cpi	r24, 0x18	; 24
    2bd2:	19 f0       	breq	.+6      	; 0x2bda <I2C_ByteWrite+0x3a>
	{

		TWI_Stop();
    2bd4:	0e 94 7d 15 	call	0x2afa	; 0x2afa <TWI_Stop>
    2bd8:	16 c0       	rjmp	.+44     	; 0x2c06 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Write(Reg_Address);
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	0e 94 88 15 	call	0x2b10	; 0x2b10 <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2be0:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <TWI_Get_Status>
    2be4:	88 32       	cpi	r24, 0x28	; 40
    2be6:	19 f0       	breq	.+6      	; 0x2bee <I2C_ByteWrite+0x4e>
	{
		TWI_Stop();
    2be8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <TWI_Stop>
    2bec:	0c c0       	rjmp	.+24     	; 0x2c06 <I2C_ByteWrite+0x66>
		return ;
	}
	
TWI_Write(Data);
    2bee:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf0:	0e 94 88 15 	call	0x2b10	; 0x2b10 <TWI_Write>
if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2bf4:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <TWI_Get_Status>
    2bf8:	88 32       	cpi	r24, 0x28	; 40
    2bfa:	19 f0       	breq	.+6      	; 0x2c02 <I2C_ByteWrite+0x62>
	{

		TWI_Stop();
    2bfc:	0e 94 7d 15 	call	0x2afa	; 0x2afa <TWI_Stop>
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <I2C_ByteWrite+0x66>
		return ;
	}
	
	TWI_Stop(); // Send A stop  // Release The Clock Bus 
    2c02:	0e 94 7d 15 	call	0x2afa	; 0x2afa <TWI_Stop>
	return ;

}
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <I2C_ByteRead>:

 

 
uint8 I2C_ByteRead(uint8 SL_Address , uint8 Reg_Address)
{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <I2C_ByteRead+0x6>
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <I2C_ByteRead+0x8>
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	8a 83       	std	Y+2, r24	; 0x02
    2c20:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Data=0;
    2c22:	19 82       	std	Y+1, r1	; 0x01
	
	
	TWI_Start();
    2c24:	0e 94 6d 15 	call	0x2ada	; 0x2ada <TWI_Start>
	if (TWI_Get_Status() != TW_START)
    2c28:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <TWI_Get_Status>
    2c2c:	88 30       	cpi	r24, 0x08	; 8
    2c2e:	29 f0       	breq	.+10     	; 0x2c3a <I2C_ByteRead+0x28>
	{
		TWI_Stop();
    2c30:	0e 94 7d 15 	call	0x2afa	; 0x2afa <TWI_Stop>
		return 1;
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	8c 83       	std	Y+4, r24	; 0x04
    2c38:	3c c0       	rjmp	.+120    	; 0x2cb2 <I2C_ByteRead+0xa0>
	}
	
	
	TWI_Write((SL_Address<<1));
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	88 0f       	add	r24, r24
    2c3e:	0e 94 88 15 	call	0x2b10	; 0x2b10 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
    2c42:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <TWI_Get_Status>
    2c46:	88 31       	cpi	r24, 0x18	; 24
    2c48:	29 f0       	breq	.+10     	; 0x2c54 <I2C_ByteRead+0x42>
	{

		TWI_Stop();
    2c4a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <TWI_Stop>
		return 2;
    2c4e:	82 e0       	ldi	r24, 0x02	; 2
    2c50:	8c 83       	std	Y+4, r24	; 0x04
    2c52:	2f c0       	rjmp	.+94     	; 0x2cb2 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write(Reg_Address);
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	0e 94 88 15 	call	0x2b10	; 0x2b10 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_DATA_ACK)
    2c5a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <TWI_Get_Status>
    2c5e:	88 32       	cpi	r24, 0x28	; 40
    2c60:	29 f0       	breq	.+10     	; 0x2c6c <I2C_ByteRead+0x5a>
	{
		TWI_Stop();
    2c62:	0e 94 7d 15 	call	0x2afa	; 0x2afa <TWI_Stop>
		return 3;
    2c66:	83 e0       	ldi	r24, 0x03	; 3
    2c68:	8c 83       	std	Y+4, r24	; 0x04
    2c6a:	23 c0       	rjmp	.+70     	; 0x2cb2 <I2C_ByteRead+0xa0>
	}
	
	TWI_Start();
    2c6c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <TWI_Start>
	if (TWI_Get_Status() != TW_REP_START)
    2c70:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <TWI_Get_Status>
    2c74:	80 31       	cpi	r24, 0x10	; 16
    2c76:	29 f0       	breq	.+10     	; 0x2c82 <I2C_ByteRead+0x70>
	{
		TWI_Stop();
    2c78:	0e 94 7d 15 	call	0x2afa	; 0x2afa <TWI_Stop>
		return 4;
    2c7c:	84 e0       	ldi	r24, 0x04	; 4
    2c7e:	8c 83       	std	Y+4, r24	; 0x04
    2c80:	18 c0       	rjmp	.+48     	; 0x2cb2 <I2C_ByteRead+0xa0>
	}
	
	TWI_Write((SL_Address<<1) | READ);
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	81 60       	ori	r24, 0x01	; 1
    2c8e:	0e 94 88 15 	call	0x2b10	; 0x2b10 <TWI_Write>
	if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
    2c92:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <TWI_Get_Status>
    2c96:	80 34       	cpi	r24, 0x40	; 64
    2c98:	29 f0       	breq	.+10     	; 0x2ca4 <I2C_ByteRead+0x92>
	{

		TWI_Stop();
    2c9a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <TWI_Stop>
		return 5;
    2c9e:	85 e0       	ldi	r24, 0x05	; 5
    2ca0:	8c 83       	std	Y+4, r24	; 0x04
    2ca2:	07 c0       	rjmp	.+14     	; 0x2cb2 <I2C_ByteRead+0xa0>
	}
	Data=TWI_Read_With_NACK();
    2ca4:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <TWI_Read_With_NACK>
    2ca8:	89 83       	std	Y+1, r24	; 0x01
	TWI_Stop();
    2caa:	0e 94 7d 15 	call	0x2afa	; 0x2afa <TWI_Stop>
	
	return Data;		
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	8c 83       	std	Y+4, r24	; 0x04
    2cb2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <main>:
#include "ADXL345.h"

#define F_ADXL 400000UL
volatile ADXL345_Data Live_Data;
int main(void)
{
    2cc2:	0f 93       	push	r16
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	aa 97       	sbiw	r28, 0x2a	; 42
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    2cd8:	0e 94 36 0b 	call	0x166c	; 0x166c <LCD_init>
	TWI_Init(I2C_PRESCALE1,I2C_intDisable,F_ADXL,0x01);
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	20 e8       	ldi	r18, 0x80	; 128
    2ce2:	3a e1       	ldi	r19, 0x1A	; 26
    2ce4:	46 e0       	ldi	r20, 0x06	; 6
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	01 e0       	ldi	r16, 0x01	; 1
    2cea:	0e 94 37 14 	call	0x286e	; 0x286e <TWI_Init>
	Accelerometor_init(ADXL345_MessureMode,ADXL345_ALTERNATIVE_ADDRESS);
    2cee:	88 e0       	ldi	r24, 0x08	; 8
    2cf0:	63 e5       	ldi	r22, 0x53	; 83
    2cf2:	0e 94 35 07 	call	0xe6a	; 0xe6a <Accelerometor_init>
	LCD_DisplayString("Testing LCD");
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	91 e0       	ldi	r25, 0x01	; 1
    2cfa:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_DisplayString>
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	aa e7       	ldi	r26, 0x7A	; 122
    2d04:	b4 e4       	ldi	r27, 0x44	; 68
    2d06:	8f a3       	std	Y+39, r24	; 0x27
    2d08:	98 a7       	std	Y+40, r25	; 0x28
    2d0a:	a9 a7       	std	Y+41, r26	; 0x29
    2d0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d10:	78 a5       	ldd	r23, Y+40	; 0x28
    2d12:	89 a5       	ldd	r24, Y+41	; 0x29
    2d14:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	4a e7       	ldi	r20, 0x7A	; 122
    2d1c:	55 e4       	ldi	r21, 0x45	; 69
    2d1e:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	8b a3       	std	Y+35, r24	; 0x23
    2d28:	9c a3       	std	Y+36, r25	; 0x24
    2d2a:	ad a3       	std	Y+37, r26	; 0x25
    2d2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d30:	7c a1       	ldd	r23, Y+36	; 0x24
    2d32:	8d a1       	ldd	r24, Y+37	; 0x25
    2d34:	9e a1       	ldd	r25, Y+38	; 0x26
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e8       	ldi	r20, 0x80	; 128
    2d3c:	5f e3       	ldi	r21, 0x3F	; 63
    2d3e:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2d42:	88 23       	and	r24, r24
    2d44:	2c f4       	brge	.+10     	; 0x2d50 <main+0x8e>
		__ticks = 1;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	9a a3       	std	Y+34, r25	; 0x22
    2d4c:	89 a3       	std	Y+33, r24	; 0x21
    2d4e:	3f c0       	rjmp	.+126    	; 0x2dce <main+0x10c>
	else if (__tmp > 65535)
    2d50:	6b a1       	ldd	r22, Y+35	; 0x23
    2d52:	7c a1       	ldd	r23, Y+36	; 0x24
    2d54:	8d a1       	ldd	r24, Y+37	; 0x25
    2d56:	9e a1       	ldd	r25, Y+38	; 0x26
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	3f ef       	ldi	r19, 0xFF	; 255
    2d5c:	4f e7       	ldi	r20, 0x7F	; 127
    2d5e:	57 e4       	ldi	r21, 0x47	; 71
    2d60:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2d64:	18 16       	cp	r1, r24
    2d66:	4c f5       	brge	.+82     	; 0x2dba <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d68:	6f a1       	ldd	r22, Y+39	; 0x27
    2d6a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d6c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e2       	ldi	r20, 0x20	; 32
    2d76:	51 e4       	ldi	r21, 0x41	; 65
    2d78:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	bc 01       	movw	r22, r24
    2d82:	cd 01       	movw	r24, r26
    2d84:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	9a a3       	std	Y+34, r25	; 0x22
    2d8e:	89 a3       	std	Y+33, r24	; 0x21
    2d90:	0f c0       	rjmp	.+30     	; 0x2db0 <main+0xee>
    2d92:	80 e9       	ldi	r24, 0x90	; 144
    2d94:	91 e0       	ldi	r25, 0x01	; 1
    2d96:	98 a3       	std	Y+32, r25	; 0x20
    2d98:	8f 8f       	std	Y+31, r24	; 0x1f
    2d9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d9c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <main+0xdc>
    2da2:	98 a3       	std	Y+32, r25	; 0x20
    2da4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da6:	89 a1       	ldd	r24, Y+33	; 0x21
    2da8:	9a a1       	ldd	r25, Y+34	; 0x22
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	9a a3       	std	Y+34, r25	; 0x22
    2dae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db0:	89 a1       	ldd	r24, Y+33	; 0x21
    2db2:	9a a1       	ldd	r25, Y+34	; 0x22
    2db4:	00 97       	sbiw	r24, 0x00	; 0
    2db6:	69 f7       	brne	.-38     	; 0x2d92 <main+0xd0>
    2db8:	14 c0       	rjmp	.+40     	; 0x2de2 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dba:	6b a1       	ldd	r22, Y+35	; 0x23
    2dbc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc2:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	9a a3       	std	Y+34, r25	; 0x22
    2dcc:	89 a3       	std	Y+33, r24	; 0x21
    2dce:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd0:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd2:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd4:	8d 8f       	std	Y+29, r24	; 0x1d
    2dd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <main+0x118>
    2dde:	9e 8f       	std	Y+30, r25	; 0x1e
    2de0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	
    while(1)
    {
		Accelerometor_ReadAxis(ADXL345_ALTERNATIVE_ADDRESS,&Live_Data);
    2de2:	2a e2       	ldi	r18, 0x2A	; 42
    2de4:	32 e0       	ldi	r19, 0x02	; 2
    2de6:	83 e5       	ldi	r24, 0x53	; 83
    2de8:	b9 01       	movw	r22, r18
    2dea:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <Accelerometor_ReadAxis>
        LCD_Clear();
    2dee:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_Clear>
		LCD_DisplayString("X=");
    2df2:	8c e0       	ldi	r24, 0x0C	; 12
    2df4:	91 e0       	ldi	r25, 0x01	; 1
    2df6:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_DisplayString>
		LCD_DisplayInt((uint16) (Live_Data.X_Axis));
    2dfa:	80 91 2a 02 	lds	r24, 0x022A
    2dfe:	90 91 2b 02 	lds	r25, 0x022B
    2e02:	a0 91 2c 02 	lds	r26, 0x022C
    2e06:	b0 91 2d 02 	lds	r27, 0x022D
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	cc 01       	movw	r24, r24
    2e18:	a0 e0       	ldi	r26, 0x00	; 0
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_DisplayInt>
		LCD_DisplayString(" Y=");
    2e24:	8f e0       	ldi	r24, 0x0F	; 15
    2e26:	91 e0       	ldi	r25, 0x01	; 1
    2e28:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_DisplayString>
		LCD_DisplayInt((uint16) (Live_Data.Y_Axis));
    2e2c:	80 91 2e 02 	lds	r24, 0x022E
    2e30:	90 91 2f 02 	lds	r25, 0x022F
    2e34:	a0 91 30 02 	lds	r26, 0x0230
    2e38:	b0 91 31 02 	lds	r27, 0x0231
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	cc 01       	movw	r24, r24
    2e4a:	a0 e0       	ldi	r26, 0x00	; 0
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	bc 01       	movw	r22, r24
    2e50:	cd 01       	movw	r24, r26
    2e52:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_DisplayInt>
		LCD_Select_RowCol(1,0);
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	0e 94 cf 13 	call	0x279e	; 0x279e <LCD_Select_RowCol>
		LCD_DisplayString("Z=");
    2e5e:	83 e1       	ldi	r24, 0x13	; 19
    2e60:	91 e0       	ldi	r25, 0x01	; 1
    2e62:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_DisplayString>
		LCD_DisplayInt((uint16) (Live_Data.Z_Axis));
    2e66:	80 91 32 02 	lds	r24, 0x0232
    2e6a:	90 91 33 02 	lds	r25, 0x0233
    2e6e:	a0 91 34 02 	lds	r26, 0x0234
    2e72:	b0 91 35 02 	lds	r27, 0x0235
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	cc 01       	movw	r24, r24
    2e84:	a0 e0       	ldi	r26, 0x00	; 0
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	bc 01       	movw	r22, r24
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_DisplayInt>
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	aa ef       	ldi	r26, 0xFA	; 250
    2e96:	b3 e4       	ldi	r27, 0x43	; 67
    2e98:	89 8f       	std	Y+25, r24	; 0x19
    2e9a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e9c:	ab 8f       	std	Y+27, r26	; 0x1b
    2e9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ea2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ea4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ea6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	4a e7       	ldi	r20, 0x7A	; 122
    2eae:	55 e4       	ldi	r21, 0x45	; 69
    2eb0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	8d 8b       	std	Y+21, r24	; 0x15
    2eba:	9e 8b       	std	Y+22, r25	; 0x16
    2ebc:	af 8b       	std	Y+23, r26	; 0x17
    2ebe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ec0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e8       	ldi	r20, 0x80	; 128
    2ece:	5f e3       	ldi	r21, 0x3F	; 63
    2ed0:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2ed4:	88 23       	and	r24, r24
    2ed6:	2c f4       	brge	.+10     	; 0x2ee2 <main+0x220>
		__ticks = 1;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9c 8b       	std	Y+20, r25	; 0x14
    2ede:	8b 8b       	std	Y+19, r24	; 0x13
    2ee0:	3f c0       	rjmp	.+126    	; 0x2f60 <main+0x29e>
	else if (__tmp > 65535)
    2ee2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ee8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	3f ef       	ldi	r19, 0xFF	; 255
    2eee:	4f e7       	ldi	r20, 0x7F	; 127
    2ef0:	57 e4       	ldi	r21, 0x47	; 71
    2ef2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2ef6:	18 16       	cp	r1, r24
    2ef8:	4c f5       	brge	.+82     	; 0x2f4c <main+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efa:	69 8d       	ldd	r22, Y+25	; 0x19
    2efc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2efe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e2       	ldi	r20, 0x20	; 32
    2f08:	51 e4       	ldi	r21, 0x41	; 65
    2f0a:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	9c 8b       	std	Y+20, r25	; 0x14
    2f20:	8b 8b       	std	Y+19, r24	; 0x13
    2f22:	0f c0       	rjmp	.+30     	; 0x2f42 <main+0x280>
    2f24:	80 e9       	ldi	r24, 0x90	; 144
    2f26:	91 e0       	ldi	r25, 0x01	; 1
    2f28:	9a 8b       	std	Y+18, r25	; 0x12
    2f2a:	89 8b       	std	Y+17, r24	; 0x11
    2f2c:	89 89       	ldd	r24, Y+17	; 0x11
    2f2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <main+0x26e>
    2f34:	9a 8b       	std	Y+18, r25	; 0x12
    2f36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f38:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	9c 8b       	std	Y+20, r25	; 0x14
    2f40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f42:	8b 89       	ldd	r24, Y+19	; 0x13
    2f44:	9c 89       	ldd	r25, Y+20	; 0x14
    2f46:	00 97       	sbiw	r24, 0x00	; 0
    2f48:	69 f7       	brne	.-38     	; 0x2f24 <main+0x262>
    2f4a:	14 c0       	rjmp	.+40     	; 0x2f74 <main+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f50:	8f 89       	ldd	r24, Y+23	; 0x17
    2f52:	98 8d       	ldd	r25, Y+24	; 0x18
    2f54:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	9c 8b       	std	Y+20, r25	; 0x14
    2f5e:	8b 8b       	std	Y+19, r24	; 0x13
    2f60:	8b 89       	ldd	r24, Y+19	; 0x13
    2f62:	9c 89       	ldd	r25, Y+20	; 0x14
    2f64:	98 8b       	std	Y+16, r25	; 0x10
    2f66:	8f 87       	std	Y+15, r24	; 0x0f
    2f68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f6a:	98 89       	ldd	r25, Y+16	; 0x10
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <main+0x2aa>
    2f70:	98 8b       	std	Y+16, r25	; 0x10
    2f72:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_Clear();
    2f74:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_Clear>
		LCD_DisplayString("Updating ..");
    2f78:	86 e1       	ldi	r24, 0x16	; 22
    2f7a:	91 e0       	ldi	r25, 0x01	; 1
    2f7c:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_DisplayString>
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	aa ef       	ldi	r26, 0xFA	; 250
    2f86:	b3 e4       	ldi	r27, 0x43	; 67
    2f88:	8b 87       	std	Y+11, r24	; 0x0b
    2f8a:	9c 87       	std	Y+12, r25	; 0x0c
    2f8c:	ad 87       	std	Y+13, r26	; 0x0d
    2f8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	4a e7       	ldi	r20, 0x7A	; 122
    2f9e:	55 e4       	ldi	r21, 0x45	; 69
    2fa0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	8f 83       	std	Y+7, r24	; 0x07
    2faa:	98 87       	std	Y+8, r25	; 0x08
    2fac:	a9 87       	std	Y+9, r26	; 0x09
    2fae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb2:	78 85       	ldd	r23, Y+8	; 0x08
    2fb4:	89 85       	ldd	r24, Y+9	; 0x09
    2fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e8       	ldi	r20, 0x80	; 128
    2fbe:	5f e3       	ldi	r21, 0x3F	; 63
    2fc0:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2fc4:	88 23       	and	r24, r24
    2fc6:	2c f4       	brge	.+10     	; 0x2fd2 <main+0x310>
		__ticks = 1;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	9e 83       	std	Y+6, r25	; 0x06
    2fce:	8d 83       	std	Y+5, r24	; 0x05
    2fd0:	3f c0       	rjmp	.+126    	; 0x3050 <main+0x38e>
	else if (__tmp > 65535)
    2fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd4:	78 85       	ldd	r23, Y+8	; 0x08
    2fd6:	89 85       	ldd	r24, Y+9	; 0x09
    2fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	3f ef       	ldi	r19, 0xFF	; 255
    2fde:	4f e7       	ldi	r20, 0x7F	; 127
    2fe0:	57 e4       	ldi	r21, 0x47	; 71
    2fe2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2fe6:	18 16       	cp	r1, r24
    2fe8:	4c f5       	brge	.+82     	; 0x303c <main+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e2       	ldi	r20, 0x20	; 32
    2ff8:	51 e4       	ldi	r21, 0x41	; 65
    2ffa:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
    3012:	0f c0       	rjmp	.+30     	; 0x3032 <main+0x370>
    3014:	80 e9       	ldi	r24, 0x90	; 144
    3016:	91 e0       	ldi	r25, 0x01	; 1
    3018:	9c 83       	std	Y+4, r25	; 0x04
    301a:	8b 83       	std	Y+3, r24	; 0x03
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <main+0x35e>
    3024:	9c 83       	std	Y+4, r25	; 0x04
    3026:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3028:	8d 81       	ldd	r24, Y+5	; 0x05
    302a:	9e 81       	ldd	r25, Y+6	; 0x06
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	9e 83       	std	Y+6, r25	; 0x06
    3030:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3032:	8d 81       	ldd	r24, Y+5	; 0x05
    3034:	9e 81       	ldd	r25, Y+6	; 0x06
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	69 f7       	brne	.-38     	; 0x3014 <main+0x352>
    303a:	d3 ce       	rjmp	.-602    	; 0x2de2 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303c:	6f 81       	ldd	r22, Y+7	; 0x07
    303e:	78 85       	ldd	r23, Y+8	; 0x08
    3040:	89 85       	ldd	r24, Y+9	; 0x09
    3042:	9a 85       	ldd	r25, Y+10	; 0x0a
    3044:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	8d 83       	std	Y+5, r24	; 0x05
    3050:	8d 81       	ldd	r24, Y+5	; 0x05
    3052:	9e 81       	ldd	r25, Y+6	; 0x06
    3054:	9a 83       	std	Y+2, r25	; 0x02
    3056:	89 83       	std	Y+1, r24	; 0x01
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	9a 81       	ldd	r25, Y+2	; 0x02
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	f1 f7       	brne	.-4      	; 0x305c <main+0x39a>
    3060:	9a 83       	std	Y+2, r25	; 0x02
    3062:	89 83       	std	Y+1, r24	; 0x01
    3064:	be ce       	rjmp	.-644    	; 0x2de2 <main+0x120>

00003066 <__prologue_saves__>:
    3066:	2f 92       	push	r2
    3068:	3f 92       	push	r3
    306a:	4f 92       	push	r4
    306c:	5f 92       	push	r5
    306e:	6f 92       	push	r6
    3070:	7f 92       	push	r7
    3072:	8f 92       	push	r8
    3074:	9f 92       	push	r9
    3076:	af 92       	push	r10
    3078:	bf 92       	push	r11
    307a:	cf 92       	push	r12
    307c:	df 92       	push	r13
    307e:	ef 92       	push	r14
    3080:	ff 92       	push	r15
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	cf 93       	push	r28
    3088:	df 93       	push	r29
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	ca 1b       	sub	r28, r26
    3090:	db 0b       	sbc	r29, r27
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	09 94       	ijmp

0000309e <__epilogue_restores__>:
    309e:	2a 88       	ldd	r2, Y+18	; 0x12
    30a0:	39 88       	ldd	r3, Y+17	; 0x11
    30a2:	48 88       	ldd	r4, Y+16	; 0x10
    30a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    30a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    30a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    30aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    30ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    30ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    30b0:	b9 84       	ldd	r11, Y+9	; 0x09
    30b2:	c8 84       	ldd	r12, Y+8	; 0x08
    30b4:	df 80       	ldd	r13, Y+7	; 0x07
    30b6:	ee 80       	ldd	r14, Y+6	; 0x06
    30b8:	fd 80       	ldd	r15, Y+5	; 0x05
    30ba:	0c 81       	ldd	r16, Y+4	; 0x04
    30bc:	1b 81       	ldd	r17, Y+3	; 0x03
    30be:	aa 81       	ldd	r26, Y+2	; 0x02
    30c0:	b9 81       	ldd	r27, Y+1	; 0x01
    30c2:	ce 0f       	add	r28, r30
    30c4:	d1 1d       	adc	r29, r1
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	ed 01       	movw	r28, r26
    30d2:	08 95       	ret

000030d4 <itoa>:
    30d4:	fb 01       	movw	r30, r22
    30d6:	9f 01       	movw	r18, r30
    30d8:	e8 94       	clt
    30da:	42 30       	cpi	r20, 0x02	; 2
    30dc:	c4 f0       	brlt	.+48     	; 0x310e <itoa+0x3a>
    30de:	45 32       	cpi	r20, 0x25	; 37
    30e0:	b4 f4       	brge	.+44     	; 0x310e <itoa+0x3a>
    30e2:	4a 30       	cpi	r20, 0x0A	; 10
    30e4:	29 f4       	brne	.+10     	; 0x30f0 <itoa+0x1c>
    30e6:	97 fb       	bst	r25, 7
    30e8:	1e f4       	brtc	.+6      	; 0x30f0 <itoa+0x1c>
    30ea:	90 95       	com	r25
    30ec:	81 95       	neg	r24
    30ee:	9f 4f       	sbci	r25, 0xFF	; 255
    30f0:	64 2f       	mov	r22, r20
    30f2:	77 27       	eor	r23, r23
    30f4:	0e 94 9b 18 	call	0x3136	; 0x3136 <__udivmodhi4>
    30f8:	80 5d       	subi	r24, 0xD0	; 208
    30fa:	8a 33       	cpi	r24, 0x3A	; 58
    30fc:	0c f0       	brlt	.+2      	; 0x3100 <itoa+0x2c>
    30fe:	89 5d       	subi	r24, 0xD9	; 217
    3100:	81 93       	st	Z+, r24
    3102:	cb 01       	movw	r24, r22
    3104:	00 97       	sbiw	r24, 0x00	; 0
    3106:	a1 f7       	brne	.-24     	; 0x30f0 <itoa+0x1c>
    3108:	16 f4       	brtc	.+4      	; 0x310e <itoa+0x3a>
    310a:	5d e2       	ldi	r21, 0x2D	; 45
    310c:	51 93       	st	Z+, r21
    310e:	10 82       	st	Z, r1
    3110:	c9 01       	movw	r24, r18
    3112:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <strrev>

00003116 <strrev>:
    3116:	dc 01       	movw	r26, r24
    3118:	fc 01       	movw	r30, r24
    311a:	67 2f       	mov	r22, r23
    311c:	71 91       	ld	r23, Z+
    311e:	77 23       	and	r23, r23
    3120:	e1 f7       	brne	.-8      	; 0x311a <strrev+0x4>
    3122:	32 97       	sbiw	r30, 0x02	; 2
    3124:	04 c0       	rjmp	.+8      	; 0x312e <strrev+0x18>
    3126:	7c 91       	ld	r23, X
    3128:	6d 93       	st	X+, r22
    312a:	70 83       	st	Z, r23
    312c:	62 91       	ld	r22, -Z
    312e:	ae 17       	cp	r26, r30
    3130:	bf 07       	cpc	r27, r31
    3132:	c8 f3       	brcs	.-14     	; 0x3126 <strrev+0x10>
    3134:	08 95       	ret

00003136 <__udivmodhi4>:
    3136:	aa 1b       	sub	r26, r26
    3138:	bb 1b       	sub	r27, r27
    313a:	51 e1       	ldi	r21, 0x11	; 17
    313c:	07 c0       	rjmp	.+14     	; 0x314c <__udivmodhi4_ep>

0000313e <__udivmodhi4_loop>:
    313e:	aa 1f       	adc	r26, r26
    3140:	bb 1f       	adc	r27, r27
    3142:	a6 17       	cp	r26, r22
    3144:	b7 07       	cpc	r27, r23
    3146:	10 f0       	brcs	.+4      	; 0x314c <__udivmodhi4_ep>
    3148:	a6 1b       	sub	r26, r22
    314a:	b7 0b       	sbc	r27, r23

0000314c <__udivmodhi4_ep>:
    314c:	88 1f       	adc	r24, r24
    314e:	99 1f       	adc	r25, r25
    3150:	5a 95       	dec	r21
    3152:	a9 f7       	brne	.-22     	; 0x313e <__udivmodhi4_loop>
    3154:	80 95       	com	r24
    3156:	90 95       	com	r25
    3158:	bc 01       	movw	r22, r24
    315a:	cd 01       	movw	r24, r26
    315c:	08 95       	ret

0000315e <_exit>:
    315e:	f8 94       	cli

00003160 <__stop_program>:
    3160:	ff cf       	rjmp	.-2      	; 0x3160 <__stop_program>
